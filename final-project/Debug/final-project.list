
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  080076e8  080076e8  000176e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c74  08007c74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c7c  08007c7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c7c  08007c7c  00017c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c80  08007c80  00017c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  08007cf4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007cf4  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001588e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003664  00000000  00000000  0003592e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00038f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1a3  00000000  00000000  0003b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b12b  00000000  00000000  0005559b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976a4  00000000  00000000  000706c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107d6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005274  00000000  00000000  00107dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076d0 	.word	0x080076d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080076d0 	.word	0x080076d0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2200      	movs	r2, #0
 80005d2:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f006 fb47 	bl	8006c78 <memset>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]
	if (cBuffer_Length(cbuffer) == cbuffer->size-1)
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f8c4 	bl	800078c <cBuffer_Length>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	3b01      	subs	r3, #1
 800060e:	429a      	cmp	r2, r3
 8000610:	d101      	bne.n	8000616 <cBuffer_Write+0x24>
	{
		return CBUFFER_FULL;
 8000612:	2301      	movs	r3, #1
 8000614:	e016      	b.n	8000644 <cBuffer_Write+0x52>
	}
	cbuffer->buffer[cbuffer->write] = data;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7992      	ldrb	r2, [r2, #6]
 800061e:	4413      	add	r3, r2
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	3301      	adds	r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b25a      	sxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	3b01      	subs	r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	b25b      	sxtb	r3, r3
 8000638:	4013      	ands	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <cBuffer_Kill>:

void cBuffer_Kill(cBuffer_t* cbuffer)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	cbuffer->read = 0;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	719a      	strb	r2, [r3, #6]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	461a      	mov	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f006 fb04 	bl	8006c78 <memset>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <cBuffer_isFull>:

CBUFFER_ERR cBuffer_isFull(cBuffer_t* cbuffer)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if (cBuffer_Length(cbuffer) == cbuffer->size-1)
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f883 	bl	800078c <cBuffer_Length>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	429a      	cmp	r2, r3
 8000692:	d101      	bne.n	8000698 <cBuffer_isFull+0x20>
	{
			return CBUFFER_FULL;
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <cBuffer_isFull+0x22>
	}
	else
		return CBUFFER_OK;
 8000698:	2300      	movs	r3, #0

}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4613      	mov	r3, r2
 80006b0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 80006b6:	2300      	movs	r3, #0
 80006b8:	757b      	strb	r3, [r7, #21]
	for (i=cbuffer->read; i < cbuffer->write;i++)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	e00c      	b.n	80006dc <cBuffer_GetString+0x3a>
	{
		//if (cbuffer->buffer[i] == sTerminator) // A string is found - copy it to the outgoing buffer
		if (cbuffer->buffer[i] == '\r') // A string is found - copy it to the outgoing buffer
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0d      	cmp	r3, #13
 80006ce:	d102      	bne.n	80006d6 <cBuffer_GetString+0x34>
		{
			found = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	75bb      	strb	r3, [r7, #22]
			break;
 80006d4:	e007      	b.n	80006e6 <cBuffer_GetString+0x44>
	for (i=cbuffer->read; i < cbuffer->write;i++)
 80006d6:	7dfb      	ldrb	r3, [r7, #23]
 80006d8:	3301      	adds	r3, #1
 80006da:	75fb      	strb	r3, [r7, #23]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	799b      	ldrb	r3, [r3, #6]
 80006e0:	7dfa      	ldrb	r2, [r7, #23]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d3ed      	bcc.n	80006c2 <cBuffer_GetString+0x20>
		}
	}
	if (found)
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01f      	beq.n	800072c <cBuffer_GetString+0x8a>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, i);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	7dfa      	ldrb	r2, [r7, #23]
 80006f2:	4619      	mov	r1, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f862 	bl	80007be <cBuffer_LengthCustom>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f000 f816 	bl	800073a <cBuffer_Read>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]
			*(string++) = chr;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60ba      	str	r2, [r7, #8]
 8000718:	7d3a      	ldrb	r2, [r7, #20]
 800071a:	701a      	strb	r2, [r3, #0]
		} while (chr != sTerminator || err != CBUFFER_OK);
 800071c:	7d3b      	ldrb	r3, [r7, #20]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	429a      	cmp	r2, r3
 8000722:	d1ee      	bne.n	8000702 <cBuffer_GetString+0x60>
 8000724:	7d7b      	ldrb	r3, [r7, #21]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1eb      	bne.n	8000702 <cBuffer_GetString+0x60>
 800072a:	e001      	b.n	8000730 <cBuffer_GetString+0x8e>
	}
	else
		err = CBUFFER_NO_STRING;
 800072c:	2303      	movs	r3, #3
 800072e:	757b      	strb	r3, [r7, #21]


	return err;
 8000730:	7d7b      	ldrb	r3, [r7, #21]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f821 	bl	800078c <cBuffer_Length>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8000750:	2302      	movs	r3, #2
 8000752:	e017      	b.n	8000784 <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7952      	ldrb	r2, [r2, #5]
 800075c:	4413      	add	r3, r2
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	3301      	adds	r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	b25a      	sxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4013      	ands	r3, r2
 800077a:	b25b      	sxtb	r3, r3
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	799a      	ldrb	r2, [r3, #6]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2db      	uxtb	r3, r3

}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
 80007ca:	4613      	mov	r3, r2
 80007cc:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80007ce:	78ba      	ldrb	r2, [r7, #2]
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	3b01      	subs	r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 80007fe:	2120      	movs	r1, #32
 8000800:	6838      	ldr	r0, [r7, #0]
 8000802:	f006 fa61 	bl	8006cc8 <strchr>
 8000806:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10b      	bne.n	8000826 <ConsoleCommandMatch+0x32>
	{
			r =  strcmp(name,buffer) == 0;
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff fce5 	bl	80001e0 <strcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf0c      	ite	eq
 800081c:	2301      	moveq	r3, #1
 800081e:	2300      	movne	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	e00f      	b.n	8000846 <ConsoleCommandMatch+0x52>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fce4 	bl	80001f4 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	6839      	ldr	r1, [r7, #0]
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f006 fa5d 	bl	8006cf2 <strncmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	60fb      	str	r3, [r7, #12]
	}

	return r;
 8000846:	68fb      	ldr	r3, [r7, #12]

}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ConsoleInit>:
}

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000856:	f000 fb19 	bl	8000e8c <ConsoleIoInit>
	ConsoleIoSendString("Dodec Timer - A Thousand Projects");
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <ConsoleInit+0x44>)
 800085c:	f000 fb5a 	bl	8000f14 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <ConsoleInit+0x48>)
 8000862:	f000 fb57 	bl	8000f14 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <ConsoleInit+0x4c>)
 8000868:	f000 fb54 	bl	8000f14 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	e007      	b.n	8000882 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <ConsoleInit+0x50>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b63      	cmp	r3, #99	; 0x63
 8000886:	d9f4      	bls.n	8000872 <ConsoleInit+0x22>
	}

}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	080076e8 	.word	0x080076e8
 8000898:	0800770c 	.word	0x0800770c
 800089c:	08007710 	.word	0x08007710
 80008a0:	2000008c 	.word	0x2000008c

080008a4 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;


	if (ConsoleIoReceive(mReceiveBuffer) == CONSOLE_SUCCESS )  // have complete string, find command
 80008aa:	483d      	ldr	r0, [pc, #244]	; (80009a0 <ConsoleProcess+0xfc>)
 80008ac:	f000 fb06 	bl	8000ebc <ConsoleIoReceive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d170      	bne.n	8000998 <ConsoleProcess+0xf4>
	{
		if ('\0' == mReceiveBuffer[0] )
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <ConsoleProcess+0xfc>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <ConsoleProcess+0x28>
		{
			ConsoleIoSendString(STR_ENDLINE);
 80008be:	4839      	ldr	r0, [pc, #228]	; (80009a4 <ConsoleProcess+0x100>)
 80008c0:	f000 fb28 	bl	8000f14 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80008c4:	4838      	ldr	r0, [pc, #224]	; (80009a8 <ConsoleProcess+0x104>)
 80008c6:	f000 fb25 	bl	8000f14 <ConsoleIoSendString>
			return;
 80008ca:	e065      	b.n	8000998 <ConsoleProcess+0xf4>
		}
		commandTable = ConsoleCommandsGetTable();
 80008cc:	f000 fab6 	bl	8000e3c <ConsoleCommandsGetTable>
 80008d0:	6078      	str	r0, [r7, #4]
		cmdIndex = 0u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
		found = NOT_FOUND;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	60bb      	str	r3, [r7, #8]
		while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80008dc:	e03d      	b.n	800095a <ConsoleProcess+0xb6>
		{
			if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4613      	mov	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	492b      	ldr	r1, [pc, #172]	; (80009a0 <ConsoleProcess+0xfc>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff7e 	bl	80007f4 <ConsoleCommandMatch>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d02a      	beq.n	8000954 <ConsoleProcess+0xb0>
			{
				result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	461a      	mov	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	4823      	ldr	r0, [pc, #140]	; (80009a0 <ConsoleProcess+0xfc>)
 8000912:	4798      	blx	r3
 8000914:	4603      	mov	r3, r0
 8000916:	70fb      	strb	r3, [r7, #3]
				if ( COMMAND_SUCCESS != result )
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d017      	beq.n	800094e <ConsoleProcess+0xaa>
				{
					ConsoleIoSendString("Error: ");
 800091e:	4823      	ldr	r0, [pc, #140]	; (80009ac <ConsoleProcess+0x108>)
 8000920:	f000 faf8 	bl	8000f14 <ConsoleIoSendString>
					ConsoleIoSendString((char*)mReceiveBuffer);
 8000924:	481e      	ldr	r0, [pc, #120]	; (80009a0 <ConsoleProcess+0xfc>)
 8000926:	f000 faf5 	bl	8000f14 <ConsoleIoSendString>

					ConsoleIoSendString("Help: ");
 800092a:	4821      	ldr	r0, [pc, #132]	; (80009b0 <ConsoleProcess+0x10c>)
 800092c:	f000 faf2 	bl	8000f14 <ConsoleIoSendString>
					ConsoleIoSendString(commandTable[cmdIndex].help);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4613      	mov	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4413      	add	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	3308      	adds	r3, #8
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fae6 	bl	8000f14 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000948:	4816      	ldr	r0, [pc, #88]	; (80009a4 <ConsoleProcess+0x100>)
 800094a:	f000 fae3 	bl	8000f14 <ConsoleIoSendString>
				}
				found = cmdIndex;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	e002      	b.n	800095a <ConsoleProcess+0xb6>
			}
			else
			{
				cmdIndex++;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
		while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4613      	mov	r3, r2
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	4413      	add	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <ConsoleProcess+0xd4>
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000976:	d0b2      	beq.n	80008de <ConsoleProcess+0x3a>
			}
		}
		if (found == NOT_FOUND)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097e:	d105      	bne.n	800098c <ConsoleProcess+0xe8>
		{
			ConsoleIoSendString("Command not found: ");
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <ConsoleProcess+0x110>)
 8000982:	f000 fac7 	bl	8000f14 <ConsoleIoSendString>
			ConsoleIoSendString((char*)mReceiveBuffer);
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <ConsoleProcess+0xfc>)
 8000988:	f000 fac4 	bl	8000f14 <ConsoleIoSendString>

		}
		ConsoleIoSendString(STR_ENDLINE);
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <ConsoleProcess+0x100>)
 800098e:	f000 fac1 	bl	8000f14 <ConsoleIoSendString>
		ConsoleIoSendString(CONSOLE_PROMPT);
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <ConsoleProcess+0x104>)
 8000994:	f000 fabe 	bl	8000f14 <ConsoleIoSendString>
	}
}
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	0800770c 	.word	0x0800770c
 80009a8:	08007710 	.word	0x08007710
 80009ac:	08007714 	.word	0x08007714
 80009b0:	0800771c 	.word	0x0800771c
 80009b4:	08007724 	.word	0x08007724

080009b8 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	460b      	mov	r3, r1
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80009ce:	2300      	movs	r3, #0
 80009d0:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80009d2:	e00b      	b.n	80009ec <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b20      	cmp	r3, #32
 80009de:	d102      	bne.n	80009e6 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3301      	adds	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3301      	adds	r3, #1
 80009ea:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80009ec:	7afb      	ldrb	r3, [r7, #11]
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d002      	beq.n	80009fa <ConsoleParamFindN+0x42>
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	2b63      	cmp	r3, #99	; 0x63
 80009f8:	d9ec      	bls.n	80009d4 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	2b64      	cmp	r3, #100	; 0x64
 80009fe:	d102      	bne.n	8000a06 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a00:	2310      	movs	r3, #16
 8000a02:	75fb      	strb	r3, [r7, #23]
 8000a04:	e002      	b.n	8000a0c <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69fa      	ldr	r2, [r7, #28]
 8000a0a:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b08a      	sub	sp, #40	; 0x28
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	460b      	mov	r3, r1
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000a2c:	f107 021c 	add.w	r2, r7, #28
 8000a30:	7afb      	ldrb	r3, [r7, #11]
 8000a32:	4619      	mov	r1, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ffbf 	bl	80009b8 <ConsoleParamFindN>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	4413      	add	r3, r2
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8000a54:	e011      	b.n	8000a7a <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000a56:	f107 0214 	add.w	r2, r7, #20
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	4413      	add	r3, r2
 8000a5e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000a62:	701a      	strb	r2, [r3, #0]
		i++;
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	3301      	adds	r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	4413      	add	r3, r2
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8000a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 8000a82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a86:	2b20      	cmp	r3, #32
 8000a88:	d002      	beq.n	8000a90 <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	2b07      	cmp	r3, #7
 8000a8e:	d9e2      	bls.n	8000a56 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d102      	bne.n	8000a9c <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a96:	2310      	movs	r3, #16
 8000a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11a      	bne.n	8000ada <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8000aa4:	f107 0214 	add.w	r2, r7, #20
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	4413      	add	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
		if (isNumber((char*)str))
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fa9e 	bl	8000ff6 <isNumber>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d009      	beq.n	8000ad4 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f006 f8a9 	bl	8006c1c <atoi>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b21a      	sxth	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	801a      	strh	r2, [r3, #0]
 8000ad2:	e002      	b.n	8000ada <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}


	return result;
 8000ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fa10 	bl	8000f14 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 fa03 	bl	8000f14 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <ConsoleSendLine+0x20>)
 8000b10:	f000 fa00 	bl	8000f14 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	0800770c 	.word	0x0800770c

08000b24 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	int16_t month;
	int16_t year;
	RTC_DateTypeDef sDate;


	result = ConsoleReceiveParamInt16(buffer, 1, &day);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	461a      	mov	r2, r3
 8000b32:	2101      	movs	r1, #1
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff70 	bl	8000a1a <ConsoleReceiveParamInt16>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	75fb      	strb	r3, [r7, #23]
	if (result != COMMAND_SUCCESS || !IS_RTC_DATE(day) )
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d108      	bne.n	8000b56 <ConsoleCommandDateSet+0x32>
 8000b44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <ConsoleCommandDateSet+0x32>
 8000b4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	2b1f      	cmp	r3, #31
 8000b54:	d904      	bls.n	8000b60 <ConsoleCommandDateSet+0x3c>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8000b56:	482d      	ldr	r0, [pc, #180]	; (8000c0c <ConsoleCommandDateSet+0xe8>)
 8000b58:	f7ff ffd2 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	e050      	b.n	8000c02 <ConsoleCommandDateSet+0xde>
	}


	result = ConsoleReceiveParamInt16(buffer, 2, &month);
 8000b60:	f107 0312 	add.w	r3, r7, #18
 8000b64:	461a      	mov	r2, r3
 8000b66:	2102      	movs	r1, #2
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff56 	bl	8000a1a <ConsoleReceiveParamInt16>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	75fb      	strb	r3, [r7, #23]
	if (result != COMMAND_SUCCESS || !IS_RTC_MONTH(month) )
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d108      	bne.n	8000b8a <ConsoleCommandDateSet+0x66>
 8000b78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d004      	beq.n	8000b8a <ConsoleCommandDateSet+0x66>
 8000b80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2b0c      	cmp	r3, #12
 8000b88:	d904      	bls.n	8000b94 <ConsoleCommandDateSet+0x70>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8000b8a:	4821      	ldr	r0, [pc, #132]	; (8000c10 <ConsoleCommandDateSet+0xec>)
 8000b8c:	f7ff ffb8 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000b90:	2310      	movs	r3, #16
 8000b92:	e036      	b.n	8000c02 <ConsoleCommandDateSet+0xde>
	}
	result = ConsoleReceiveParamInt16(buffer, 3, &year);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff3c 	bl	8000a1a <ConsoleReceiveParamInt16>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	75fb      	strb	r3, [r7, #23]
	if (result != COMMAND_SUCCESS || !IS_RTC_YEAR(year) )
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <ConsoleCommandDateSet+0x92>
 8000bac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	2b63      	cmp	r3, #99	; 0x63
 8000bb4:	d904      	bls.n	8000bc0 <ConsoleCommandDateSet+0x9c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <ConsoleCommandDateSet+0xf0>)
 8000bb8:	f7ff ffa2 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	e020      	b.n	8000c02 <ConsoleCommandDateSet+0xde>
	}


	sDate.Date = day;
 8000bc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	73bb      	strb	r3, [r7, #14]
	sDate.Month = month;
 8000bc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	737b      	strb	r3, [r7, #13]
	sDate.Year = year;
 8000bd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
	sDate.WeekDay = 7;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	733b      	strb	r3, [r7, #12]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <ConsoleCommandDateSet+0xf4>)
 8000be6:	f003 fd03 	bl	80045f0 <HAL_RTC_SetDate>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <ConsoleCommandDateSet+0xd6>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <ConsoleCommandDateSet+0xf8>)
 8000bf2:	f7ff ff85 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	e003      	b.n	8000c02 <ConsoleCommandDateSet+0xde>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <ConsoleCommandDateSet+0xfc>)
 8000bfc:	f7ff ff80 	bl	8000b00 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8000c00:	2300      	movs	r3, #0
	}
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	08007770 	.word	0x08007770
 8000c10:	08007794 	.word	0x08007794
 8000c14:	080077b8 	.word	0x080077b8
 8000c18:	20000190 	.word	0x20000190
 8000c1c:	080077dc 	.word	0x080077dc
 8000c20:	08007800 	.word	0x08007800

08000c24 <ConsoleCommandLedToggle>:


static eCommandResult_T ConsoleCommandLedToggle(const char buffer[])
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
	int16_t parameterInt;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	461a      	mov	r2, r3
 8000c32:	2101      	movs	r1, #1
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff fef0 	bl	8000a1a <ConsoleReceiveParamInt16>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73fb      	strb	r3, [r7, #15]
	if (result == COMMAND_PARAMETER_ERROR)
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	2b10      	cmp	r3, #16
 8000c42:	d101      	bne.n	8000c48 <ConsoleCommandLedToggle+0x24>
			return result;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	e011      	b.n	8000c6c <ConsoleCommandLedToggle+0x48>
	if (0 == parameterInt )
 8000c48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d106      	bne.n	8000c5e <ConsoleCommandLedToggle+0x3a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <ConsoleCommandLedToggle+0x50>)
 8000c58:	f002 f8a6 	bl	8002da8 <HAL_GPIO_WritePin>
 8000c5c:	e005      	b.n	8000c6a <ConsoleCommandLedToggle+0x46>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <ConsoleCommandLedToggle+0x50>)
 8000c66:	f002 f89f 	bl	8002da8 <HAL_GPIO_WritePin>

	return COMMAND_SUCCESS;
 8000c6a:	2300      	movs	r3, #0

}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40020800 	.word	0x40020800

08000c78 <ConsoleCommandGyroQuery>:

static eCommandResult_T ConsoleCommandGyroQuery(const char buffer[])
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint8_t state = gy521_ready();
 8000c80:	f000 f95e 	bl	8000f40 <gy521_ready>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
	if (state)
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <ConsoleCommandGyroQuery+0x1e>
	{
		ConsoleIoSendString("GYRO is Spinning :-)");
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <ConsoleCommandGyroQuery+0x30>)
 8000c90:	f000 f940 	bl	8000f14 <ConsoleIoSendString>
 8000c94:	e002      	b.n	8000c9c <ConsoleCommandGyroQuery+0x24>
	}
	else
	{
			ConsoleIoSendString("GYRO is on holiday :-(");
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <ConsoleCommandGyroQuery+0x34>)
 8000c98:	f000 f93c 	bl	8000f14 <ConsoleIoSendString>
	}
	return COMMAND_SUCCESS;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	0800780c 	.word	0x0800780c
 8000cac:	08007824 	.word	0x08007824

08000cb0 <ConsoleCommandTimeQuery>:

static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b092      	sub	sp, #72	; 0x48
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480f      	ldr	r0, [pc, #60]	; (8000d00 <ConsoleCommandTimeQuery+0x50>)
 8000cc2:	f003 fc37 	bl	8004534 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <ConsoleCommandTimeQuery+0x50>)
 8000cd0:	f003 fd12 	bl	80046f8 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000cd4:	7b3b      	ldrb	r3, [r7, #12]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	7b7b      	ldrb	r3, [r7, #13]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	f107 0020 	add.w	r0, r7, #32
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4907      	ldr	r1, [pc, #28]	; (8000d04 <ConsoleCommandTimeQuery+0x54>)
 8000ce8:	f005 ffce 	bl	8006c88 <siprintf>
	ConsoleSendString(time);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fef8 	bl	8000ae6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3740      	adds	r7, #64	; 0x40
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000190 	.word	0x20000190
 8000d04:	0800783c 	.word	0x0800783c

08000d08 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	; 0x38
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <ConsoleCommandDateQuery+0x44>)
 8000d1a:	f003 fced 	bl	80046f8 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	461a      	mov	r2, r3
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	4619      	mov	r1, r3
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	f107 0010 	add.w	r0, r7, #16
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <ConsoleCommandDateQuery+0x48>)
 8000d32:	f005 ffa9 	bl	8006c88 <siprintf>
	ConsoleSendString(date);
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fed3 	bl	8000ae6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000190 	.word	0x20000190
 8000d50:	08007854 	.word	0x08007854

08000d54 <ConsoleCommandLedQuery>:


static eCommandResult_T ConsoleCommandLedQuery(const char buffer[])
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==0)
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	480a      	ldr	r0, [pc, #40]	; (8000d8c <ConsoleCommandLedQuery+0x38>)
 8000d62:	f002 f809 	bl	8002d78 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d103      	bne.n	8000d74 <ConsoleCommandLedQuery+0x20>
			ConsoleIoSendString("LED is ON ");
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <ConsoleCommandLedQuery+0x3c>)
 8000d6e:	f000 f8d1 	bl	8000f14 <ConsoleIoSendString>
 8000d72:	e002      	b.n	8000d7a <ConsoleCommandLedQuery+0x26>
	else
		ConsoleIoSendString("LED is OFF ");
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <ConsoleCommandLedQuery+0x40>)
 8000d76:	f000 f8cd 	bl	8000f14 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <ConsoleCommandLedQuery+0x44>)
 8000d7c:	f000 f8ca 	bl	8000f14 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	0800786c 	.word	0x0800786c
 8000d94:	08007878 	.word	0x08007878
 8000d98:	08007884 	.word	0x08007884

08000d9c <ConsoleCommandHelp>:



static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000da4:	2300      	movs	r3, #0
 8000da6:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000da8:	2309      	movs	r3, #9
 8000daa:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e01e      	b.n	8000df0 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000db2:	4914      	ldr	r1, [pc, #80]	; (8000e04 <ConsoleCommandHelp+0x68>)
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	4613      	mov	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	440b      	add	r3, r1
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f8a6 	bl	8000f14 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000dc8:	480f      	ldr	r0, [pc, #60]	; (8000e08 <ConsoleCommandHelp+0x6c>)
 8000dca:	f000 f8a3 	bl	8000f14 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	3308      	adds	r3, #8
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <ConsoleCommandHelp+0x68>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f898 	bl	8000f14 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <ConsoleCommandHelp+0x70>)
 8000de6:	f000 f895 	bl	8000f14 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d3db      	bcc.n	8000db2 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000dfa:	7cfb      	ldrb	r3, [r7, #19]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08007898 	.word	0x08007898
 8000e08:	08007888 	.word	0x08007888
 8000e0c:	08007884 	.word	0x08007884

08000e10 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <ConsoleCommandVer+0x24>)
 8000e1e:	f000 f879 	bl	8000f14 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x28>)
 8000e24:	f000 f876 	bl	8000f14 <ConsoleIoSendString>
	return result;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	0800788c 	.word	0x0800788c
 8000e38:	08007884 	.word	0x08007884

08000e3c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <ConsoleCommandsGetTable+0x10>)
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	08007898 	.word	0x08007898

08000e50 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4909      	ldr	r1, [pc, #36]	; (8000e80 <HAL_UART_RxCpltCallback+0x30>)
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <HAL_UART_RxCpltCallback+0x34>)
 8000e5e:	f004 ff44 	bl	8005cea <HAL_UART_Receive_IT>
    {
    	HAL_UART_Transmit(&huart1, &cliRX, 1, 100);

    }
    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <HAL_UART_RxCpltCallback+0x30>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b0a      	cmp	r3, #10
 8000e68:	d005      	beq.n	8000e76 <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_UART_RxCpltCallback+0x30>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_UART_RxCpltCallback+0x38>)
 8000e72:	f7ff fbbe 	bl	80005f2 <cBuffer_Write>

    }
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000138 	.word	0x20000138
 8000e84:	2000025c 	.word	0x2000025c
 8000e88:	20000130 	.word	0x20000130

08000e8c <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8000e90:	2240      	movs	r2, #64	; 0x40
 8000e92:	4906      	ldr	r1, [pc, #24]	; (8000eac <ConsoleIoInit+0x20>)
 8000e94:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <ConsoleIoInit+0x24>)
 8000e96:	f7ff fb8d 	bl	80005b4 <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4905      	ldr	r1, [pc, #20]	; (8000eb4 <ConsoleIoInit+0x28>)
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <ConsoleIoInit+0x2c>)
 8000ea0:	f004 ff23 	bl	8005cea <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000f0 	.word	0x200000f0
 8000eb0:	20000130 	.word	0x20000130
 8000eb4:	20000138 	.word	0x20000138
 8000eb8:	2000025c 	.word	0x2000025c

08000ebc <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint8_t len;

	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8000ec4:	f107 030f 	add.w	r3, r7, #15
 8000ec8:	220d      	movs	r2, #13
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4810      	ldr	r0, [pc, #64]	; (8000f10 <ConsoleIoReceive+0x54>)
 8000ece:	f7ff fbe8 	bl	80006a2 <cBuffer_GetString>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10a      	bne.n	8000eee <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len]  = 0x0; //Terminate String in C Style
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f847 	bl	8000f78 <manageBackSpace>
		return CONSOLE_SUCCESS;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e00b      	b.n	8000f06 <ConsoleIoReceive+0x4a>
	}
	else if (cBuffer_isFull(&cliCB) == CBUFFER_FULL)
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <ConsoleIoReceive+0x54>)
 8000ef0:	f7ff fbc2 	bl	8000678 <cBuffer_isFull>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d104      	bne.n	8000f04 <ConsoleIoReceive+0x48>
	{
		// KILL The Buffer
		cBuffer_Kill(&cliCB);
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <ConsoleIoReceive+0x54>)
 8000efc:	f7ff fba6 	bl	800064c <cBuffer_Kill>
		return CONSOLE_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <ConsoleIoReceive+0x4a>
	}
	return CONSOLE_NO_STRING;
 8000f04:	2302      	movs	r3, #2

}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000130 	.word	0x20000130

08000f14 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff f969 	bl	80001f4 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x28>)
 8000f2c:	f004 fe4b 	bl	8005bc6 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000025c 	.word	0x2000025c

08000f40 <gy521_ready>:
	int16_t Gyro_Y_RAW = 0;
	int16_t Gyro_Z_RAW = 0;


uint8_t gy521_ready()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af04      	add	r7, sp, #16
	uint8_t check;
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	2275      	movs	r2, #117	; 0x75
 8000f58:	21d0      	movs	r1, #208	; 0xd0
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <gy521_ready+0x34>)
 8000f5c:	f002 f882 	bl	8003064 <HAL_I2C_Mem_Read>
	return check == 114;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b72      	cmp	r3, #114	; 0x72
 8000f64:	bf0c      	ite	eq
 8000f66:	2301      	moveq	r3, #1
 8000f68:	2300      	movne	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000013c 	.word	0x2000013c

08000f78 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 8000f84:	217f      	movs	r1, #127	; 0x7f
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f005 fe9e 	bl	8006cc8 <strchr>
 8000f8c:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8000f8e:	e029      	b.n	8000fe4 <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b7f      	cmp	r3, #127	; 0x7f
 8000f96:	d106      	bne.n	8000fa6 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f005 fe9f 	bl	8006ce2 <strcpy>
 8000fa4:	e019      	b.n	8000fda <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b7f      	cmp	r3, #127	; 0x7f
 8000fac:	d109      	bne.n	8000fc2 <manageBackSpace+0x4a>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d104      	bne.n	8000fc2 <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e00b      	b.n	8000fda <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc8:	d107      	bne.n	8000fda <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	f005 fe84 	bl	8006ce2 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8000fda:	217f      	movs	r1, #127	; 0x7f
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f005 fe73 	bl	8006cc8 <strchr>
 8000fe2:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1d1      	bne.n	8000f90 <manageBackSpace+0x18>
		}
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 8000ffe:	e00c      	b.n	800101a <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b2f      	cmp	r3, #47	; 0x2f
 8001006:	d903      	bls.n	8001010 <isNumber+0x1a>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b39      	cmp	r3, #57	; 0x39
 800100e:	d901      	bls.n	8001014 <isNumber+0x1e>
			return 0;
 8001010:	2300      	movs	r3, #0
 8001012:	e007      	b.n	8001024 <isNumber+0x2e>
		string++;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ee      	bne.n	8001000 <isNumber+0xa>
	}
	return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_DMA_Init+0x3c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <MX_DMA_Init+0x3c>)
 8001040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_DMA_Init+0x3c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2039      	movs	r0, #57	; 0x39
 8001058:	f001 f8d1 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800105c:	2039      	movs	r0, #57	; 0x39
 800105e:	f001 f8ea 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <MX_GPIO_Init+0xb8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a26      	ldr	r2, [pc, #152]	; (8001128 <MX_GPIO_Init+0xb8>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_GPIO_Init+0xb8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <MX_GPIO_Init+0xbc>)
 80010fe:	f001 fe53 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_GPIO_Init+0xbc>)
 800111c:	f001 fca8 	bl	8002a70 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800

08001130 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_I2C1_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <MX_I2C1_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_I2C1_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_I2C1_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_I2C1_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_I2C1_Init+0x50>)
 800116e:	f001 fe35 	bl	8002ddc <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001178:	f000 f900 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000013c 	.word	0x2000013c
 8001184:	40005400 	.word	0x40005400
 8001188:	000186a0 	.word	0x000186a0

0800118c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_I2C_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12b      	bne.n	8001206 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_I2C_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_I2C_MspInit+0x88>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ca:	23c0      	movs	r3, #192	; 0xc0
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011da:	2304      	movs	r3, #4
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <HAL_I2C_MspInit+0x8c>)
 80011e6:	f001 fc43 	bl	8002a70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_I2C_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_I2C_MspInit+0x88>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_I2C_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40005400 	.word	0x40005400
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001222:	f000 fe7b 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f83f 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f7ff ff21 	bl	8001070 <MX_GPIO_Init>
  MX_RTC_Init();
 800122e:	f000 f8ab 	bl	8001388 <MX_RTC_Init>
  MX_DMA_Init();
 8001232:	f7ff fefd 	bl	8001030 <MX_DMA_Init>
  MX_I2C1_Init();
 8001236:	f7ff ff7b 	bl	8001130 <MX_I2C1_Init>
  MX_TIM1_Init();
 800123a:	f000 f9a5 	bl	8001588 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800123e:	f000 fad1 	bl	80017e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t angle = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 8001246:	230b      	movs	r3, #11
 8001248:	717b      	strb	r3, [r7, #5]

  ConsoleInit();
 800124a:	f7ff fb01 	bl	8000850 <ConsoleInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 800124e:	f7ff fb29 	bl	80008a4 <ConsoleProcess>


	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	71bb      	strb	r3, [r7, #6]
 8001256:	e01b      	b.n	8001290 <main+0x74>
	  	  			// Calculate color
	  	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8001258:	79ba      	ldrb	r2, [r7, #6]
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	fb12 f303 	smulbb	r3, r2, r3
 8001260:	b2da      	uxtb	r2, r3
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4413      	add	r3, r2
 8001266:	b2db      	uxtb	r3, r3
 8001268:	227f      	movs	r2, #127	; 0x7f
 800126a:	21ff      	movs	r1, #255	; 0xff
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fd8f 	bl	8001d90 <hsl_to_rgb>
 8001272:	6038      	str	r0, [r7, #0]
	  	  			// Set color
	  	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	0c1b      	lsrs	r3, r3, #16
 8001278:	b2d9      	uxtb	r1, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	b2da      	uxtb	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	79b8      	ldrb	r0, [r7, #6]
 8001286:	f000 fb65 	bl	8001954 <led_set_RGB>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	3301      	adds	r3, #1
 800128e:	71bb      	strb	r3, [r7, #6]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b0b      	cmp	r3, #11
 8001294:	d9e0      	bls.n	8001258 <main+0x3c>
	  	  		}
	  	  		// Write to LED
	  	    	++angle;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	3301      	adds	r3, #1
 800129a:	71fb      	strb	r3, [r7, #7]
	  	  		led_render();
 800129c:	f000 fbc0 	bl	8001a20 <led_render>
	  	  		// Some delay
	  	  		HAL_Delay(10);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f000 fead 	bl	8002000 <HAL_Delay>
	  ConsoleProcess();
 80012a6:	e7d2      	b.n	800124e <main+0x32>

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	; 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2230      	movs	r2, #48	; 0x30
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 fcde 	bl	8006c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a27      	ldr	r2, [pc, #156]	; (8001374 <SystemClock_Config+0xcc>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a21      	ldr	r2, [pc, #132]	; (8001378 <SystemClock_Config+0xd0>)
 80012f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <SystemClock_Config+0xd0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001304:	2309      	movs	r3, #9
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800130e:	2301      	movs	r3, #1
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800131c:	230c      	movs	r3, #12
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001320:	2360      	movs	r3, #96	; 0x60
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001328:	2304      	movs	r3, #4
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fb41 	bl	80039b8 <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800133c:	f000 f81e 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	230f      	movs	r3, #15
 8001342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001344:	2302      	movs	r3, #2
 8001346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2103      	movs	r1, #3
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fda3 	bl	8003ea8 <HAL_RCC_ClockConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001368:	f000 f808 	bl	800137c <Error_Handler>
  }
}
 800136c:	bf00      	nop
 800136e:	3750      	adds	r7, #80	; 0x50
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_RTC_Init+0x44>)
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <MX_RTC_Init+0x48>)
 8001390:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_RTC_Init+0x44>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_RTC_Init+0x44>)
 800139a:	227f      	movs	r2, #127	; 0x7f
 800139c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_RTC_Init+0x44>)
 80013a0:	22ff      	movs	r2, #255	; 0xff
 80013a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_RTC_Init+0x44>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_RTC_Init+0x44>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_RTC_Init+0x44>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_RTC_Init+0x44>)
 80013b8:	f003 f846 	bl	8004448 <HAL_RTC_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80013c2:	f7ff ffdb 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000190 	.word	0x20000190
 80013d0:	40002800 	.word	0x40002800

080013d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <HAL_RTC_MspInit+0x50>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d111      	bne.n	800141c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013f8:	2302      	movs	r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001400:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4618      	mov	r0, r3
 8001408:	f002 ff2e 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001412:	f7ff ffb3 	bl	800137c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_RTC_MspInit+0x54>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40002800 	.word	0x40002800
 8001428:	42470e3c 	.word	0x42470e3c

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 fd7a 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <USART1_IRQHandler+0x10>)
 80014d6:	f004 fc39 	bl	8005d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000025c 	.word	0x2000025c

080014e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA2_Stream1_IRQHandler+0x10>)
 80014ea:	f001 f857 	bl	800259c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001fc 	.word	0x200001fc

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f005 fb7c 	bl	8006c24 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20020000 	.word	0x20020000
 8001558:	00000400 	.word	0x00000400
 800155c:	200001b0 	.word	0x200001b0
 8001560:	20000340 	.word	0x20000340

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b096      	sub	sp, #88	; 0x58
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2220      	movs	r2, #32
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 fb59 	bl	8006c78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015c8:	4a3e      	ldr	r2, [pc, #248]	; (80016c4 <MX_TIM1_Init+0x13c>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015cc:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015da:	227c      	movs	r2, #124	; 0x7c
 80015dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015f0:	4833      	ldr	r0, [pc, #204]	; (80016c0 <MX_TIM1_Init+0x138>)
 80015f2:	f003 f98d 	bl	8004910 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015fc:	f7ff febe 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800160a:	4619      	mov	r1, r3
 800160c:	482c      	ldr	r0, [pc, #176]	; (80016c0 <MX_TIM1_Init+0x138>)
 800160e:	f003 fd5f 	bl	80050d0 <HAL_TIM_ConfigClockSource>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001618:	f7ff feb0 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800161c:	4828      	ldr	r0, [pc, #160]	; (80016c0 <MX_TIM1_Init+0x138>)
 800161e:	f003 f9c6 	bl	80049ae <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001628:	f7ff fea8 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001638:	4619      	mov	r1, r3
 800163a:	4821      	ldr	r0, [pc, #132]	; (80016c0 <MX_TIM1_Init+0x138>)
 800163c:	f004 f9b6 	bl	80059ac <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001646:	f7ff fe99 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164a:	2360      	movs	r3, #96	; 0x60
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001656:	2300      	movs	r3, #0
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <MX_TIM1_Init+0x138>)
 8001670:	f003 fc6c 	bl	8004f4c <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800167a:	f7ff fe7f 	bl	800137c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM1_Init+0x138>)
 80016a2:	f004 f9f1 	bl	8005a88 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80016ac:	f7ff fe66 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM1_Init+0x138>)
 80016b2:	f000 f85d 	bl	8001770 <HAL_TIM_MspPostInit>

}
 80016b6:	bf00      	nop
 80016b8:	3758      	adds	r7, #88	; 0x58
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001b4 	.word	0x200001b4
 80016c4:	40010000 	.word	0x40010000

080016c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a22      	ldr	r2, [pc, #136]	; (8001760 <HAL_TIM_Base_MspInit+0x98>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d13e      	bne.n	8001758 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_TIM_Base_MspInit+0x9c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a20      	ldr	r2, [pc, #128]	; (8001764 <HAL_TIM_Base_MspInit+0x9c>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_TIM_Base_MspInit+0x9c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 80016f8:	4a1c      	ldr	r2, [pc, #112]	; (800176c <HAL_TIM_Base_MspInit+0xa4>)
 80016fa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 80016fe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001702:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 8001712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001716:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 800171a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800171e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 8001722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001726:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 800172a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 800173e:	f000 fd95 	bl	800226c <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001748:	f7ff fe18 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <HAL_TIM_Base_MspInit+0xa0>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40010000 	.word	0x40010000
 8001764:	40023800 	.word	0x40023800
 8001768:	200001fc 	.word	0x200001fc
 800176c:	40026428 	.word	0x40026428

08001770 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_TIM_MspPostInit+0x68>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d11e      	bne.n	80017d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_TIM_MspPostInit+0x6c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_TIM_MspPostInit+0x6c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_TIM_MspPostInit+0x6c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_TIM_MspPostInit+0x70>)
 80017cc:	f001 f950 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000

080017e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART1_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 800181c:	f004 f986 	bl	8005b2c <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f7ff fda9 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000025c 	.word	0x2000025c
 8001834:	40011000 	.word	0x40011000

08001838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_UART_MspInit+0x94>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d134      	bne.n	80018c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_UART_MspInit+0x98>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_UART_MspInit+0x98>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001892:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a4:	2307      	movs	r3, #7
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_UART_MspInit+0x9c>)
 80018b0:	f001 f8de 	bl	8002a70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2025      	movs	r0, #37	; 0x25
 80018ba:	f000 fca0 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018be:	2025      	movs	r0, #37	; 0x25
 80018c0:	f000 fcb9 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001902:	f7ff fe2f 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f005 f993 	bl	8006c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff fc87 	bl	800121c <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800191c:	08007c84 	.word	0x08007c84
  ldr r2, =_sbss
 8001920:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001924:	2000033c 	.word	0x2000033c

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>

0800192a <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	460a      	mov	r2, r1
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	4613      	mov	r3, r2
 8001938:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	79ba      	ldrb	r2, [r7, #6]
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	121b      	asrs	r3, r3, #8
 8001944:	b2db      	uxtb	r3, r3
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4623      	mov	r3, r4
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	4603      	mov	r3, r0
 8001968:	71bb      	strb	r3, [r7, #6]
 800196a:	460b      	mov	r3, r1
 800196c:	717b      	strb	r3, [r7, #5]
 800196e:	4613      	mov	r3, r2
 8001970:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001988:	edc7 7a00 	vstr	s15, [r7]
 800198c:	783b      	ldrb	r3, [r7, #0]
 800198e:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800199e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	edc7 7a00 	vstr	s15, [r7]
 80019aa:	783b      	ldrb	r3, [r7, #0]
 80019ac:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 80019ae:	793b      	ldrb	r3, [r7, #4]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c4:	edc7 7a00 	vstr	s15, [r7]
 80019c8:	783b      	ldrb	r3, [r7, #0]
 80019ca:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80019cc:	79fa      	ldrb	r2, [r7, #7]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	189c      	adds	r4, r3, r2
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	21b0      	movs	r1, #176	; 0xb0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffa6 	bl	800192a <scale8>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <led_set_RGB+0xc8>)
 80019e4:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	3301      	adds	r3, #1
 80019f0:	490a      	ldr	r1, [pc, #40]	; (8001a1c <led_set_RGB+0xc8>)
 80019f2:	79ba      	ldrb	r2, [r7, #6]
 80019f4:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	1c9c      	adds	r4, r3, #2
 8001a00:	793b      	ldrb	r3, [r7, #4]
 8001a02:	21f0      	movs	r1, #240	; 0xf0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff90 	bl	800192a <scale8>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <led_set_RGB+0xc8>)
 8001a10:	551a      	strb	r2, [r3, r4]

}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002a0 	.word	0x200002a0

08001a20 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <led_render+0x148>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <led_render+0x1a>
 8001a2e:	4b4f      	ldr	r3, [pc, #316]	; (8001b6c <led_render+0x14c>)
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d015      	beq.n	8001a66 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e007      	b.n	8001a50 <led_render+0x30>
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a4b      	ldr	r2, [pc, #300]	; (8001b70 <led_render+0x150>)
 8001a44:	2100      	movs	r1, #0
 8001a46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b2f      	cmp	r3, #47	; 0x2f
 8001a54:	d9f4      	bls.n	8001a40 <led_render+0x20>
    wr_buf_p = 0;
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <led_render+0x148>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4845      	ldr	r0, [pc, #276]	; (8001b74 <led_render+0x154>)
 8001a60:	f003 f9ae 	bl	8004dc0 <HAL_TIM_PWM_Stop_DMA>
    return;
 8001a64:	e07c      	b.n	8001b60 <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	e06d      	b.n	8001b48 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <led_render+0x158>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	dd01      	ble.n	8001a84 <led_render+0x64>
 8001a80:	2150      	movs	r1, #80	; 0x50
 8001a82:	e000      	b.n	8001a86 <led_render+0x66>
 8001a84:	2128      	movs	r1, #40	; 0x28
 8001a86:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <led_render+0x150>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <led_render+0x158>)
 8001a90:	785b      	ldrb	r3, [r3, #1]
 8001a92:	461a      	mov	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	dd01      	ble.n	8001aa6 <led_render+0x86>
 8001aa2:	2150      	movs	r1, #80	; 0x50
 8001aa4:	e000      	b.n	8001aa8 <led_render+0x88>
 8001aa6:	2128      	movs	r1, #40	; 0x28
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <led_render+0x150>)
 8001aae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <led_render+0x158>)
 8001ab4:	789b      	ldrb	r3, [r3, #2]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	dd01      	ble.n	8001aca <led_render+0xaa>
 8001ac6:	2150      	movs	r1, #80	; 0x50
 8001ac8:	e000      	b.n	8001acc <led_render+0xac>
 8001aca:	2128      	movs	r1, #40	; 0x28
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	3310      	adds	r3, #16
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <led_render+0x150>)
 8001ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <led_render+0x158>)
 8001ad8:	78db      	ldrb	r3, [r3, #3]
 8001ada:	461a      	mov	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	dd01      	ble.n	8001aee <led_render+0xce>
 8001aea:	2150      	movs	r1, #80	; 0x50
 8001aec:	e000      	b.n	8001af0 <led_render+0xd0>
 8001aee:	2128      	movs	r1, #40	; 0x28
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3318      	adds	r3, #24
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <led_render+0x150>)
 8001af6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001afa:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <led_render+0x158>)
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	461a      	mov	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dd01      	ble.n	8001b12 <led_render+0xf2>
 8001b0e:	2150      	movs	r1, #80	; 0x50
 8001b10:	e000      	b.n	8001b14 <led_render+0xf4>
 8001b12:	2128      	movs	r1, #40	; 0x28
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3320      	adds	r3, #32
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <led_render+0x150>)
 8001b1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <led_render+0x158>)
 8001b20:	795b      	ldrb	r3, [r3, #5]
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dd01      	ble.n	8001b36 <led_render+0x116>
 8001b32:	2150      	movs	r1, #80	; 0x50
 8001b34:	e000      	b.n	8001b38 <led_render+0x118>
 8001b36:	2128      	movs	r1, #40	; 0x28
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3328      	adds	r3, #40	; 0x28
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <led_render+0x150>)
 8001b3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	d98e      	bls.n	8001a6c <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8001b4e:	2330      	movs	r3, #48	; 0x30
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <led_render+0x150>)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <led_render+0x154>)
 8001b56:	f002 ff83 	bl	8004a60 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8001b5a:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <led_render+0x148>)
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000324 	.word	0x20000324
 8001b6c:	200001fc 	.word	0x200001fc
 8001b70:	200002c4 	.word	0x200002c4
 8001b74:	200001b4 	.word	0x200001b4
 8001b78:	200002a0 	.word	0x200002a0

08001b7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b0b      	cmp	r3, #11
 8001b8a:	d854      	bhi.n	8001c36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e048      	b.n	8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a35      	ldr	r2, [pc, #212]	; (8001c74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	dd01      	ble.n	8001bb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001bb0:	2150      	movs	r1, #80	; 0x50
 8001bb2:	e000      	b.n	8001bb6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001bb4:	2128      	movs	r1, #40	; 0x28
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dd01      	ble.n	8001be2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 8001bde:	2150      	movs	r1, #80	; 0x50
 8001be0:	e000      	b.n	8001be4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001be2:	2128      	movs	r1, #40	; 0x28
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3308      	adds	r3, #8
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001bfc:	5cd3      	ldrb	r3, [r2, r3]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	dd01      	ble.n	8001c12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001c0e:	2150      	movs	r1, #80	; 0x50
 8001c10:	e000      	b.n	8001c14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8001c12:	2128      	movs	r1, #40	; 0x28
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3310      	adds	r3, #16
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3301      	adds	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d9b3      	bls.n	8001b92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c32:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001c34:	e016      	b.n	8001c64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b0d      	cmp	r3, #13
 8001c3c:	d812      	bhi.n	8001c64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	72fb      	strb	r3, [r7, #11]
 8001c42:	e007      	b.n	8001c54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	3301      	adds	r3, #1
 8001c52:	72fb      	strb	r3, [r7, #11]
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	2b17      	cmp	r3, #23
 8001c58:	d9f4      	bls.n	8001c44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	20000324 	.word	0x20000324
 8001c74:	200002a0 	.word	0x200002a0
 8001c78:	200002c4 	.word	0x200002c4

08001c7c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001c84:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b0b      	cmp	r3, #11
 8001c8a:	d855      	bhi.n	8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e049      	b.n	8001d26 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a39      	ldr	r2, [pc, #228]	; (8001d84 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	dd01      	ble.n	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001cb0:	2150      	movs	r1, #80	; 0x50
 8001cb2:	e000      	b.n	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001cb4:	2128      	movs	r1, #40	; 0x28
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3318      	adds	r3, #24
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001cbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dd01      	ble.n	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001ce0:	2150      	movs	r1, #80	; 0x50
 8001ce2:	e000      	b.n	8001ce6 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8001ce4:	2128      	movs	r1, #40	; 0x28
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3320      	adds	r3, #32
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001cec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	dd01      	ble.n	8001d14 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8001d10:	2150      	movs	r1, #80	; 0x50
 8001d12:	e000      	b.n	8001d16 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8001d14:	2128      	movs	r1, #40	; 0x28
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3328      	adds	r3, #40	; 0x28
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b07      	cmp	r3, #7
 8001d2a:	d9b2      	bls.n	8001c92 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d34:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8001d36:	e01e      	b.n	8001d76 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b0d      	cmp	r3, #13
 8001d3e:	d813      	bhi.n	8001d68 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001d40:	2318      	movs	r3, #24
 8001d42:	72fb      	strb	r3, [r7, #11]
 8001d44:	e007      	b.n	8001d56 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	3301      	adds	r3, #1
 8001d54:	72fb      	strb	r3, [r7, #11]
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	2b2f      	cmp	r3, #47	; 0x2f
 8001d5a:	d9f4      	bls.n	8001d46 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d64:	6013      	str	r3, [r2, #0]
}
 8001d66:	e006      	b.n	8001d76 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001d72:	f003 f825 	bl	8004dc0 <HAL_TIM_PWM_Stop_DMA>
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000324 	.word	0x20000324
 8001d84:	200002a0 	.word	0x200002a0
 8001d88:	200002c4 	.word	0x200002c4
 8001d8c:	200001b4 	.word	0x200001b4

08001d90 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	71bb      	strb	r3, [r7, #6]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8001da2:	797b      	ldrb	r3, [r7, #5]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <hsl_to_rgb+0x1c>
 8001da8:	2300      	movs	r3, #0
 8001daa:	e0b1      	b.n	8001f10 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8001dac:	797b      	ldrb	r3, [r7, #5]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001db6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db09      	blt.n	8001dd2 <hsl_to_rgb+0x42>
 8001dbe:	89bb      	ldrh	r3, [r7, #12]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	79ba      	ldrb	r2, [r7, #6]
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	121b      	asrs	r3, r3, #8
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	74fb      	strb	r3, [r7, #19]
 8001dd0:	e00a      	b.n	8001de8 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8001dd2:	89bb      	ldrh	r3, [r7, #12]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ddc:	79ba      	ldrb	r2, [r7, #6]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	121b      	asrs	r3, r3, #8
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	0052      	lsls	r2, r2, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001df8:	897b      	ldrh	r3, [r7, #10]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8001e00:	7d3b      	ldrb	r3, [r7, #20]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <hsl_to_rgb+0x9c>
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	7cfa      	ldrb	r2, [r7, #19]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	121b      	asrs	r3, r3, #8
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	74bb      	strb	r3, [r7, #18]
 8001e2a:	e00a      	b.n	8001e42 <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001e34:	7cfa      	ldrb	r2, [r7, #19]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	121b      	asrs	r3, r3, #8
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	797a      	ldrb	r2, [r7, #5]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8001e52:	897b      	ldrh	r3, [r7, #10]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d839      	bhi.n	8001ed2 <hsl_to_rgb+0x142>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <hsl_to_rgb+0xd4>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e79 	.word	0x08001e79
 8001e68:	08001e8b 	.word	0x08001e8b
 8001e6c:	08001e9d 	.word	0x08001e9d
 8001e70:	08001eaf 	.word	0x08001eaf
 8001e74:	08001ec1 	.word	0x08001ec1
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001e78:	7cfb      	ldrb	r3, [r7, #19]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	75fb      	strb	r3, [r7, #23]
 8001e7e:	7cbb      	ldrb	r3, [r7, #18]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	75bb      	strb	r3, [r7, #22]
 8001e84:	2300      	movs	r3, #0
 8001e86:	757b      	strb	r3, [r7, #21]
 8001e88:	e02c      	b.n	8001ee4 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001e8a:	7cbb      	ldrb	r3, [r7, #18]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	75fb      	strb	r3, [r7, #23]
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	75bb      	strb	r3, [r7, #22]
 8001e96:	2300      	movs	r3, #0
 8001e98:	757b      	strb	r3, [r7, #21]
 8001e9a:	e023      	b.n	8001ee4 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	75fb      	strb	r3, [r7, #23]
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	75bb      	strb	r3, [r7, #22]
 8001ea6:	7cbb      	ldrb	r3, [r7, #18]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	757b      	strb	r3, [r7, #21]
 8001eac:	e01a      	b.n	8001ee4 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
 8001eb2:	7cbb      	ldrb	r3, [r7, #18]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	75bb      	strb	r3, [r7, #22]
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	757b      	strb	r3, [r7, #21]
 8001ebe:	e011      	b.n	8001ee4 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001ec0:	7cbb      	ldrb	r3, [r7, #18]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	75fb      	strb	r3, [r7, #23]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75bb      	strb	r3, [r7, #22]
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	757b      	strb	r3, [r7, #21]
 8001ed0:	e008      	b.n	8001ee4 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	75fb      	strb	r3, [r7, #23]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	75bb      	strb	r3, [r7, #22]
 8001edc:	7cbb      	ldrb	r3, [r7, #18]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	757b      	strb	r3, [r7, #21]
 8001ee2:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	7c7b      	ldrb	r3, [r7, #17]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	7dbb      	ldrb	r3, [r7, #22]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	7c7b      	ldrb	r3, [r7, #17]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	440b      	add	r3, r1
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	431a      	orrs	r2, r3
 8001f02:	7d7b      	ldrb	r3, [r7, #21]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4619      	mov	r1, r3
 8001f08:	7c7b      	ldrb	r3, [r7, #17]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	4313      	orrs	r3, r2
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f94f 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fa6c 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f967 	bl	8002252 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f92f 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000328 	.word	0x20000328

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000328 	.word	0x20000328

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f7ff ff8e 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff29 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff3e 	bl	8002090 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff8e 	bl	800213c <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff31 	bl	80020ac <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff feb6 	bl	8001fe8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e099      	b.n	80023bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	e00f      	b.n	80022ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022aa:	f7ff fe9d 	bl	8001fe8 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d908      	bls.n	80022ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e078      	b.n	80023bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e8      	bne.n	80022aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_DMA_Init+0x158>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4313      	orrs	r3, r2
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0307 	bic.w	r3, r3, #7
 800234a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b04      	cmp	r3, #4
 800235c:	d117      	bne.n	800238e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fb01 	bl	8002978 <DMA_CheckFifoParam>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800238a:	2301      	movs	r3, #1
 800238c:	e016      	b.n	80023bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fab8 	bl	800290c <DMA_CalcBaseAndBitshift>
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f010803f 	.word	0xf010803f

080023c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_DMA_Start_IT+0x26>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e040      	b.n	8002470 <HAL_DMA_Start_IT+0xa8>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12f      	bne.n	8002462 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fa4a 	bl	80028b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	223f      	movs	r2, #63	; 0x3f
 8002422:	409a      	lsls	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0216 	orr.w	r2, r2, #22
 8002436:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0208 	orr.w	r2, r2, #8
 800244e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e005      	b.n	800246e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246a:	2302      	movs	r3, #2
 800246c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002486:	f7ff fdaf 	bl	8001fe8 <HAL_GetTick>
 800248a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d008      	beq.n	80024aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e052      	b.n	8002550 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0216 	bic.w	r2, r2, #22
 80024b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <HAL_DMA_Abort+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fa:	e013      	b.n	8002524 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024fc:	f7ff fd74 	bl	8001fe8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d90c      	bls.n	8002524 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2203      	movs	r2, #3
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e015      	b.n	8002550 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e4      	bne.n	80024fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	223f      	movs	r2, #63	; 0x3f
 8002538:	409a      	lsls	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d004      	beq.n	8002576 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00c      	b.n	8002590 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2205      	movs	r2, #5
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a8:	4b8e      	ldr	r3, [pc, #568]	; (80027e4 <HAL_DMA_IRQHandler+0x248>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a8e      	ldr	r2, [pc, #568]	; (80027e8 <HAL_DMA_IRQHandler+0x24c>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	2208      	movs	r2, #8
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2208      	movs	r2, #8
 80025f6:	409a      	lsls	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2201      	movs	r2, #1
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2201      	movs	r2, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2204      	movs	r2, #4
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d012      	beq.n	8002674 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00b      	beq.n	8002674 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	2204      	movs	r2, #4
 8002662:	409a      	lsls	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0204 	orr.w	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2210      	movs	r2, #16
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d043      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03c      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2210      	movs	r2, #16
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d024      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
 80026ca:	e01f      	b.n	800270c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e016      	b.n	800270c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0208 	bic.w	r2, r2, #8
 80026fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	2220      	movs	r2, #32
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 808f 	beq.w	800283c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8087 	beq.w	800283c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2220      	movs	r2, #32
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b05      	cmp	r3, #5
 8002744:	d136      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0216 	bic.w	r2, r2, #22
 8002754:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002764:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <HAL_DMA_IRQHandler+0x1da>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0208 	bic.w	r2, r2, #8
 8002784:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	223f      	movs	r2, #63	; 0x3f
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d07e      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
        }
        return;
 80027b2:	e079      	b.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01d      	beq.n	80027fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d031      	beq.n	800283c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e02c      	b.n	800283c <HAL_DMA_IRQHandler+0x2a0>
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000
 80027e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d023      	beq.n	800283c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
 80027fc:	e01e      	b.n	800283c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10f      	bne.n	800282c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0210 	bic.w	r2, r2, #16
 800281a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	2b00      	cmp	r3, #0
 8002842:	d032      	beq.n	80028aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d022      	beq.n	8002896 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2205      	movs	r2, #5
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3301      	adds	r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	429a      	cmp	r2, r3
 8002872:	d307      	bcc.n	8002884 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f2      	bne.n	8002868 <HAL_DMA_IRQHandler+0x2cc>
 8002882:	e000      	b.n	8002886 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002884:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
 80028a6:	e000      	b.n	80028aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80028a8:	bf00      	nop
    }
  }
}
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d108      	bne.n	80028f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ee:	e007      	b.n	8002900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3b10      	subs	r3, #16
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <DMA_CalcBaseAndBitshift+0x64>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002926:	4a13      	ldr	r2, [pc, #76]	; (8002974 <DMA_CalcBaseAndBitshift+0x68>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d909      	bls.n	800294e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	1d1a      	adds	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	; 0x58
 800294c:	e007      	b.n	800295e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	aaaaaaab 	.word	0xaaaaaaab
 8002974:	08007b38 	.word	0x08007b38

08002978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11f      	bne.n	80029d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d856      	bhi.n	8002a46 <DMA_CheckFifoParam+0xce>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <DMA_CheckFifoParam+0x28>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029c3 	.word	0x080029c3
 80029a8:	080029b1 	.word	0x080029b1
 80029ac:	08002a47 	.word	0x08002a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d046      	beq.n	8002a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e043      	b.n	8002a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ca:	d140      	bne.n	8002a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e03d      	b.n	8002a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d121      	bne.n	8002a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d837      	bhi.n	8002a52 <DMA_CheckFifoParam+0xda>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <DMA_CheckFifoParam+0x70>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	080029ff 	.word	0x080029ff
 80029f0:	080029f9 	.word	0x080029f9
 80029f4:	08002a11 	.word	0x08002a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e030      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d025      	beq.n	8002a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0e:	e022      	b.n	8002a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1e:	e01c      	b.n	8002a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d903      	bls.n	8002a2e <DMA_CheckFifoParam+0xb6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a2c:	e018      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      break;
 8002a32:	e015      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e00b      	b.n	8002a5e <DMA_CheckFifoParam+0xe6>
      break;
 8002a46:	bf00      	nop
 8002a48:	e00a      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e008      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e006      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e004      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e159      	b.n	8002d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f040 8148 	bne.w	8002d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d130      	bne.n	8002b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0201 	and.w	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d017      	beq.n	8002b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d123      	bne.n	8002bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a2 	beq.w	8002d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a56      	ldr	r2, [pc, #344]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c12:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_GPIO_Init+0x2f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x202>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a48      	ldr	r2, [pc, #288]	; (8002d64 <HAL_GPIO_Init+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x1fe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_GPIO_Init+0x2f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_GPIO_Init+0x2fc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x1f6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <HAL_GPIO_Init+0x300>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x1f2>
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f aea2 	bls.w	8002a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e12b      	b.n	8003046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f9c2 	bl	800118c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e40:	f001 f9ea 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a81      	ldr	r2, [pc, #516]	; (8003050 <HAL_I2C_Init+0x274>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d807      	bhi.n	8002e60 <HAL_I2C_Init+0x84>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a80      	ldr	r2, [pc, #512]	; (8003054 <HAL_I2C_Init+0x278>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e006      	b.n	8002e6e <HAL_I2C_Init+0x92>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a7d      	ldr	r2, [pc, #500]	; (8003058 <HAL_I2C_Init+0x27c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0e7      	b.n	8003046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a78      	ldr	r2, [pc, #480]	; (800305c <HAL_I2C_Init+0x280>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	; (8003050 <HAL_I2C_Init+0x274>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d802      	bhi.n	8002eb0 <HAL_I2C_Init+0xd4>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3301      	adds	r3, #1
 8002eae:	e009      	b.n	8002ec4 <HAL_I2C_Init+0xe8>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_I2C_Init+0x284>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	495c      	ldr	r1, [pc, #368]	; (8003050 <HAL_I2C_Init+0x274>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d819      	bhi.n	8002f18 <HAL_I2C_Init+0x13c>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e59      	subs	r1, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef2:	1c59      	adds	r1, r3, #1
 8002ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ef8:	400b      	ands	r3, r1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_I2C_Init+0x138>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e59      	subs	r1, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f12:	e051      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e04f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d111      	bne.n	8002f44 <HAL_I2C_Init+0x168>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e012      	b.n	8002f6a <HAL_I2C_Init+0x18e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x196>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <HAL_I2C_Init+0x1bc>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e58      	subs	r0, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	440b      	add	r3, r1
 8002f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6809      	ldr	r1, [r1, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6911      	ldr	r1, [r2, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	000186a0 	.word	0x000186a0
 8003054:	001e847f 	.word	0x001e847f
 8003058:	003d08ff 	.word	0x003d08ff
 800305c:	431bde83 	.word	0x431bde83
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08c      	sub	sp, #48	; 0x30
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	4608      	mov	r0, r1
 800306e:	4611      	mov	r1, r2
 8003070:	461a      	mov	r2, r3
 8003072:	4603      	mov	r3, r0
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	460b      	mov	r3, r1
 8003078:	813b      	strh	r3, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800307e:	f7fe ffb3 	bl	8001fe8 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	f040 8208 	bne.w	80034a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2319      	movs	r3, #25
 8003098:	2201      	movs	r2, #1
 800309a:	497b      	ldr	r1, [pc, #492]	; (8003288 <HAL_I2C_Mem_Read+0x224>)
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 faef 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
 80030aa:	e1fb      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Mem_Read+0x56>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e1f4      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d007      	beq.n	80030e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2222      	movs	r2, #34	; 0x22
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a5b      	ldr	r2, [pc, #364]	; (800328c <HAL_I2C_Mem_Read+0x228>)
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003122:	88f8      	ldrh	r0, [r7, #6]
 8003124:	893a      	ldrh	r2, [r7, #8]
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4603      	mov	r3, r0
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f9bc 	bl	80034b0 <I2C_RequestMemoryRead>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1b0      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e184      	b.n	800347c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	2b01      	cmp	r3, #1
 8003178:	d11b      	bne.n	80031b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e164      	b.n	800347c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d11b      	bne.n	80031f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	e144      	b.n	800347c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003208:	e138      	b.n	800347c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	2b03      	cmp	r3, #3
 8003210:	f200 80f1 	bhi.w	80033f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	2b01      	cmp	r3, #1
 800321a:	d123      	bne.n	8003264 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fb44 	bl	80038ae <I2C_WaitOnRXNEFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e139      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003262:	e10b      	b.n	800347c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b02      	cmp	r3, #2
 800326a:	d14e      	bne.n	800330a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	2200      	movs	r2, #0
 8003274:	4906      	ldr	r1, [pc, #24]	; (8003290 <HAL_I2C_Mem_Read+0x22c>)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fa02 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e10e      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
 8003286:	bf00      	nop
 8003288:	00100002 	.word	0x00100002
 800328c:	ffff0000 	.word	0xffff0000
 8003290:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003308:	e0b8      	b.n	800347c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2200      	movs	r2, #0
 8003312:	4966      	ldr	r1, [pc, #408]	; (80034ac <HAL_I2C_Mem_Read+0x448>)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f9b3 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0bf      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2200      	movs	r2, #0
 800336e:	494f      	ldr	r1, [pc, #316]	; (80034ac <HAL_I2C_Mem_Read+0x448>)
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f985 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e091      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f4:	e042      	b.n	800347c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa57 	bl	80038ae <I2C_WaitOnRXNEFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e04c      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b04      	cmp	r3, #4
 8003448:	d118      	bne.n	800347c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	f47f aec2 	bne.w	800320a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3728      	adds	r7, #40	; 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	00010004 	.word	0x00010004

080034b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	4608      	mov	r0, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	461a      	mov	r2, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	817b      	strh	r3, [r7, #10]
 80034c2:	460b      	mov	r3, r1
 80034c4:	813b      	strh	r3, [r7, #8]
 80034c6:	4613      	mov	r3, r2
 80034c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8c2 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003510:	d103      	bne.n	800351a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0aa      	b.n	8003674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800351e:	897b      	ldrh	r3, [r7, #10]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800352c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	4952      	ldr	r1, [pc, #328]	; (800367c <I2C_RequestMemoryRead+0x1cc>)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f8fa 	bl	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e097      	b.n	8003674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	6a39      	ldr	r1, [r7, #32]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f964 	bl	800382c <I2C_WaitOnTXEFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b04      	cmp	r3, #4
 8003570:	d107      	bne.n	8003582 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003580:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e076      	b.n	8003674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	e021      	b.n	80035dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b29b      	uxth	r3, r3
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a8:	6a39      	ldr	r1, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f93e 	bl	800382c <I2C_WaitOnTXEFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d107      	bne.n	80035ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e050      	b.n	8003674 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035d2:	893b      	ldrh	r3, [r7, #8]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	6a39      	ldr	r1, [r7, #32]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f923 	bl	800382c <I2C_WaitOnTXEFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d107      	bne.n	8003604 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003602:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e035      	b.n	8003674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003616:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	2200      	movs	r2, #0
 8003620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f82b 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363e:	d103      	bne.n	8003648 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e013      	b.n	8003674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800364c:	897b      	ldrh	r3, [r7, #10]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	6a3a      	ldr	r2, [r7, #32]
 8003660:	4906      	ldr	r1, [pc, #24]	; (800367c <I2C_RequestMemoryRead+0x1cc>)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f863 	bl	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	00010002 	.word	0x00010002

08003680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003690:	e025      	b.n	80036de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d021      	beq.n	80036de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7fe fca5 	bl	8001fe8 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d116      	bne.n	80036de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e023      	b.n	8003726 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10d      	bne.n	8003704 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	e00c      	b.n	800371e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0b6      	beq.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373c:	e051      	b.n	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d123      	bne.n	8003796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003766:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0204 	orr.w	r2, r3, #4
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e046      	b.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d021      	beq.n	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe fc23 	bl	8001fe8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d116      	bne.n	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e020      	b.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10c      	bne.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	e00b      	b.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	43da      	mvns	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4013      	ands	r3, r2
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d18d      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003838:	e02d      	b.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f88d 	bl	800395a <I2C_IsAcknowledgeFailed>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e02d      	b.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d021      	beq.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fe fbc9 	bl	8001fe8 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d116      	bne.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e007      	b.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d1ca      	bne.n	800383a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ba:	e042      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d119      	bne.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f06f 0210 	mvn.w	r2, #16
 80038d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e029      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fe fb73 	bl	8001fe8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d1b5      	bne.n	80038bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003970:	d11b      	bne.n	80039aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800397a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e267      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d075      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d6:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00c      	beq.n	80039fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e2:	4b85      	ldr	r3, [pc, #532]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d112      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b82      	ldr	r3, [pc, #520]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	4b7e      	ldr	r3, [pc, #504]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05b      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x108>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d157      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e242      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCC_OscConfig+0x74>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a75      	ldr	r2, [pc, #468]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x98>
 8003a36:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6f      	ldr	r2, [pc, #444]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6c      	ldr	r2, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a50:	4b69      	ldr	r3, [pc, #420]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a68      	ldr	r2, [pc, #416]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe faba 	bl	8001fe8 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fab6 	bl	8001fe8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e207      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xc0>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe faa6 	bl	8001fe8 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe faa2 	bl	8001fe8 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1f3      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xe8>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1c7      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4937      	ldr	r1, [pc, #220]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fa5b 	bl	8001fe8 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe fa57 	bl	8001fe8 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1a8      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4925      	ldr	r1, [pc, #148]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fa3a 	bl	8001fe8 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe fa36 	bl	8001fe8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e187      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d036      	beq.n	8003c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fe fa1a 	bl	8001fe8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fa16 	bl	8001fe8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e167      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x200>
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe fa03 	bl	8001fe8 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e00e      	b.n	8003c04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be6:	f7fe f9ff 	bl	8001fe8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d907      	bls.n	8003c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e150      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ea      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8097 	beq.w	8003d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b7d      	ldr	r3, [pc, #500]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a7c      	ldr	r2, [pc, #496]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fe f9bf 	bl	8001fe8 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fe f9bb 	bl	8001fe8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e10c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x2ea>
 8003c94:	4b64      	ldr	r3, [pc, #400]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a63      	ldr	r2, [pc, #396]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x30c>
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a5b      	ldr	r2, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003cc4:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 0304 	bic.w	r3, r3, #4
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe f980 	bl	8001fe8 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fe f97c 	bl	8001fe8 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0cb      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ee      	beq.n	8003cec <HAL_RCC_OscConfig+0x334>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fe f96a 	bl	8001fe8 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7fe f966 	bl	8001fe8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0b5      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ee      	bne.n	8003d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a1 	beq.w	8003e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d05c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d141      	bne.n	8003dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe f93a 	bl	8001fe8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe f936 	bl	8001fe8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e087      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	491b      	ldr	r1, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe f90f 	bl	8001fe8 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fe f90b 	bl	8001fe8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e05c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x416>
 8003dec:	e054      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe f8f8 	bl	8001fe8 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe f8f4 	bl	8001fe8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e045      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x444>
 8003e1a:	e03d      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e038      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x4ec>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d028      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d121      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0cc      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90c      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e067      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4934      	ldr	r1, [pc, #208]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7fe f826 	bl	8001fe8 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fe f822 	bl	8001fe8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e04f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d20c      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f821 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	490a      	ldr	r1, [pc, #40]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd ff86 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	08007b20 	.word	0x08007b20
 800406c:	20000000 	.word	0x20000000
 8004070:	20000004 	.word	0x20000004

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b090      	sub	sp, #64	; 0x40
 800407a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
 8004080:	2300      	movs	r3, #0
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004084:	2300      	movs	r3, #0
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408c:	4b59      	ldr	r3, [pc, #356]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d00d      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004098:	2b08      	cmp	r3, #8
 800409a:	f200 80a1 	bhi.w	80041e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x34>
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x3a>
 80040a6:	e09b      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80040aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040ac:	e09b      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ae:	4b53      	ldr	r3, [pc, #332]	; (80041fc <HAL_RCC_GetSysClockFreq+0x188>)
 80040b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040b2:	e098      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b4:	4b4f      	ldr	r3, [pc, #316]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040be:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d028      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ca:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	2200      	movs	r2, #0
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	627a      	str	r2, [r7, #36]	; 0x24
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040dc:	2100      	movs	r1, #0
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_RCC_GetSysClockFreq+0x188>)
 80040e0:	fb03 f201 	mul.w	r2, r3, r1
 80040e4:	2300      	movs	r3, #0
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	4a43      	ldr	r2, [pc, #268]	; (80041fc <HAL_RCC_GetSysClockFreq+0x188>)
 80040ee:	fba0 1202 	umull	r1, r2, r0, r2
 80040f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f4:	460a      	mov	r2, r1
 80040f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80040f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fa:	4413      	add	r3, r2
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	2200      	movs	r2, #0
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	61fa      	str	r2, [r7, #28]
 8004106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800410e:	f7fc f8cf 	bl	80002b0 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4613      	mov	r3, r2
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800411a:	e053      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	2200      	movs	r2, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	617a      	str	r2, [r7, #20]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800412e:	f04f 0b00 	mov.w	fp, #0
 8004132:	4652      	mov	r2, sl
 8004134:	465b      	mov	r3, fp
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004144:	0150      	lsls	r0, r2, #5
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	ebb2 080a 	subs.w	r8, r2, sl
 800414e:	eb63 090b 	sbc.w	r9, r3, fp
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800415e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004162:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004166:	ebb2 0408 	subs.w	r4, r2, r8
 800416a:	eb63 0509 	sbc.w	r5, r3, r9
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	00eb      	lsls	r3, r5, #3
 8004178:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417c:	00e2      	lsls	r2, r4, #3
 800417e:	4614      	mov	r4, r2
 8004180:	461d      	mov	r5, r3
 8004182:	eb14 030a 	adds.w	r3, r4, sl
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	eb45 030b 	adc.w	r3, r5, fp
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800419a:	4629      	mov	r1, r5
 800419c:	028b      	lsls	r3, r1, #10
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a4:	4621      	mov	r1, r4
 80041a6:	028a      	lsls	r2, r1, #10
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	2200      	movs	r2, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	60fa      	str	r2, [r7, #12]
 80041b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b8:	f7fc f87a 	bl	80002b0 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	3301      	adds	r3, #1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041de:	e002      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80041e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3740      	adds	r7, #64	; 0x40
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	017d7840 	.word	0x017d7840

08004200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <HAL_RCC_GetHCLKFreq+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000000 	.word	0x20000000

08004218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800421c:	f7ff fff0 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0a9b      	lsrs	r3, r3, #10
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4903      	ldr	r1, [pc, #12]	; (800423c <HAL_RCC_GetPCLK1Freq+0x24>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	08007b30 	.word	0x08007b30

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004244:	f7ff ffdc 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0b5b      	lsrs	r3, r3, #13
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	08007b30 	.word	0x08007b30

08004268 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800428c:	2b00      	cmp	r3, #0
 800428e:	d038      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004290:	4b68      	ldr	r3, [pc, #416]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004296:	f7fd fea7 	bl	8001fe8 <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800429e:	f7fd fea3 	bl	8001fe8 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0bd      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b0:	4b61      	ldr	r3, [pc, #388]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f0      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	071b      	lsls	r3, r3, #28
 80042ce:	495a      	ldr	r1, [pc, #360]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042d6:	4b57      	ldr	r3, [pc, #348]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fd fe84 	bl	8001fe8 <HAL_GetTick>
 80042e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042e4:	f7fd fe80 	bl	8001fe8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e09a      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f6:	4b50      	ldr	r3, [pc, #320]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8083 	beq.w	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	4b48      	ldr	r3, [pc, #288]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4a47      	ldr	r2, [pc, #284]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431e:	6413      	str	r3, [r2, #64]	; 0x40
 8004320:	4b45      	ldr	r3, [pc, #276]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800432c:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a42      	ldr	r2, [pc, #264]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004336:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004338:	f7fd fe56 	bl	8001fe8 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004340:	f7fd fe52 	bl	8001fe8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e06c      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004352:	4b3a      	ldr	r3, [pc, #232]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004366:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02f      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x166>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d028      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437c:	4b2e      	ldr	r3, [pc, #184]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800438c:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004392:	4a29      	ldr	r2, [pc, #164]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d114      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fd fe20 	bl	8001fe8 <HAL_GetTick>
 80043a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fd fe1c 	bl	8001fe8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e034      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ee      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043da:	d10d      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80043dc:	4b16      	ldr	r3, [pc, #88]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f0:	4911      	ldr	r1, [pc, #68]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004410:	4909      	ldr	r1, [pc, #36]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7d1a      	ldrb	r2, [r3, #20]
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004428:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	42470068 	.word	0x42470068
 8004438:	40023800 	.word	0x40023800
 800443c:	40007000 	.word	0x40007000
 8004440:	42470e40 	.word	0x42470e40
 8004444:	424711e0 	.word	0x424711e0

08004448 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e066      	b.n	800452c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7f5b      	ldrb	r3, [r3, #29]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc ffb0 	bl	80013d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	22ca      	movs	r2, #202	; 0xca
 8004480:	625a      	str	r2, [r3, #36]	; 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2253      	movs	r2, #83	; 0x53
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9ab 	bl	80047e6 <RTC_EnterInitMode>
 8004490:	4603      	mov	r3, r0
 8004492:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d12c      	bne.n	80044f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68d2      	ldr	r2, [r2, #12]
 80044d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6919      	ldr	r1, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	041a      	lsls	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9b2 	bl	8004854 <RTC_ExitInitMode>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d113      	bne.n	8004522 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	22ff      	movs	r2, #255	; 0xff
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004566:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800456a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004586:	b2da      	uxtb	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	0d9b      	lsrs	r3, r3, #22
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d11a      	bne.n	80045e6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f98f 	bl	80048d8 <RTC_Bcd2ToByte>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	785b      	ldrb	r3, [r3, #1]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f986 	bl	80048d8 <RTC_Bcd2ToByte>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	789b      	ldrb	r3, [r3, #2]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f97d 	bl	80048d8 <RTC_Bcd2ToByte>
 80045de:	4603      	mov	r3, r0
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	7f1b      	ldrb	r3, [r3, #28]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_RTC_SetDate+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e071      	b.n	80046f0 <HAL_RTC_SetDate+0x100>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2202      	movs	r2, #2
 8004616:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10e      	bne.n	800463c <HAL_RTC_SetDate+0x4c>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	b2db      	uxtb	r3, r3
 8004634:	330a      	adds	r3, #10
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11c      	bne.n	800467c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	78db      	ldrb	r3, [r3, #3]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f929 	bl	800489e <RTC_ByteToBcd2>
 800464c:	4603      	mov	r3, r0
 800464e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f922 	bl	800489e <RTC_ByteToBcd2>
 800465a:	4603      	mov	r3, r0
 800465c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800465e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	789b      	ldrb	r3, [r3, #2]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f91a 	bl	800489e <RTC_ByteToBcd2>
 800466a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800466c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e00e      	b.n	800469a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	78db      	ldrb	r3, [r3, #3]
 8004680:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004688:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800468e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	22ca      	movs	r2, #202	; 0xca
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2253      	movs	r2, #83	; 0x53
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f89b 	bl	80047e6 <RTC_EnterInitMode>
 80046b0:	4603      	mov	r3, r0
 80046b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f8c2 	bl	8004854 <RTC_ExitInitMode>
 80046d0:	4603      	mov	r3, r0
 80046d2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	22ff      	movs	r2, #255	; 0xff
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	771a      	strb	r2, [r3, #28]

  return status;
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}

080046f8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004712:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004716:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	0b5b      	lsrs	r3, r3, #13
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11a      	bne.n	800478c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f8bc 	bl	80048d8 <RTC_Bcd2ToByte>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f8b3 	bl	80048d8 <RTC_Bcd2ToByte>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f8aa 	bl	80048d8 <RTC_Bcd2ToByte>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047b0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b2:	f7fd fc19 	bl	8001fe8 <HAL_GetTick>
 80047b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047b8:	e009      	b.n	80047ce <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ba:	f7fd fc15 	bl	8001fe8 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047c8:	d901      	bls.n	80047ce <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e007      	b.n	80047de <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ee      	beq.n	80047ba <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d122      	bne.n	800484a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004812:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004814:	f7fd fbe8 	bl	8001fe8 <HAL_GetTick>
 8004818:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800481a:	e00c      	b.n	8004836 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800481c:	f7fd fbe4 	bl	8001fe8 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800482a:	d904      	bls.n	8004836 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2204      	movs	r2, #4
 8004830:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <RTC_EnterInitMode+0x64>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d1e8      	bne.n	800481c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800486e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff89 	bl	8004796 <HAL_RTC_WaitForSynchro>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2204      	movs	r2, #4
 800488e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	4603      	mov	r3, r0
 80048a6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80048ac:	e005      	b.n	80048ba <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	3301      	adds	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	3b0a      	subs	r3, #10
 80048b8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	2b09      	cmp	r3, #9
 80048be:	d8f6      	bhi.n	80048ae <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	b2db      	uxtb	r3, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	4413      	add	r3, r2
 8004902:	b2db      	uxtb	r3, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e041      	b.n	80049a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fc fec6 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fd60 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e041      	b.n	8004a44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f839 	bl	8004a4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f000 fd11 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e022      	b.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d109      	bne.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x46>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2301      	moveq	r3, #1
 8004aa0:	2300      	movne	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e015      	b.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start_DMA+0x60>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e008      	b.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e15d      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <HAL_TIM_PWM_Start_DMA+0x94>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e022      	b.n	8004b3a <HAL_TIM_PWM_Start_DMA+0xda>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d109      	bne.n	8004b0e <HAL_TIM_PWM_Start_DMA+0xae>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	bf0c      	ite	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	2300      	movne	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e015      	b.n	8004b3a <HAL_TIM_PWM_Start_DMA+0xda>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d109      	bne.n	8004b28 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e008      	b.n	8004b3a <HAL_TIM_PWM_Start_DMA+0xda>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d024      	beq.n	8004b88 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_PWM_Start_DMA+0xee>
 8004b44:	887b      	ldrh	r3, [r7, #2]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e123      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5c:	e016      	b.n	8004b8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	e00e      	b.n	8004b8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	e006      	b.n	8004b8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b86:	e001      	b.n	8004b8c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e104      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	f200 80ae 	bhi.w	8004cf0 <HAL_TIM_PWM_Start_DMA+0x290>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004cf1 	.word	0x08004cf1
 8004ba4:	08004cf1 	.word	0x08004cf1
 8004ba8:	08004cf1 	.word	0x08004cf1
 8004bac:	08004c19 	.word	0x08004c19
 8004bb0:	08004cf1 	.word	0x08004cf1
 8004bb4:	08004cf1 	.word	0x08004cf1
 8004bb8:	08004cf1 	.word	0x08004cf1
 8004bbc:	08004c61 	.word	0x08004c61
 8004bc0:	08004cf1 	.word	0x08004cf1
 8004bc4:	08004cf1 	.word	0x08004cf1
 8004bc8:	08004cf1 	.word	0x08004cf1
 8004bcc:	08004ca9 	.word	0x08004ca9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	4a72      	ldr	r2, [pc, #456]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	4a71      	ldr	r2, [pc, #452]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	4a70      	ldr	r2, [pc, #448]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004be6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3334      	adds	r3, #52	; 0x34
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	f7fd fbe6 	bl	80023c8 <HAL_DMA_Start_IT>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0c7      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	60da      	str	r2, [r3, #12]
      break;
 8004c16:	e06e      	b.n	8004cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	4a60      	ldr	r2, [pc, #384]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	4a5f      	ldr	r2, [pc, #380]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	4a5e      	ldr	r2, [pc, #376]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3338      	adds	r3, #56	; 0x38
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	f7fd fbc2 	bl	80023c8 <HAL_DMA_Start_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0a3      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c5c:	60da      	str	r2, [r3, #12]
      break;
 8004c5e:	e04a      	b.n	8004cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	4a4e      	ldr	r2, [pc, #312]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	4a4d      	ldr	r2, [pc, #308]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4a4c      	ldr	r2, [pc, #304]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	333c      	adds	r3, #60	; 0x3c
 8004c84:	461a      	mov	r2, r3
 8004c86:	887b      	ldrh	r3, [r7, #2]
 8004c88:	f7fd fb9e 	bl	80023c8 <HAL_DMA_Start_IT>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e07f      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca4:	60da      	str	r2, [r3, #12]
      break;
 8004ca6:	e026      	b.n	8004cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	4a3c      	ldr	r2, [pc, #240]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004cae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	4a3b      	ldr	r2, [pc, #236]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004cbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3340      	adds	r3, #64	; 0x40
 8004ccc:	461a      	mov	r2, r3
 8004cce:	887b      	ldrh	r3, [r7, #2]
 8004cd0:	f7fd fb7a 	bl	80023c8 <HAL_DMA_Start_IT>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e05b      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cec:	60da      	str	r2, [r3, #12]
      break;
 8004cee:	e002      	b.n	8004cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d14b      	bne.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2201      	movs	r2, #1
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fe2b 	bl	8005960 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a27      	ldr	r2, [pc, #156]	; (8004dac <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d013      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a18      	ldr	r2, [pc, #96]	; (8004dbc <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b06      	cmp	r3, #6
 8004d70:	d010      	beq.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d82:	e007      	b.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	08005305 	.word	0x08005305
 8004da4:	080053ad 	.word	0x080053ad
 8004da8:	08005273 	.word	0x08005273
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800
 8004db8:	40000c00 	.word	0x40000c00
 8004dbc:	40014000 	.word	0x40014000

08004dc0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d855      	bhi.n	8004e80 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004e11 	.word	0x08004e11
 8004de0:	08004e81 	.word	0x08004e81
 8004de4:	08004e81 	.word	0x08004e81
 8004de8:	08004e81 	.word	0x08004e81
 8004dec:	08004e2d 	.word	0x08004e2d
 8004df0:	08004e81 	.word	0x08004e81
 8004df4:	08004e81 	.word	0x08004e81
 8004df8:	08004e81 	.word	0x08004e81
 8004dfc:	08004e49 	.word	0x08004e49
 8004e00:	08004e81 	.word	0x08004e81
 8004e04:	08004e81 	.word	0x08004e81
 8004e08:	08004e81 	.word	0x08004e81
 8004e0c:	08004e65 	.word	0x08004e65
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd fb97 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 8004e2a:	e02c      	b.n	8004e86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fd fb89 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 8004e46:	e01e      	b.n	8004e86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fd fb7b 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 8004e62:	e010      	b.n	8004e86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fd fb6d 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 8004e7e:	e002      	b.n	8004e86 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d157      	bne.n	8004f3c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2200      	movs	r2, #0
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fd63 	bl	8005960 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d117      	bne.n	8004ed4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10f      	bne.n	8004ed4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a1a      	ldr	r2, [r3, #32]
 8004eba:	f240 4344 	movw	r3, #1092	; 0x444
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a1a      	ldr	r2, [r3, #32]
 8004eda:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10f      	bne.n	8004f04 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	f240 4344 	movw	r3, #1092	; 0x444
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f12:	e013      	b.n	8004f3c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f22:	e00b      	b.n	8004f3c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d104      	bne.n	8004f34 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f32:	e003      	b.n	8004f3c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000

08004f4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e0ae      	b.n	80050c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b0c      	cmp	r3, #12
 8004f76:	f200 809f 	bhi.w	80050b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	080050b9 	.word	0x080050b9
 8004f88:	080050b9 	.word	0x080050b9
 8004f8c:	080050b9 	.word	0x080050b9
 8004f90:	08004ff5 	.word	0x08004ff5
 8004f94:	080050b9 	.word	0x080050b9
 8004f98:	080050b9 	.word	0x080050b9
 8004f9c:	080050b9 	.word	0x080050b9
 8004fa0:	08005037 	.word	0x08005037
 8004fa4:	080050b9 	.word	0x080050b9
 8004fa8:	080050b9 	.word	0x080050b9
 8004fac:	080050b9 	.word	0x080050b9
 8004fb0:	08005077 	.word	0x08005077
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 faaa 	bl	8005514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0208 	orr.w	r2, r2, #8
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0204 	bic.w	r2, r2, #4
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	619a      	str	r2, [r3, #24]
      break;
 8004ff2:	e064      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 faf0 	bl	80055e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6999      	ldr	r1, [r3, #24]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	021a      	lsls	r2, r3, #8
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	619a      	str	r2, [r3, #24]
      break;
 8005034:	e043      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fb3b 	bl	80056b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0208 	orr.w	r2, r2, #8
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0204 	bic.w	r2, r2, #4
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	61da      	str	r2, [r3, #28]
      break;
 8005074:	e023      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fb85 	bl	800578c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69d9      	ldr	r1, [r3, #28]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	021a      	lsls	r2, r3, #8
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	61da      	str	r2, [r3, #28]
      break;
 80050b6:	e002      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
      break;
 80050bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_TIM_ConfigClockSource+0x1c>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e0b4      	b.n	8005256 <HAL_TIM_ConfigClockSource+0x186>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800510a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005124:	d03e      	beq.n	80051a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	f200 8087 	bhi.w	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	f000 8086 	beq.w	8005242 <HAL_TIM_ConfigClockSource+0x172>
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d87f      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b70      	cmp	r3, #112	; 0x70
 800513e:	d01a      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0xa6>
 8005140:	2b70      	cmp	r3, #112	; 0x70
 8005142:	d87b      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b60      	cmp	r3, #96	; 0x60
 8005146:	d050      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x11a>
 8005148:	2b60      	cmp	r3, #96	; 0x60
 800514a:	d877      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b50      	cmp	r3, #80	; 0x50
 800514e:	d03c      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0xfa>
 8005150:	2b50      	cmp	r3, #80	; 0x50
 8005152:	d873      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d058      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x13a>
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d86f      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b30      	cmp	r3, #48	; 0x30
 800515e:	d064      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005160:	2b30      	cmp	r3, #48	; 0x30
 8005162:	d86b      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d060      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	2b20      	cmp	r3, #32
 800516a:	d867      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05c      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	2b10      	cmp	r3, #16
 8005172:	d05a      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15a>
 8005174:	e062      	b.n	800523c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6899      	ldr	r1, [r3, #8]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f000 fbcb 	bl	8005920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	609a      	str	r2, [r3, #8]
      break;
 80051a2:	e04f      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6899      	ldr	r1, [r3, #8]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f000 fbb4 	bl	8005920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c6:	609a      	str	r2, [r3, #8]
      break;
 80051c8:	e03c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 fb28 	bl	800582c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2150      	movs	r1, #80	; 0x50
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fb81 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 80051e8:	e02c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 fb47 	bl	800588a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2160      	movs	r1, #96	; 0x60
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fb71 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 8005208:	e01c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	461a      	mov	r2, r3
 8005218:	f000 fb08 	bl	800582c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fb61 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 8005228:	e00c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f000 fb58 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 800523a:	e003      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e000      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d107      	bne.n	800529a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005298:	e02a      	b.n	80052f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d107      	bne.n	80052b4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2202      	movs	r2, #2
 80052a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b2:	e01d      	b.n	80052f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d107      	bne.n	80052ce <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2204      	movs	r2, #4
 80052c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052cc:	e010      	b.n	80052f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d107      	bne.n	80052e8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2208      	movs	r2, #8
 80052dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e6:	e003      	b.n	80052f0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f7ff ffb4 	bl	800525e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d10b      	bne.n	8005334 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d136      	bne.n	8005398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005332:	e031      	b.n	8005398 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d10b      	bne.n	8005356 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2202      	movs	r2, #2
 8005342:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d125      	bne.n	8005398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005354:	e020      	b.n	8005398 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d10b      	bne.n	8005378 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2204      	movs	r2, #4
 8005364:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d114      	bne.n	8005398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005376:	e00f      	b.n	8005398 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	d10a      	bne.n	8005398 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2208      	movs	r2, #8
 8005386:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7fc fc6f 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d103      	bne.n	80053cc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	771a      	strb	r2, [r3, #28]
 80053ca:	e019      	b.n	8005400 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d103      	bne.n	80053de <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2202      	movs	r2, #2
 80053da:	771a      	strb	r2, [r3, #28]
 80053dc:	e010      	b.n	8005400 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d103      	bne.n	80053f0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2204      	movs	r2, #4
 80053ec:	771a      	strb	r2, [r3, #28]
 80053ee:	e007      	b.n	8005400 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d102      	bne.n	8005400 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2208      	movs	r2, #8
 80053fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7fc fbbb 	bl	8001b7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a34      	ldr	r2, [pc, #208]	; (80054f8 <TIM_Base_SetConfig+0xe4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00f      	beq.n	800544c <TIM_Base_SetConfig+0x38>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d00b      	beq.n	800544c <TIM_Base_SetConfig+0x38>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a31      	ldr	r2, [pc, #196]	; (80054fc <TIM_Base_SetConfig+0xe8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_Base_SetConfig+0x38>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a30      	ldr	r2, [pc, #192]	; (8005500 <TIM_Base_SetConfig+0xec>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_Base_SetConfig+0x38>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a2f      	ldr	r2, [pc, #188]	; (8005504 <TIM_Base_SetConfig+0xf0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d108      	bne.n	800545e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a25      	ldr	r2, [pc, #148]	; (80054f8 <TIM_Base_SetConfig+0xe4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01b      	beq.n	800549e <TIM_Base_SetConfig+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d017      	beq.n	800549e <TIM_Base_SetConfig+0x8a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <TIM_Base_SetConfig+0xe8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <TIM_Base_SetConfig+0x8a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <TIM_Base_SetConfig+0xec>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <TIM_Base_SetConfig+0x8a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a20      	ldr	r2, [pc, #128]	; (8005504 <TIM_Base_SetConfig+0xf0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00b      	beq.n	800549e <TIM_Base_SetConfig+0x8a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <TIM_Base_SetConfig+0xf4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_Base_SetConfig+0x8a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1e      	ldr	r2, [pc, #120]	; (800550c <TIM_Base_SetConfig+0xf8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_Base_SetConfig+0x8a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <TIM_Base_SetConfig+0xfc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d108      	bne.n	80054b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <TIM_Base_SetConfig+0xe4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d103      	bne.n	80054e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	615a      	str	r2, [r3, #20]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800

08005514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 0302 	bic.w	r3, r3, #2
 800555c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <TIM_OC1_SetConfig+0xc8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d10c      	bne.n	800558a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f023 0308 	bic.w	r3, r3, #8
 8005576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <TIM_OC1_SetConfig+0xc8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d111      	bne.n	80055b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40010000 	.word	0x40010000

080055e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0210 	bic.w	r2, r3, #16
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f023 0320 	bic.w	r3, r3, #32
 800562a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <TIM_OC2_SetConfig+0xd4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10d      	bne.n	800565c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <TIM_OC2_SetConfig+0xd4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d113      	bne.n	800568c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800566a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000

080056b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1d      	ldr	r2, [pc, #116]	; (8005788 <TIM_OC3_SetConfig+0xd0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10d      	bne.n	8005732 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800571c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a14      	ldr	r2, [pc, #80]	; (8005788 <TIM_OC3_SetConfig+0xd0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d113      	bne.n	8005762 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40010000 	.word	0x40010000

0800578c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	031b      	lsls	r3, r3, #12
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a10      	ldr	r2, [pc, #64]	; (8005828 <TIM_OC4_SetConfig+0x9c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d109      	bne.n	8005800 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	019b      	lsls	r3, r3, #6
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40010000 	.word	0x40010000

0800582c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0201 	bic.w	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 030a 	bic.w	r3, r3, #10
 8005868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800588a:	b480      	push	{r7}
 800588c:	b087      	sub	sp, #28
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0210 	bic.w	r2, r3, #16
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	031b      	lsls	r3, r3, #12
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	f043 0307 	orr.w	r3, r3, #7
 800590c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	609a      	str	r2, [r3, #8]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800593a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	021a      	lsls	r2, r3, #8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	431a      	orrs	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4313      	orrs	r3, r2
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	609a      	str	r2, [r3, #8]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2201      	movs	r2, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	43db      	mvns	r3, r3
 8005982:	401a      	ands	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a1a      	ldr	r2, [r3, #32]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	431a      	orrs	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	621a      	str	r2, [r3, #32]
}
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e050      	b.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1c      	ldr	r2, [pc, #112]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d013      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40014000 	.word	0x40014000

08005a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e03d      	b.n	8005b20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e03f      	b.n	8005bbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fb fe70 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2224      	movs	r2, #36	; 0x24
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fddf 	bl	8006734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b08a      	sub	sp, #40	; 0x28
 8005bca:	af02      	add	r7, sp, #8
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d17c      	bne.n	8005ce0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_UART_Transmit+0x2c>
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e075      	b.n	8005ce2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Transmit+0x3e>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e06e      	b.n	8005ce2 <HAL_UART_Transmit+0x11c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2221      	movs	r2, #33	; 0x21
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c1a:	f7fc f9e5 	bl	8001fe8 <HAL_GetTick>
 8005c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c34:	d108      	bne.n	8005c48 <HAL_UART_Transmit+0x82>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	e003      	b.n	8005c50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c58:	e02a      	b.n	8005cb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2200      	movs	r2, #0
 8005c62:	2180      	movs	r1, #128	; 0x80
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fb1f 	bl	80062a8 <UART_WaitOnFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e036      	b.n	8005ce2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	e007      	b.n	8005ca2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	781a      	ldrb	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1cf      	bne.n	8005c5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2140      	movs	r1, #64	; 0x40
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 faef 	bl	80062a8 <UART_WaitOnFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e006      	b.n	8005ce2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d11d      	bne.n	8005d40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_UART_Receive_IT+0x26>
 8005d0a:	88fb      	ldrh	r3, [r7, #6]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e016      	b.n	8005d42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_UART_Receive_IT+0x38>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e00f      	b.n	8005d42 <HAL_UART_Receive_IT+0x58>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	461a      	mov	r2, r3
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fb24 	bl	8006384 <UART_Start_Receive_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b0ba      	sub	sp, #232	; 0xe8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_UART_IRQHandler+0x66>
 8005d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fc07 	bl	80065be <UART_Receive_IT>
      return;
 8005db0:	e256      	b.n	8006260 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 80de 	beq.w	8005f78 <HAL_UART_IRQHandler+0x22c>
 8005dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80d1 	beq.w	8005f78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <HAL_UART_IRQHandler+0xae>
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <HAL_UART_IRQHandler+0xd2>
 8005e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f043 0202 	orr.w	r2, r3, #2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_UART_IRQHandler+0xf6>
 8005e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d011      	beq.n	8005e72 <HAL_UART_IRQHandler+0x126>
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d105      	bne.n	8005e66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f043 0208 	orr.w	r2, r3, #8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 81ed 	beq.w	8006256 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <HAL_UART_IRQHandler+0x14e>
 8005e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb92 	bl	80065be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d103      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x17a>
 8005ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d04f      	beq.n	8005f66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa9a 	bl	8006400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d141      	bne.n	8005f5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1d9      	bne.n	8005eda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d013      	beq.n	8005f56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	4a7d      	ldr	r2, [pc, #500]	; (8006128 <HAL_UART_IRQHandler+0x3dc>)
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fc fb0c 	bl	8002558 <HAL_DMA_Abort_IT>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f50:	4610      	mov	r0, r2
 8005f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	e00e      	b.n	8005f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f990 	bl	800627c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e00a      	b.n	8005f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f98c 	bl	800627c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	e006      	b.n	8005f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f988 	bl	800627c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f72:	e170      	b.n	8006256 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	bf00      	nop
    return;
 8005f76:	e16e      	b.n	8006256 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	f040 814a 	bne.w	8006216 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f86:	f003 0310 	and.w	r3, r3, #16
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8143 	beq.w	8006216 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 813c 	beq.w	8006216 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	f040 80b4 	bne.w	800612c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8140 	beq.w	800625a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	f080 8139 	bcs.w	800625a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffa:	f000 8088 	beq.w	800610e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800601c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800602a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800602e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006036:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1d9      	bne.n	8005ffe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3314      	adds	r3, #20
 8006050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800605a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3314      	adds	r3, #20
 800606a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800606e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006072:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006076:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e1      	bne.n	800604a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3314      	adds	r3, #20
 80060a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e3      	bne.n	8006086 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060de:	f023 0310 	bic.w	r3, r3, #16
 80060e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	330c      	adds	r3, #12
 80060ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80060f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e3      	bne.n	80060cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	4618      	mov	r0, r3
 800610a:	f7fc f9b5 	bl	8002478 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006116:	b29b      	uxth	r3, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	b29b      	uxth	r3, r3
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8b6 	bl	8006290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006124:	e099      	b.n	800625a <HAL_UART_IRQHandler+0x50e>
 8006126:	bf00      	nop
 8006128:	080064c7 	.word	0x080064c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006134:	b29b      	uxth	r3, r3
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 808b 	beq.w	800625e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8086 	beq.w	800625e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006176:	647a      	str	r2, [r7, #68]	; 0x44
 8006178:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800617c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e3      	bne.n	8006152 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	623b      	str	r3, [r7, #32]
   return(result);
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3314      	adds	r3, #20
 80061aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061ae:	633a      	str	r2, [r7, #48]	; 0x30
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e3      	bne.n	800618a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0310 	bic.w	r3, r3, #16
 80061e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	330c      	adds	r3, #12
 80061f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	69b9      	ldr	r1, [r7, #24]
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	617b      	str	r3, [r7, #20]
   return(result);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e3      	bne.n	80061d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f83e 	bl	8006290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006214:	e023      	b.n	800625e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_UART_IRQHandler+0x4ea>
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f95d 	bl	80064ee <UART_Transmit_IT>
    return;
 8006234:	e014      	b.n	8006260 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <HAL_UART_IRQHandler+0x514>
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f99d 	bl	800658e <UART_EndTransmit_IT>
    return;
 8006254:	e004      	b.n	8006260 <HAL_UART_IRQHandler+0x514>
    return;
 8006256:	bf00      	nop
 8006258:	e002      	b.n	8006260 <HAL_UART_IRQHandler+0x514>
      return;
 800625a:	bf00      	nop
 800625c:	e000      	b.n	8006260 <HAL_UART_IRQHandler+0x514>
      return;
 800625e:	bf00      	nop
  }
}
 8006260:	37e8      	adds	r7, #232	; 0xe8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop

08006268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b090      	sub	sp, #64	; 0x40
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b8:	e050      	b.n	800635c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d04c      	beq.n	800635c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062c8:	f7fb fe8e 	bl	8001fe8 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d241      	bcs.n	800635c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062f8:	637a      	str	r2, [r7, #52]	; 0x34
 80062fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e5      	bne.n	80062d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3314      	adds	r3, #20
 8006312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	613b      	str	r3, [r7, #16]
   return(result);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800632c:	623a      	str	r2, [r7, #32]
 800632e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	69f9      	ldr	r1, [r7, #28]
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	61bb      	str	r3, [r7, #24]
   return(result);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e00f      	b.n	800637c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4013      	ands	r3, r2
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	bf0c      	ite	eq
 800636c:	2301      	moveq	r3, #1
 800636e:	2300      	movne	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	429a      	cmp	r2, r3
 8006378:	d09f      	beq.n	80062ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3740      	adds	r7, #64	; 0x40
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	88fa      	ldrh	r2, [r7, #6]
 80063a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2222      	movs	r2, #34	; 0x22
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0220 	orr.w	r2, r2, #32
 80063f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b095      	sub	sp, #84	; 0x54
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006428:	643a      	str	r2, [r7, #64]	; 0x40
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800642e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e5      	bne.n	8006408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3314      	adds	r3, #20
 8006442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	61fb      	str	r3, [r7, #28]
   return(result);
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	64bb      	str	r3, [r7, #72]	; 0x48
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3314      	adds	r3, #20
 800645a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800645c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e5      	bne.n	800643c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	2b01      	cmp	r3, #1
 8006476:	d119      	bne.n	80064ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	330c      	adds	r3, #12
 800647e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	60bb      	str	r3, [r7, #8]
   return(result);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0310 	bic.w	r3, r3, #16
 800648e:	647b      	str	r3, [r7, #68]	; 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006498:	61ba      	str	r2, [r7, #24]
 800649a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6979      	ldr	r1, [r7, #20]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	613b      	str	r3, [r7, #16]
   return(result);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e5      	bne.n	8006478 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064ba:	bf00      	nop
 80064bc:	3754      	adds	r7, #84	; 0x54
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f7ff fecb 	bl	800627c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b21      	cmp	r3, #33	; 0x21
 8006500:	d13e      	bne.n	8006580 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650a:	d114      	bne.n	8006536 <UART_Transmit_IT+0x48>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d110      	bne.n	8006536 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	621a      	str	r2, [r3, #32]
 8006534:	e008      	b.n	8006548 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6211      	str	r1, [r2, #32]
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4619      	mov	r1, r3
 8006556:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10f      	bne.n	800657c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800656a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fe5a 	bl	8006268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b08c      	sub	sp, #48	; 0x30
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b22      	cmp	r3, #34	; 0x22
 80065d0:	f040 80ab 	bne.w	800672a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d117      	bne.n	800660e <UART_Receive_IT+0x50>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d113      	bne.n	800660e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	1c9a      	adds	r2, r3, #2
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
 800660c:	e026      	b.n	800665c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006620:	d007      	beq.n	8006632 <UART_Receive_IT+0x74>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <UART_Receive_IT+0x82>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e008      	b.n	8006652 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664c:	b2da      	uxtb	r2, r3
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4619      	mov	r1, r3
 800666a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800666c:	2b00      	cmp	r3, #0
 800666e:	d15a      	bne.n	8006726 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0220 	bic.w	r2, r2, #32
 800667e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800668e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d135      	bne.n	800671c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	613b      	str	r3, [r7, #16]
   return(result);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f023 0310 	bic.w	r3, r3, #16
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d6:	623a      	str	r2, [r7, #32]
 80066d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	69f9      	ldr	r1, [r7, #28]
 80066dc:	6a3a      	ldr	r2, [r7, #32]
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e5      	bne.n	80066b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d10a      	bne.n	800670e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fdbb 	bl	8006290 <HAL_UARTEx_RxEventCallback>
 800671a:	e002      	b.n	8006722 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fa fb97 	bl	8000e50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e002      	b.n	800672c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	e000      	b.n	800672c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800672a:	2302      	movs	r3, #2
  }
}
 800672c:	4618      	mov	r0, r3
 800672e:	3730      	adds	r7, #48	; 0x30
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006738:	b0c0      	sub	sp, #256	; 0x100
 800673a:	af00      	add	r7, sp, #0
 800673c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006750:	68d9      	ldr	r1, [r3, #12]
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	ea40 0301 	orr.w	r3, r0, r1
 800675c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800675e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	431a      	orrs	r2, r3
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	431a      	orrs	r2, r3
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800678c:	f021 010c 	bic.w	r1, r1, #12
 8006790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800679a:	430b      	orrs	r3, r1
 800679c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ae:	6999      	ldr	r1, [r3, #24]
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	ea40 0301 	orr.w	r3, r0, r1
 80067ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b8f      	ldr	r3, [pc, #572]	; (8006a00 <UART_SetConfig+0x2cc>)
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d005      	beq.n	80067d4 <UART_SetConfig+0xa0>
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b8d      	ldr	r3, [pc, #564]	; (8006a04 <UART_SetConfig+0x2d0>)
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d104      	bne.n	80067de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fd fd34 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 80067d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067dc:	e003      	b.n	80067e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067de:	f7fd fd1b 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 80067e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f0:	f040 810c 	bne.w	8006a0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006806:	4622      	mov	r2, r4
 8006808:	462b      	mov	r3, r5
 800680a:	1891      	adds	r1, r2, r2
 800680c:	65b9      	str	r1, [r7, #88]	; 0x58
 800680e:	415b      	adcs	r3, r3
 8006810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006816:	4621      	mov	r1, r4
 8006818:	eb12 0801 	adds.w	r8, r2, r1
 800681c:	4629      	mov	r1, r5
 800681e:	eb43 0901 	adc.w	r9, r3, r1
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800682e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006836:	4690      	mov	r8, r2
 8006838:	4699      	mov	r9, r3
 800683a:	4623      	mov	r3, r4
 800683c:	eb18 0303 	adds.w	r3, r8, r3
 8006840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006844:	462b      	mov	r3, r5
 8006846:	eb49 0303 	adc.w	r3, r9, r3
 800684a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800685a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800685e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006862:	460b      	mov	r3, r1
 8006864:	18db      	adds	r3, r3, r3
 8006866:	653b      	str	r3, [r7, #80]	; 0x50
 8006868:	4613      	mov	r3, r2
 800686a:	eb42 0303 	adc.w	r3, r2, r3
 800686e:	657b      	str	r3, [r7, #84]	; 0x54
 8006870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006878:	f7f9 fd1a 	bl	80002b0 <__aeabi_uldivmod>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4b61      	ldr	r3, [pc, #388]	; (8006a08 <UART_SetConfig+0x2d4>)
 8006882:	fba3 2302 	umull	r2, r3, r3, r2
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	011c      	lsls	r4, r3, #4
 800688a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800688e:	2200      	movs	r2, #0
 8006890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006894:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	1891      	adds	r1, r2, r2
 80068a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80068a4:	415b      	adcs	r3, r3
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068ac:	4641      	mov	r1, r8
 80068ae:	eb12 0a01 	adds.w	sl, r2, r1
 80068b2:	4649      	mov	r1, r9
 80068b4:	eb43 0b01 	adc.w	fp, r3, r1
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068cc:	4692      	mov	sl, r2
 80068ce:	469b      	mov	fp, r3
 80068d0:	4643      	mov	r3, r8
 80068d2:	eb1a 0303 	adds.w	r3, sl, r3
 80068d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068da:	464b      	mov	r3, r9
 80068dc:	eb4b 0303 	adc.w	r3, fp, r3
 80068e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068f8:	460b      	mov	r3, r1
 80068fa:	18db      	adds	r3, r3, r3
 80068fc:	643b      	str	r3, [r7, #64]	; 0x40
 80068fe:	4613      	mov	r3, r2
 8006900:	eb42 0303 	adc.w	r3, r2, r3
 8006904:	647b      	str	r3, [r7, #68]	; 0x44
 8006906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800690a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800690e:	f7f9 fccf 	bl	80002b0 <__aeabi_uldivmod>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4611      	mov	r1, r2
 8006918:	4b3b      	ldr	r3, [pc, #236]	; (8006a08 <UART_SetConfig+0x2d4>)
 800691a:	fba3 2301 	umull	r2, r3, r3, r1
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	2264      	movs	r2, #100	; 0x64
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	1acb      	subs	r3, r1, r3
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800692e:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <UART_SetConfig+0x2d4>)
 8006930:	fba3 2302 	umull	r2, r3, r3, r2
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800693c:	441c      	add	r4, r3
 800693e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006942:	2200      	movs	r2, #0
 8006944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006948:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800694c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	1891      	adds	r1, r2, r2
 8006956:	63b9      	str	r1, [r7, #56]	; 0x38
 8006958:	415b      	adcs	r3, r3
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800695c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006960:	4641      	mov	r1, r8
 8006962:	1851      	adds	r1, r2, r1
 8006964:	6339      	str	r1, [r7, #48]	; 0x30
 8006966:	4649      	mov	r1, r9
 8006968:	414b      	adcs	r3, r1
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006978:	4659      	mov	r1, fp
 800697a:	00cb      	lsls	r3, r1, #3
 800697c:	4651      	mov	r1, sl
 800697e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006982:	4651      	mov	r1, sl
 8006984:	00ca      	lsls	r2, r1, #3
 8006986:	4610      	mov	r0, r2
 8006988:	4619      	mov	r1, r3
 800698a:	4603      	mov	r3, r0
 800698c:	4642      	mov	r2, r8
 800698e:	189b      	adds	r3, r3, r2
 8006990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006994:	464b      	mov	r3, r9
 8006996:	460a      	mov	r2, r1
 8006998:	eb42 0303 	adc.w	r3, r2, r3
 800699c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069b4:	460b      	mov	r3, r1
 80069b6:	18db      	adds	r3, r3, r3
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ba:	4613      	mov	r3, r2
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069ca:	f7f9 fc71 	bl	80002b0 <__aeabi_uldivmod>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <UART_SetConfig+0x2d4>)
 80069d4:	fba3 1302 	umull	r1, r3, r3, r2
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	2164      	movs	r1, #100	; 0x64
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	3332      	adds	r3, #50	; 0x32
 80069e6:	4a08      	ldr	r2, [pc, #32]	; (8006a08 <UART_SetConfig+0x2d4>)
 80069e8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	f003 0207 	and.w	r2, r3, #7
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4422      	add	r2, r4
 80069fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069fc:	e105      	b.n	8006c0a <UART_SetConfig+0x4d6>
 80069fe:	bf00      	nop
 8006a00:	40011000 	.word	0x40011000
 8006a04:	40011400 	.word	0x40011400
 8006a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a1e:	4642      	mov	r2, r8
 8006a20:	464b      	mov	r3, r9
 8006a22:	1891      	adds	r1, r2, r2
 8006a24:	6239      	str	r1, [r7, #32]
 8006a26:	415b      	adcs	r3, r3
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a2e:	4641      	mov	r1, r8
 8006a30:	1854      	adds	r4, r2, r1
 8006a32:	4649      	mov	r1, r9
 8006a34:	eb43 0501 	adc.w	r5, r3, r1
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	00eb      	lsls	r3, r5, #3
 8006a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a46:	00e2      	lsls	r2, r4, #3
 8006a48:	4614      	mov	r4, r2
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	4643      	mov	r3, r8
 8006a4e:	18e3      	adds	r3, r4, r3
 8006a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a54:	464b      	mov	r3, r9
 8006a56:	eb45 0303 	adc.w	r3, r5, r3
 8006a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	008b      	lsls	r3, r1, #2
 8006a7e:	4621      	mov	r1, r4
 8006a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a84:	4621      	mov	r1, r4
 8006a86:	008a      	lsls	r2, r1, #2
 8006a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a8c:	f7f9 fc10 	bl	80002b0 <__aeabi_uldivmod>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4b60      	ldr	r3, [pc, #384]	; (8006c18 <UART_SetConfig+0x4e4>)
 8006a96:	fba3 2302 	umull	r2, r3, r3, r2
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	011c      	lsls	r4, r3, #4
 8006a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006aa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	1891      	adds	r1, r2, r2
 8006ab6:	61b9      	str	r1, [r7, #24]
 8006ab8:	415b      	adcs	r3, r3
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	1851      	adds	r1, r2, r1
 8006ac4:	6139      	str	r1, [r7, #16]
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	414b      	adcs	r3, r1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ad8:	4659      	mov	r1, fp
 8006ada:	00cb      	lsls	r3, r1, #3
 8006adc:	4651      	mov	r1, sl
 8006ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	00ca      	lsls	r2, r1, #3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4603      	mov	r3, r0
 8006aec:	4642      	mov	r2, r8
 8006aee:	189b      	adds	r3, r3, r2
 8006af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006af4:	464b      	mov	r3, r9
 8006af6:	460a      	mov	r2, r1
 8006af8:	eb42 0303 	adc.w	r3, r2, r3
 8006afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b18:	4649      	mov	r1, r9
 8006b1a:	008b      	lsls	r3, r1, #2
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b22:	4641      	mov	r1, r8
 8006b24:	008a      	lsls	r2, r1, #2
 8006b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b2a:	f7f9 fbc1 	bl	80002b0 <__aeabi_uldivmod>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <UART_SetConfig+0x4e4>)
 8006b34:	fba3 1302 	umull	r1, r3, r3, r2
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	2164      	movs	r1, #100	; 0x64
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	3332      	adds	r3, #50	; 0x32
 8006b46:	4a34      	ldr	r2, [pc, #208]	; (8006c18 <UART_SetConfig+0x4e4>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b52:	441c      	add	r4, r3
 8006b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b58:	2200      	movs	r2, #0
 8006b5a:	673b      	str	r3, [r7, #112]	; 0x70
 8006b5c:	677a      	str	r2, [r7, #116]	; 0x74
 8006b5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b62:	4642      	mov	r2, r8
 8006b64:	464b      	mov	r3, r9
 8006b66:	1891      	adds	r1, r2, r2
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	415b      	adcs	r3, r3
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b72:	4641      	mov	r1, r8
 8006b74:	1851      	adds	r1, r2, r1
 8006b76:	6039      	str	r1, [r7, #0]
 8006b78:	4649      	mov	r1, r9
 8006b7a:	414b      	adcs	r3, r1
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	00cb      	lsls	r3, r1, #3
 8006b8e:	4651      	mov	r1, sl
 8006b90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b94:	4651      	mov	r1, sl
 8006b96:	00ca      	lsls	r2, r1, #3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	189b      	adds	r3, r3, r2
 8006ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	eb42 0303 	adc.w	r3, r2, r3
 8006bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb8:	667a      	str	r2, [r7, #100]	; 0x64
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	008b      	lsls	r3, r1, #2
 8006bca:	4641      	mov	r1, r8
 8006bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bd0:	4641      	mov	r1, r8
 8006bd2:	008a      	lsls	r2, r1, #2
 8006bd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bd8:	f7f9 fb6a 	bl	80002b0 <__aeabi_uldivmod>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <UART_SetConfig+0x4e4>)
 8006be2:	fba3 1302 	umull	r1, r3, r3, r2
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	2164      	movs	r1, #100	; 0x64
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	3332      	adds	r3, #50	; 0x32
 8006bf4:	4a08      	ldr	r2, [pc, #32]	; (8006c18 <UART_SetConfig+0x4e4>)
 8006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	f003 020f 	and.w	r2, r3, #15
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4422      	add	r2, r4
 8006c08:	609a      	str	r2, [r3, #8]
}
 8006c0a:	bf00      	nop
 8006c0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c10:	46bd      	mov	sp, r7
 8006c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c16:	bf00      	nop
 8006c18:	51eb851f 	.word	0x51eb851f

08006c1c <atoi>:
 8006c1c:	220a      	movs	r2, #10
 8006c1e:	2100      	movs	r1, #0
 8006c20:	f000 b8fe 	b.w	8006e20 <strtol>

08006c24 <__errno>:
 8006c24:	4b01      	ldr	r3, [pc, #4]	; (8006c2c <__errno+0x8>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	2000000c 	.word	0x2000000c

08006c30 <__libc_init_array>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	4d0d      	ldr	r5, [pc, #52]	; (8006c68 <__libc_init_array+0x38>)
 8006c34:	4c0d      	ldr	r4, [pc, #52]	; (8006c6c <__libc_init_array+0x3c>)
 8006c36:	1b64      	subs	r4, r4, r5
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	2600      	movs	r6, #0
 8006c3c:	42a6      	cmp	r6, r4
 8006c3e:	d109      	bne.n	8006c54 <__libc_init_array+0x24>
 8006c40:	4d0b      	ldr	r5, [pc, #44]	; (8006c70 <__libc_init_array+0x40>)
 8006c42:	4c0c      	ldr	r4, [pc, #48]	; (8006c74 <__libc_init_array+0x44>)
 8006c44:	f000 fd44 	bl	80076d0 <_init>
 8006c48:	1b64      	subs	r4, r4, r5
 8006c4a:	10a4      	asrs	r4, r4, #2
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	42a6      	cmp	r6, r4
 8006c50:	d105      	bne.n	8006c5e <__libc_init_array+0x2e>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c58:	4798      	blx	r3
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	e7ee      	b.n	8006c3c <__libc_init_array+0xc>
 8006c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c62:	4798      	blx	r3
 8006c64:	3601      	adds	r6, #1
 8006c66:	e7f2      	b.n	8006c4e <__libc_init_array+0x1e>
 8006c68:	08007c7c 	.word	0x08007c7c
 8006c6c:	08007c7c 	.word	0x08007c7c
 8006c70:	08007c7c 	.word	0x08007c7c
 8006c74:	08007c80 	.word	0x08007c80

08006c78 <memset>:
 8006c78:	4402      	add	r2, r0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d100      	bne.n	8006c82 <memset+0xa>
 8006c80:	4770      	bx	lr
 8006c82:	f803 1b01 	strb.w	r1, [r3], #1
 8006c86:	e7f9      	b.n	8006c7c <memset+0x4>

08006c88 <siprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b500      	push	{lr}
 8006c8c:	b09c      	sub	sp, #112	; 0x70
 8006c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c90:	9002      	str	r0, [sp, #8]
 8006c92:	9006      	str	r0, [sp, #24]
 8006c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c98:	4809      	ldr	r0, [pc, #36]	; (8006cc0 <siprintf+0x38>)
 8006c9a:	9107      	str	r1, [sp, #28]
 8006c9c:	9104      	str	r1, [sp, #16]
 8006c9e:	4909      	ldr	r1, [pc, #36]	; (8006cc4 <siprintf+0x3c>)
 8006ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca4:	9105      	str	r1, [sp, #20]
 8006ca6:	6800      	ldr	r0, [r0, #0]
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	a902      	add	r1, sp, #8
 8006cac:	f000 f91e 	bl	8006eec <_svfiprintf_r>
 8006cb0:	9b02      	ldr	r3, [sp, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	b01c      	add	sp, #112	; 0x70
 8006cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cbc:	b003      	add	sp, #12
 8006cbe:	4770      	bx	lr
 8006cc0:	2000000c 	.word	0x2000000c
 8006cc4:	ffff0208 	.word	0xffff0208

08006cc8 <strchr>:
 8006cc8:	b2c9      	uxtb	r1, r1
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd0:	b11a      	cbz	r2, 8006cda <strchr+0x12>
 8006cd2:	428a      	cmp	r2, r1
 8006cd4:	d1f9      	bne.n	8006cca <strchr+0x2>
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	4770      	bx	lr
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	bf18      	it	ne
 8006cde:	2300      	movne	r3, #0
 8006ce0:	e7f9      	b.n	8006cd6 <strchr+0xe>

08006ce2 <strcpy>:
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce8:	f803 2b01 	strb.w	r2, [r3], #1
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	d1f9      	bne.n	8006ce4 <strcpy+0x2>
 8006cf0:	4770      	bx	lr

08006cf2 <strncmp>:
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	b17a      	cbz	r2, 8006d16 <strncmp+0x24>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	3901      	subs	r1, #1
 8006cfa:	1884      	adds	r4, r0, r2
 8006cfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006d04:	4290      	cmp	r0, r2
 8006d06:	d101      	bne.n	8006d0c <strncmp+0x1a>
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d101      	bne.n	8006d10 <strncmp+0x1e>
 8006d0c:	1a80      	subs	r0, r0, r2
 8006d0e:	bd10      	pop	{r4, pc}
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d1f3      	bne.n	8006cfc <strncmp+0xa>
 8006d14:	e7fa      	b.n	8006d0c <strncmp+0x1a>
 8006d16:	4610      	mov	r0, r2
 8006d18:	e7f9      	b.n	8006d0e <strncmp+0x1c>
	...

08006d1c <_strtol_l.constprop.0>:
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d22:	d001      	beq.n	8006d28 <_strtol_l.constprop.0+0xc>
 8006d24:	2b24      	cmp	r3, #36	; 0x24
 8006d26:	d906      	bls.n	8006d36 <_strtol_l.constprop.0+0x1a>
 8006d28:	f7ff ff7c 	bl	8006c24 <__errno>
 8006d2c:	2316      	movs	r3, #22
 8006d2e:	6003      	str	r3, [r0, #0]
 8006d30:	2000      	movs	r0, #0
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e1c <_strtol_l.constprop.0+0x100>
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	462e      	mov	r6, r5
 8006d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d42:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006d46:	f017 0708 	ands.w	r7, r7, #8
 8006d4a:	d1f7      	bne.n	8006d3c <_strtol_l.constprop.0+0x20>
 8006d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d4e:	d132      	bne.n	8006db6 <_strtol_l.constprop.0+0x9a>
 8006d50:	782c      	ldrb	r4, [r5, #0]
 8006d52:	2701      	movs	r7, #1
 8006d54:	1cb5      	adds	r5, r6, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d05b      	beq.n	8006e12 <_strtol_l.constprop.0+0xf6>
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d109      	bne.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006d5e:	2c30      	cmp	r4, #48	; 0x30
 8006d60:	d107      	bne.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006d62:	782c      	ldrb	r4, [r5, #0]
 8006d64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d68:	2c58      	cmp	r4, #88	; 0x58
 8006d6a:	d14d      	bne.n	8006e08 <_strtol_l.constprop.0+0xec>
 8006d6c:	786c      	ldrb	r4, [r5, #1]
 8006d6e:	2310      	movs	r3, #16
 8006d70:	3502      	adds	r5, #2
 8006d72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d76:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d7a:	f04f 0c00 	mov.w	ip, #0
 8006d7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006d82:	4666      	mov	r6, ip
 8006d84:	fb03 8a19 	mls	sl, r3, r9, r8
 8006d88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006d8c:	f1be 0f09 	cmp.w	lr, #9
 8006d90:	d816      	bhi.n	8006dc0 <_strtol_l.constprop.0+0xa4>
 8006d92:	4674      	mov	r4, lr
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	dd24      	ble.n	8006de2 <_strtol_l.constprop.0+0xc6>
 8006d98:	f1bc 0f00 	cmp.w	ip, #0
 8006d9c:	db1e      	blt.n	8006ddc <_strtol_l.constprop.0+0xc0>
 8006d9e:	45b1      	cmp	r9, r6
 8006da0:	d31c      	bcc.n	8006ddc <_strtol_l.constprop.0+0xc0>
 8006da2:	d101      	bne.n	8006da8 <_strtol_l.constprop.0+0x8c>
 8006da4:	45a2      	cmp	sl, r4
 8006da6:	db19      	blt.n	8006ddc <_strtol_l.constprop.0+0xc0>
 8006da8:	fb06 4603 	mla	r6, r6, r3, r4
 8006dac:	f04f 0c01 	mov.w	ip, #1
 8006db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006db4:	e7e8      	b.n	8006d88 <_strtol_l.constprop.0+0x6c>
 8006db6:	2c2b      	cmp	r4, #43	; 0x2b
 8006db8:	bf04      	itt	eq
 8006dba:	782c      	ldrbeq	r4, [r5, #0]
 8006dbc:	1cb5      	addeq	r5, r6, #2
 8006dbe:	e7ca      	b.n	8006d56 <_strtol_l.constprop.0+0x3a>
 8006dc0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006dc4:	f1be 0f19 	cmp.w	lr, #25
 8006dc8:	d801      	bhi.n	8006dce <_strtol_l.constprop.0+0xb2>
 8006dca:	3c37      	subs	r4, #55	; 0x37
 8006dcc:	e7e2      	b.n	8006d94 <_strtol_l.constprop.0+0x78>
 8006dce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006dd2:	f1be 0f19 	cmp.w	lr, #25
 8006dd6:	d804      	bhi.n	8006de2 <_strtol_l.constprop.0+0xc6>
 8006dd8:	3c57      	subs	r4, #87	; 0x57
 8006dda:	e7db      	b.n	8006d94 <_strtol_l.constprop.0+0x78>
 8006ddc:	f04f 3cff 	mov.w	ip, #4294967295
 8006de0:	e7e6      	b.n	8006db0 <_strtol_l.constprop.0+0x94>
 8006de2:	f1bc 0f00 	cmp.w	ip, #0
 8006de6:	da05      	bge.n	8006df4 <_strtol_l.constprop.0+0xd8>
 8006de8:	2322      	movs	r3, #34	; 0x22
 8006dea:	6003      	str	r3, [r0, #0]
 8006dec:	4646      	mov	r6, r8
 8006dee:	b942      	cbnz	r2, 8006e02 <_strtol_l.constprop.0+0xe6>
 8006df0:	4630      	mov	r0, r6
 8006df2:	e79e      	b.n	8006d32 <_strtol_l.constprop.0+0x16>
 8006df4:	b107      	cbz	r7, 8006df8 <_strtol_l.constprop.0+0xdc>
 8006df6:	4276      	negs	r6, r6
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	d0f9      	beq.n	8006df0 <_strtol_l.constprop.0+0xd4>
 8006dfc:	f1bc 0f00 	cmp.w	ip, #0
 8006e00:	d000      	beq.n	8006e04 <_strtol_l.constprop.0+0xe8>
 8006e02:	1e69      	subs	r1, r5, #1
 8006e04:	6011      	str	r1, [r2, #0]
 8006e06:	e7f3      	b.n	8006df0 <_strtol_l.constprop.0+0xd4>
 8006e08:	2430      	movs	r4, #48	; 0x30
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1b1      	bne.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	e7af      	b.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006e12:	2c30      	cmp	r4, #48	; 0x30
 8006e14:	d0a5      	beq.n	8006d62 <_strtol_l.constprop.0+0x46>
 8006e16:	230a      	movs	r3, #10
 8006e18:	e7ab      	b.n	8006d72 <_strtol_l.constprop.0+0x56>
 8006e1a:	bf00      	nop
 8006e1c:	08007b41 	.word	0x08007b41

08006e20 <strtol>:
 8006e20:	4613      	mov	r3, r2
 8006e22:	460a      	mov	r2, r1
 8006e24:	4601      	mov	r1, r0
 8006e26:	4802      	ldr	r0, [pc, #8]	; (8006e30 <strtol+0x10>)
 8006e28:	6800      	ldr	r0, [r0, #0]
 8006e2a:	f7ff bf77 	b.w	8006d1c <_strtol_l.constprop.0>
 8006e2e:	bf00      	nop
 8006e30:	2000000c 	.word	0x2000000c

08006e34 <__ssputs_r>:
 8006e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	688e      	ldr	r6, [r1, #8]
 8006e3a:	429e      	cmp	r6, r3
 8006e3c:	4682      	mov	sl, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	4690      	mov	r8, r2
 8006e42:	461f      	mov	r7, r3
 8006e44:	d838      	bhi.n	8006eb8 <__ssputs_r+0x84>
 8006e46:	898a      	ldrh	r2, [r1, #12]
 8006e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e4c:	d032      	beq.n	8006eb4 <__ssputs_r+0x80>
 8006e4e:	6825      	ldr	r5, [r4, #0]
 8006e50:	6909      	ldr	r1, [r1, #16]
 8006e52:	eba5 0901 	sub.w	r9, r5, r1
 8006e56:	6965      	ldr	r5, [r4, #20]
 8006e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e60:	3301      	adds	r3, #1
 8006e62:	444b      	add	r3, r9
 8006e64:	106d      	asrs	r5, r5, #1
 8006e66:	429d      	cmp	r5, r3
 8006e68:	bf38      	it	cc
 8006e6a:	461d      	movcc	r5, r3
 8006e6c:	0553      	lsls	r3, r2, #21
 8006e6e:	d531      	bpl.n	8006ed4 <__ssputs_r+0xa0>
 8006e70:	4629      	mov	r1, r5
 8006e72:	f000 fb63 	bl	800753c <_malloc_r>
 8006e76:	4606      	mov	r6, r0
 8006e78:	b950      	cbnz	r0, 8006e90 <__ssputs_r+0x5c>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	f8ca 3000 	str.w	r3, [sl]
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e90:	6921      	ldr	r1, [r4, #16]
 8006e92:	464a      	mov	r2, r9
 8006e94:	f000 fabe 	bl	8007414 <memcpy>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	6126      	str	r6, [r4, #16]
 8006ea6:	6165      	str	r5, [r4, #20]
 8006ea8:	444e      	add	r6, r9
 8006eaa:	eba5 0509 	sub.w	r5, r5, r9
 8006eae:	6026      	str	r6, [r4, #0]
 8006eb0:	60a5      	str	r5, [r4, #8]
 8006eb2:	463e      	mov	r6, r7
 8006eb4:	42be      	cmp	r6, r7
 8006eb6:	d900      	bls.n	8006eba <__ssputs_r+0x86>
 8006eb8:	463e      	mov	r6, r7
 8006eba:	6820      	ldr	r0, [r4, #0]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	4641      	mov	r1, r8
 8006ec0:	f000 fab6 	bl	8007430 <memmove>
 8006ec4:	68a3      	ldr	r3, [r4, #8]
 8006ec6:	1b9b      	subs	r3, r3, r6
 8006ec8:	60a3      	str	r3, [r4, #8]
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	4433      	add	r3, r6
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e7db      	b.n	8006e8c <__ssputs_r+0x58>
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	f000 fba5 	bl	8007624 <_realloc_r>
 8006eda:	4606      	mov	r6, r0
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d1e1      	bne.n	8006ea4 <__ssputs_r+0x70>
 8006ee0:	6921      	ldr	r1, [r4, #16]
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	f000 fabe 	bl	8007464 <_free_r>
 8006ee8:	e7c7      	b.n	8006e7a <__ssputs_r+0x46>
	...

08006eec <_svfiprintf_r>:
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	4698      	mov	r8, r3
 8006ef2:	898b      	ldrh	r3, [r1, #12]
 8006ef4:	061b      	lsls	r3, r3, #24
 8006ef6:	b09d      	sub	sp, #116	; 0x74
 8006ef8:	4607      	mov	r7, r0
 8006efa:	460d      	mov	r5, r1
 8006efc:	4614      	mov	r4, r2
 8006efe:	d50e      	bpl.n	8006f1e <_svfiprintf_r+0x32>
 8006f00:	690b      	ldr	r3, [r1, #16]
 8006f02:	b963      	cbnz	r3, 8006f1e <_svfiprintf_r+0x32>
 8006f04:	2140      	movs	r1, #64	; 0x40
 8006f06:	f000 fb19 	bl	800753c <_malloc_r>
 8006f0a:	6028      	str	r0, [r5, #0]
 8006f0c:	6128      	str	r0, [r5, #16]
 8006f0e:	b920      	cbnz	r0, 8006f1a <_svfiprintf_r+0x2e>
 8006f10:	230c      	movs	r3, #12
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	e0d1      	b.n	80070be <_svfiprintf_r+0x1d2>
 8006f1a:	2340      	movs	r3, #64	; 0x40
 8006f1c:	616b      	str	r3, [r5, #20]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9309      	str	r3, [sp, #36]	; 0x24
 8006f22:	2320      	movs	r3, #32
 8006f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f2c:	2330      	movs	r3, #48	; 0x30
 8006f2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070d8 <_svfiprintf_r+0x1ec>
 8006f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f36:	f04f 0901 	mov.w	r9, #1
 8006f3a:	4623      	mov	r3, r4
 8006f3c:	469a      	mov	sl, r3
 8006f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f42:	b10a      	cbz	r2, 8006f48 <_svfiprintf_r+0x5c>
 8006f44:	2a25      	cmp	r2, #37	; 0x25
 8006f46:	d1f9      	bne.n	8006f3c <_svfiprintf_r+0x50>
 8006f48:	ebba 0b04 	subs.w	fp, sl, r4
 8006f4c:	d00b      	beq.n	8006f66 <_svfiprintf_r+0x7a>
 8006f4e:	465b      	mov	r3, fp
 8006f50:	4622      	mov	r2, r4
 8006f52:	4629      	mov	r1, r5
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7ff ff6d 	bl	8006e34 <__ssputs_r>
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f000 80aa 	beq.w	80070b4 <_svfiprintf_r+0x1c8>
 8006f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f62:	445a      	add	r2, fp
 8006f64:	9209      	str	r2, [sp, #36]	; 0x24
 8006f66:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80a2 	beq.w	80070b4 <_svfiprintf_r+0x1c8>
 8006f70:	2300      	movs	r3, #0
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f7a:	f10a 0a01 	add.w	sl, sl, #1
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	9307      	str	r3, [sp, #28]
 8006f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f86:	931a      	str	r3, [sp, #104]	; 0x68
 8006f88:	4654      	mov	r4, sl
 8006f8a:	2205      	movs	r2, #5
 8006f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f90:	4851      	ldr	r0, [pc, #324]	; (80070d8 <_svfiprintf_r+0x1ec>)
 8006f92:	f7f9 f93d 	bl	8000210 <memchr>
 8006f96:	9a04      	ldr	r2, [sp, #16]
 8006f98:	b9d8      	cbnz	r0, 8006fd2 <_svfiprintf_r+0xe6>
 8006f9a:	06d0      	lsls	r0, r2, #27
 8006f9c:	bf44      	itt	mi
 8006f9e:	2320      	movmi	r3, #32
 8006fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa4:	0711      	lsls	r1, r2, #28
 8006fa6:	bf44      	itt	mi
 8006fa8:	232b      	movmi	r3, #43	; 0x2b
 8006faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fae:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb4:	d015      	beq.n	8006fe2 <_svfiprintf_r+0xf6>
 8006fb6:	9a07      	ldr	r2, [sp, #28]
 8006fb8:	4654      	mov	r4, sl
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f04f 0c0a 	mov.w	ip, #10
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc6:	3b30      	subs	r3, #48	; 0x30
 8006fc8:	2b09      	cmp	r3, #9
 8006fca:	d94e      	bls.n	800706a <_svfiprintf_r+0x17e>
 8006fcc:	b1b0      	cbz	r0, 8006ffc <_svfiprintf_r+0x110>
 8006fce:	9207      	str	r2, [sp, #28]
 8006fd0:	e014      	b.n	8006ffc <_svfiprintf_r+0x110>
 8006fd2:	eba0 0308 	sub.w	r3, r0, r8
 8006fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	9304      	str	r3, [sp, #16]
 8006fde:	46a2      	mov	sl, r4
 8006fe0:	e7d2      	b.n	8006f88 <_svfiprintf_r+0x9c>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	1d19      	adds	r1, r3, #4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	9103      	str	r1, [sp, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bfbb      	ittet	lt
 8006fee:	425b      	neglt	r3, r3
 8006ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff4:	9307      	strge	r3, [sp, #28]
 8006ff6:	9307      	strlt	r3, [sp, #28]
 8006ff8:	bfb8      	it	lt
 8006ffa:	9204      	strlt	r2, [sp, #16]
 8006ffc:	7823      	ldrb	r3, [r4, #0]
 8006ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8007000:	d10c      	bne.n	800701c <_svfiprintf_r+0x130>
 8007002:	7863      	ldrb	r3, [r4, #1]
 8007004:	2b2a      	cmp	r3, #42	; 0x2a
 8007006:	d135      	bne.n	8007074 <_svfiprintf_r+0x188>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	1d1a      	adds	r2, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	9203      	str	r2, [sp, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfb8      	it	lt
 8007014:	f04f 33ff 	movlt.w	r3, #4294967295
 8007018:	3402      	adds	r4, #2
 800701a:	9305      	str	r3, [sp, #20]
 800701c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070e8 <_svfiprintf_r+0x1fc>
 8007020:	7821      	ldrb	r1, [r4, #0]
 8007022:	2203      	movs	r2, #3
 8007024:	4650      	mov	r0, sl
 8007026:	f7f9 f8f3 	bl	8000210 <memchr>
 800702a:	b140      	cbz	r0, 800703e <_svfiprintf_r+0x152>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	eba0 000a 	sub.w	r0, r0, sl
 8007032:	fa03 f000 	lsl.w	r0, r3, r0
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	4303      	orrs	r3, r0
 800703a:	3401      	adds	r4, #1
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007042:	4826      	ldr	r0, [pc, #152]	; (80070dc <_svfiprintf_r+0x1f0>)
 8007044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007048:	2206      	movs	r2, #6
 800704a:	f7f9 f8e1 	bl	8000210 <memchr>
 800704e:	2800      	cmp	r0, #0
 8007050:	d038      	beq.n	80070c4 <_svfiprintf_r+0x1d8>
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <_svfiprintf_r+0x1f4>)
 8007054:	bb1b      	cbnz	r3, 800709e <_svfiprintf_r+0x1b2>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	3307      	adds	r3, #7
 800705a:	f023 0307 	bic.w	r3, r3, #7
 800705e:	3308      	adds	r3, #8
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007064:	4433      	add	r3, r6
 8007066:	9309      	str	r3, [sp, #36]	; 0x24
 8007068:	e767      	b.n	8006f3a <_svfiprintf_r+0x4e>
 800706a:	fb0c 3202 	mla	r2, ip, r2, r3
 800706e:	460c      	mov	r4, r1
 8007070:	2001      	movs	r0, #1
 8007072:	e7a5      	b.n	8006fc0 <_svfiprintf_r+0xd4>
 8007074:	2300      	movs	r3, #0
 8007076:	3401      	adds	r4, #1
 8007078:	9305      	str	r3, [sp, #20]
 800707a:	4619      	mov	r1, r3
 800707c:	f04f 0c0a 	mov.w	ip, #10
 8007080:	4620      	mov	r0, r4
 8007082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007086:	3a30      	subs	r2, #48	; 0x30
 8007088:	2a09      	cmp	r2, #9
 800708a:	d903      	bls.n	8007094 <_svfiprintf_r+0x1a8>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0c5      	beq.n	800701c <_svfiprintf_r+0x130>
 8007090:	9105      	str	r1, [sp, #20]
 8007092:	e7c3      	b.n	800701c <_svfiprintf_r+0x130>
 8007094:	fb0c 2101 	mla	r1, ip, r1, r2
 8007098:	4604      	mov	r4, r0
 800709a:	2301      	movs	r3, #1
 800709c:	e7f0      	b.n	8007080 <_svfiprintf_r+0x194>
 800709e:	ab03      	add	r3, sp, #12
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	462a      	mov	r2, r5
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <_svfiprintf_r+0x1f8>)
 80070a6:	a904      	add	r1, sp, #16
 80070a8:	4638      	mov	r0, r7
 80070aa:	f3af 8000 	nop.w
 80070ae:	1c42      	adds	r2, r0, #1
 80070b0:	4606      	mov	r6, r0
 80070b2:	d1d6      	bne.n	8007062 <_svfiprintf_r+0x176>
 80070b4:	89ab      	ldrh	r3, [r5, #12]
 80070b6:	065b      	lsls	r3, r3, #25
 80070b8:	f53f af2c 	bmi.w	8006f14 <_svfiprintf_r+0x28>
 80070bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070be:	b01d      	add	sp, #116	; 0x74
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	ab03      	add	r3, sp, #12
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	462a      	mov	r2, r5
 80070ca:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <_svfiprintf_r+0x1f8>)
 80070cc:	a904      	add	r1, sp, #16
 80070ce:	4638      	mov	r0, r7
 80070d0:	f000 f87a 	bl	80071c8 <_printf_i>
 80070d4:	e7eb      	b.n	80070ae <_svfiprintf_r+0x1c2>
 80070d6:	bf00      	nop
 80070d8:	08007c41 	.word	0x08007c41
 80070dc:	08007c4b 	.word	0x08007c4b
 80070e0:	00000000 	.word	0x00000000
 80070e4:	08006e35 	.word	0x08006e35
 80070e8:	08007c47 	.word	0x08007c47

080070ec <_printf_common>:
 80070ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	4616      	mov	r6, r2
 80070f2:	4699      	mov	r9, r3
 80070f4:	688a      	ldr	r2, [r1, #8]
 80070f6:	690b      	ldr	r3, [r1, #16]
 80070f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070fc:	4293      	cmp	r3, r2
 80070fe:	bfb8      	it	lt
 8007100:	4613      	movlt	r3, r2
 8007102:	6033      	str	r3, [r6, #0]
 8007104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007108:	4607      	mov	r7, r0
 800710a:	460c      	mov	r4, r1
 800710c:	b10a      	cbz	r2, 8007112 <_printf_common+0x26>
 800710e:	3301      	adds	r3, #1
 8007110:	6033      	str	r3, [r6, #0]
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	0699      	lsls	r1, r3, #26
 8007116:	bf42      	ittt	mi
 8007118:	6833      	ldrmi	r3, [r6, #0]
 800711a:	3302      	addmi	r3, #2
 800711c:	6033      	strmi	r3, [r6, #0]
 800711e:	6825      	ldr	r5, [r4, #0]
 8007120:	f015 0506 	ands.w	r5, r5, #6
 8007124:	d106      	bne.n	8007134 <_printf_common+0x48>
 8007126:	f104 0a19 	add.w	sl, r4, #25
 800712a:	68e3      	ldr	r3, [r4, #12]
 800712c:	6832      	ldr	r2, [r6, #0]
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	42ab      	cmp	r3, r5
 8007132:	dc26      	bgt.n	8007182 <_printf_common+0x96>
 8007134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007138:	1e13      	subs	r3, r2, #0
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	bf18      	it	ne
 800713e:	2301      	movne	r3, #1
 8007140:	0692      	lsls	r2, r2, #26
 8007142:	d42b      	bmi.n	800719c <_printf_common+0xb0>
 8007144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007148:	4649      	mov	r1, r9
 800714a:	4638      	mov	r0, r7
 800714c:	47c0      	blx	r8
 800714e:	3001      	adds	r0, #1
 8007150:	d01e      	beq.n	8007190 <_printf_common+0xa4>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	68e5      	ldr	r5, [r4, #12]
 8007156:	6832      	ldr	r2, [r6, #0]
 8007158:	f003 0306 	and.w	r3, r3, #6
 800715c:	2b04      	cmp	r3, #4
 800715e:	bf08      	it	eq
 8007160:	1aad      	subeq	r5, r5, r2
 8007162:	68a3      	ldr	r3, [r4, #8]
 8007164:	6922      	ldr	r2, [r4, #16]
 8007166:	bf0c      	ite	eq
 8007168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800716c:	2500      	movne	r5, #0
 800716e:	4293      	cmp	r3, r2
 8007170:	bfc4      	itt	gt
 8007172:	1a9b      	subgt	r3, r3, r2
 8007174:	18ed      	addgt	r5, r5, r3
 8007176:	2600      	movs	r6, #0
 8007178:	341a      	adds	r4, #26
 800717a:	42b5      	cmp	r5, r6
 800717c:	d11a      	bne.n	80071b4 <_printf_common+0xc8>
 800717e:	2000      	movs	r0, #0
 8007180:	e008      	b.n	8007194 <_printf_common+0xa8>
 8007182:	2301      	movs	r3, #1
 8007184:	4652      	mov	r2, sl
 8007186:	4649      	mov	r1, r9
 8007188:	4638      	mov	r0, r7
 800718a:	47c0      	blx	r8
 800718c:	3001      	adds	r0, #1
 800718e:	d103      	bne.n	8007198 <_printf_common+0xac>
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007198:	3501      	adds	r5, #1
 800719a:	e7c6      	b.n	800712a <_printf_common+0x3e>
 800719c:	18e1      	adds	r1, r4, r3
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	2030      	movs	r0, #48	; 0x30
 80071a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071a6:	4422      	add	r2, r4
 80071a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071b0:	3302      	adds	r3, #2
 80071b2:	e7c7      	b.n	8007144 <_printf_common+0x58>
 80071b4:	2301      	movs	r3, #1
 80071b6:	4622      	mov	r2, r4
 80071b8:	4649      	mov	r1, r9
 80071ba:	4638      	mov	r0, r7
 80071bc:	47c0      	blx	r8
 80071be:	3001      	adds	r0, #1
 80071c0:	d0e6      	beq.n	8007190 <_printf_common+0xa4>
 80071c2:	3601      	adds	r6, #1
 80071c4:	e7d9      	b.n	800717a <_printf_common+0x8e>
	...

080071c8 <_printf_i>:
 80071c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	7e0f      	ldrb	r7, [r1, #24]
 80071ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071d0:	2f78      	cmp	r7, #120	; 0x78
 80071d2:	4691      	mov	r9, r2
 80071d4:	4680      	mov	r8, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	469a      	mov	sl, r3
 80071da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071de:	d807      	bhi.n	80071f0 <_printf_i+0x28>
 80071e0:	2f62      	cmp	r7, #98	; 0x62
 80071e2:	d80a      	bhi.n	80071fa <_printf_i+0x32>
 80071e4:	2f00      	cmp	r7, #0
 80071e6:	f000 80d8 	beq.w	800739a <_printf_i+0x1d2>
 80071ea:	2f58      	cmp	r7, #88	; 0x58
 80071ec:	f000 80a3 	beq.w	8007336 <_printf_i+0x16e>
 80071f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071f8:	e03a      	b.n	8007270 <_printf_i+0xa8>
 80071fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071fe:	2b15      	cmp	r3, #21
 8007200:	d8f6      	bhi.n	80071f0 <_printf_i+0x28>
 8007202:	a101      	add	r1, pc, #4	; (adr r1, 8007208 <_printf_i+0x40>)
 8007204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007208:	08007261 	.word	0x08007261
 800720c:	08007275 	.word	0x08007275
 8007210:	080071f1 	.word	0x080071f1
 8007214:	080071f1 	.word	0x080071f1
 8007218:	080071f1 	.word	0x080071f1
 800721c:	080071f1 	.word	0x080071f1
 8007220:	08007275 	.word	0x08007275
 8007224:	080071f1 	.word	0x080071f1
 8007228:	080071f1 	.word	0x080071f1
 800722c:	080071f1 	.word	0x080071f1
 8007230:	080071f1 	.word	0x080071f1
 8007234:	08007381 	.word	0x08007381
 8007238:	080072a5 	.word	0x080072a5
 800723c:	08007363 	.word	0x08007363
 8007240:	080071f1 	.word	0x080071f1
 8007244:	080071f1 	.word	0x080071f1
 8007248:	080073a3 	.word	0x080073a3
 800724c:	080071f1 	.word	0x080071f1
 8007250:	080072a5 	.word	0x080072a5
 8007254:	080071f1 	.word	0x080071f1
 8007258:	080071f1 	.word	0x080071f1
 800725c:	0800736b 	.word	0x0800736b
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	1d1a      	adds	r2, r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	602a      	str	r2, [r5, #0]
 8007268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800726c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007270:	2301      	movs	r3, #1
 8007272:	e0a3      	b.n	80073bc <_printf_i+0x1f4>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	6829      	ldr	r1, [r5, #0]
 8007278:	0606      	lsls	r6, r0, #24
 800727a:	f101 0304 	add.w	r3, r1, #4
 800727e:	d50a      	bpl.n	8007296 <_printf_i+0xce>
 8007280:	680e      	ldr	r6, [r1, #0]
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	2e00      	cmp	r6, #0
 8007286:	da03      	bge.n	8007290 <_printf_i+0xc8>
 8007288:	232d      	movs	r3, #45	; 0x2d
 800728a:	4276      	negs	r6, r6
 800728c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007290:	485e      	ldr	r0, [pc, #376]	; (800740c <_printf_i+0x244>)
 8007292:	230a      	movs	r3, #10
 8007294:	e019      	b.n	80072ca <_printf_i+0x102>
 8007296:	680e      	ldr	r6, [r1, #0]
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800729e:	bf18      	it	ne
 80072a0:	b236      	sxthne	r6, r6
 80072a2:	e7ef      	b.n	8007284 <_printf_i+0xbc>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	6820      	ldr	r0, [r4, #0]
 80072a8:	1d19      	adds	r1, r3, #4
 80072aa:	6029      	str	r1, [r5, #0]
 80072ac:	0601      	lsls	r1, r0, #24
 80072ae:	d501      	bpl.n	80072b4 <_printf_i+0xec>
 80072b0:	681e      	ldr	r6, [r3, #0]
 80072b2:	e002      	b.n	80072ba <_printf_i+0xf2>
 80072b4:	0646      	lsls	r6, r0, #25
 80072b6:	d5fb      	bpl.n	80072b0 <_printf_i+0xe8>
 80072b8:	881e      	ldrh	r6, [r3, #0]
 80072ba:	4854      	ldr	r0, [pc, #336]	; (800740c <_printf_i+0x244>)
 80072bc:	2f6f      	cmp	r7, #111	; 0x6f
 80072be:	bf0c      	ite	eq
 80072c0:	2308      	moveq	r3, #8
 80072c2:	230a      	movne	r3, #10
 80072c4:	2100      	movs	r1, #0
 80072c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ca:	6865      	ldr	r5, [r4, #4]
 80072cc:	60a5      	str	r5, [r4, #8]
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	bfa2      	ittt	ge
 80072d2:	6821      	ldrge	r1, [r4, #0]
 80072d4:	f021 0104 	bicge.w	r1, r1, #4
 80072d8:	6021      	strge	r1, [r4, #0]
 80072da:	b90e      	cbnz	r6, 80072e0 <_printf_i+0x118>
 80072dc:	2d00      	cmp	r5, #0
 80072de:	d04d      	beq.n	800737c <_printf_i+0x1b4>
 80072e0:	4615      	mov	r5, r2
 80072e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072e6:	fb03 6711 	mls	r7, r3, r1, r6
 80072ea:	5dc7      	ldrb	r7, [r0, r7]
 80072ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072f0:	4637      	mov	r7, r6
 80072f2:	42bb      	cmp	r3, r7
 80072f4:	460e      	mov	r6, r1
 80072f6:	d9f4      	bls.n	80072e2 <_printf_i+0x11a>
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d10b      	bne.n	8007314 <_printf_i+0x14c>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	07de      	lsls	r6, r3, #31
 8007300:	d508      	bpl.n	8007314 <_printf_i+0x14c>
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	6861      	ldr	r1, [r4, #4]
 8007306:	4299      	cmp	r1, r3
 8007308:	bfde      	ittt	le
 800730a:	2330      	movle	r3, #48	; 0x30
 800730c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007310:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007314:	1b52      	subs	r2, r2, r5
 8007316:	6122      	str	r2, [r4, #16]
 8007318:	f8cd a000 	str.w	sl, [sp]
 800731c:	464b      	mov	r3, r9
 800731e:	aa03      	add	r2, sp, #12
 8007320:	4621      	mov	r1, r4
 8007322:	4640      	mov	r0, r8
 8007324:	f7ff fee2 	bl	80070ec <_printf_common>
 8007328:	3001      	adds	r0, #1
 800732a:	d14c      	bne.n	80073c6 <_printf_i+0x1fe>
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b004      	add	sp, #16
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	4835      	ldr	r0, [pc, #212]	; (800740c <_printf_i+0x244>)
 8007338:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800733c:	6829      	ldr	r1, [r5, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f851 6b04 	ldr.w	r6, [r1], #4
 8007344:	6029      	str	r1, [r5, #0]
 8007346:	061d      	lsls	r5, r3, #24
 8007348:	d514      	bpl.n	8007374 <_printf_i+0x1ac>
 800734a:	07df      	lsls	r7, r3, #31
 800734c:	bf44      	itt	mi
 800734e:	f043 0320 	orrmi.w	r3, r3, #32
 8007352:	6023      	strmi	r3, [r4, #0]
 8007354:	b91e      	cbnz	r6, 800735e <_printf_i+0x196>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f023 0320 	bic.w	r3, r3, #32
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	2310      	movs	r3, #16
 8007360:	e7b0      	b.n	80072c4 <_printf_i+0xfc>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	f043 0320 	orr.w	r3, r3, #32
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	2378      	movs	r3, #120	; 0x78
 800736c:	4828      	ldr	r0, [pc, #160]	; (8007410 <_printf_i+0x248>)
 800736e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007372:	e7e3      	b.n	800733c <_printf_i+0x174>
 8007374:	0659      	lsls	r1, r3, #25
 8007376:	bf48      	it	mi
 8007378:	b2b6      	uxthmi	r6, r6
 800737a:	e7e6      	b.n	800734a <_printf_i+0x182>
 800737c:	4615      	mov	r5, r2
 800737e:	e7bb      	b.n	80072f8 <_printf_i+0x130>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	6826      	ldr	r6, [r4, #0]
 8007384:	6961      	ldr	r1, [r4, #20]
 8007386:	1d18      	adds	r0, r3, #4
 8007388:	6028      	str	r0, [r5, #0]
 800738a:	0635      	lsls	r5, r6, #24
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	d501      	bpl.n	8007394 <_printf_i+0x1cc>
 8007390:	6019      	str	r1, [r3, #0]
 8007392:	e002      	b.n	800739a <_printf_i+0x1d2>
 8007394:	0670      	lsls	r0, r6, #25
 8007396:	d5fb      	bpl.n	8007390 <_printf_i+0x1c8>
 8007398:	8019      	strh	r1, [r3, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	4615      	mov	r5, r2
 80073a0:	e7ba      	b.n	8007318 <_printf_i+0x150>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	602a      	str	r2, [r5, #0]
 80073a8:	681d      	ldr	r5, [r3, #0]
 80073aa:	6862      	ldr	r2, [r4, #4]
 80073ac:	2100      	movs	r1, #0
 80073ae:	4628      	mov	r0, r5
 80073b0:	f7f8 ff2e 	bl	8000210 <memchr>
 80073b4:	b108      	cbz	r0, 80073ba <_printf_i+0x1f2>
 80073b6:	1b40      	subs	r0, r0, r5
 80073b8:	6060      	str	r0, [r4, #4]
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	2300      	movs	r3, #0
 80073c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c4:	e7a8      	b.n	8007318 <_printf_i+0x150>
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4649      	mov	r1, r9
 80073cc:	4640      	mov	r0, r8
 80073ce:	47d0      	blx	sl
 80073d0:	3001      	adds	r0, #1
 80073d2:	d0ab      	beq.n	800732c <_printf_i+0x164>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	079b      	lsls	r3, r3, #30
 80073d8:	d413      	bmi.n	8007402 <_printf_i+0x23a>
 80073da:	68e0      	ldr	r0, [r4, #12]
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	4298      	cmp	r0, r3
 80073e0:	bfb8      	it	lt
 80073e2:	4618      	movlt	r0, r3
 80073e4:	e7a4      	b.n	8007330 <_printf_i+0x168>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4632      	mov	r2, r6
 80073ea:	4649      	mov	r1, r9
 80073ec:	4640      	mov	r0, r8
 80073ee:	47d0      	blx	sl
 80073f0:	3001      	adds	r0, #1
 80073f2:	d09b      	beq.n	800732c <_printf_i+0x164>
 80073f4:	3501      	adds	r5, #1
 80073f6:	68e3      	ldr	r3, [r4, #12]
 80073f8:	9903      	ldr	r1, [sp, #12]
 80073fa:	1a5b      	subs	r3, r3, r1
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	dcf2      	bgt.n	80073e6 <_printf_i+0x21e>
 8007400:	e7eb      	b.n	80073da <_printf_i+0x212>
 8007402:	2500      	movs	r5, #0
 8007404:	f104 0619 	add.w	r6, r4, #25
 8007408:	e7f5      	b.n	80073f6 <_printf_i+0x22e>
 800740a:	bf00      	nop
 800740c:	08007c52 	.word	0x08007c52
 8007410:	08007c63 	.word	0x08007c63

08007414 <memcpy>:
 8007414:	440a      	add	r2, r1
 8007416:	4291      	cmp	r1, r2
 8007418:	f100 33ff 	add.w	r3, r0, #4294967295
 800741c:	d100      	bne.n	8007420 <memcpy+0xc>
 800741e:	4770      	bx	lr
 8007420:	b510      	push	{r4, lr}
 8007422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800742a:	4291      	cmp	r1, r2
 800742c:	d1f9      	bne.n	8007422 <memcpy+0xe>
 800742e:	bd10      	pop	{r4, pc}

08007430 <memmove>:
 8007430:	4288      	cmp	r0, r1
 8007432:	b510      	push	{r4, lr}
 8007434:	eb01 0402 	add.w	r4, r1, r2
 8007438:	d902      	bls.n	8007440 <memmove+0x10>
 800743a:	4284      	cmp	r4, r0
 800743c:	4623      	mov	r3, r4
 800743e:	d807      	bhi.n	8007450 <memmove+0x20>
 8007440:	1e43      	subs	r3, r0, #1
 8007442:	42a1      	cmp	r1, r4
 8007444:	d008      	beq.n	8007458 <memmove+0x28>
 8007446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800744e:	e7f8      	b.n	8007442 <memmove+0x12>
 8007450:	4402      	add	r2, r0
 8007452:	4601      	mov	r1, r0
 8007454:	428a      	cmp	r2, r1
 8007456:	d100      	bne.n	800745a <memmove+0x2a>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800745e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007462:	e7f7      	b.n	8007454 <memmove+0x24>

08007464 <_free_r>:
 8007464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007466:	2900      	cmp	r1, #0
 8007468:	d044      	beq.n	80074f4 <_free_r+0x90>
 800746a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800746e:	9001      	str	r0, [sp, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f1a1 0404 	sub.w	r4, r1, #4
 8007476:	bfb8      	it	lt
 8007478:	18e4      	addlt	r4, r4, r3
 800747a:	f000 f913 	bl	80076a4 <__malloc_lock>
 800747e:	4a1e      	ldr	r2, [pc, #120]	; (80074f8 <_free_r+0x94>)
 8007480:	9801      	ldr	r0, [sp, #4]
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	b933      	cbnz	r3, 8007494 <_free_r+0x30>
 8007486:	6063      	str	r3, [r4, #4]
 8007488:	6014      	str	r4, [r2, #0]
 800748a:	b003      	add	sp, #12
 800748c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007490:	f000 b90e 	b.w	80076b0 <__malloc_unlock>
 8007494:	42a3      	cmp	r3, r4
 8007496:	d908      	bls.n	80074aa <_free_r+0x46>
 8007498:	6825      	ldr	r5, [r4, #0]
 800749a:	1961      	adds	r1, r4, r5
 800749c:	428b      	cmp	r3, r1
 800749e:	bf01      	itttt	eq
 80074a0:	6819      	ldreq	r1, [r3, #0]
 80074a2:	685b      	ldreq	r3, [r3, #4]
 80074a4:	1949      	addeq	r1, r1, r5
 80074a6:	6021      	streq	r1, [r4, #0]
 80074a8:	e7ed      	b.n	8007486 <_free_r+0x22>
 80074aa:	461a      	mov	r2, r3
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b10b      	cbz	r3, 80074b4 <_free_r+0x50>
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	d9fa      	bls.n	80074aa <_free_r+0x46>
 80074b4:	6811      	ldr	r1, [r2, #0]
 80074b6:	1855      	adds	r5, r2, r1
 80074b8:	42a5      	cmp	r5, r4
 80074ba:	d10b      	bne.n	80074d4 <_free_r+0x70>
 80074bc:	6824      	ldr	r4, [r4, #0]
 80074be:	4421      	add	r1, r4
 80074c0:	1854      	adds	r4, r2, r1
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	6011      	str	r1, [r2, #0]
 80074c6:	d1e0      	bne.n	800748a <_free_r+0x26>
 80074c8:	681c      	ldr	r4, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	6053      	str	r3, [r2, #4]
 80074ce:	4421      	add	r1, r4
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	e7da      	b.n	800748a <_free_r+0x26>
 80074d4:	d902      	bls.n	80074dc <_free_r+0x78>
 80074d6:	230c      	movs	r3, #12
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	e7d6      	b.n	800748a <_free_r+0x26>
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	1961      	adds	r1, r4, r5
 80074e0:	428b      	cmp	r3, r1
 80074e2:	bf04      	itt	eq
 80074e4:	6819      	ldreq	r1, [r3, #0]
 80074e6:	685b      	ldreq	r3, [r3, #4]
 80074e8:	6063      	str	r3, [r4, #4]
 80074ea:	bf04      	itt	eq
 80074ec:	1949      	addeq	r1, r1, r5
 80074ee:	6021      	streq	r1, [r4, #0]
 80074f0:	6054      	str	r4, [r2, #4]
 80074f2:	e7ca      	b.n	800748a <_free_r+0x26>
 80074f4:	b003      	add	sp, #12
 80074f6:	bd30      	pop	{r4, r5, pc}
 80074f8:	2000032c 	.word	0x2000032c

080074fc <sbrk_aligned>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	4e0e      	ldr	r6, [pc, #56]	; (8007538 <sbrk_aligned+0x3c>)
 8007500:	460c      	mov	r4, r1
 8007502:	6831      	ldr	r1, [r6, #0]
 8007504:	4605      	mov	r5, r0
 8007506:	b911      	cbnz	r1, 800750e <sbrk_aligned+0x12>
 8007508:	f000 f8bc 	bl	8007684 <_sbrk_r>
 800750c:	6030      	str	r0, [r6, #0]
 800750e:	4621      	mov	r1, r4
 8007510:	4628      	mov	r0, r5
 8007512:	f000 f8b7 	bl	8007684 <_sbrk_r>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	d00a      	beq.n	8007530 <sbrk_aligned+0x34>
 800751a:	1cc4      	adds	r4, r0, #3
 800751c:	f024 0403 	bic.w	r4, r4, #3
 8007520:	42a0      	cmp	r0, r4
 8007522:	d007      	beq.n	8007534 <sbrk_aligned+0x38>
 8007524:	1a21      	subs	r1, r4, r0
 8007526:	4628      	mov	r0, r5
 8007528:	f000 f8ac 	bl	8007684 <_sbrk_r>
 800752c:	3001      	adds	r0, #1
 800752e:	d101      	bne.n	8007534 <sbrk_aligned+0x38>
 8007530:	f04f 34ff 	mov.w	r4, #4294967295
 8007534:	4620      	mov	r0, r4
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	20000330 	.word	0x20000330

0800753c <_malloc_r>:
 800753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007540:	1ccd      	adds	r5, r1, #3
 8007542:	f025 0503 	bic.w	r5, r5, #3
 8007546:	3508      	adds	r5, #8
 8007548:	2d0c      	cmp	r5, #12
 800754a:	bf38      	it	cc
 800754c:	250c      	movcc	r5, #12
 800754e:	2d00      	cmp	r5, #0
 8007550:	4607      	mov	r7, r0
 8007552:	db01      	blt.n	8007558 <_malloc_r+0x1c>
 8007554:	42a9      	cmp	r1, r5
 8007556:	d905      	bls.n	8007564 <_malloc_r+0x28>
 8007558:	230c      	movs	r3, #12
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	2600      	movs	r6, #0
 800755e:	4630      	mov	r0, r6
 8007560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007564:	4e2e      	ldr	r6, [pc, #184]	; (8007620 <_malloc_r+0xe4>)
 8007566:	f000 f89d 	bl	80076a4 <__malloc_lock>
 800756a:	6833      	ldr	r3, [r6, #0]
 800756c:	461c      	mov	r4, r3
 800756e:	bb34      	cbnz	r4, 80075be <_malloc_r+0x82>
 8007570:	4629      	mov	r1, r5
 8007572:	4638      	mov	r0, r7
 8007574:	f7ff ffc2 	bl	80074fc <sbrk_aligned>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	4604      	mov	r4, r0
 800757c:	d14d      	bne.n	800761a <_malloc_r+0xde>
 800757e:	6834      	ldr	r4, [r6, #0]
 8007580:	4626      	mov	r6, r4
 8007582:	2e00      	cmp	r6, #0
 8007584:	d140      	bne.n	8007608 <_malloc_r+0xcc>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	4631      	mov	r1, r6
 800758a:	4638      	mov	r0, r7
 800758c:	eb04 0803 	add.w	r8, r4, r3
 8007590:	f000 f878 	bl	8007684 <_sbrk_r>
 8007594:	4580      	cmp	r8, r0
 8007596:	d13a      	bne.n	800760e <_malloc_r+0xd2>
 8007598:	6821      	ldr	r1, [r4, #0]
 800759a:	3503      	adds	r5, #3
 800759c:	1a6d      	subs	r5, r5, r1
 800759e:	f025 0503 	bic.w	r5, r5, #3
 80075a2:	3508      	adds	r5, #8
 80075a4:	2d0c      	cmp	r5, #12
 80075a6:	bf38      	it	cc
 80075a8:	250c      	movcc	r5, #12
 80075aa:	4629      	mov	r1, r5
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff ffa5 	bl	80074fc <sbrk_aligned>
 80075b2:	3001      	adds	r0, #1
 80075b4:	d02b      	beq.n	800760e <_malloc_r+0xd2>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	442b      	add	r3, r5
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	e00e      	b.n	80075dc <_malloc_r+0xa0>
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	1b52      	subs	r2, r2, r5
 80075c2:	d41e      	bmi.n	8007602 <_malloc_r+0xc6>
 80075c4:	2a0b      	cmp	r2, #11
 80075c6:	d916      	bls.n	80075f6 <_malloc_r+0xba>
 80075c8:	1961      	adds	r1, r4, r5
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	6025      	str	r5, [r4, #0]
 80075ce:	bf18      	it	ne
 80075d0:	6059      	strne	r1, [r3, #4]
 80075d2:	6863      	ldr	r3, [r4, #4]
 80075d4:	bf08      	it	eq
 80075d6:	6031      	streq	r1, [r6, #0]
 80075d8:	5162      	str	r2, [r4, r5]
 80075da:	604b      	str	r3, [r1, #4]
 80075dc:	4638      	mov	r0, r7
 80075de:	f104 060b 	add.w	r6, r4, #11
 80075e2:	f000 f865 	bl	80076b0 <__malloc_unlock>
 80075e6:	f026 0607 	bic.w	r6, r6, #7
 80075ea:	1d23      	adds	r3, r4, #4
 80075ec:	1af2      	subs	r2, r6, r3
 80075ee:	d0b6      	beq.n	800755e <_malloc_r+0x22>
 80075f0:	1b9b      	subs	r3, r3, r6
 80075f2:	50a3      	str	r3, [r4, r2]
 80075f4:	e7b3      	b.n	800755e <_malloc_r+0x22>
 80075f6:	6862      	ldr	r2, [r4, #4]
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	bf0c      	ite	eq
 80075fc:	6032      	streq	r2, [r6, #0]
 80075fe:	605a      	strne	r2, [r3, #4]
 8007600:	e7ec      	b.n	80075dc <_malloc_r+0xa0>
 8007602:	4623      	mov	r3, r4
 8007604:	6864      	ldr	r4, [r4, #4]
 8007606:	e7b2      	b.n	800756e <_malloc_r+0x32>
 8007608:	4634      	mov	r4, r6
 800760a:	6876      	ldr	r6, [r6, #4]
 800760c:	e7b9      	b.n	8007582 <_malloc_r+0x46>
 800760e:	230c      	movs	r3, #12
 8007610:	603b      	str	r3, [r7, #0]
 8007612:	4638      	mov	r0, r7
 8007614:	f000 f84c 	bl	80076b0 <__malloc_unlock>
 8007618:	e7a1      	b.n	800755e <_malloc_r+0x22>
 800761a:	6025      	str	r5, [r4, #0]
 800761c:	e7de      	b.n	80075dc <_malloc_r+0xa0>
 800761e:	bf00      	nop
 8007620:	2000032c 	.word	0x2000032c

08007624 <_realloc_r>:
 8007624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007628:	4680      	mov	r8, r0
 800762a:	4614      	mov	r4, r2
 800762c:	460e      	mov	r6, r1
 800762e:	b921      	cbnz	r1, 800763a <_realloc_r+0x16>
 8007630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007634:	4611      	mov	r1, r2
 8007636:	f7ff bf81 	b.w	800753c <_malloc_r>
 800763a:	b92a      	cbnz	r2, 8007648 <_realloc_r+0x24>
 800763c:	f7ff ff12 	bl	8007464 <_free_r>
 8007640:	4625      	mov	r5, r4
 8007642:	4628      	mov	r0, r5
 8007644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007648:	f000 f838 	bl	80076bc <_malloc_usable_size_r>
 800764c:	4284      	cmp	r4, r0
 800764e:	4607      	mov	r7, r0
 8007650:	d802      	bhi.n	8007658 <_realloc_r+0x34>
 8007652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007656:	d812      	bhi.n	800767e <_realloc_r+0x5a>
 8007658:	4621      	mov	r1, r4
 800765a:	4640      	mov	r0, r8
 800765c:	f7ff ff6e 	bl	800753c <_malloc_r>
 8007660:	4605      	mov	r5, r0
 8007662:	2800      	cmp	r0, #0
 8007664:	d0ed      	beq.n	8007642 <_realloc_r+0x1e>
 8007666:	42bc      	cmp	r4, r7
 8007668:	4622      	mov	r2, r4
 800766a:	4631      	mov	r1, r6
 800766c:	bf28      	it	cs
 800766e:	463a      	movcs	r2, r7
 8007670:	f7ff fed0 	bl	8007414 <memcpy>
 8007674:	4631      	mov	r1, r6
 8007676:	4640      	mov	r0, r8
 8007678:	f7ff fef4 	bl	8007464 <_free_r>
 800767c:	e7e1      	b.n	8007642 <_realloc_r+0x1e>
 800767e:	4635      	mov	r5, r6
 8007680:	e7df      	b.n	8007642 <_realloc_r+0x1e>
	...

08007684 <_sbrk_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d06      	ldr	r5, [pc, #24]	; (80076a0 <_sbrk_r+0x1c>)
 8007688:	2300      	movs	r3, #0
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	602b      	str	r3, [r5, #0]
 8007690:	f7f9 ff32 	bl	80014f8 <_sbrk>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_sbrk_r+0x1a>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_sbrk_r+0x1a>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	20000334 	.word	0x20000334

080076a4 <__malloc_lock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	; (80076ac <__malloc_lock+0x8>)
 80076a6:	f000 b811 	b.w	80076cc <__retarget_lock_acquire_recursive>
 80076aa:	bf00      	nop
 80076ac:	20000338 	.word	0x20000338

080076b0 <__malloc_unlock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__malloc_unlock+0x8>)
 80076b2:	f000 b80c 	b.w	80076ce <__retarget_lock_release_recursive>
 80076b6:	bf00      	nop
 80076b8:	20000338 	.word	0x20000338

080076bc <_malloc_usable_size_r>:
 80076bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c0:	1f18      	subs	r0, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bfbc      	itt	lt
 80076c6:	580b      	ldrlt	r3, [r1, r0]
 80076c8:	18c0      	addlt	r0, r0, r3
 80076ca:	4770      	bx	lr

080076cc <__retarget_lock_acquire_recursive>:
 80076cc:	4770      	bx	lr

080076ce <__retarget_lock_release_recursive>:
 80076ce:	4770      	bx	lr

080076d0 <_init>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	bf00      	nop
 80076d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d6:	bc08      	pop	{r3}
 80076d8:	469e      	mov	lr, r3
 80076da:	4770      	bx	lr

080076dc <_fini>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr
