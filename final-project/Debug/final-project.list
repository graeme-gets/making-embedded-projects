
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .systemConfig 00000004  0807e800  0807e800  0003e800  2**0
                  ALLOC, READONLY
  2 .text         0000ebc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000015f8  0800ed60  0800ed60  0001ed60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08010358  08010358  000304c0  2**0
                  CONTENTS
  5 .ARM          00000008  08010358  08010358  00020358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08010360  08010360  000304c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08010360  08010360  00020360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08010364  08010364  00020364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000004c0  20000000  08010368  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000710  200004c0  08010828  000304c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bd0  08010828  00030bd0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9fa  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055f5  00000000  00000000  0004eeea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  000544e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e0  00000000  00000000  00055f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001da4b  00000000  00000000  00057720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027784  00000000  00000000  0007516b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ca4b  00000000  00000000  0009c8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013933a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008068  00000000  00000000  0013938c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004c0 	.word	0x200004c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed48 	.word	0x0800ed48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c4 	.word	0x200004c4
 80001dc:	0800ed48 	.word	0x0800ed48

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f009 fff7 	bl	800af00 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f00a fcda 	bl	800bae6 <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0 || cmdEnd-buffer != strlen(name))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <ConsoleCommandMatch+0x2e>
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	461c      	mov	r4, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f856 	bl	80001f4 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	429c      	cmp	r4, r3
 800114c:	d00b      	beq.n	8001166 <ConsoleCommandMatch+0x46>
	{
			r =  strcmp(name,buffer) == 0;
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f845 	bl	80001e0 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e00f      	b.n	8001186 <ConsoleCommandMatch+0x66>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f844 	bl	80001f4 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f00a fccc 	bl	800bb10 <strncmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60fb      	str	r3, [r7, #12]

	}

	return r;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001196:	f001 f91b 	bl	80023d0 <ConsoleIoInit>
	ConsoleIoSendString("Dodeca Timer - A Thousand Projects");
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <ConsoleInit+0x44>)
 800119c:	f001 f950 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <ConsoleInit+0x48>)
 80011a2:	f001 f94d 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <ConsoleInit+0x4c>)
 80011a8:	f001 f94a 	bl	8002440 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	e007      	b.n	80011c2 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <ConsoleInit+0x50>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3301      	adds	r3, #1
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b63      	cmp	r3, #99	; 0x63
 80011c6:	d9f4      	bls.n	80011b2 <ConsoleInit+0x22>
	}

}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800ed60 	.word	0x0800ed60
 80011d8:	0800ed84 	.word	0x0800ed84
 80011dc:	0800ed88 	.word	0x0800ed88
 80011e0:	200004dc 	.word	0x200004dc

080011e4 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ConsolePrintPrompt+0x14>)
 80011ea:	f001 f929 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ConsolePrintPrompt+0x18>)
 80011f0:	f001 f926 	bl	8002440 <ConsoleIoSendString>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800ed84 	.word	0x0800ed84
 80011fc:	0800ed88 	.word	0x0800ed88

08001200 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 8001206:	4841      	ldr	r0, [pc, #260]	; (800130c <ConsoleProcess+0x10c>)
 8001208:	f001 f8fa 	bl	8002400 <ConsoleIoReceive>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d075      	beq.n	8001302 <ConsoleProcess+0x102>
 8001216:	2b03      	cmp	r3, #3
 8001218:	dc74      	bgt.n	8001304 <ConsoleProcess+0x104>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <ConsoleProcess+0x28>
 800121e:	2b00      	cmp	r3, #0
 8001220:	db70      	blt.n	8001304 <ConsoleProcess+0x104>
 8001222:	3b01      	subs	r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	e06d      	b.n	8001304 <ConsoleProcess+0x104>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <ConsoleProcess+0x10c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 8001230:	4837      	ldr	r0, [pc, #220]	; (8001310 <ConsoleProcess+0x110>)
 8001232:	f001 f905 	bl	8002440 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001236:	4837      	ldr	r0, [pc, #220]	; (8001314 <ConsoleProcess+0x114>)
 8001238:	f001 f902 	bl	8002440 <ConsoleIoSendString>
				return;
 800123c:	e062      	b.n	8001304 <ConsoleProcess+0x104>
			}
			commandTable = ConsoleCommandsGetTable();
 800123e:	f001 f89f 	bl	8002380 <ConsoleCommandsGetTable>
 8001242:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800124e:	e03a      	b.n	80012c6 <ConsoleProcess+0xc6>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	226c      	movs	r2, #108	; 0x6c
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	492b      	ldr	r1, [pc, #172]	; (800130c <ConsoleProcess+0x10c>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <ConsoleCommandMatch>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d029      	beq.n	80012c0 <ConsoleProcess+0xc0>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	226c      	movs	r2, #108	; 0x6c
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	4413      	add	r3, r2
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4824      	ldr	r0, [pc, #144]	; (800130c <ConsoleProcess+0x10c>)
 800127c:	4798      	blx	r3
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d018      	beq.n	80012ba <ConsoleProcess+0xba>
					{
						ConsoleIoSendString("Error: ");
 8001288:	4823      	ldr	r0, [pc, #140]	; (8001318 <ConsoleProcess+0x118>)
 800128a:	f001 f8d9 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <ConsoleProcess+0x10c>)
 8001290:	f001 f8d6 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8001294:	481e      	ldr	r0, [pc, #120]	; (8001310 <ConsoleProcess+0x110>)
 8001296:	f001 f8d3 	bl	8002440 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800129a:	4820      	ldr	r0, [pc, #128]	; (800131c <ConsoleProcess+0x11c>)
 800129c:	f001 f8d0 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	226c      	movs	r2, #108	; 0x6c
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	4413      	add	r3, r2
 80012ac:	3308      	adds	r3, #8
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 f8c6 	bl	8002440 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012b4:	4816      	ldr	r0, [pc, #88]	; (8001310 <ConsoleProcess+0x110>)
 80012b6:	f001 f8c3 	bl	8002440 <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	e002      	b.n	80012c6 <ConsoleProcess+0xc6>
				}
				else
				{
					cmdIndex++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	226c      	movs	r2, #108	; 0x6c
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4413      	add	r3, r2
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <ConsoleProcess+0xe0>
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	d0b7      	beq.n	8001250 <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e6:	d105      	bne.n	80012f4 <ConsoleProcess+0xf4>
			{
				ConsoleIoSendString("Command not found: ");
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <ConsoleProcess+0x120>)
 80012ea:	f001 f8a9 	bl	8002440 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <ConsoleProcess+0x10c>)
 80012f0:	f001 f8a6 	bl	8002440 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <ConsoleProcess+0x110>)
 80012f6:	f001 f8a3 	bl	8002440 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <ConsoleProcess+0x114>)
 80012fc:	f001 f8a0 	bl	8002440 <ConsoleIoSendString>

			break;
 8001300:	e000      	b.n	8001304 <ConsoleProcess+0x104>
		case CONSOLE_BUFFER_FULL:

		break;
 8001302:	bf00      	nop
	}

}
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200004dc 	.word	0x200004dc
 8001310:	0800ed84 	.word	0x0800ed84
 8001314:	0800ed88 	.word	0x0800ed88
 8001318:	0800ed8c 	.word	0x0800ed8c
 800131c:	0800ed94 	.word	0x0800ed94
 8001320:	0800ed9c 	.word	0x0800ed9c

08001324 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	460b      	mov	r3, r1
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800133e:	e00b      	b.n	8001358 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b20      	cmp	r3, #32
 800134a:	d102      	bne.n	8001352 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3301      	adds	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	429a      	cmp	r2, r3
 800135e:	d002      	beq.n	8001366 <ConsoleParamFindN+0x42>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b63      	cmp	r3, #99	; 0x63
 8001364:	d9ec      	bls.n	8001340 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	2b64      	cmp	r3, #100	; 0x64
 800136a:	d102      	bne.n	8001372 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 800136c:	2310      	movs	r3, #16
 800136e:	75fb      	strb	r3, [r7, #23]
 8001370:	e002      	b.n	8001378 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	601a      	str	r2, [r3, #0]
	}
	return result;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <ConsoleReceiveParamString>:

// Assume the string is the last parameter and the the end is a null
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char* string, uint32_t maxLen)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	460b      	mov	r3, r1
 8001394:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
	eCommandResult_T result;
	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800139a:	f107 0210 	add.w	r2, r7, #16
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	4619      	mov	r1, r3
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ffbe 	bl	8001324 <ConsoleParamFindN>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <ConsoleReceiveParamString+0x30>
		return result;
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	e013      	b.n	80013de <ConsoleReceiveParamString+0x58>



	// Check the length of the string
	if (strlen(&buffer[startIndex]) > maxLen)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff19 	bl	80001f4 <strlen>
 80013c2:	4602      	mov	r2, r0
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d201      	bcs.n	80013ce <ConsoleReceiveParamString+0x48>
	{
		return COMMAND_ERROR;
 80013ca:	23ff      	movs	r3, #255	; 0xff
 80013cc:	e007      	b.n	80013de <ConsoleReceiveParamString+0x58>
	}

	// set the end of the string to a NULL for string termination
	strcpy(string,&buffer[startIndex]);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f00a fb92 	bl	800bb00 <strcpy>

	return COMMAND_SUCCESS;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b08a      	sub	sp, #40	; 0x28
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	460b      	mov	r3, r1
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80013f8:	f107 021c 	add.w	r2, r7, #28
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	4619      	mov	r1, r3
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff ff8f 	bl	8001324 <ConsoleParamFindN>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	4413      	add	r3, r2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8001420:	e011      	b.n	8001446 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001422:	f107 0214 	add.w	r2, r7, #20
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	4413      	add	r3, r2
 800142a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800142e:	701a      	strb	r2, [r3, #0]
		i++;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	3301      	adds	r3, #1
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	4413      	add	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8001446:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 800144e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001452:	2b20      	cmp	r3, #32
 8001454:	d002      	beq.n	800145c <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	2b07      	cmp	r3, #7
 800145a:	d9e2      	bls.n	8001422 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	2b08      	cmp	r3, #8
 8001460:	d102      	bne.n	8001468 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001462:	2310      	movs	r3, #16
 8001464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800146c:	2b00      	cmp	r3, #0
 800146e:	d11a      	bne.n	80014a6 <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001470:	f107 0214 	add.w	r2, r7, #20
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	4413      	add	r3, r2
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f001 ffa1 	bl	80033c8 <isNumber>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4618      	mov	r0, r3
 8001492:	f009 fcf7 	bl	800ae84 <atoi>
 8001496:	4603      	mov	r3, r0
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	e002      	b.n	80014a6 <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 80014a0:	2310      	movs	r3, #16
 80014a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	return result;
 80014a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b08a      	sub	sp, #40	; 0x28
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	460b      	mov	r3, r1
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80014c8:	f107 0218 	add.w	r2, r7, #24
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	4619      	mov	r1, r3
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff ff27 	bl	8001324 <ConsoleParamFindN>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80014da:	7ffb      	ldrb	r3, [r7, #31]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12c      	bne.n	800153a <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	e01e      	b.n	8001524 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10d      	bne.n	8001508 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	4413      	add	r3, r2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f107 0217 	add.w	r2, r7, #23
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f820 	bl	8001544 <ConsoleUtilHexCharToInt>
 8001504:	4603      	mov	r3, r0
 8001506:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 800150e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	b29a      	uxth	r2, r3
 8001518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800151a:	4413      	add	r3, r2
 800151c:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	3301      	adds	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d9dd      	bls.n	80014e6 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	2b11      	cmp	r3, #17
 800152e:	d101      	bne.n	8001534 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001538:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800153a:	7ffb      	ldrb	r3, [r7, #31]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b2f      	cmp	r3, #47	; 0x2f
 8001558:	d908      	bls.n	800156c <ConsoleUtilHexCharToInt+0x28>
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b39      	cmp	r3, #57	; 0x39
 800155e:	d805      	bhi.n	800156c <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	3b30      	subs	r3, #48	; 0x30
 8001564:	b2da      	uxtb	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e025      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b40      	cmp	r3, #64	; 0x40
 8001570:	d908      	bls.n	8001584 <ConsoleUtilHexCharToInt+0x40>
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b46      	cmp	r3, #70	; 0x46
 8001576:	d805      	bhi.n	8001584 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3b37      	subs	r3, #55	; 0x37
 800157c:	b2da      	uxtb	r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e019      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b60      	cmp	r3, #96	; 0x60
 8001588:	d908      	bls.n	800159c <ConsoleUtilHexCharToInt+0x58>
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b66      	cmp	r3, #102	; 0x66
 800158e:	d805      	bhi.n	800159c <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	3b57      	subs	r3, #87	; 0x57
 8001594:	b2da      	uxtb	r2, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e00d      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d105      	bne.n	80015ae <ConsoleUtilHexCharToInt+0x6a>
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b0d      	cmp	r3, #13
 80015a6:	d102      	bne.n	80015ae <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	d102      	bne.n	80015b4 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 80015ae:	2311      	movs	r3, #17
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e001      	b.n	80015b8 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 80015b4:	2310      	movs	r3, #16
 80015b6:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 ff36 	bl	8002440 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 ff29 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80015ee:	4804      	ldr	r0, [pc, #16]	; (8001600 <ConsoleSendLine+0x20>)
 80015f0:	f000 ff26 	bl	8002440 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	0800ed84 	.word	0x0800ed84

08001604 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001608:	f3bf 8f4f 	dsb	sy
}
 800160c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <__NVIC_SystemReset+0x24>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001616:	4904      	ldr	r1, [pc, #16]	; (8001628 <__NVIC_SystemReset+0x24>)
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_SystemReset+0x28>)
 800161a:	4313      	orrs	r3, r2
 800161c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <__NVIC_SystemReset+0x20>
 8001628:	e000ed00 	.word	0xe000ed00
 800162c:	05fa0004 	.word	0x05fa0004

08001630 <displayDodeca>:




static void displayDodeca(uint8_t id)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b0ac      	sub	sp, #176	; 0xb0
 8001634:	af04      	add	r7, sp, #16
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	char msg[120];
	char statename[20];
	colour_t *colour;
	dodecaItem_t *dodeca;

	dodeca = dodecaGet(id);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f001 f801 	bl	8002644 <dodecaGet>
 8001642:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c


	dodecaGetStateName(dodeca->state,statename);
 8001646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	f107 020c 	add.w	r2, r7, #12
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f848 	bl	80026e8 <dodecaGetStateName>
	colour = colourFindByCode(dodeca->colour);
 8001658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 ff04 	bl	800246c <colourFindByCode>
 8001664:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	sprintf(msg,"Dodeca: %i - %s\n\tState: %s\n\tColour: %s\n\tMin Time: %d\n\tMax Time: %d\n",id,dodeca->name,statename, colour->name ,dodeca->minTimeMins,dodeca->maxTimeMins);
 8001668:	79f9      	ldrb	r1, [r7, #7]
 800166a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800166e:	1c5c      	adds	r4, r3, #1
 8001670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001674:	3301      	adds	r3, #1
 8001676:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800167a:	7f12      	ldrb	r2, [r2, #28]
 800167c:	4615      	mov	r5, r2
 800167e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001682:	7f52      	ldrb	r2, [r2, #29]
 8001684:	f107 0020 	add.w	r0, r7, #32
 8001688:	9203      	str	r2, [sp, #12]
 800168a:	9502      	str	r5, [sp, #8]
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4623      	mov	r3, r4
 8001696:	460a      	mov	r2, r1
 8001698:	4905      	ldr	r1, [pc, #20]	; (80016b0 <displayDodeca+0x80>)
 800169a:	f00a f993 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff9c 	bl	80015e0 <ConsoleSendLine>
}
 80016a8:	bf00      	nop
 80016aa:	37a0      	adds	r7, #160	; 0xa0
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bdb0      	pop	{r4, r5, r7, pc}
 80016b0:	0800ee40 	.word	0x0800ee40

080016b4 <ConsoleCommandConfig>:

static eCommandResult_T ConsoleCommandConfig(const char buffer[])
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	setStateControllerMode(STATE_CONT_MODE_CONFIG);
 80016bc:	2001      	movs	r0, #1
 80016be:	f002 ff73 	bl	80045a8 <setStateControllerMode>
	return COMMAND_SUCCESS;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <ConsoleCommandExitConfig>:
static eCommandResult_T ConsoleCommandExitConfig(const char buffer[])
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	setStateControllerMode(STATE_CONT_MODE_RUN);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f002 ff67 	bl	80045a8 <setStateControllerMode>
	return COMMAND_SUCCESS;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <ConsoleCommandReboot>:

static eCommandResult_T ConsoleCommandReboot(const char buffer[])
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	NVIC_SystemReset();
 80016ec:	f7ff ff8a 	bl	8001604 <__NVIC_SystemReset>

080016f0 <ConsoleCommandReset>:
	return COMMAND_SUCCESS;
}

static eCommandResult_T ConsoleCommandReset(const char buffer[])
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	ConsoleSendLine("Resetting Configuration to factory default");
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <ConsoleCommandReset+0x28>)
 80016fa:	f7ff ff71 	bl	80015e0 <ConsoleSendLine>
	dodecaReset();
 80016fe:	f000 ff19 	bl	8002534 <dodecaReset>
	sysConfigSave();
 8001702:	f003 f9d3 	bl	8004aac <sysConfigSave>
	ConsoleSendLine("Done");
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <ConsoleCommandReset+0x2c>)
 8001708:	f7ff ff6a 	bl	80015e0 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	0800ee84 	.word	0x0800ee84
 800171c:	0800eeb0 	.word	0x0800eeb0

08001720 <ConsoleCommandDodecaSet>:

static eCommandResult_T ConsoleCommandDodecaSet(const char buffer[])
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b098      	sub	sp, #96	; 0x60
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	// get the Dodeca Id to set
	int16_t dodecaId;
	int16_t value;
	dodecaItem_t *dodeca = 0x0;
 8001728:	2300      	movs	r3, #0
 800172a:	65fb      	str	r3, [r7, #92]	; 0x5c
	char msg[50];

		// get the command
		uint32_t cmdIndex;
		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &cmdIndex))
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	461a      	mov	r2, r3
 8001732:	2101      	movs	r1, #1
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fdf5 	bl	8001324 <ConsoleParamFindN>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <ConsoleCommandDodecaSet+0x2a>
		{
			ConsoleSendLine("Please supply a command");
 8001740:	4862      	ldr	r0, [pc, #392]	; (80018cc <ConsoleCommandDodecaSet+0x1ac>)
 8001742:	f7ff ff4d 	bl	80015e0 <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 8001746:	2310      	movs	r3, #16
 8001748:	e0bb      	b.n	80018c2 <ConsoleCommandDodecaSet+0x1a2>
		}

		dodecaId = detectFaceUp();
 800174a:	f001 ff9f 	bl	800368c <detectFaceUp>
 800174e:	4603      	mov	r3, r0
 8001750:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


		if (dodecaId< 0)
 8001754:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8001758:	2b00      	cmp	r3, #0
 800175a:	da04      	bge.n	8001766 <ConsoleCommandDodecaSet+0x46>
		{
			ConsoleSendLine("Face not detected");
 800175c:	485c      	ldr	r0, [pc, #368]	; (80018d0 <ConsoleCommandDodecaSet+0x1b0>)
 800175e:	f7ff ff3f 	bl	80015e0 <ConsoleSendLine>
			return COMMAND_ERROR;
 8001762:	23ff      	movs	r3, #255	; 0xff
 8001764:	e0ad      	b.n	80018c2 <ConsoleCommandDodecaSet+0x1a2>
		}
		sprintf(msg,"Detected face: %i",dodecaId);
 8001766:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4959      	ldr	r1, [pc, #356]	; (80018d4 <ConsoleCommandDodecaSet+0x1b4>)
 8001770:	4618      	mov	r0, r3
 8001772:	f00a f927 	bl	800b9c4 <siprintf>
		ConsoleSendLine(msg);
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff30 	bl	80015e0 <ConsoleSendLine>

		dodeca = dodecaGet(dodecaId);
 8001780:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 ff5c 	bl	8002644 <dodecaGet>
 800178c:	65f8      	str	r0, [r7, #92]	; 0x5c

		char name[DODECA_NAME_MAX];
		int16_t colourId;

		switch (buffer[cmdIndex])
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3b63      	subs	r3, #99	; 0x63
 8001798:	2b0b      	cmp	r3, #11
 800179a:	f200 808b 	bhi.w	80018b4 <ConsoleCommandDodecaSet+0x194>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <ConsoleCommandDodecaSet+0x84>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	0800180f 	.word	0x0800180f
 80017a8:	080018b5 	.word	0x080018b5
 80017ac:	080018b5 	.word	0x080018b5
 80017b0:	080018b5 	.word	0x080018b5
 80017b4:	080018b5 	.word	0x080018b5
 80017b8:	080018b5 	.word	0x080018b5
 80017bc:	08001889 	.word	0x08001889
 80017c0:	080018b5 	.word	0x080018b5
 80017c4:	080018b5 	.word	0x080018b5
 80017c8:	080018b5 	.word	0x080018b5
 80017cc:	0800185d 	.word	0x0800185d
 80017d0:	080017d5 	.word	0x080017d5
		{

		case 'n':
					// Get the task Name
					ConsoleReceiveParamString(buffer, 3, name,DODECA_NAME_MAX );
 80017d4:	f107 020c 	add.w	r2, r7, #12
 80017d8:	2314      	movs	r3, #20
 80017da:	2103      	movs	r1, #3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fdd2 	bl	8001386 <ConsoleReceiveParamString>
					// Check Length
					if (strlen(name)< DODECA_NAME_MAX)
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fd04 	bl	80001f4 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b13      	cmp	r3, #19
 80017f0:	d804      	bhi.n	80017fc <ConsoleCommandDodecaSet+0xdc>
					{
						ConsoleSendLine("Name too short");
 80017f2:	4839      	ldr	r0, [pc, #228]	; (80018d8 <ConsoleCommandDodecaSet+0x1b8>)
 80017f4:	f7ff fef4 	bl	80015e0 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 80017f8:	2310      	movs	r3, #16
 80017fa:	e062      	b.n	80018c2 <ConsoleCommandDodecaSet+0x1a2>
					}
					strcpy(dodeca->name,name);
 80017fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017fe:	3301      	adds	r3, #1
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f00a f97a 	bl	800bb00 <strcpy>
					break;
 800180c:	e052      	b.n	80018b4 <ConsoleCommandDodecaSet+0x194>
			case 'c':
					// get the colour number

					ConsoleReceiveParamInt16(buffer, 3, &colourId);
 800180e:	f107 030a 	add.w	r3, r7, #10
 8001812:	461a      	mov	r2, r3
 8001814:	2103      	movs	r1, #3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fde5 	bl	80013e6 <ConsoleReceiveParamInt16>
					if (colourId > COLOUR_COUNT_MAX)
 800181c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001820:	2b0e      	cmp	r3, #14
 8001822:	dd04      	ble.n	800182e <ConsoleCommandDodecaSet+0x10e>
					{
						ConsoleSendLine("Invalid Colour");
 8001824:	482d      	ldr	r0, [pc, #180]	; (80018dc <ConsoleCommandDodecaSet+0x1bc>)
 8001826:	f7ff fedb 	bl	80015e0 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 800182a:	2310      	movs	r3, #16
 800182c:	e049      	b.n	80018c2 <ConsoleCommandDodecaSet+0x1a2>
					}

					dodeca->colour = colourFindByid(colourId)->code;
 800182e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fe43 	bl	80024c0 <colourFindByid>
 800183a:	4603      	mov	r3, r0
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001840:	619a      	str	r2, [r3, #24]

					ConsoleSendString("Colour set : ");
 8001842:	4827      	ldr	r0, [pc, #156]	; (80018e0 <ConsoleCommandDodecaSet+0x1c0>)
 8001844:	f7ff febf 	bl	80015c6 <ConsoleSendString>
					ConsoleSendLine(colourFindByCode(colourId)->name);
 8001848:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fe0d 	bl	800246c <colourFindByCode>
 8001852:	4603      	mov	r3, r0
 8001854:	3301      	adds	r3, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fec2 	bl	80015e0 <ConsoleSendLine>

		case 'm':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 800185c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001860:	461a      	mov	r2, r3
 8001862:	2102      	movs	r1, #2
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fdbe 	bl	80013e6 <ConsoleReceiveParamInt16>
				if (value <0)
 800186a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800186e:	2b00      	cmp	r3, #0
 8001870:	da04      	bge.n	800187c <ConsoleCommandDodecaSet+0x15c>
				{
					ConsoleSendLine("Invalid Max time");
 8001872:	481c      	ldr	r0, [pc, #112]	; (80018e4 <ConsoleCommandDodecaSet+0x1c4>)
 8001874:	f7ff feb4 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001878:	2310      	movs	r3, #16
 800187a:	e022      	b.n	80018c2 <ConsoleCommandDodecaSet+0x1a2>
				}
				dodeca->maxTimeMins = value;
 800187c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001880:	b2da      	uxtb	r2, r3
 8001882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001884:	775a      	strb	r2, [r3, #29]
			break;
 8001886:	e015      	b.n	80018b4 <ConsoleCommandDodecaSet+0x194>
		case 'i':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001888:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800188c:	461a      	mov	r2, r3
 800188e:	2102      	movs	r1, #2
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fda8 	bl	80013e6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001896:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800189a:	2b00      	cmp	r3, #0
 800189c:	da04      	bge.n	80018a8 <ConsoleCommandDodecaSet+0x188>
				{
					ConsoleSendLine("Invalid Min time");
 800189e:	4812      	ldr	r0, [pc, #72]	; (80018e8 <ConsoleCommandDodecaSet+0x1c8>)
 80018a0:	f7ff fe9e 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80018a4:	2310      	movs	r3, #16
 80018a6:	e00c      	b.n	80018c2 <ConsoleCommandDodecaSet+0x1a2>
				}
				dodeca->minTimeMins = value;
 80018a8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b0:	771a      	strb	r2, [r3, #28]
			break;
 80018b2:	bf00      	nop
		}
		// Show the current face info
		displayDodeca(dodecaId);
 80018b4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff feb8 	bl	8001630 <displayDodeca>
		return COMMAND_SUCCESS;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3760      	adds	r7, #96	; 0x60
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	0800eeb8 	.word	0x0800eeb8
 80018d0:	0800eed0 	.word	0x0800eed0
 80018d4:	0800eee4 	.word	0x0800eee4
 80018d8:	0800eef8 	.word	0x0800eef8
 80018dc:	0800ef08 	.word	0x0800ef08
 80018e0:	0800ef18 	.word	0x0800ef18
 80018e4:	0800ef28 	.word	0x0800ef28
 80018e8:	0800ef3c 	.word	0x0800ef3c

080018ec <ConsoleCommandDodecaQuery>:

static eCommandResult_T ConsoleCommandDodecaQuery(const char buffer[])
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	uint32_t param1;

		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	461a      	mov	r2, r3
 80018fa:	2101      	movs	r1, #1
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fd11 	bl	8001324 <ConsoleParamFindN>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00d      	beq.n	8001924 <ConsoleCommandDodecaQuery+0x38>
		{
			// List all tasks
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 8001908:	2300      	movs	r3, #0
 800190a:	75fb      	strb	r3, [r7, #23]
 800190c:	e006      	b.n	800191c <ConsoleCommandDodecaQuery+0x30>
			{
				displayDodeca(f);
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fe8d 	bl	8001630 <displayDodeca>
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	3301      	adds	r3, #1
 800191a:	75fb      	strb	r3, [r7, #23]
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b0b      	cmp	r3, #11
 8001920:	d9f5      	bls.n	800190e <ConsoleCommandDodecaQuery+0x22>
 8001922:	e019      	b.n	8001958 <ConsoleCommandDodecaQuery+0x6c>
			}
		}
		else
		{
			int16_t taskId;
			ConsoleReceiveParamInt16(buffer, 1, &taskId );
 8001924:	f107 030e 	add.w	r3, r7, #14
 8001928:	461a      	mov	r2, r3
 800192a:	2101      	movs	r1, #1
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fd5a 	bl	80013e6 <ConsoleReceiveParamInt16>

			if (taskId < 0 || taskId > DODECA_COUNT_MAX-1)
 8001932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db03      	blt.n	8001942 <ConsoleCommandDodecaQuery+0x56>
 800193a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800193e:	2b0b      	cmp	r3, #11
 8001940:	dd04      	ble.n	800194c <ConsoleCommandDodecaQuery+0x60>
			{
				ConsoleSendLine("Invalid Task number");
 8001942:	4808      	ldr	r0, [pc, #32]	; (8001964 <ConsoleCommandDodecaQuery+0x78>)
 8001944:	f7ff fe4c 	bl	80015e0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001948:	2310      	movs	r3, #16
 800194a:	e006      	b.n	800195a <ConsoleCommandDodecaQuery+0x6e>
			}

			displayDodeca(taskId);
 800194c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe6c 	bl	8001630 <displayDodeca>

		}
		return COMMAND_SUCCESS;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	0800ef50 	.word	0x0800ef50

08001968 <ConsoleCommandSaveConfig>:


static eCommandResult_T ConsoleCommandSaveConfig(const char buffer[])
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	sysConfigSave();
 8001970:	f003 f89c 	bl	8004aac <sysConfigSave>
	ConsoleSendLine("Config Saved!");
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <ConsoleCommandSaveConfig+0x1c>)
 8001976:	f7ff fe33 	bl	80015e0 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	0800ef64 	.word	0x0800ef64

08001988 <ConsoleCommandFaceUpQuery>:
	return COMMAND_SUCCESS;
}

*/
static eCommandResult_T ConsoleCommandFaceUpQuery(const char buffer[])
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b0a5      	sub	sp, #148	; 0x94
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]

	uint8_t face;
	char msg[30];

	MPU6050_t data;
	MPU6050ReadStable(&data);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4618      	mov	r0, r3
 8001996:	f001 f91d 	bl	8002bd4 <MPU6050ReadStable>


	sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 800199a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800199e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019a2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80019a6:	e9cd 2300 	strd	r2, r3, [sp]
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4926      	ldr	r1, [pc, #152]	; (8001a48 <ConsoleCommandFaceUpQuery+0xc0>)
 80019b0:	4620      	mov	r0, r4
 80019b2:	f00a f807 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 80019b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe10 	bl	80015e0 <ConsoleSendLine>

	face = detectFaceUp();
 80019c0:	f001 fe64 	bl	800368c <detectFaceUp>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (face < FACE_COUNT)
 80019ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80019ce:	2b0b      	cmp	r3, #11
 80019d0:	d827      	bhi.n	8001a22 <ConsoleCommandFaceUpQuery+0x9a>
	{
		sprintf(msg,"Detected face %i is up",face);
 80019d2:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80019d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019da:	491c      	ldr	r1, [pc, #112]	; (8001a4c <ConsoleCommandFaceUpQuery+0xc4>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 fff1 	bl	800b9c4 <siprintf>
		ConsoleSendLine(msg);
 80019e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fdfa 	bl	80015e0 <ConsoleSendLine>
		uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 80019ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80019f0:	461a      	mov	r2, r3
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	227f      	movs	r2, #127	; 0x7f
 80019fc:	21ff      	movs	r1, #255	; 0xff
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 faa4 	bl	8004f4c <hsl_to_rgb>
 8001a04:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		ledAllOff();
 8001a08:	f001 fd74 	bl	80034f4 <ledAllOff>
		ledSetFaceColour(face, rgb_color,LED_FACE_MODE_NORMAL);
 8001a0c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001a10:	2200      	movs	r2, #0
 8001a12:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 fd89 	bl	800352e <ledSetFaceColour>
		ledRender();
 8001a1c:	f001 fd81 	bl	8003522 <ledRender>
 8001a20:	e00c      	b.n	8001a3c <ConsoleCommandFaceUpQuery+0xb4>

	}
	else
	{
		sprintf(msg,"** Face NOT detected %i",face);
 8001a22:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001a26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a2a:	4909      	ldr	r1, [pc, #36]	; (8001a50 <ConsoleCommandFaceUpQuery+0xc8>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f009 ffc9 	bl	800b9c4 <siprintf>
		ConsoleSendLine(msg);
 8001a32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fdd2 	bl	80015e0 <ConsoleSendLine>





	return COMMAND_SUCCESS;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	378c      	adds	r7, #140	; 0x8c
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0800ef74 	.word	0x0800ef74
 8001a4c:	0800ef88 	.word	0x0800ef88
 8001a50:	0800efa0 	.word	0x0800efa0

08001a54 <ConsoleCommandLEDSet>:

static eCommandResult_T ConsoleCommandLEDSet(const char buffer[])
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	uint32_t startIndex;
	eCommandResult_T result;
	int16_t faceNumber;
	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	461a      	mov	r2, r3
 8001a62:	2101      	movs	r1, #1
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fc5d 	bl	8001324 <ConsoleParamFindN>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <ConsoleCommandLEDSet+0x24>
		return result;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	e075      	b.n	8001b64 <ConsoleCommandLEDSet+0x110>

	uint8_t command = buffer[startIndex];
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	75bb      	strb	r3, [r7, #22]
	switch (command)
 8001a82:	7dbb      	ldrb	r3, [r7, #22]
 8001a84:	2b6f      	cmp	r3, #111	; 0x6f
 8001a86:	d062      	beq.n	8001b4e <ConsoleCommandLEDSet+0xfa>
 8001a88:	2b6f      	cmp	r3, #111	; 0x6f
 8001a8a:	dc68      	bgt.n	8001b5e <ConsoleCommandLEDSet+0x10a>
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d063      	beq.n	8001b58 <ConsoleCommandLEDSet+0x104>
 8001a90:	2b66      	cmp	r3, #102	; 0x66
 8001a92:	d164      	bne.n	8001b5e <ConsoleCommandLEDSet+0x10a>
	{
		case 'f':

			result = ConsoleReceiveParamInt16(buffer, 2, &faceNumber);
 8001a94:	f107 030e 	add.w	r3, r7, #14
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fca2 	bl	80013e6 <ConsoleReceiveParamInt16>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
			if (result != COMMAND_SUCCESS)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <ConsoleCommandLEDSet+0x62>
			{
				ConsoleSendLine("Invalid Face ID");
 8001aac:	482f      	ldr	r0, [pc, #188]	; (8001b6c <ConsoleCommandLEDSet+0x118>)
 8001aae:	f7ff fd97 	bl	80015e0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	e056      	b.n	8001b64 <ConsoleCommandLEDSet+0x110>
			}

			if (faceNumber >= PIXEL_RINGS)
 8001ab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aba:	2b0b      	cmp	r3, #11
 8001abc:	dd04      	ble.n	8001ac8 <ConsoleCommandLEDSet+0x74>
			{
				ConsoleSendLine("Invalid Face ID - Must be Zero Index");
 8001abe:	482c      	ldr	r0, [pc, #176]	; (8001b70 <ConsoleCommandLEDSet+0x11c>)
 8001ac0:	f7ff fd8e 	bl	80015e0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	e04d      	b.n	8001b64 <ConsoleCommandLEDSet+0x110>
			}


			result = ConsoleParamFindN(buffer,3,&startIndex);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	461a      	mov	r2, r3
 8001ace:	2103      	movs	r1, #3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fc27 	bl	8001324 <ConsoleParamFindN>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
			uint8_t colour = buffer[startIndex];
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	757b      	strb	r3, [r7, #21]
			if ('r' == colour)
 8001ae4:	7d7b      	ldrb	r3, [r7, #21]
 8001ae6:	2b72      	cmp	r3, #114	; 0x72
 8001ae8:	d10d      	bne.n	8001b06 <ConsoleCommandLEDSet+0xb2>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_RED_ID)->code,LED_FACE_MODE_NORMAL);
 8001aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aee:	b2dc      	uxtb	r4, r3
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 fce5 	bl	80024c0 <colourFindByid>
 8001af6:	4603      	mov	r3, r0
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2200      	movs	r2, #0
 8001afc:	4619      	mov	r1, r3
 8001afe:	4620      	mov	r0, r4
 8001b00:	f001 fd15 	bl	800352e <ledSetFaceColour>
 8001b04:	e020      	b.n	8001b48 <ConsoleCommandLEDSet+0xf4>
			else if ('g' == colour)
 8001b06:	7d7b      	ldrb	r3, [r7, #21]
 8001b08:	2b67      	cmp	r3, #103	; 0x67
 8001b0a:	d10d      	bne.n	8001b28 <ConsoleCommandLEDSet+0xd4>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_GREEN_ID)->code,LED_FACE_MODE_NORMAL);
 8001b0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b10:	b2dc      	uxtb	r4, r3
 8001b12:	2002      	movs	r0, #2
 8001b14:	f000 fcd4 	bl	80024c0 <colourFindByid>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4620      	mov	r0, r4
 8001b22:	f001 fd04 	bl	800352e <ledSetFaceColour>
 8001b26:	e00f      	b.n	8001b48 <ConsoleCommandLEDSet+0xf4>
			else if ('b' == colour)
 8001b28:	7d7b      	ldrb	r3, [r7, #21]
 8001b2a:	2b62      	cmp	r3, #98	; 0x62
 8001b2c:	d10c      	bne.n	8001b48 <ConsoleCommandLEDSet+0xf4>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_BLUE_ID)->code,LED_FACE_MODE_NORMAL);
 8001b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b32:	b2dc      	uxtb	r4, r3
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 fcc3 	bl	80024c0 <colourFindByid>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4619      	mov	r1, r3
 8001b42:	4620      	mov	r0, r4
 8001b44:	f001 fcf3 	bl	800352e <ledSetFaceColour>

			ledRender();
 8001b48:	f001 fceb 	bl	8003522 <ledRender>

			break;
 8001b4c:	e009      	b.n	8001b62 <ConsoleCommandLEDSet+0x10e>
		case 'o':
			ledAllOff();
 8001b4e:	f001 fcd1 	bl	80034f4 <ledAllOff>
			ledRender();
 8001b52:	f001 fce6 	bl	8003522 <ledRender>
			break;
 8001b56:	e004      	b.n	8001b62 <ConsoleCommandLEDSet+0x10e>
		case'd':
				ledDance();
 8001b58:	f001 fd49 	bl	80035ee <ledDance>
			break;
 8001b5c:	e001      	b.n	8001b62 <ConsoleCommandLEDSet+0x10e>
		default :
			return CONSOLE_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <ConsoleCommandLEDSet+0x110>
			break;
	}


	return CONSOLE_SUCCESS;
 8001b62:	2300      	movs	r3, #0

}
 8001b64:	4618      	mov	r0, r3
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	0800efb8 	.word	0x0800efb8
 8001b70:	0800efc8 	.word	0x0800efc8

08001b74 <ConsoleCommandMemTest>:

static eCommandResult_T ConsoleCommandMemTest(const char buffer[])
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
//
//	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 1);
//	Temp = (temp0 << 16) | (temp1 << 8) | temp2;
//	sprintf(msg,"Flash Mem Id \t%#02x %#02x %#02x %#02x %#02x %#02x %#02x %#02x ",id[0],id[1],id[2],id[3],id[4],id[5],id[6],id[7]);
//	ConsoleSendLine(msg);
	ConsoleSendLine("Commented out");
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <ConsoleCommandMemTest+0x18>)
 8001b7e:	f7ff fd2f 	bl	80015e0 <ConsoleSendLine>
	return CONSOLE_SUCCESS;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	0800eff0 	.word	0x0800eff0

08001b90 <ConsoleCommandCPUQuery>:

static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	492b      	ldr	r1, [pc, #172]	; (8001c4c <ConsoleCommandCPUQuery+0xbc>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f009 ff10 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd19 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 8001bae:	466a      	mov	r2, sp
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4926      	ldr	r1, [pc, #152]	; (8001c50 <ConsoleCommandCPUQuery+0xc0>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f009 ff04 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fd0d 	bl	80015e0 <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f009 f98a 	bl	800aee0 <malloc>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	22ab      	movs	r2, #171	; 0xab
 8001bd4:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	491d      	ldr	r1, [pc, #116]	; (8001c54 <ConsoleCommandCPUQuery+0xc4>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f009 feef 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fcf8 	bl	80015e0 <ConsoleSendLine>
	free(HP);
 8001bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bf2:	f009 f97d 	bl	800aef0 <free>
//	ConsoleSendLine(msg);

//	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
//	ConsoleSendLine(msg);

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <ConsoleCommandCPUQuery+0xc8>)
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4917      	ldr	r1, [pc, #92]	; (8001c5c <ConsoleCommandCPUQuery+0xcc>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f009 fee0 	bl	800b9c4 <siprintf>
		ConsoleSendLine(msg);
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fce9 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <ConsoleCommandCPUQuery+0xd0>)
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	4913      	ldr	r1, [pc, #76]	; (8001c64 <ConsoleCommandCPUQuery+0xd4>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f009 fed4 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fcdd 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 8001c26:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	490e      	ldr	r1, [pc, #56]	; (8001c68 <ConsoleCommandCPUQuery+0xd8>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f009 fec7 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fcd0 	bl	80015e0 <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3730      	adds	r7, #48	; 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0800f000 	.word	0x0800f000
 8001c50:	0800f014 	.word	0x0800f014
 8001c54:	0800f02c 	.word	0x0800f02c
 8001c58:	0800f4a8 	.word	0x0800f4a8
 8001c5c:	0800f044 	.word	0x0800f044
 8001c60:	20000540 	.word	0x20000540
 8001c64:	0800f05c 	.word	0x0800f05c
 8001c68:	0800f074 	.word	0x0800f074

08001c6c <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fb51 	bl	8001324 <ConsoleParamFindN>
 8001c82:	4603      	mov	r3, r0
 8001c84:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	e049      	b.n	8001d24 <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	18d0      	adds	r0, r2, r3
 8001c96:	f107 0114 	add.w	r1, r7, #20
 8001c9a:	f107 0218 	add.w	r2, r7, #24
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4921      	ldr	r1, [pc, #132]	; (8001d2c <ConsoleCommandDateSet+0xc0>)
 8001ca8:	f009 feac 	bl	800ba04 <siscanf>

	if (!IS_RTC_DATE(day) )
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <ConsoleCommandDateSet+0x4c>
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b1f      	cmp	r3, #31
 8001cb6:	d904      	bls.n	8001cc2 <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8001cb8:	481d      	ldr	r0, [pc, #116]	; (8001d30 <ConsoleCommandDateSet+0xc4>)
 8001cba:	f7ff fc91 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	e030      	b.n	8001d24 <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <ConsoleCommandDateSet+0x62>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d904      	bls.n	8001cd8 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001cce:	4819      	ldr	r0, [pc, #100]	; (8001d34 <ConsoleCommandDateSet+0xc8>)
 8001cd0:	f7ff fc86 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	e025      	b.n	8001d24 <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b63      	cmp	r3, #99	; 0x63
 8001cdc:	d904      	bls.n	8001ce8 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001cde:	4816      	ldr	r0, [pc, #88]	; (8001d38 <ConsoleCommandDateSet+0xcc>)
 8001ce0:	f7ff fc7e 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001ce4:	2310      	movs	r3, #16
 8001ce6:	e01d      	b.n	8001d24 <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <ConsoleCommandDateSet+0xd0>)
 8001d08:	f006 fbe2 	bl	80084d0 <HAL_RTC_SetDate>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <ConsoleCommandDateSet+0xd4>)
 8001d14:	f7ff fc64 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	e003      	b.n	8001d24 <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <ConsoleCommandDateSet+0xd8>)
 8001d1e:	f7ff fc5f 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001d22:	2300      	movs	r3, #0
	}
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0800f090 	.word	0x0800f090
 8001d30:	0800f09c 	.word	0x0800f09c
 8001d34:	0800f0c0 	.word	0x0800f0c0
 8001d38:	0800f0e4 	.word	0x0800f0e4
 8001d3c:	20000608 	.word	0x20000608
 8001d40:	0800f108 	.word	0x0800f108
 8001d44:	0800f12c 	.word	0x0800f12c

08001d48 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	461a      	mov	r2, r3
 8001d56:	2101      	movs	r1, #1
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fae3 	bl	8001324 <ConsoleParamFindN>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8001d64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	e041      	b.n	8001df4 <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	18d0      	adds	r0, r2, r3
 8001d76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	460b      	mov	r3, r1
 8001d86:	491d      	ldr	r1, [pc, #116]	; (8001dfc <ConsoleCommandTimeSet+0xb4>)
 8001d88:	f009 fe3c 	bl	800ba04 <siscanf>

	if (!IS_RTC_MINUTES(min) )
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	2b3b      	cmp	r3, #59	; 0x3b
 8001d90:	d904      	bls.n	8001d9c <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 8001d92:	481b      	ldr	r0, [pc, #108]	; (8001e00 <ConsoleCommandTimeSet+0xb8>)
 8001d94:	f7ff fc24 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001d98:	2310      	movs	r3, #16
 8001d9a:	e02b      	b.n	8001df4 <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2b3b      	cmp	r3, #59	; 0x3b
 8001da0:	d904      	bls.n	8001dac <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 8001da2:	4818      	ldr	r0, [pc, #96]	; (8001e04 <ConsoleCommandTimeSet+0xbc>)
 8001da4:	f7ff fc1c 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001da8:	2310      	movs	r3, #16
 8001daa:	e023      	b.n	8001df4 <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	2b17      	cmp	r3, #23
 8001db0:	d904      	bls.n	8001dbc <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 8001db2:	4815      	ldr	r0, [pc, #84]	; (8001e08 <ConsoleCommandTimeSet+0xc0>)
 8001db4:	f7ff fc14 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001db8:	2310      	movs	r3, #16
 8001dba:	e01b      	b.n	8001df4 <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <ConsoleCommandTimeSet+0xc4>)
 8001dd8:	f006 fa82 	bl	80082e0 <HAL_RTC_SetTime>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001de2:	480b      	ldr	r0, [pc, #44]	; (8001e10 <ConsoleCommandTimeSet+0xc8>)
 8001de4:	f7ff fbfc 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001de8:	2310      	movs	r3, #16
 8001dea:	e003      	b.n	8001df4 <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001dec:	4809      	ldr	r0, [pc, #36]	; (8001e14 <ConsoleCommandTimeSet+0xcc>)
 8001dee:	f7ff fbf7 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001df2:	2300      	movs	r3, #0
	}
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	0800f138 	.word	0x0800f138
 8001e00:	0800f144 	.word	0x0800f144
 8001e04:	0800f168 	.word	0x0800f168
 8001e08:	0800f190 	.word	0x0800f190
 8001e0c:	20000608 	.word	0x20000608
 8001e10:	0800f1b4 	.word	0x0800f1b4
 8001e14:	0800f1d8 	.word	0x0800f1d8

08001e18 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b090      	sub	sp, #64	; 0x40
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 8001e20:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 fb1c 	bl	8003462 <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 8001e2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 fb24 	bl	800347c <lc709203_getCellTemp>
	lc709203_getId(&version);
 8001e34:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fb2c 	bl	8003496 <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4922      	ldr	r1, [pc, #136]	; (8001ecc <ConsoleCommandLipoQuery+0xb4>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f009 fdbd 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fbc6 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 8001e54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001e56:	461a      	mov	r2, r3
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	491c      	ldr	r1, [pc, #112]	; (8001ed0 <ConsoleCommandLipoQuery+0xb8>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f009 fdb0 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbb9 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 8001e6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb5f 	bl	8000534 <__aeabi_ui2d>
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <ConsoleCommandLipoQuery+0xbc>)
 8001e7c:	f7fe fcfe 	bl	800087c <__aeabi_ddiv>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	f107 0008 	add.w	r0, r7, #8
 8001e88:	4913      	ldr	r1, [pc, #76]	; (8001ed8 <ConsoleCommandLipoQuery+0xc0>)
 8001e8a:	f009 fd9b 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fba4 	bl	80015e0 <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001e98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb4a 	bl	8000534 <__aeabi_ui2d>
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <ConsoleCommandLipoQuery+0xc4>)
 8001ea6:	f7fe fce9 	bl	800087c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	f107 0008 	add.w	r0, r7, #8
 8001eb2:	490b      	ldr	r1, [pc, #44]	; (8001ee0 <ConsoleCommandLipoQuery+0xc8>)
 8001eb4:	f009 fd86 	bl	800b9c4 <siprintf>
	ConsoleSendLine(msg);
 8001eb8:	f107 0308 	add.w	r3, r7, #8
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb8f 	bl	80015e0 <ConsoleSendLine>



	return COMMAND_SUCCESS;
 8001ec2:	2300      	movs	r3, #0

}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3740      	adds	r7, #64	; 0x40
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0800f1e4 	.word	0x0800f1e4
 8001ed0:	0800f1fc 	.word	0x0800f1fc
 8001ed4:	408f4000 	.word	0x408f4000
 8001ed8:	0800f210 	.word	0x0800f210
 8001edc:	40590000 	.word	0x40590000
 8001ee0:	0800f228 	.word	0x0800f228

08001ee4 <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ee8:	b0c3      	sub	sp, #268	; 0x10c
 8001eea:	af08      	add	r7, sp, #32
 8001eec:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	char binStr[9];
	MPU6050_t data;
	char msg[100];
	uint32_t paramIndex;
	float rawAveX = 0;
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float rawAveY = 0;
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float rawAveZ = 0;
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	ConsoleParamFindN(buffer, 1 , &paramIndex);
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fa08 	bl	8001324 <ConsoleParamFindN>

	if (0 == paramIndex)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11a      	bne.n	8001f50 <ConsoleCommandAccelQuery+0x6c>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 8001f1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f1e:	4619      	mov	r1, r3
 8001f20:	48bd      	ldr	r0, [pc, #756]	; (8002218 <ConsoleCommandAccelQuery+0x334>)
 8001f22:	f000 fe75 	bl	8002c10 <MPU6050_Read_All>
		sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001f26:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001f2a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001f2e:	f107 040c 	add.w	r4, r7, #12
 8001f32:	e9cd 2300 	strd	r2, r3, [sp]
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	49b8      	ldr	r1, [pc, #736]	; (800221c <ConsoleCommandAccelQuery+0x338>)
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f009 fd41 	bl	800b9c4 <siprintf>
		ConsoleSendLine(msg);
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fb4a 	bl	80015e0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e15d      	b.n	800220c <ConsoleCommandAccelQuery+0x328>
	}


	// Read Raw n Times (Param r n where n = number of reads
	switch (buffer[paramIndex])
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3b67      	subs	r3, #103	; 0x67
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d824      	bhi.n	8001fa8 <ConsoleCommandAccelQuery+0xc4>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <ConsoleCommandAccelQuery+0x80>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08002157 	.word	0x08002157
 8001f68:	08001fa9 	.word	0x08001fa9
 8001f6c:	08001fa9 	.word	0x08001fa9
 8001f70:	08001fa9 	.word	0x08001fa9
 8001f74:	08002103 	.word	0x08002103
 8001f78:	08001fa9 	.word	0x08001fa9
 8001f7c:	08001fa9 	.word	0x08001fa9
 8001f80:	08001fa9 	.word	0x08001fa9
 8001f84:	08001fa9 	.word	0x08001fa9
 8001f88:	08001fa9 	.word	0x08001fa9
 8001f8c:	08001fa9 	.word	0x08001fa9
 8001f90:	08001fad 	.word	0x08001fad
 8001f94:	08001fa9 	.word	0x08001fa9
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001fa9 	.word	0x08001fa9
 8001fa0:	08001fa9 	.word	0x08001fa9
 8001fa4:	080021b5 	.word	0x080021b5
	{
		default:
				return COMMAND_PARAMETER_ERROR;
 8001fa8:	2310      	movs	r3, #16
 8001faa:	e12f      	b.n	800220c <ConsoleCommandAccelQuery+0x328>
		case 'r':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8001fac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fa16 	bl	80013e6 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001fc0:	e052      	b.n	8002068 <ConsoleCommandAccelQuery+0x184>
				{
					MPU6050_Read_Accel(&I2C_MPU6050, &data);
 8001fc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4893      	ldr	r0, [pc, #588]	; (8002218 <ConsoleCommandAccelQuery+0x334>)
 8001fca:	f000 fd31 	bl	8002a30 <MPU6050_Read_Accel>
					rawAveX += data.Accel_X_RAW;
 8001fce:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
					rawAveY += data.Accel_Y_RAW;
 8001fe6:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff2:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffa:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
					rawAveZ += data.Accel_Z_RAW;
 8001ffe:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
					sprintf(msg,"RAW:[X:%5i Y:%5i Z:5%i] G:[X:%2f Y:%2f Z:%2f]",data.Accel_X_RAW, data.Accel_Y_RAW,data.Accel_Z_RAW, data.Ax,data.Ay,data.Az);
 8002016:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800201a:	469c      	mov	ip, r3
 800201c:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8002020:	469e      	mov	lr, r3
 8002022:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800202c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002030:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002034:	f107 060c 	add.w	r6, r7, #12
 8002038:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800203c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002040:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4673      	mov	r3, lr
 800204a:	4662      	mov	r2, ip
 800204c:	4974      	ldr	r1, [pc, #464]	; (8002220 <ConsoleCommandAccelQuery+0x33c>)
 800204e:	4630      	mov	r0, r6
 8002050:	f009 fcb8 	bl	800b9c4 <siprintf>
					ConsoleSendLine(msg);
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fac1 	bl	80015e0 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 800205e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002062:	3301      	adds	r3, #1
 8002064:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8002068:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800206c:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8002070:	4293      	cmp	r3, r2
 8002072:	dba6      	blt.n	8001fc2 <ConsoleCommandAccelQuery+0xde>
				}
				rawAveX = rawAveX/n;
 8002074:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002080:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 8002084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002088:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				rawAveY = rawAveY/n;
 800208c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002098:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 800209c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a0:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				rawAveZ = rawAveZ/n;
 80020a4:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 80020b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b8:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				sprintf(msg,"\nRAW Average :[X:%5f Y:%5f Z:5%f]\n",rawAveX,rawAveY,rawAveZ);
 80020bc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80020c0:	f7fe fa5a 	bl	8000578 <__aeabi_f2d>
 80020c4:	4680      	mov	r8, r0
 80020c6:	4689      	mov	r9, r1
 80020c8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80020cc:	f7fe fa54 	bl	8000578 <__aeabi_f2d>
 80020d0:	4604      	mov	r4, r0
 80020d2:	460d      	mov	r5, r1
 80020d4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80020d8:	f7fe fa4e 	bl	8000578 <__aeabi_f2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	f107 000c 	add.w	r0, r7, #12
 80020e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020e8:	e9cd 4500 	strd	r4, r5, [sp]
 80020ec:	4642      	mov	r2, r8
 80020ee:	464b      	mov	r3, r9
 80020f0:	494c      	ldr	r1, [pc, #304]	; (8002224 <ConsoleCommandAccelQuery+0x340>)
 80020f2:	f009 fc67 	bl	800b9c4 <siprintf>
				ConsoleSendLine(msg);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fa70 	bl	80015e0 <ConsoleSendLine>
				break;
 8002100:	e083      	b.n	800220a <ConsoleCommandAccelQuery+0x326>

		case 'k':
				ConsoleSendLine("--* Kalman Angle *--");
 8002102:	4849      	ldr	r0, [pc, #292]	; (8002228 <ConsoleCommandAccelQuery+0x344>)
 8002104:	f7ff fa6c 	bl	80015e0 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 8002108:	2300      	movs	r3, #0
 800210a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800210e:	e00a      	b.n	8002126 <ConsoleCommandAccelQuery+0x242>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 8002110:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002114:	4619      	mov	r1, r3
 8002116:	4840      	ldr	r0, [pc, #256]	; (8002218 <ConsoleCommandAccelQuery+0x334>)
 8002118:	f000 fd7a 	bl	8002c10 <MPU6050_Read_All>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 800211c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8002120:	3301      	adds	r3, #1
 8002122:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8002126:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800212a:	2b31      	cmp	r3, #49	; 0x31
 800212c:	d9f0      	bls.n	8002110 <ConsoleCommandAccelQuery+0x22c>
				}
				sprintf(msg,"[X:%2f Y:%2f]\n",data.KalmanAngleX, data.KalmanAngleY);
 800212e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002132:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002136:	f107 040c 	add.w	r4, r7, #12
 800213a:	e9cd 2300 	strd	r2, r3, [sp]
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	493a      	ldr	r1, [pc, #232]	; (800222c <ConsoleCommandAccelQuery+0x348>)
 8002144:	4620      	mov	r0, r4
 8002146:	f009 fc3d 	bl	800b9c4 <siprintf>
				ConsoleSendLine(msg);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fa46 	bl	80015e0 <ConsoleSendLine>
			break;
 8002154:	e059      	b.n	800220a <ConsoleCommandAccelQuery+0x326>
		case 'g':
			ConsoleReceiveParamHexUint16(buffer, 2, &reg);
 8002156:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 800215a:	461a      	mov	r2, r3
 800215c:	2102      	movs	r1, #2
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff f9a7 	bl	80014b2 <ConsoleReceiveParamHexUint16>
			regData =  MPU6050_ReadReg(&I2C_MPU6050,reg);
 8002164:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002168:	4619      	mov	r1, r3
 800216a:	482b      	ldr	r0, [pc, #172]	; (8002218 <ConsoleCommandAccelQuery+0x334>)
 800216c:	f000 fd02 	bl	8002b74 <MPU6050_ReadReg>
 8002170:	4603      	mov	r3, r0
 8002172:	b29b      	uxth	r3, r3
 8002174:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			byteToBin(regData, binStr);
 8002178:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f001 f93c 	bl	8003402 <byteToBin>
			sprintf(msg,"Reg [0x%x] = %x, %s",reg,regData,binStr);
 800218a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800218e:	461a      	mov	r2, r3
 8002190:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002194:	4619      	mov	r1, r3
 8002196:	f107 000c 	add.w	r0, r7, #12
 800219a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	460b      	mov	r3, r1
 80021a2:	4923      	ldr	r1, [pc, #140]	; (8002230 <ConsoleCommandAccelQuery+0x34c>)
 80021a4:	f009 fc0e 	bl	800b9c4 <siprintf>
			ConsoleSendLine(msg);
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa17 	bl	80015e0 <ConsoleSendLine>
		break;
 80021b2:	e02a      	b.n	800220a <ConsoleCommandAccelQuery+0x326>
		case 'w':
				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 2, &reg))
 80021b4:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 80021b8:	461a      	mov	r2, r3
 80021ba:	2102      	movs	r1, #2
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff f978 	bl	80014b2 <ConsoleReceiveParamHexUint16>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <ConsoleCommandAccelQuery+0x2ee>
				{
					ConsoleSendLine("Register missing");
 80021c8:	481a      	ldr	r0, [pc, #104]	; (8002234 <ConsoleCommandAccelQuery+0x350>)
 80021ca:	f7ff fa09 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80021ce:	2310      	movs	r3, #16
 80021d0:	e01c      	b.n	800220c <ConsoleCommandAccelQuery+0x328>
				};

				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 3, &regData))
 80021d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021d6:	461a      	mov	r2, r3
 80021d8:	2103      	movs	r1, #3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff f969 	bl	80014b2 <ConsoleReceiveParamHexUint16>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <ConsoleCommandAccelQuery+0x30c>
				{
					ConsoleSendLine("Register Data missing");
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <ConsoleCommandAccelQuery+0x354>)
 80021e8:	f7ff f9fa 	bl	80015e0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80021ec:	2310      	movs	r3, #16
 80021ee:	e00d      	b.n	800220c <ConsoleCommandAccelQuery+0x328>
				};
				MPU6050_WriteReg(&I2C_MPU6050,reg,regData );
 80021f0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80021f4:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <ConsoleCommandAccelQuery+0x334>)
 80021fe:	f000 fcd1 	bl	8002ba4 <MPU6050_WriteReg>

				ConsoleSendLine("done.");
 8002202:	480e      	ldr	r0, [pc, #56]	; (800223c <ConsoleCommandAccelQuery+0x358>)
 8002204:	f7ff f9ec 	bl	80015e0 <ConsoleSendLine>
				break;
 8002208:	bf00      	nop
	}

	return COMMAND_SUCCESS;
 800220a:	2300      	movs	r3, #0



}
 800220c:	4618      	mov	r0, r3
 800220e:	37ec      	adds	r7, #236	; 0xec
 8002210:	46bd      	mov	sp, r7
 8002212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002216:	bf00      	nop
 8002218:	200005b4 	.word	0x200005b4
 800221c:	0800f23c 	.word	0x0800f23c
 8002220:	0800f25c 	.word	0x0800f25c
 8002224:	0800f28c 	.word	0x0800f28c
 8002228:	0800f2b0 	.word	0x0800f2b0
 800222c:	0800f2c8 	.word	0x0800f2c8
 8002230:	0800f2d8 	.word	0x0800f2d8
 8002234:	0800f2ec 	.word	0x0800f2ec
 8002238:	0800f300 	.word	0x0800f300
 800223c:	0800f318 	.word	0x0800f318

08002240 <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b092      	sub	sp, #72	; 0x48
 8002244:	af02      	add	r7, sp, #8
 8002246:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	480f      	ldr	r0, [pc, #60]	; (8002290 <ConsoleCommandTimeQuery+0x50>)
 8002252:	f006 f8df 	bl	8008414 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	480c      	ldr	r0, [pc, #48]	; (8002290 <ConsoleCommandTimeQuery+0x50>)
 8002260:	f006 f9ba 	bl	80085d8 <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8002264:	7b3b      	ldrb	r3, [r7, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	7b7b      	ldrb	r3, [r7, #13]
 800226a:	4619      	mov	r1, r3
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	f107 0020 	add.w	r0, r7, #32
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	460b      	mov	r3, r1
 8002276:	4907      	ldr	r1, [pc, #28]	; (8002294 <ConsoleCommandTimeQuery+0x54>)
 8002278:	f009 fba4 	bl	800b9c4 <siprintf>
	ConsoleSendString(time);
 800227c:	f107 0320 	add.w	r3, r7, #32
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f9a0 	bl	80015c6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3740      	adds	r7, #64	; 0x40
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000608 	.word	0x20000608
 8002294:	0800f320 	.word	0x0800f320

08002298 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08e      	sub	sp, #56	; 0x38
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <ConsoleCommandDateQuery+0x44>)
 80022aa:	f006 f995 	bl	80085d8 <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80022ae:	7bbb      	ldrb	r3, [r7, #14]
 80022b0:	461a      	mov	r2, r3
 80022b2:	7b7b      	ldrb	r3, [r7, #13]
 80022b4:	4619      	mov	r1, r3
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	f107 0010 	add.w	r0, r7, #16
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	460b      	mov	r3, r1
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <ConsoleCommandDateQuery+0x48>)
 80022c2:	f009 fb7f 	bl	800b9c4 <siprintf>
	ConsoleSendString(date);
 80022c6:	f107 0310 	add.w	r3, r7, #16
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f97b 	bl	80015c6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3730      	adds	r7, #48	; 0x30
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000608 	.word	0x20000608
 80022e0:	0800f338 	.word	0x0800f338

080022e4 <ConsoleCommandHelp>:




static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80022ec:	2300      	movs	r3, #0
 80022ee:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 80022f0:	2314      	movs	r3, #20
 80022f2:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e01c      	b.n	8002334 <ConsoleCommandHelp+0x50>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <ConsoleCommandHelp+0x64>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	216c      	movs	r1, #108	; 0x6c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f899 	bl	8002440 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 800230e:	480f      	ldr	r0, [pc, #60]	; (800234c <ConsoleCommandHelp+0x68>)
 8002310:	f000 f896 	bl	8002440 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	226c      	movs	r2, #108	; 0x6c
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	3308      	adds	r3, #8
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <ConsoleCommandHelp+0x64>)
 8002320:	4413      	add	r3, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f88c 	bl	8002440 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <ConsoleCommandHelp+0x6c>)
 800232a:	f000 f889 	bl	8002440 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3b01      	subs	r3, #1
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3dd      	bcc.n	80022fa <ConsoleCommandHelp+0x16>
	}
	return result;
 800233e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	0800f4ac 	.word	0x0800f4ac
 800234c:	0800f350 	.word	0x0800f350
 8002350:	0800f354 	.word	0x0800f354

08002354 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <ConsoleCommandVer+0x24>)
 8002362:	f000 f86d 	bl	8002440 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <ConsoleCommandVer+0x28>)
 8002368:	f000 f86a 	bl	8002440 <ConsoleIoSendString>
	return result;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	0800f358 	.word	0x0800f358
 800237c:	0800f354 	.word	0x0800f354

08002380 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <ConsoleCommandsGetTable+0x10>)
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	0800f4ac 	.word	0x0800f4ac

08002394 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 800239c:	2201      	movs	r2, #1
 800239e:	4909      	ldr	r1, [pc, #36]	; (80023c4 <HAL_UART_RxCpltCallback+0x30>)
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <HAL_UART_RxCpltCallback+0x34>)
 80023a2:	f007 fdd6 	bl	8009f52 <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_UART_RxCpltCallback+0x30>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d005      	beq.n	80023ba <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_UART_RxCpltCallback+0x30>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_UART_RxCpltCallback+0x38>)
 80023b6:	f7fe fdb0 	bl	8000f1a <cBuffer_Write>

    }
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000058c 	.word	0x2000058c
 80023c8:	20000774 	.word	0x20000774
 80023cc:	20000584 	.word	0x20000584

080023d0 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 80023d4:	2240      	movs	r2, #64	; 0x40
 80023d6:	4906      	ldr	r1, [pc, #24]	; (80023f0 <ConsoleIoInit+0x20>)
 80023d8:	4806      	ldr	r0, [pc, #24]	; (80023f4 <ConsoleIoInit+0x24>)
 80023da:	f7fe fd7f 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 80023de:	2201      	movs	r2, #1
 80023e0:	4905      	ldr	r1, [pc, #20]	; (80023f8 <ConsoleIoInit+0x28>)
 80023e2:	4806      	ldr	r0, [pc, #24]	; (80023fc <ConsoleIoInit+0x2c>)
 80023e4:	f007 fdb5 	bl	8009f52 <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000544 	.word	0x20000544
 80023f4:	20000584 	.word	0x20000584
 80023f8:	2000058c 	.word	0x2000058c
 80023fc:	20000774 	.word	0x20000774

08002400 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8002408:	f107 030f 	add.w	r3, r7, #15
 800240c:	220d      	movs	r2, #13
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	480a      	ldr	r0, [pc, #40]	; (800243c <ConsoleIoReceive+0x3c>)
 8002412:	f7fe fda5 	bl	8000f60 <cBuffer_GetString>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	3b01      	subs	r3, #1
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 ff8e 	bl	800334a <manageBackSpace>
		return CONSOLE_SUCCESS;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 8002432:	2302      	movs	r3, #2

}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000584 	.word	0x20000584

08002440 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fd fed3 	bl	80001f4 <strlen>
 800244e:	4603      	mov	r3, r0
 8002450:	b29a      	uxth	r2, r3
 8002452:	2364      	movs	r3, #100	; 0x64
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <ConsoleIoSendString+0x28>)
 8002458:	f007 fce9 	bl	8009e2e <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000774 	.word	0x20000774

0800246c <colourFindByCode>:
			{COLOUR_ERROR_ID,"BLACK",0xFA0000}

};

colour_t * colourFindByCode(const uint32_t code)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e016      	b.n	80024a8 <colourFindByCode+0x3c>
	{
		if (code == colours[i].code)
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	490f      	ldr	r1, [pc, #60]	; (80024bc <colourFindByCode+0x50>)
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3310      	adds	r3, #16
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d107      	bne.n	80024a2 <colourFindByCode+0x36>
		{
			return &colours[i];
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <colourFindByCode+0x50>)
 800249e:	4413      	add	r3, r2
 80024a0:	e006      	b.n	80024b0 <colourFindByCode+0x44>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	3301      	adds	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b0d      	cmp	r3, #13
 80024ac:	d9e5      	bls.n	800247a <colourFindByCode+0xe>
		}
	}
	return NULL;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	20000000 	.word	0x20000000

080024c0 <colourFindByid>:

	return NULL;
}

colour_t *colourFindByid(const uint8_t id )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e015      	b.n	80024fc <colourFindByid+0x3c>
	{
		if (id == colours[i].id)
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	490f      	ldr	r1, [pc, #60]	; (8002510 <colourFindByid+0x50>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d107      	bne.n	80024f6 <colourFindByid+0x36>
		{
			return &colours[i];
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <colourFindByid+0x50>)
 80024f2:	4413      	add	r3, r2
 80024f4:	e006      	b.n	8002504 <colourFindByid+0x44>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	3301      	adds	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b0d      	cmp	r3, #13
 8002500:	d9e6      	bls.n	80024d0 <colourFindByid+0x10>
		}
	}

	return NULL;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20000000 	.word	0x20000000

08002514 <dodecaInit>:
		}
};


eDodecaErr_t dodecaInit(dodecaItems_t * items)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	dodecaItems = items;
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <dodecaInit+0x1c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
	return DODECA_ERR_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20000590 	.word	0x20000590

08002534 <dodecaReset>:

eDodecaErr_t dodecaReset()
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 800253a:	2300      	movs	r3, #0
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	e074      	b.n	800262a <dodecaReset+0xf6>
	{
		dodecaItems->items[i].id = i;
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <dodecaReset+0x108>)
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	79fa      	ldrb	r2, [r7, #7]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	79fa      	ldrb	r2, [r7, #7]
 8002552:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].colour = colourFindByid(defaultDoceca.items[i].colour)->code;
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	493a      	ldr	r1, [pc, #232]	; (8002640 <dodecaReset+0x10c>)
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3318      	adds	r3, #24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ffa9 	bl	80024c0 <colourFindByid>
 800256e:	4603      	mov	r3, r0
 8002570:	4a32      	ldr	r2, [pc, #200]	; (800263c <dodecaReset+0x108>)
 8002572:	6810      	ldr	r0, [r2, #0]
 8002574:	79fa      	ldrb	r2, [r7, #7]
 8002576:	6919      	ldr	r1, [r3, #16]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4403      	add	r3, r0
 8002582:	3318      	adds	r3, #24
 8002584:	6019      	str	r1, [r3, #0]
		dodecaItems->items[i].maxTimeMins = defaultDoceca.items[i].maxTimeMins;
 8002586:	79f9      	ldrb	r1, [r7, #7]
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <dodecaReset+0x108>)
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4c2c      	ldr	r4, [pc, #176]	; (8002640 <dodecaReset+0x10c>)
 8002590:	460b      	mov	r3, r1
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4423      	add	r3, r4
 800259a:	331d      	adds	r3, #29
 800259c:	7819      	ldrb	r1, [r3, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4403      	add	r3, r0
 80025a8:	331d      	adds	r3, #29
 80025aa:	460a      	mov	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].minTimeMins = defaultDoceca.items[i].minTimeMins;
 80025ae:	79f9      	ldrb	r1, [r7, #7]
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <dodecaReset+0x108>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	4c22      	ldr	r4, [pc, #136]	; (8002640 <dodecaReset+0x10c>)
 80025b8:	460b      	mov	r3, r1
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4423      	add	r3, r4
 80025c2:	331c      	adds	r3, #28
 80025c4:	7819      	ldrb	r1, [r3, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4403      	add	r3, r0
 80025d0:	331c      	adds	r3, #28
 80025d2:	460a      	mov	r2, r1
 80025d4:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].state = defaultDoceca.items[i].state;
 80025d6:	79f9      	ldrb	r1, [r7, #7]
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <dodecaReset+0x108>)
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	79fa      	ldrb	r2, [r7, #7]
 80025de:	4c18      	ldr	r4, [pc, #96]	; (8002640 <dodecaReset+0x10c>)
 80025e0:	460b      	mov	r3, r1
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4423      	add	r3, r4
 80025ea:	3320      	adds	r3, #32
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	3320      	adds	r3, #32
 80025fa:	6019      	str	r1, [r3, #0]
		strcpy(dodecaItems->items[i].name,defaultDoceca.items[i].name);
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <dodecaReset+0x108>)
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	1c58      	adds	r0, r3, #1
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4a09      	ldr	r2, [pc, #36]	; (8002640 <dodecaReset+0x10c>)
 800261a:	4413      	add	r3, r2
 800261c:	3301      	adds	r3, #1
 800261e:	4619      	mov	r1, r3
 8002620:	f009 fa6e 	bl	800bb00 <strcpy>
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	3301      	adds	r3, #1
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	2b0b      	cmp	r3, #11
 800262e:	d987      	bls.n	8002540 <dodecaReset+0xc>
	}
	return DODECA_ERR_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bd90      	pop	{r4, r7, pc}
 800263a:	bf00      	nop
 800263c:	20000590 	.word	0x20000590
 8002640:	0800fd1c 	.word	0x0800fd1c

08002644 <dodecaGet>:

dodecaItem_t * dodecaGet(uint8_t id)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	if (id > DODECA_COUNT_MAX )
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	d901      	bls.n	8002658 <dodecaGet+0x14>
	{
		return NULL;
 8002654:	2300      	movs	r3, #0
 8002656:	e007      	b.n	8002668 <dodecaGet+0x24>
	}

	return   &dodecaItems->items[id];
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <dodecaGet+0x30>)
 800265a:	6819      	ldr	r1, [r3, #0]
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	20000590 	.word	0x20000590

08002678 <dodecaStart>:

eDodecaErr_t dodecaStart(uint8_t id)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
	dodecaItem_t * dodeca ;
	dodeca = dodecaGet(id);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ffdd 	bl	8002644 <dodecaGet>
 800268a:	60f8      	str	r0, [r7, #12]
	dodeca->state = DODECA_STATE_ACTIVE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2202      	movs	r2, #2
 8002690:	621a      	str	r2, [r3, #32]
	ledSetFaceColour(id, dodeca->colour,LED_FACE_MODE_NORMAL );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6999      	ldr	r1, [r3, #24]
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2200      	movs	r2, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f000 ff47 	bl	800352e <ledSetFaceColour>
	ledRender();
 80026a0:	f000 ff3f 	bl	8003522 <ledRender>
	return DODECA_ERR_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <dodecaStop>:

eDodecaErr_t dodecaStop(uint8_t id)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
	dodecaItem_t * dodeca ;
	dodeca = dodecaGet(id);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ffc2 	bl	8002644 <dodecaGet>
 80026c0:	60f8      	str	r0, [r7, #12]
	dodeca->state = DODECA_STATE_STOPPED;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2203      	movs	r2, #3
 80026c6:	621a      	str	r2, [r3, #32]
	ledSetFaceColour(id, colourFindByid(COLOUR_BLACK_ID)->code,LED_FACE_MODE_NORMAL );
 80026c8:	200c      	movs	r0, #12
 80026ca:	f7ff fef9 	bl	80024c0 <colourFindByid>
 80026ce:	4603      	mov	r3, r0
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2200      	movs	r2, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 ff29 	bl	800352e <ledSetFaceColour>
	return DODECA_ERR_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <dodecaGetStateName>:
}



eDodecaErr_t dodecaGetStateName(eDodecaState_t state,char* name)
{
 80026e8:	b490      	push	{r4, r7}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]

	switch (state)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d016      	beq.n	8002726 <dodecaGetStateName+0x3e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d824      	bhi.n	8002748 <dodecaGetStateName+0x60>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d003      	beq.n	800270c <dodecaGetStateName+0x24>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d015      	beq.n	8002736 <dodecaGetStateName+0x4e>
 800270a:	e01d      	b.n	8002748 <dodecaGetStateName+0x60>
	{
		case DODECA_STATE_NOT_CONFIGURED : strcpy(name,"Not Configured"); break;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4a16      	ldr	r2, [pc, #88]	; (8002768 <dodecaGetStateName+0x80>)
 8002710:	461c      	mov	r4, r3
 8002712:	4613      	mov	r3, r2
 8002714:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002716:	6020      	str	r0, [r4, #0]
 8002718:	6061      	str	r1, [r4, #4]
 800271a:	60a2      	str	r2, [r4, #8]
 800271c:	881a      	ldrh	r2, [r3, #0]
 800271e:	789b      	ldrb	r3, [r3, #2]
 8002720:	81a2      	strh	r2, [r4, #12]
 8002722:	73a3      	strb	r3, [r4, #14]
 8002724:	e01a      	b.n	800275c <dodecaGetStateName+0x74>
		case DODECA_STATE_STOPPED : strcpy(name,"Stopped"); break;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4910      	ldr	r1, [pc, #64]	; (800276c <dodecaGetStateName+0x84>)
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	cb03      	ldmia	r3!, {r0, r1}
 8002730:	6010      	str	r0, [r2, #0]
 8002732:	6051      	str	r1, [r2, #4]
 8002734:	e012      	b.n	800275c <dodecaGetStateName+0x74>
		case DODECA_STATE_ACTIVE : strcpy(name,"Active"); break;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <dodecaGetStateName+0x88>)
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	6018      	str	r0, [r3, #0]
 800273e:	8891      	ldrh	r1, [r2, #4]
 8002740:	7992      	ldrb	r2, [r2, #6]
 8002742:	8099      	strh	r1, [r3, #4]
 8002744:	719a      	strb	r2, [r3, #6]
 8002746:	e009      	b.n	800275c <dodecaGetStateName+0x74>
		default: strcpy(name,"undefined"); break;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <dodecaGetStateName+0x8c>)
 800274c:	461a      	mov	r2, r3
 800274e:	460b      	mov	r3, r1
 8002750:	cb03      	ldmia	r3!, {r0, r1}
 8002752:	6010      	str	r0, [r2, #0]
 8002754:	6051      	str	r1, [r2, #4]
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	8113      	strh	r3, [r2, #8]
 800275a:	bf00      	nop
	}

	return DODECA_ERR_OK;
 800275c:	2300      	movs	r3, #0


}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bc90      	pop	{r4, r7}
 8002766:	4770      	bx	lr
 8002768:	0800f364 	.word	0x0800f364
 800276c:	0800f374 	.word	0x0800f374
 8002770:	0800f37c 	.word	0x0800f37c
 8002774:	0800f384 	.word	0x0800f384

08002778 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <GetSector+0xc8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d806      	bhi.n	800279a <GetSector+0x22>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002792:	d302      	bcc.n	800279a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e04b      	b.n	8002832 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a29      	ldr	r2, [pc, #164]	; (8002844 <GetSector+0xcc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d806      	bhi.n	80027b0 <GetSector+0x38>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a28      	ldr	r2, [pc, #160]	; (8002848 <GetSector+0xd0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d302      	bcc.n	80027b0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e040      	b.n	8002832 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <GetSector+0xd4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d806      	bhi.n	80027c6 <GetSector+0x4e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a25      	ldr	r2, [pc, #148]	; (8002850 <GetSector+0xd8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d302      	bcc.n	80027c6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80027c0:	2302      	movs	r3, #2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e035      	b.n	8002832 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <GetSector+0xdc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d206      	bcs.n	80027dc <GetSector+0x64>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a21      	ldr	r2, [pc, #132]	; (8002858 <GetSector+0xe0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d302      	bcc.n	80027dc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80027d6:	2303      	movs	r3, #3
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e02a      	b.n	8002832 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <GetSector+0xe4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d206      	bcs.n	80027f2 <GetSector+0x7a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <GetSector+0xdc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d902      	bls.n	80027f2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80027ec:	2304      	movs	r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e01f      	b.n	8002832 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <GetSector+0xe8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d206      	bcs.n	8002808 <GetSector+0x90>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <GetSector+0xe4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d902      	bls.n	8002808 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8002802:	2305      	movs	r3, #5
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e014      	b.n	8002832 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <GetSector+0xec>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d206      	bcs.n	800281e <GetSector+0xa6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <GetSector+0xe8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8002818:	2306      	movs	r3, #6
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e009      	b.n	8002832 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a11      	ldr	r2, [pc, #68]	; (8002868 <GetSector+0xf0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d205      	bcs.n	8002832 <GetSector+0xba>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <GetSector+0xec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800282e:	2307      	movs	r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	08003ffe 	.word	0x08003ffe
 8002844:	08007ffe 	.word	0x08007ffe
 8002848:	08004000 	.word	0x08004000
 800284c:	0800bffe 	.word	0x0800bffe
 8002850:	08008000 	.word	0x08008000
 8002854:	0800ffff 	.word	0x0800ffff
 8002858:	0800c000 	.word	0x0800c000
 800285c:	0801ffff 	.word	0x0801ffff
 8002860:	0803ffff 	.word	0x0803ffff
 8002864:	0805ffff 	.word	0x0805ffff
 8002868:	0807ffff 	.word	0x0807ffff

0800286c <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, const uint16_t numberofwords)
{
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800287e:	f003 fa77 	bl	8005d70 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff ff78 	bl	8002778 <GetSector>
 8002888:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8002896:	69f8      	ldr	r0, [r7, #28]
 8002898:	f7ff ff6e 	bl	8002778 <GetSector>
 800289c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <Flash_Write_Data+0xb8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <Flash_Write_Data+0xb8>)
 80028a6:	2202      	movs	r2, #2
 80028a8:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80028aa:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <Flash_Write_Data+0xb8>)
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <Flash_Write_Data+0xb8>)
 80028ba:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4818      	ldr	r0, [pc, #96]	; (8002924 <Flash_Write_Data+0xb8>)
 80028c4:	f003 fbd2 	bl	800606c <HAL_FLASHEx_Erase>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01f      	beq.n	800290e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 80028ce:	f003 fa81 	bl	8005dd4 <HAL_FLASH_GetError>
 80028d2:	4603      	mov	r3, r0
 80028d4:	e022      	b.n	800291c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2200      	movs	r2, #0
 80028e2:	461c      	mov	r4, r3
 80028e4:	4615      	mov	r5, r2
 80028e6:	4622      	mov	r2, r4
 80028e8:	462b      	mov	r3, r5
 80028ea:	68f9      	ldr	r1, [r7, #12]
 80028ec:	2002      	movs	r0, #2
 80028ee:	f003 f9eb 	bl	8005cc8 <HAL_FLASH_Program>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3304      	adds	r3, #4
 80028fc:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	3301      	adds	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	e003      	b.n	800290e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8002906:	f003 fa65 	bl	8005dd4 <HAL_FLASH_GetError>
 800290a:	4603      	mov	r3, r0
 800290c:	e006      	b.n	800291c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002912:	429a      	cmp	r2, r3
 8002914:	dbdf      	blt.n	80028d6 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8002916:	f003 fa4d 	bl	8005db4 <HAL_FLASH_Lock>

	   return 0;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	20000594 	.word	0x20000594

08002928 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, const uint16_t numberofwords)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
	uint32_t sofar = numberofwords;
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	617b      	str	r3, [r7, #20]
	while (sofar)
 800293a:	e00c      	b.n	8002956 <Flash_Read_Data+0x2e>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3304      	adds	r3, #4
 8002948:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3304      	adds	r3, #4
 800294e:	60bb      	str	r3, [r7, #8]
		sofar--;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3b01      	subs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
	while (sofar)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ef      	bne.n	800293c <Flash_Read_Data+0x14>
	}
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_GPIO_EXTI_Callback>:
};



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	80fb      	strh	r3, [r7, #6]

}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <MPU6050_Init>:



uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af04      	add	r7, sp, #16
 8002986:	6078      	str	r0, [r7, #4]
    uint8_t check;

    // power management register 0X6B we should write all 0's to wake the sensor up


    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002988:	2364      	movs	r3, #100	; 0x64
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	2301      	movs	r3, #1
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	f107 030e 	add.w	r3, r7, #14
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2301      	movs	r3, #1
 8002998:	2275      	movs	r2, #117	; 0x75
 800299a:	21d0      	movs	r1, #208	; 0xd0
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f004 f95f 	bl	8006c60 <HAL_I2C_Mem_Read>


       if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 80029a2:	7bbb      	ldrb	r3, [r7, #14]
 80029a4:	2b72      	cmp	r3, #114	; 0x72
 80029a6:	d13d      	bne.n	8002a24 <MPU6050_Init+0xa4>
       {
           // power management register 0X6B we should write all 0's to wake the sensor up
           Data = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80029ac:	2364      	movs	r3, #100	; 0x64
 80029ae:	9302      	str	r3, [sp, #8]
 80029b0:	2301      	movs	r3, #1
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	f107 030f 	add.w	r3, r7, #15
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2301      	movs	r3, #1
 80029bc:	226b      	movs	r2, #107	; 0x6b
 80029be:	21d0      	movs	r1, #208	; 0xd0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f004 f853 	bl	8006a6c <HAL_I2C_Mem_Write>

           // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
           Data = 0x07;
 80029c6:	2307      	movs	r3, #7
 80029c8:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	f107 030f 	add.w	r3, r7, #15
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	2219      	movs	r2, #25
 80029dc:	21d0      	movs	r1, #208	; 0xd0
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f004 f844 	bl	8006a6c <HAL_I2C_Mem_Write>

           // Set accelerometer configuration in ACCEL_CONFIG Register
           // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
           Data = 0x00;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80029e8:	2364      	movs	r3, #100	; 0x64
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	f107 030f 	add.w	r3, r7, #15
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	221c      	movs	r2, #28
 80029fa:	21d0      	movs	r1, #208	; 0xd0
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f004 f835 	bl	8006a6c <HAL_I2C_Mem_Write>

           // Set Gyroscopic configuration in GYRO_CONFIG Register
           // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
           Data = 0x00;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002a06:	2364      	movs	r3, #100	; 0x64
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	f107 030f 	add.w	r3, r7, #15
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2301      	movs	r3, #1
 8002a16:	221b      	movs	r2, #27
 8002a18:	21d0      	movs	r1, #208	; 0xd0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f004 f826 	bl	8006a6c <HAL_I2C_Mem_Write>
           return 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <MPU6050_Init+0xa6>
       }


    return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af04      	add	r7, sp, #16
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002a3a:	2364      	movs	r3, #100	; 0x64
 8002a3c:	9302      	str	r3, [sp, #8]
 8002a3e:	2306      	movs	r3, #6
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	223b      	movs	r2, #59	; 0x3b
 8002a4c:	21d0      	movs	r1, #208	; 0xd0
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f004 f906 	bl	8006c60 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002a54:	7a3b      	ldrb	r3, [r7, #8]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	b21a      	sxth	r2, r3
 8002a5a:	7a7b      	ldrb	r3, [r7, #9]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002a66:	7abb      	ldrb	r3, [r7, #10]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b21a      	sxth	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002a78:	7b3b      	ldrb	r3, [r7, #12]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	b21a      	sxth	r2, r3
 8002a7e:	7b7b      	ldrb	r3, [r7, #13]
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	4313      	orrs	r3, r2
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	809a      	strh	r2, [r3, #4]
   // DataStruct->Accel_X_RAW += CAL_X;
   // DataStruct->Accel_Y_RAW += CAL_Y;
  //  DataStruct->Accel_Z_RAW += CAL_Y;


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fd5f 	bl	8000554 <__aeabi_i2d>
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <MPU6050_Read_Accel+0x140>)
 8002a9c:	f7fd feee 	bl	800087c <__aeabi_ddiv>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fd4f 	bl	8000554 <__aeabi_i2d>
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <MPU6050_Read_Accel+0x140>)
 8002abc:	f7fd fede 	bl	800087c <__aeabi_ddiv>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fd3f 	bl	8000554 <__aeabi_i2d>
 8002ad6:	a322      	add	r3, pc, #136	; (adr r3, 8002b60 <MPU6050_Read_Accel+0x130>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f7fd fece 	bl	800087c <__aeabi_ddiv>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	e9c1 2306 	strd	r2, r3, [r1, #24]


    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002af0:	a31d      	add	r3, pc, #116	; (adr r3, 8002b68 <MPU6050_Read_Accel+0x138>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fe f809 	bl	8000b0c <__aeabi_dcmplt>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <MPU6050_Read_Accel+0xde>
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b14:	a314      	add	r3, pc, #80	; (adr r3, 8002b68 <MPU6050_Read_Accel+0x138>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f7fd fff7 	bl	8000b0c <__aeabi_dcmplt>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <MPU6050_Read_Accel+0x102>
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b38:	a30b      	add	r3, pc, #44	; (adr r3, 8002b68 <MPU6050_Read_Accel+0x138>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd ffe5 	bl	8000b0c <__aeabi_dcmplt>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d100      	bne.n	8002b4a <MPU6050_Read_Accel+0x11a>


}
 8002b48:	e006      	b.n	8002b58 <MPU6050_Read_Accel+0x128>
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	00000000 	.word	0x00000000
 8002b64:	40cc2900 	.word	0x40cc2900
 8002b68:	70a3d70a 	.word	0x70a3d70a
 8002b6c:	3fb70a3d 	.word	0x3fb70a3d
 8002b70:	40d00000 	.word	0x40d00000

08002b74 <MPU6050_ReadReg>:


uint8_t  MPU6050_ReadReg(I2C_HandleTypeDef *I2Cx,uint16_t reg) // NOTE : Only for 1 Byte Reg at the moment
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af04      	add	r7, sp, #16
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
	uint8_t result;


	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, reg, 1, &result, 1, i2c_timeout);
 8002b80:	2364      	movs	r3, #100	; 0x64
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	9302      	str	r3, [sp, #8]
 8002b86:	2301      	movs	r3, #1
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	f107 030f 	add.w	r3, r7, #15
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	21d0      	movs	r1, #208	; 0xd0
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f004 f863 	bl	8006c60 <HAL_I2C_Mem_Read>
	return result;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <MPU6050_WriteReg>:

void MPU6050_WriteReg(I2C_HandleTypeDef *I2Cx,uint16_t reg, uint8_t data) // NOTE : Only for 1 Byte Reg at the moment
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, reg, 1, &data, 1, i2c_timeout);
 8002bb4:	2364      	movs	r3, #100	; 0x64
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	1c7b      	adds	r3, r7, #1
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	21d0      	movs	r1, #208	; 0xd0
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f003 ff50 	bl	8006a6c <HAL_I2C_Mem_Write>

}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <MPU6050ReadStable>:
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}


void MPU6050ReadStable(MPU6050_t *data)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f002 faed 	bl	80051bc <HAL_Delay>
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e009      	b.n	8002bfc <MPU6050ReadStable+0x28>
		{
			MPU6050_Read_All(&I2C_MPU6050, data);
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4808      	ldr	r0, [pc, #32]	; (8002c0c <MPU6050ReadStable+0x38>)
 8002bec:	f000 f810 	bl	8002c10 <MPU6050_Read_All>
			HAL_Delay(5);
 8002bf0:	2005      	movs	r0, #5
 8002bf2:	f002 fae3 	bl	80051bc <HAL_Delay>
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b1d      	cmp	r3, #29
 8002c00:	d9f2      	bls.n	8002be8 <MPU6050ReadStable+0x14>
		}
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200005b4 	.word	0x200005b4

08002c10 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c14:	b094      	sub	sp, #80	; 0x50
 8002c16:	af04      	add	r7, sp, #16
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002c1c:	2364      	movs	r3, #100	; 0x64
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	230e      	movs	r3, #14
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	223b      	movs	r2, #59	; 0x3b
 8002c2e:	21d0      	movs	r1, #208	; 0xd0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f004 f815 	bl	8006c60 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002c36:	7a3b      	ldrb	r3, [r7, #8]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	7a7b      	ldrb	r3, [r7, #9]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b21a      	sxth	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002c48:	7abb      	ldrb	r3, [r7, #10]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	b21a      	sxth	r2, r3
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	b21b      	sxth	r3, r3
 8002c52:	4313      	orrs	r3, r2
 8002c54:	b21a      	sxth	r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002c5a:	7b3b      	ldrb	r3, [r7, #12]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	b21a      	sxth	r2, r3
 8002c60:	7b7b      	ldrb	r3, [r7, #13]
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	4313      	orrs	r3, r2
 8002c78:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002c7a:	7c3b      	ldrb	r3, [r7, #16]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	7c7b      	ldrb	r3, [r7, #17]
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002c8c:	7cbb      	ldrb	r3, [r7, #18]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002c9e:	7d3b      	ldrb	r3, [r7, #20]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	b21a      	sxth	r2, r3
 8002ca4:	7d7b      	ldrb	r3, [r7, #21]
 8002ca6:	b21b      	sxth	r3, r3
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	849a      	strh	r2, [r3, #36]	; 0x24

    // Callibrate
	DataStruct->Accel_X_RAW += CAL_X;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW += CAL_Y;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b21a      	sxth	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW += CAL_Y;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b21a      	sxth	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	809a      	strh	r2, [r3, #4]


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc2e 	bl	8000554 <__aeabi_i2d>
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	4bb6      	ldr	r3, [pc, #728]	; (8002fd8 <MPU6050_Read_All+0x3c8>)
 8002cfe:	f7fd fdbd 	bl	800087c <__aeabi_ddiv>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc1e 	bl	8000554 <__aeabi_i2d>
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	4bae      	ldr	r3, [pc, #696]	; (8002fd8 <MPU6050_Read_All+0x3c8>)
 8002d1e:	f7fd fdad 	bl	800087c <__aeabi_ddiv>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc0e 	bl	8000554 <__aeabi_i2d>
 8002d38:	a39f      	add	r3, pc, #636	; (adr r3, 8002fb8 <MPU6050_Read_All+0x3a8>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f7fd fd9d 	bl	800087c <__aeabi_ddiv>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	e9c1 2306 	strd	r2, r3, [r1, #24]





    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d52:	a39b      	add	r3, pc, #620	; (adr r3, 8002fc0 <MPU6050_Read_All+0x3b0>)
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f7fd fed8 	bl	8000b0c <__aeabi_dcmplt>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <MPU6050_Read_All+0x160>
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002d76:	a392      	add	r3, pc, #584	; (adr r3, 8002fc0 <MPU6050_Read_All+0x3b0>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fec6 	bl	8000b0c <__aeabi_dcmplt>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <MPU6050_Read_All+0x184>
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d9a:	a389      	add	r3, pc, #548	; (adr r3, 8002fc0 <MPU6050_Read_All+0x3b0>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd feb4 	bl	8000b0c <__aeabi_dcmplt>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <MPU6050_Read_All+0x1a8>
 8002daa:	6839      	ldr	r1, [r7, #0]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002db8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc4:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002fdc <MPU6050_Read_All+0x3cc>
 8002dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dcc:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002fe0 <MPU6050_Read_All+0x3d0>
 8002dd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fbb7 	bl	8000554 <__aeabi_i2d>
 8002de6:	a378      	add	r3, pc, #480	; (adr r3, 8002fc8 <MPU6050_Read_All+0x3b8>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f7fd fd46 	bl	800087c <__aeabi_ddiv>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fba7 	bl	8000554 <__aeabi_i2d>
 8002e06:	a370      	add	r3, pc, #448	; (adr r3, 8002fc8 <MPU6050_Read_All+0x3b8>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fd36 	bl	800087c <__aeabi_ddiv>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fb97 	bl	8000554 <__aeabi_i2d>
 8002e26:	a368      	add	r3, pc, #416	; (adr r3, 8002fc8 <MPU6050_Read_All+0x3b8>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fd26 	bl	800087c <__aeabi_ddiv>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	6839      	ldr	r1, [r7, #0]
 8002e36:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002e3a:	f002 f9b3 	bl	80051a4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <MPU6050_Read_All+0x3d4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb74 	bl	8000534 <__aeabi_ui2d>
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <MPU6050_Read_All+0x3d8>)
 8002e52:	f7fd fd13 	bl	800087c <__aeabi_ddiv>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002e5e:	f002 f9a1 	bl	80051a4 <HAL_GetTick>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <MPU6050_Read_All+0x3d4>)
 8002e66:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	fb03 f202 	mul.w	r2, r3, r2
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e80:	4619      	mov	r1, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb60 	bl	8000554 <__aeabi_i2d>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	ec43 2b10 	vmov	d0, r2, r3
 8002e9c:	f00b fdab 	bl	800e9f6 <sqrt>
 8002ea0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eb0:	f7fd fe22 	bl	8000af8 <__aeabi_dcmpeq>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11f      	bne.n	8002efa <MPU6050_Read_All+0x2ea>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb47 	bl	8000554 <__aeabi_i2d>
 8002ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eca:	f7fd fcd7 	bl	800087c <__aeabi_ddiv>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	ec43 2b17 	vmov	d7, r2, r3
 8002ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eda:	eef0 0a67 	vmov.f32	s1, s15
 8002ede:	f00b fbdf 	bl	800e6a0 <atan>
 8002ee2:	ec51 0b10 	vmov	r0, r1, d0
 8002ee6:	a33a      	add	r3, pc, #232	; (adr r3, 8002fd0 <MPU6050_Read_All+0x3c0>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fb9c 	bl	8000628 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002ef8:	e005      	b.n	8002f06 <MPU6050_Read_All+0x2f6>
    } else {
        roll = 0.0;
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	425b      	negs	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fb20 	bl	8000554 <__aeabi_i2d>
 8002f14:	4682      	mov	sl, r0
 8002f16:	468b      	mov	fp, r1
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fb18 	bl	8000554 <__aeabi_i2d>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	ec43 2b11 	vmov	d1, r2, r3
 8002f2c:	ec4b ab10 	vmov	d0, sl, fp
 8002f30:	f00b fd5f 	bl	800e9f2 <atan2>
 8002f34:	ec51 0b10 	vmov	r0, r1, d0
 8002f38:	a325      	add	r3, pc, #148	; (adr r3, 8002fd0 <MPU6050_Read_All+0x3c0>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd fb73 	bl	8000628 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	4b27      	ldr	r3, [pc, #156]	; (8002fec <MPU6050_Read_All+0x3dc>)
 8002f50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f54:	f7fd fdda 	bl	8000b0c <__aeabi_dcmplt>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <MPU6050_Read_All+0x364>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <MPU6050_Read_All+0x3e0>)
 8002f6a:	f7fd fded 	bl	8000b48 <__aeabi_dcmpgt>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d114      	bne.n	8002f9e <MPU6050_Read_All+0x38e>
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <MPU6050_Read_All+0x3e0>)
 8002f7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f7e:	f7fd fde3 	bl	8000b48 <__aeabi_dcmpgt>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d037      	beq.n	8002ff8 <MPU6050_Read_All+0x3e8>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <MPU6050_Read_All+0x3dc>)
 8002f94:	f7fd fdba 	bl	8000b0c <__aeabi_dcmplt>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02c      	beq.n	8002ff8 <MPU6050_Read_All+0x3e8>
        KalmanY.angle = pitch;
 8002f9e:	4915      	ldr	r1, [pc, #84]	; (8002ff4 <MPU6050_Read_All+0x3e4>)
 8002fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002fb2:	e036      	b.n	8003022 <MPU6050_Read_All+0x412>
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	40cc2900 	.word	0x40cc2900
 8002fc0:	70a3d70a 	.word	0x70a3d70a
 8002fc4:	3fb70a3d 	.word	0x3fb70a3d
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	40606000 	.word	0x40606000
 8002fd0:	1a63c1f8 	.word	0x1a63c1f8
 8002fd4:	404ca5dc 	.word	0x404ca5dc
 8002fd8:	40d00000 	.word	0x40d00000
 8002fdc:	43aa0000 	.word	0x43aa0000
 8002fe0:	42121eb8 	.word	0x42121eb8
 8002fe4:	200005a8 	.word	0x200005a8
 8002fe8:	408f4000 	.word	0x408f4000
 8002fec:	c0568000 	.word	0xc0568000
 8002ff0:	40568000 	.word	0x40568000
 8002ff4:	20000160 	.word	0x20000160
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002ffe:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003002:	eeb0 1a47 	vmov.f32	s2, s14
 8003006:	eef0 1a67 	vmov.f32	s3, s15
 800300a:	ed97 0b06 	vldr	d0, [r7, #24]
 800300e:	481e      	ldr	r0, [pc, #120]	; (8003088 <MPU6050_Read_All+0x478>)
 8003010:	f000 f840 	bl	8003094 <Kalman_getAngle>
 8003014:	eeb0 7a40 	vmov.f32	s14, s0
 8003018:	eef0 7a60 	vmov.f32	s15, s1
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003028:	4690      	mov	r8, r2
 800302a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <MPU6050_Read_All+0x47c>)
 8003034:	4640      	mov	r0, r8
 8003036:	4649      	mov	r1, r9
 8003038:	f7fd fd86 	bl	8000b48 <__aeabi_dcmpgt>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <MPU6050_Read_All+0x444>
        DataStruct->Gx = -DataStruct->Gx;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003048:	4614      	mov	r4, r2
 800304a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800305a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800305e:	eeb0 1a47 	vmov.f32	s2, s14
 8003062:	eef0 1a67 	vmov.f32	s3, s15
 8003066:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800306a:	4809      	ldr	r0, [pc, #36]	; (8003090 <MPU6050_Read_All+0x480>)
 800306c:	f000 f812 	bl	8003094 <Kalman_getAngle>
 8003070:	eeb0 7a40 	vmov.f32	s14, s0
 8003074:	eef0 7a60 	vmov.f32	s15, s1
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800307e:	bf00      	nop
 8003080:	3740      	adds	r7, #64	; 0x40
 8003082:	46bd      	mov	sp, r7
 8003084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003088:	20000160 	.word	0x20000160
 800308c:	40568000 	.word	0x40568000
 8003090:	20000118 	.word	0x20000118

08003094 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8003094:	b5b0      	push	{r4, r5, r7, lr}
 8003096:	b096      	sub	sp, #88	; 0x58
 8003098:	af00      	add	r7, sp, #0
 800309a:	61f8      	str	r0, [r7, #28]
 800309c:	ed87 0b04 	vstr	d0, [r7, #16]
 80030a0:	ed87 1b02 	vstr	d1, [r7, #8]
 80030a4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80030ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b2:	f7fd f901 	bl	80002b8 <__aeabi_dsub>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80030c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030cc:	f7fd faac 	bl	8000628 <__aeabi_dmul>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4620      	mov	r0, r4
 80030d6:	4629      	mov	r1, r5
 80030d8:	f7fd f8f0 	bl	80002bc <__adddf3>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	69f9      	ldr	r1, [r7, #28]
 80030e2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80030f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030f6:	f7fd fa97 	bl	8000628 <__aeabi_dmul>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003108:	f7fd f8d6 	bl	80002b8 <__aeabi_dsub>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800311a:	f7fd f8cd 	bl	80002b8 <__aeabi_dsub>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd f8c6 	bl	80002bc <__adddf3>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800313c:	f7fd fa74 	bl	8000628 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4620      	mov	r0, r4
 8003146:	4629      	mov	r1, r5
 8003148:	f7fd f8b8 	bl	80002bc <__adddf3>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	69f9      	ldr	r1, [r7, #28]
 8003152:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003166:	f7fd fa5f 	bl	8000628 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4620      	mov	r0, r4
 8003170:	4629      	mov	r1, r5
 8003172:	f7fd f8a1 	bl	80002b8 <__aeabi_dsub>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800318c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003190:	f7fd fa4a 	bl	8000628 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd f88c 	bl	80002b8 <__aeabi_dsub>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80031b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031ba:	f7fd fa35 	bl	8000628 <__aeabi_dmul>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd f879 	bl	80002bc <__adddf3>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	69f9      	ldr	r1, [r7, #28]
 80031d0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031e0:	f7fd f86c 	bl	80002bc <__adddf3>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80031f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031f6:	f7fd fb41 	bl	800087c <__aeabi_ddiv>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800320c:	f7fd fb36 	bl	800087c <__aeabi_ddiv>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800321e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003222:	f7fd f849 	bl	80002b8 <__aeabi_dsub>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003234:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003238:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800323c:	f7fd f9f4 	bl	8000628 <__aeabi_dmul>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4620      	mov	r0, r4
 8003246:	4629      	mov	r1, r5
 8003248:	f7fd f838 	bl	80002bc <__adddf3>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	69f9      	ldr	r1, [r7, #28]
 8003252:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800325c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003260:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003264:	f7fd f9e0 	bl	8000628 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fd f824 	bl	80002bc <__adddf3>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	69f9      	ldr	r1, [r7, #28]
 800327a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003284:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800328e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003298:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800329c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032a0:	f7fd f9c2 	bl	8000628 <__aeabi_dmul>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4620      	mov	r0, r4
 80032aa:	4629      	mov	r1, r5
 80032ac:	f7fd f804 	bl	80002b8 <__aeabi_dsub>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	69f9      	ldr	r1, [r7, #28]
 80032b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80032c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032c8:	f7fd f9ae 	bl	8000628 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fc fff0 	bl	80002b8 <__aeabi_dsub>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	69f9      	ldr	r1, [r7, #28]
 80032de:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80032e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032f0:	f7fd f99a 	bl	8000628 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7fc ffdc 	bl	80002b8 <__aeabi_dsub>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	69f9      	ldr	r1, [r7, #28]
 8003306:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003310:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003314:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003318:	f7fd f986 	bl	8000628 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fc ffc8 	bl	80002b8 <__aeabi_dsub>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	69f9      	ldr	r1, [r7, #28]
 800332e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003338:	ec43 2b17 	vmov	d7, r2, r3
};
 800333c:	eeb0 0a47 	vmov.f32	s0, s14
 8003340:	eef0 0a67 	vmov.f32	s1, s15
 8003344:	3758      	adds	r7, #88	; 0x58
 8003346:	46bd      	mov	sp, r7
 8003348:	bdb0      	pop	{r4, r5, r7, pc}

0800334a <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 8003356:	217f      	movs	r1, #127	; 0x7f
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f008 fbc4 	bl	800bae6 <strchr>
 800335e:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8003360:	e029      	b.n	80033b6 <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b7f      	cmp	r3, #127	; 0x7f
 8003368:	d106      	bne.n	8003378 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3301      	adds	r3, #1
 800336e:	4619      	mov	r1, r3
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f008 fbc5 	bl	800bb00 <strcpy>
 8003376:	e019      	b.n	80033ac <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b7f      	cmp	r3, #127	; 0x7f
 800337e:	d109      	bne.n	8003394 <manageBackSpace+0x4a>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3b01      	subs	r3, #1
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e00b      	b.n	80033ac <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b7f      	cmp	r3, #127	; 0x7f
 800339a:	d107      	bne.n	80033ac <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f008 fbaa 	bl	800bb00 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 80033ac:	217f      	movs	r1, #127	; 0x7f
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f008 fb99 	bl	800bae6 <strchr>
 80033b4:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1d1      	bne.n	8003362 <manageBackSpace+0x18>
		}
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 80033d0:	e00c      	b.n	80033ec <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b2f      	cmp	r3, #47	; 0x2f
 80033d8:	d903      	bls.n	80033e2 <isNumber+0x1a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b39      	cmp	r3, #57	; 0x39
 80033e0:	d901      	bls.n	80033e6 <isNumber+0x1e>
			return 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e007      	b.n	80033f6 <isNumber+0x2e>
		string++;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3301      	adds	r3, #1
 80033ea:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ee      	bne.n	80033d2 <isNumber+0xa>
	}
	return 1;
 80033f4:	2301      	movs	r3, #1
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <byteToBin>:


void byteToBin(uint8_t b, char*text)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	6039      	str	r1, [r7, #0]
 800340c:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;
	for (uint8_t cnt = 0;cnt<8;cnt++)
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e019      	b.n	8003448 <byteToBin+0x46>
	{
		pos = 7-cnt;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	73bb      	strb	r3, [r7, #14]
		if (b & 1<< cnt)
 800341c:	79fa      	ldrb	r2, [r7, #7]
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	fa42 f303 	asr.w	r3, r2, r3
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <byteToBin+0x36>
			text[pos] = '1';
 800342c:	7bbb      	ldrb	r3, [r7, #14]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	2231      	movs	r2, #49	; 0x31
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e004      	b.n	8003442 <byteToBin+0x40>
		else
			text[pos] = '0';
 8003438:	7bbb      	ldrb	r3, [r7, #14]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	2230      	movs	r2, #48	; 0x30
 8003440:	701a      	strb	r2, [r3, #0]
	for (uint8_t cnt = 0;cnt<8;cnt++)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	3301      	adds	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b07      	cmp	r3, #7
 800344c:	d9e2      	bls.n	8003414 <byteToBin+0x12>

	}
	text[8] = 0x0;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3308      	adds	r3, #8
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	2009      	movs	r0, #9
 800346e:	f000 f81f 	bl	80034b0 <lc709203_getRegisterValue>
 8003472:	4603      	mov	r3, r0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	2008      	movs	r0, #8
 8003488:	f000 f812 	bl	80034b0 <lc709203_getRegisterValue>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	2011      	movs	r0, #17
 80034a2:	f000 f805 	bl	80034b0 <lc709203_getRegisterValue>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af04      	add	r7, sp, #16
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	2364      	movs	r3, #100	; 0x64
 80034c2:	9302      	str	r3, [sp, #8]
 80034c4:	2302      	movs	r3, #2
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2301      	movs	r3, #1
 80034ce:	2116      	movs	r1, #22
 80034d0:	4807      	ldr	r0, [pc, #28]	; (80034f0 <lc709203_getRegisterValue+0x40>)
 80034d2:	f003 fbc5 	bl	8006c60 <HAL_I2C_Mem_Read>
 80034d6:	4603      	mov	r3, r0
 80034d8:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 80034e0:	2302      	movs	r3, #2
 80034e2:	e000      	b.n	80034e6 <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 80034e4:	2301      	movs	r3, #1

}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200005b4 	.word	0x200005b4

080034f4 <ledAllOff>:




void ledAllOff()
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	71fb      	strb	r3, [r7, #7]
 80034fe:	e008      	b.n	8003512 <ledAllOff+0x1e>
	{
		led_set_RGB(i,0x0,0,0);
 8003500:	79f8      	ldrb	r0, [r7, #7]
 8003502:	2300      	movs	r3, #0
 8003504:	2200      	movs	r2, #0
 8003506:	2100      	movs	r1, #0
 8003508:	f001 fb00 	bl	8004b0c <led_set_RGB>
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	3301      	adds	r3, #1
 8003510:	71fb      	strb	r3, [r7, #7]
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	2b8f      	cmp	r3, #143	; 0x8f
 8003516:	d9f3      	bls.n	8003500 <ledAllOff+0xc>
	}
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <ledRender>:


void ledRender()
{
 8003522:	b580      	push	{r7, lr}
 8003524:	af00      	add	r7, sp, #0
	led_render();
 8003526:	f001 fb59 	bl	8004bdc <led_render>
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}

0800352e <ledSetFaceColour>:

void ledSetFaceColour(uint8_t face, uint32_t colour,eLedFaceMode_t mode)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	6039      	str	r1, [r7, #0]
 8003538:	71fb      	strb	r3, [r7, #7]
 800353a:	4613      	mov	r3, r2
 800353c:	71bb      	strb	r3, [r7, #6]
	uint16_t offset = face * 12;
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	b29b      	uxth	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	0052      	lsls	r2, r2, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	827b      	strh	r3, [r7, #18]

	if (mode == LED_FACE_MODE_ERROR)
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d131      	bne.n	80035b6 <ledSetFaceColour+0x88>
	{
		uint32_t errorColour = colourFindByid(COLOUR_ERROR_ID)->code;
 8003552:	200d      	movs	r0, #13
 8003554:	f7fe ffb4 	bl	80024c0 <colourFindByid>
 8003558:	4603      	mov	r3, r0
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	60fb      	str	r3, [r7, #12]
		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 800355e:	8a7b      	ldrh	r3, [r7, #18]
 8003560:	82fb      	strh	r3, [r7, #22]
 8003562:	e021      	b.n	80035a8 <ledSetFaceColour+0x7a>
		{
			if ((i+1)%2)
 8003564:	8afb      	ldrh	r3, [r7, #22]
 8003566:	3301      	adds	r3, #1
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <ledSetFaceColour+0x5c>
				led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 8003570:	8afb      	ldrh	r3, [r7, #22]
 8003572:	b2d8      	uxtb	r0, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	b2d9      	uxtb	r1, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f001 fac2 	bl	8004b0c <led_set_RGB>
 8003588:	e00b      	b.n	80035a2 <ledSetFaceColour+0x74>
			else
				led_set_RGB(i,(errorColour >> 16) & 0xFF, (errorColour >> 8) & 0xFF, errorColour & 0xFF);
 800358a:	8afb      	ldrh	r3, [r7, #22]
 800358c:	b2d8      	uxtb	r0, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2d9      	uxtb	r1, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f001 fab5 	bl	8004b0c <led_set_RGB>
		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 80035a2:	8afb      	ldrh	r3, [r7, #22]
 80035a4:	3301      	adds	r3, #1
 80035a6:	82fb      	strh	r3, [r7, #22]
 80035a8:	8a7b      	ldrh	r3, [r7, #18]
 80035aa:	f103 020b 	add.w	r2, r3, #11
 80035ae:	8afb      	ldrh	r3, [r7, #22]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dad7      	bge.n	8003564 <ledSetFaceColour+0x36>
		{
			led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
		}
	}

}
 80035b4:	e017      	b.n	80035e6 <ledSetFaceColour+0xb8>
		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 80035b6:	8a7b      	ldrh	r3, [r7, #18]
 80035b8:	82bb      	strh	r3, [r7, #20]
 80035ba:	e00e      	b.n	80035da <ledSetFaceColour+0xac>
			led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 80035bc:	8abb      	ldrh	r3, [r7, #20]
 80035be:	b2d8      	uxtb	r0, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	b2d9      	uxtb	r1, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f001 fa9c 	bl	8004b0c <led_set_RGB>
		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 80035d4:	8abb      	ldrh	r3, [r7, #20]
 80035d6:	3301      	adds	r3, #1
 80035d8:	82bb      	strh	r3, [r7, #20]
 80035da:	8a7b      	ldrh	r3, [r7, #18]
 80035dc:	f103 020b 	add.w	r2, r3, #11
 80035e0:	8abb      	ldrh	r3, [r7, #20]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	daea      	bge.n	80035bc <ledSetFaceColour+0x8e>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <ledDance>:


void ledDance()
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
	int i=0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
	while (i<10){
 80035f8:	e040      	b.n	800367c <ledDance+0x8e>
	 uint8_t angle = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	72fb      	strb	r3, [r7, #11]
	 const uint8_t angle_difference = 11;
 80035fe:	230b      	movs	r3, #11
 8003600:	727b      	strb	r3, [r7, #9]
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8003602:	2300      	movs	r3, #0
 8003604:	72bb      	strb	r3, [r7, #10]
 8003606:	e02e      	b.n	8003666 <ledDance+0x78>
		  // Calculate color
			 HAL_Delay(100);
 8003608:	2064      	movs	r0, #100	; 0x64
 800360a:	f001 fdd7 	bl	80051bc <HAL_Delay>
			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 800360e:	7aba      	ldrb	r2, [r7, #10]
 8003610:	7a7b      	ldrb	r3, [r7, #9]
 8003612:	fb12 f303 	smulbb	r3, r2, r3
 8003616:	b2da      	uxtb	r2, r3
 8003618:	7afb      	ldrb	r3, [r7, #11]
 800361a:	4413      	add	r3, r2
 800361c:	b2db      	uxtb	r3, r3
 800361e:	227f      	movs	r2, #127	; 0x7f
 8003620:	21ff      	movs	r1, #255	; 0xff
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fc92 	bl	8004f4c <hsl_to_rgb>
 8003628:	6078      	str	r0, [r7, #4]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	b2d9      	uxtb	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	b2da      	uxtb	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	7ab8      	ldrb	r0, [r7, #10]
 800363c:	f001 fa66 	bl	8004b0c <led_set_RGB>
			if (i>1)
 8003640:	7abb      	ldrb	r3, [r7, #10]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d907      	bls.n	8003656 <ledDance+0x68>
				led_set_RGB(i-1, 0,0,0);
 8003646:	7abb      	ldrb	r3, [r7, #10]
 8003648:	3b01      	subs	r3, #1
 800364a:	b2d8      	uxtb	r0, r3
 800364c:	2300      	movs	r3, #0
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	f001 fa5b 	bl	8004b0c <led_set_RGB>
			++angle;
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	3301      	adds	r3, #1
 800365a:	72fb      	strb	r3, [r7, #11]
			led_render();
 800365c:	f001 fabe 	bl	8004bdc <led_render>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 8003660:	7abb      	ldrb	r3, [r7, #10]
 8003662:	3301      	adds	r3, #1
 8003664:	72bb      	strb	r3, [r7, #10]
 8003666:	7abb      	ldrb	r3, [r7, #10]
 8003668:	2b8f      	cmp	r3, #143	; 0x8f
 800366a:	d9cd      	bls.n	8003608 <ledDance+0x1a>

		}
	  HAL_Delay(10);
 800366c:	200a      	movs	r0, #10
 800366e:	f001 fda5 	bl	80051bc <HAL_Delay>
		// Write to LED
	  ledAllOff();
 8003672:	f7ff ff3f 	bl	80034f4 <ledAllOff>
	  i++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3301      	adds	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
	while (i<10){
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b09      	cmp	r3, #9
 8003680:	ddbb      	ble.n	80035fa <ledDance+0xc>
	}
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <detectFaceUp>:




int8_t detectFaceUp()
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b09c      	sub	sp, #112	; 0x70
 8003690:	af00      	add	r7, sp, #0
	MPU6050_t imuData;

	MPU6050ReadStable(&imuData);
 8003692:	463b      	mov	r3, r7
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fa9d 	bl	8002bd4 <MPU6050ReadStable>
	double x = imuData.KalmanAngleX;
 800369a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800369e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double y = imuData.KalmanAngleY;
 80036a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	uint8_t face;
	for (face=0; face<FACE_COUNT; face++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80036b0:	e06b      	b.n	800378a <detectFaceUp+0xfe>
	{
		if ( x > faceTable[face].xRTop && x < faceTable[face].xRBottom && y > faceTable[face].yRTop && y < faceTable[face].yRBottom )
 80036b2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80036b6:	493a      	ldr	r1, [pc, #232]	; (80037a0 <detectFaceUp+0x114>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	440b      	add	r3, r1
 80036c2:	3302      	adds	r3, #2
 80036c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fc ff43 	bl	8000554 <__aeabi_i2d>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036d6:	f7fd fa37 	bl	8000b48 <__aeabi_dcmpgt>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d04f      	beq.n	8003780 <detectFaceUp+0xf4>
 80036e0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80036e4:	492e      	ldr	r1, [pc, #184]	; (80037a0 <detectFaceUp+0x114>)
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	440b      	add	r3, r1
 80036f0:	3304      	adds	r3, #4
 80036f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc ff2c 	bl	8000554 <__aeabi_i2d>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003704:	f7fd fa02 	bl	8000b0c <__aeabi_dcmplt>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d038      	beq.n	8003780 <detectFaceUp+0xf4>
 800370e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003712:	4923      	ldr	r1, [pc, #140]	; (80037a0 <detectFaceUp+0x114>)
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	440b      	add	r3, r1
 800371e:	3306      	adds	r3, #6
 8003720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fc ff15 	bl	8000554 <__aeabi_i2d>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003732:	f7fd fa09 	bl	8000b48 <__aeabi_dcmpgt>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d021      	beq.n	8003780 <detectFaceUp+0xf4>
 800373c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003740:	4917      	ldr	r1, [pc, #92]	; (80037a0 <detectFaceUp+0x114>)
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	440b      	add	r3, r1
 800374c:	3308      	adds	r3, #8
 800374e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc fefe 	bl	8000554 <__aeabi_i2d>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003760:	f7fd f9d4 	bl	8000b0c <__aeabi_dcmplt>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <detectFaceUp+0xf4>
			return faceTable[face].faceId;
 800376a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800376e:	490c      	ldr	r1, [pc, #48]	; (80037a0 <detectFaceUp+0x114>)
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	440b      	add	r3, r1
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b25b      	sxtb	r3, r3
 800377e:	e00a      	b.n	8003796 <detectFaceUp+0x10a>
	for (face=0; face<FACE_COUNT; face++)
 8003780:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003784:	3301      	adds	r3, #1
 8003786:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800378a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800378e:	2b0b      	cmp	r3, #11
 8003790:	d98f      	bls.n	80036b2 <detectFaceUp+0x26>
	}
	return FACE_NOT_FOUND;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003796:	4618      	mov	r0, r3
 8003798:	3770      	adds	r7, #112	; 0x70
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200001a8 	.word	0x200001a8

080037a4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <MX_CRC_Init+0x20>)
 80037aa:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <MX_CRC_Init+0x24>)
 80037ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80037ae:	4805      	ldr	r0, [pc, #20]	; (80037c4 <MX_CRC_Init+0x20>)
 80037b0:	f001 fe39 	bl	8005426 <HAL_CRC_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80037ba:	f000 fa6f 	bl	8003c9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200005ac 	.word	0x200005ac
 80037c8:	40023000 	.word	0x40023000

080037cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <HAL_CRC_MspInit+0x3c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10d      	bne.n	80037fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_CRC_MspInit+0x40>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_CRC_MspInit+0x40>)
 80037e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <HAL_CRC_MspInit+0x40>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40023000 	.word	0x40023000
 800380c:	40023800 	.word	0x40023800

08003810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <MX_DMA_Init+0x3c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a0b      	ldr	r2, [pc, #44]	; (800384c <MX_DMA_Init+0x3c>)
 8003820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <MX_DMA_Init+0x3c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	2039      	movs	r0, #57	; 0x39
 8003838:	f001 fdbf 	bl	80053ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800383c:	2039      	movs	r0, #57	; 0x39
 800383e:	f001 fdd8 	bl	80053f2 <HAL_NVIC_EnableIRQ>

}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800

08003850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	4b3c      	ldr	r3, [pc, #240]	; (800395c <MX_GPIO_Init+0x10c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a3b      	ldr	r2, [pc, #236]	; (800395c <MX_GPIO_Init+0x10c>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b39      	ldr	r3, [pc, #228]	; (800395c <MX_GPIO_Init+0x10c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	4b35      	ldr	r3, [pc, #212]	; (800395c <MX_GPIO_Init+0x10c>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a34      	ldr	r2, [pc, #208]	; (800395c <MX_GPIO_Init+0x10c>)
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <MX_GPIO_Init+0x10c>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <MX_GPIO_Init+0x10c>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a2d      	ldr	r2, [pc, #180]	; (800395c <MX_GPIO_Init+0x10c>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b2b      	ldr	r3, [pc, #172]	; (800395c <MX_GPIO_Init+0x10c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b27      	ldr	r3, [pc, #156]	; (800395c <MX_GPIO_Init+0x10c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a26      	ldr	r2, [pc, #152]	; (800395c <MX_GPIO_Init+0x10c>)
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <MX_GPIO_Init+0x10c>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80038d6:	2200      	movs	r2, #0
 80038d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038dc:	4820      	ldr	r0, [pc, #128]	; (8003960 <MX_GPIO_Init+0x110>)
 80038de:	f002 ff4f 	bl	8006780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2110      	movs	r1, #16
 80038e6:	481f      	ldr	r0, [pc, #124]	; (8003964 <MX_GPIO_Init+0x114>)
 80038e8:	f002 ff4a 	bl	8006780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80038ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fa:	2300      	movs	r3, #0
 80038fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80038fe:	f107 0314 	add.w	r3, r7, #20
 8003902:	4619      	mov	r1, r3
 8003904:	4816      	ldr	r0, [pc, #88]	; (8003960 <MX_GPIO_Init+0x110>)
 8003906:	f002 fcd3 	bl	80062b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 800390a:	2310      	movs	r3, #16
 800390c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	4619      	mov	r1, r3
 8003920:	4810      	ldr	r0, [pc, #64]	; (8003964 <MX_GPIO_Init+0x114>)
 8003922:	f002 fcc5 	bl	80062b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8003926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800392a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800392c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003932:	2301      	movs	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	4619      	mov	r1, r3
 800393c:	480a      	ldr	r0, [pc, #40]	; (8003968 <MX_GPIO_Init+0x118>)
 800393e:	f002 fcb7 	bl	80062b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003942:	2200      	movs	r2, #0
 8003944:	2100      	movs	r1, #0
 8003946:	2017      	movs	r0, #23
 8003948:	f001 fd37 	bl	80053ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800394c:	2017      	movs	r0, #23
 800394e:	f001 fd50 	bl	80053f2 <HAL_NVIC_EnableIRQ>

}
 8003952:	bf00      	nop
 8003954:	3728      	adds	r7, #40	; 0x28
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	40020800 	.word	0x40020800
 8003964:	40020000 	.word	0x40020000
 8003968:	40020400 	.word	0x40020400

0800396c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <MX_I2C1_Init+0x54>)
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <MX_I2C1_Init+0x58>)
 8003974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <MX_I2C1_Init+0x54>)
 8003978:	f242 7210 	movw	r2, #10000	; 0x2710
 800397c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <MX_I2C1_Init+0x54>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <MX_I2C1_Init+0x54>)
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <MX_I2C1_Init+0x54>)
 800398c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003990:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <MX_I2C1_Init+0x54>)
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <MX_I2C1_Init+0x54>)
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <MX_I2C1_Init+0x54>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <MX_I2C1_Init+0x54>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039aa:	4805      	ldr	r0, [pc, #20]	; (80039c0 <MX_I2C1_Init+0x54>)
 80039ac:	f002 ff1a 	bl	80067e4 <HAL_I2C_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80039b6:	f000 f971 	bl	8003c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200005b4 	.word	0x200005b4
 80039c4:	40005400 	.word	0x40005400

080039c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_I2C_MspInit+0x84>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d12b      	bne.n	8003a42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <HAL_I2C_MspInit+0x88>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <HAL_I2C_MspInit+0x88>)
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	6313      	str	r3, [r2, #48]	; 0x30
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_I2C_MspInit+0x88>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a06:	23c0      	movs	r3, #192	; 0xc0
 8003a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a0a:	2312      	movs	r3, #18
 8003a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a16:	2304      	movs	r3, #4
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480c      	ldr	r0, [pc, #48]	; (8003a54 <HAL_I2C_MspInit+0x8c>)
 8003a22:	f002 fc45 	bl	80062b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_I2C_MspInit+0x88>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_I2C_MspInit+0x88>)
 8003a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_I2C_MspInit+0x88>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003a42:	bf00      	nop
 8003a44:	3728      	adds	r7, #40	; 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40005400 	.word	0x40005400
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40020400 	.word	0x40020400

08003a58 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_I2C_MspDeInit+0x38>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10d      	bne.n	8003a86 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_I2C_MspDeInit+0x3c>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <HAL_I2C_MspDeInit+0x3c>)
 8003a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003a76:	2140      	movs	r1, #64	; 0x40
 8003a78:	4807      	ldr	r0, [pc, #28]	; (8003a98 <HAL_I2C_MspDeInit+0x40>)
 8003a7a:	f002 fd9d 	bl	80065b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003a7e:	2180      	movs	r1, #128	; 0x80
 8003a80:	4805      	ldr	r0, [pc, #20]	; (8003a98 <HAL_I2C_MspDeInit+0x40>)
 8003a82:	f002 fd99 	bl	80065b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40005400 	.word	0x40005400
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020400 	.word	0x40020400

08003a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aa2:	f001 fb19 	bl	80050d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aa6:	f000 f88f 	bl	8003bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aaa:	f7ff fed1 	bl	8003850 <MX_GPIO_Init>
  MX_RTC_Init();
 8003aae:	f000 f8fb 	bl	8003ca8 <MX_RTC_Init>
  MX_DMA_Init();
 8003ab2:	f7ff fead 	bl	8003810 <MX_DMA_Init>
  MX_I2C1_Init();
 8003ab6:	f7ff ff59 	bl	800396c <MX_I2C1_Init>
  MX_TIM1_Init();
 8003aba:	f000 fb19 	bl	80040f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003abe:	f000 fca5 	bl	800440c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003ac2:	f000 f943 	bl	8003d4c <MX_SPI1_Init>
  MX_CRC_Init();
 8003ac6:	f7ff fe6d 	bl	80037a4 <MX_CRC_Init>
  MX_TIM9_Init();
 8003aca:	f000 fbb1 	bl	8004230 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  ledAllOff();
 8003ace:	f7ff fd11 	bl	80034f4 <ledAllOff>
  ledRender();
 8003ad2:	f7ff fd26 	bl	8003522 <ledRender>
  sysConfigInit();
 8003ad6:	f000 ff7f 	bl	80049d8 <sysConfigInit>
  systemConfig_t * config = systemConfigGet();
 8003ada:	f000 ff95 	bl	8004a08 <systemConfigGet>
 8003ade:	61f8      	str	r0, [r7, #28]
  dodecaItems_t *dodecaItems = &config->configItems.dodecaConfig;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	61bb      	str	r3, [r7, #24]

  dodecaInit(dodecaItems);
 8003ae4:	69b8      	ldr	r0, [r7, #24]
 8003ae6:	f7fe fd15 	bl	8002514 <dodecaInit>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
*/

  ConsoleInit();
 8003aea:	f7fd fb51 	bl	8001190 <ConsoleInit>


  if (SYS_CONFIG_BAD_DATA == sysConfigRead())
 8003aee:	f000 ffc3 	bl	8004a78 <sysConfigRead>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d106      	bne.n	8003b06 <main+0x6a>
  {
	  ConsoleSendLine("*** CONFIG INVALID ***\nResetting to default");
 8003af8:	482e      	ldr	r0, [pc, #184]	; (8003bb4 <main+0x118>)
 8003afa:	f7fd fd71 	bl	80015e0 <ConsoleSendLine>
	  dodecaReset();
 8003afe:	f7fe fd19 	bl	8002534 <dodecaReset>
	  sysConfigSave();
 8003b02:	f000 ffd3 	bl	8004aac <sysConfigSave>
  }



  HAL_Delay(100);
 8003b06:	2064      	movs	r0, #100	; 0x64
 8003b08:	f001 fb58 	bl	80051bc <HAL_Delay>
  while(1 == MPU6050_Init(&hi2c1) )
 8003b0c:	e038      	b.n	8003b80 <main+0xe4>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 8003b0e:	482a      	ldr	r0, [pc, #168]	; (8003bb8 <main+0x11c>)
 8003b10:	f7fd fd59 	bl	80015c6 <ConsoleSendString>
	  hi2c1.Instance->CR1 &= ~(I2C_CR1_PE);
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <main+0x120>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <main+0x120>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

	  HAL_I2C_MspDeInit(&hi2c1);
 8003b24:	4825      	ldr	r0, [pc, #148]	; (8003bbc <main+0x120>)
 8003b26:	f7ff ff97 	bl	8003a58 <HAL_I2C_MspDeInit>
	  hi2c1.Instance->SR2 &=~(I2C_SR2_BUSY);
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <main+0x120>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <main+0x120>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0202 	bic.w	r2, r2, #2
 8003b38:	619a      	str	r2, [r3, #24]

	  GPIO_InitTypeDef GPIO_Init;
	  GPIO_Init.Pin = GPIO_PIN_7;
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	607b      	str	r3, [r7, #4]
	  GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	60bb      	str	r3, [r7, #8]
	  GPIO_Init.Pull = GPIO_PULLUP;
 8003b42:	2301      	movs	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
	  GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	481c      	ldr	r0, [pc, #112]	; (8003bc0 <main+0x124>)
 8003b50:	f002 fbae 	bl	80062b0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003b54:	2201      	movs	r2, #1
 8003b56:	2180      	movs	r1, #128	; 0x80
 8003b58:	4819      	ldr	r0, [pc, #100]	; (8003bc0 <main+0x124>)
 8003b5a:	f002 fe11 	bl	8006780 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	4817      	ldr	r0, [pc, #92]	; (8003bc0 <main+0x124>)
 8003b64:	f002 fe0c 	bl	8006780 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8003b68:	2032      	movs	r0, #50	; 0x32
 8003b6a:	f001 fb27 	bl	80051bc <HAL_Delay>
	  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003b6e:	2180      	movs	r1, #128	; 0x80
 8003b70:	4813      	ldr	r0, [pc, #76]	; (8003bc0 <main+0x124>)
 8003b72:	f002 fd21 	bl	80065b8 <HAL_GPIO_DeInit>
	  MX_I2C1_Init();
 8003b76:	f7ff fef9 	bl	800396c <MX_I2C1_Init>

	  //__HAL_RCC_GPIOB_CLK_ENABLE();
	  HAL_Delay(100);
 8003b7a:	2064      	movs	r0, #100	; 0x64
 8003b7c:	f001 fb1e 	bl	80051bc <HAL_Delay>
  while(1 == MPU6050_Init(&hi2c1) )
 8003b80:	480e      	ldr	r0, [pc, #56]	; (8003bbc <main+0x120>)
 8003b82:	f7fe fefd 	bl	8002980 <MPU6050_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d0c0      	beq.n	8003b0e <main+0x72>

  }
  // run the Accel To get initial angle ready. Seems to need to be run a numerb of times for the karman angle to settle???

detectFaceUp();
 8003b8c:	f7ff fd7e 	bl	800368c <detectFaceUp>

  ConsoleSendString("MPU6050 Initialised\n");
 8003b90:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <main+0x128>)
 8003b92:	f7fd fd18 	bl	80015c6 <ConsoleSendString>

  //HAL_TIM_Base_Start_IT(&htim9);

  stateContollerInit(STATE_BEGIN);
 8003b96:	200b      	movs	r0, #11
 8003b98:	f000 fd16 	bl	80045c8 <stateContollerInit>
  ledAllOff();
 8003b9c:	f7ff fcaa 	bl	80034f4 <ledAllOff>


  ConsolePrintPrompt();
 8003ba0:	f7fd fb20 	bl	80011e4 <ConsolePrintPrompt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 8003ba4:	f7fd fb2c 	bl	8001200 <ConsoleProcess>
	  stateController();
 8003ba8:	f000 fd62 	bl	8004670 <stateController>
		sprintf(msg,"Detected face %i is up",face);
		ConsoleSendLine(msg);
	}

	*/
	 HAL_Delay(200);
 8003bac:	20c8      	movs	r0, #200	; 0xc8
 8003bae:	f001 fb05 	bl	80051bc <HAL_Delay>
	  ConsoleProcess();
 8003bb2:	e7f7      	b.n	8003ba4 <main+0x108>
 8003bb4:	0800f390 	.word	0x0800f390
 8003bb8:	0800f3bc 	.word	0x0800f3bc
 8003bbc:	200005b4 	.word	0x200005b4
 8003bc0:	40020400 	.word	0x40020400
 8003bc4:	0800f3dc 	.word	0x0800f3dc

08003bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b094      	sub	sp, #80	; 0x50
 8003bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bce:	f107 0320 	add.w	r3, r7, #32
 8003bd2:	2230      	movs	r2, #48	; 0x30
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f007 f992 	bl	800af00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <SystemClock_Config+0xcc>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <SystemClock_Config+0xcc>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <SystemClock_Config+0xcc>)
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <SystemClock_Config+0xd0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <SystemClock_Config+0xd0>)
 8003c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <SystemClock_Config+0xd0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003c24:	2305      	movs	r3, #5
 8003c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c32:	2302      	movs	r3, #2
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003c40:	2360      	movs	r3, #96	; 0x60
 8003c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c44:	2302      	movs	r3, #2
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c48:	2304      	movs	r3, #4
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c4c:	f107 0320 	add.w	r3, r7, #32
 8003c50:	4618      	mov	r0, r3
 8003c52:	f003 fd87 	bl	8007764 <HAL_RCC_OscConfig>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003c5c:	f000 f81e 	bl	8003c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c60:	230f      	movs	r3, #15
 8003c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c64:	2302      	movs	r3, #2
 8003c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 ffe9 	bl	8007c54 <HAL_RCC_ClockConfig>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003c88:	f000 f808 	bl	8003c9c <Error_Handler>
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3750      	adds	r7, #80	; 0x50
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000

08003c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ca0:	b672      	cpsid	i
}
 8003ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <Error_Handler+0x8>
	...

08003ca8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <MX_RTC_Init+0x44>)
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <MX_RTC_Init+0x48>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <MX_RTC_Init+0x44>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <MX_RTC_Init+0x44>)
 8003cba:	227f      	movs	r2, #127	; 0x7f
 8003cbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <MX_RTC_Init+0x44>)
 8003cc0:	22ff      	movs	r2, #255	; 0xff
 8003cc2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <MX_RTC_Init+0x44>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <MX_RTC_Init+0x44>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <MX_RTC_Init+0x44>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003cd6:	4805      	ldr	r0, [pc, #20]	; (8003cec <MX_RTC_Init+0x44>)
 8003cd8:	f004 fa8c 	bl	80081f4 <HAL_RTC_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003ce2:	f7ff ffdb 	bl	8003c9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000608 	.word	0x20000608
 8003cf0:	40002800 	.word	0x40002800

08003cf4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cfc:	f107 0308 	add.w	r3, r7, #8
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
 8003d0c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <HAL_RTC_MspInit+0x50>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d111      	bne.n	8003d3c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d20:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 f974 	bl	8008014 <HAL_RCCEx_PeriphCLKConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003d32:	f7ff ffb3 	bl	8003c9c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d36:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <HAL_RTC_MspInit+0x54>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40002800 	.word	0x40002800
 8003d48:	42470e3c 	.word	0x42470e3c

08003d4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d52:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <MX_SPI1_Init+0x68>)
 8003d54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d56:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d76:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d98:	220a      	movs	r2, #10
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d9c:	4804      	ldr	r0, [pc, #16]	; (8003db0 <MX_SPI1_Init+0x64>)
 8003d9e:	f004 fd27 	bl	80087f0 <HAL_SPI_Init>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003da8:	f7ff ff78 	bl	8003c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000628 	.word	0x20000628
 8003db4:	40013000 	.word	0x40013000

08003db8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	; 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <HAL_SPI_MspInit+0x84>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d12b      	bne.n	8003e32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_SPI_MspInit+0x88>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <HAL_SPI_MspInit+0x88>)
 8003de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003de8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_SPI_MspInit+0x88>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <HAL_SPI_MspInit+0x88>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <HAL_SPI_MspInit+0x88>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6313      	str	r3, [r2, #48]	; 0x30
 8003e06:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <HAL_SPI_MspInit+0x88>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 8003e12:	23e0      	movs	r3, #224	; 0xe0
 8003e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e22:	2305      	movs	r3, #5
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e26:	f107 0314 	add.w	r3, r7, #20
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4805      	ldr	r0, [pc, #20]	; (8003e44 <HAL_SPI_MspInit+0x8c>)
 8003e2e:	f002 fa3f 	bl	80062b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e32:	bf00      	nop
 8003e34:	3728      	adds	r7, #40	; 0x28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40013000 	.word	0x40013000
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40020000 	.word	0x40020000

08003e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e9c:	e7fe      	b.n	8003e9c <NMI_Handler+0x4>

08003e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <HardFault_Handler+0x4>

08003ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <MemManage_Handler+0x4>

08003eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <BusFault_Handler+0x4>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <UsageFault_Handler+0x4>

08003eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ee4:	f001 f94a 	bl	800517c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 8003ef0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ef4:	f002 fc5e 	bl	80067b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}

08003efc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f00:	4803      	ldr	r0, [pc, #12]	; (8003f10 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003f02:	f005 f81d 	bl	8008f40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003f06:	4803      	ldr	r0, [pc, #12]	; (8003f14 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003f08:	f005 f81a 	bl	8008f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000684 	.word	0x20000684
 8003f14:	200006cc 	.word	0x200006cc

08003f18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <USART1_IRQHandler+0x10>)
 8003f1e:	f006 f849 	bl	8009fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000774 	.word	0x20000774

08003f2c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <DMA2_Stream1_IRQHandler+0x10>)
 8003f32:	f001 fc5f 	bl	80057f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000714 	.word	0x20000714

08003f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
	return 1;
 8003f44:	2301      	movs	r3, #1
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_kill>:

int _kill(int pid, int sig)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f5a:	f006 ff97 	bl	800ae8c <__errno>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2216      	movs	r2, #22
 8003f62:	601a      	str	r2, [r3, #0]
	return -1;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_exit>:

void _exit (int status)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f78:	f04f 31ff 	mov.w	r1, #4294967295
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ffe7 	bl	8003f50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f82:	e7fe      	b.n	8003f82 <_exit+0x12>

08003f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e00a      	b.n	8003fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f96:	f3af 8000 	nop.w
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	60ba      	str	r2, [r7, #8]
 8003fa2:	b2ca      	uxtb	r2, r1
 8003fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	dbf0      	blt.n	8003f96 <_read+0x12>
	}

return len;
 8003fb4:	687b      	ldr	r3, [r7, #4]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e009      	b.n	8003fe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	60ba      	str	r2, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	dbf1      	blt.n	8003fd0 <_write+0x12>
	}
	return len;
 8003fec:	687b      	ldr	r3, [r7, #4]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <_close>:

int _close(int file)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800401e:	605a      	str	r2, [r3, #4]
	return 0;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_isatty>:

int _isatty(int file)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
	return 1;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	return 0;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <_sbrk+0x5c>)
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <_sbrk+0x60>)
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <_sbrk+0x64>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <_sbrk+0x64>)
 800407e:	4a12      	ldr	r2, [pc, #72]	; (80040c8 <_sbrk+0x68>)
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <_sbrk+0x64>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	429a      	cmp	r2, r3
 800408e:	d207      	bcs.n	80040a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004090:	f006 fefc 	bl	800ae8c <__errno>
 8004094:	4603      	mov	r3, r0
 8004096:	220c      	movs	r2, #12
 8004098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	e009      	b.n	80040b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <_sbrk+0x64>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <_sbrk+0x64>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	4a05      	ldr	r2, [pc, #20]	; (80040c4 <_sbrk+0x64>)
 80040b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20020000 	.word	0x20020000
 80040c0:	00000400 	.word	0x00000400
 80040c4:	20000680 	.word	0x20000680
 80040c8:	20000bd0 	.word	0x20000bd0

080040cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <SystemInit+0x20>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <SystemInit+0x20>)
 80040d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b096      	sub	sp, #88	; 0x58
 80040f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004104:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800410e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	615a      	str	r2, [r3, #20]
 8004120:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004122:	1d3b      	adds	r3, r7, #4
 8004124:	2220      	movs	r2, #32
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f006 fee9 	bl	800af00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800412e:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <MX_TIM1_Init+0x138>)
 8004130:	4a3e      	ldr	r2, [pc, #248]	; (800422c <MX_TIM1_Init+0x13c>)
 8004132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004134:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <MX_TIM1_Init+0x138>)
 8004136:	2200      	movs	r2, #0
 8004138:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <MX_TIM1_Init+0x138>)
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <MX_TIM1_Init+0x138>)
 8004142:	227c      	movs	r2, #124	; 0x7c
 8004144:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004146:	4b38      	ldr	r3, [pc, #224]	; (8004228 <MX_TIM1_Init+0x138>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800414c:	4b36      	ldr	r3, [pc, #216]	; (8004228 <MX_TIM1_Init+0x138>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004152:	4b35      	ldr	r3, [pc, #212]	; (8004228 <MX_TIM1_Init+0x138>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004158:	4833      	ldr	r0, [pc, #204]	; (8004228 <MX_TIM1_Init+0x138>)
 800415a:	f004 fbd2 	bl	8008902 <HAL_TIM_Base_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004164:	f7ff fd9a 	bl	8003c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800416e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004172:	4619      	mov	r1, r3
 8004174:	482c      	ldr	r0, [pc, #176]	; (8004228 <MX_TIM1_Init+0x138>)
 8004176:	f005 f8ad 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004180:	f7ff fd8c 	bl	8003c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004184:	4828      	ldr	r0, [pc, #160]	; (8004228 <MX_TIM1_Init+0x138>)
 8004186:	f004 fc0b 	bl	80089a0 <HAL_TIM_PWM_Init>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004190:	f7ff fd84 	bl	8003c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004198:	2300      	movs	r3, #0
 800419a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800419c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041a0:	4619      	mov	r1, r3
 80041a2:	4821      	ldr	r0, [pc, #132]	; (8004228 <MX_TIM1_Init+0x138>)
 80041a4:	f005 fd22 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80041ae:	f7ff fd75 	bl	8003c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041b2:	2360      	movs	r3, #96	; 0x60
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041be:	2300      	movs	r3, #0
 80041c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d2:	2200      	movs	r2, #0
 80041d4:	4619      	mov	r1, r3
 80041d6:	4814      	ldr	r0, [pc, #80]	; (8004228 <MX_TIM1_Init+0x138>)
 80041d8:	f004 ffba 	bl	8009150 <HAL_TIM_PWM_ConfigChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80041e2:	f7ff fd5b 	bl	8003c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4807      	ldr	r0, [pc, #28]	; (8004228 <MX_TIM1_Init+0x138>)
 800420a:	f005 fd5d 	bl	8009cc8 <HAL_TIMEx_ConfigBreakDeadTime>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004214:	f7ff fd42 	bl	8003c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004218:	4803      	ldr	r0, [pc, #12]	; (8004228 <MX_TIM1_Init+0x138>)
 800421a:	f000 f8bd 	bl	8004398 <HAL_TIM_MspPostInit>

}
 800421e:	bf00      	nop
 8004220:	3758      	adds	r7, #88	; 0x58
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000684 	.word	0x20000684
 800422c:	40010000 	.word	0x40010000

08004230 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004236:	463b      	mov	r3, r7
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004242:	4b16      	ldr	r3, [pc, #88]	; (800429c <MX_TIM9_Init+0x6c>)
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <MX_TIM9_Init+0x70>)
 8004246:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <MX_TIM9_Init+0x6c>)
 800424a:	f242 720f 	movw	r2, #9999	; 0x270f
 800424e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <MX_TIM9_Init+0x6c>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 40000-1;
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <MX_TIM9_Init+0x6c>)
 8004258:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800425c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <MX_TIM9_Init+0x6c>)
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <MX_TIM9_Init+0x6c>)
 8004266:	2200      	movs	r2, #0
 8004268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800426a:	480c      	ldr	r0, [pc, #48]	; (800429c <MX_TIM9_Init+0x6c>)
 800426c:	f004 fb49 	bl	8008902 <HAL_TIM_Base_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8004276:	f7ff fd11 	bl	8003c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800427a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004280:	463b      	mov	r3, r7
 8004282:	4619      	mov	r1, r3
 8004284:	4805      	ldr	r0, [pc, #20]	; (800429c <MX_TIM9_Init+0x6c>)
 8004286:	f005 f825 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8004290:	f7ff fd04 	bl	8003c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	200006cc 	.word	0x200006cc
 80042a0:	40014000 	.word	0x40014000

080042a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a34      	ldr	r2, [pc, #208]	; (8004384 <HAL_TIM_Base_MspInit+0xe0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d147      	bne.n	8004346 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	4b33      	ldr	r3, [pc, #204]	; (8004388 <HAL_TIM_Base_MspInit+0xe4>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	4a32      	ldr	r2, [pc, #200]	; (8004388 <HAL_TIM_Base_MspInit+0xe4>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6453      	str	r3, [r2, #68]	; 0x44
 80042c6:	4b30      	ldr	r3, [pc, #192]	; (8004388 <HAL_TIM_Base_MspInit+0xe4>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80042d2:	4b2e      	ldr	r3, [pc, #184]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 80042d4:	4a2e      	ldr	r2, [pc, #184]	; (8004390 <HAL_TIM_Base_MspInit+0xec>)
 80042d6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80042d8:	4b2c      	ldr	r3, [pc, #176]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 80042da:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80042de:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042e0:	4b2a      	ldr	r3, [pc, #168]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 80042e2:	2240      	movs	r2, #64	; 0x40
 80042e4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80042ec:	4b27      	ldr	r3, [pc, #156]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 80042ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042f4:	4b25      	ldr	r3, [pc, #148]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 80042f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042fa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042fc:	4b23      	ldr	r3, [pc, #140]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 80042fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004302:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8004304:	4b21      	ldr	r3, [pc, #132]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 8004306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 800430e:	2200      	movs	r2, #0
 8004310:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 8004314:	2200      	movs	r2, #0
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004318:	481c      	ldr	r0, [pc, #112]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 800431a:	f001 f8d3 	bl	80054c4 <HAL_DMA_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8004324:	f7ff fcba 	bl	8003c9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 800432c:	625a      	str	r2, [r3, #36]	; 0x24
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <HAL_TIM_Base_MspInit+0xe8>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004334:	2200      	movs	r2, #0
 8004336:	2100      	movs	r1, #0
 8004338:	2018      	movs	r0, #24
 800433a:	f001 f83e 	bl	80053ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800433e:	2018      	movs	r0, #24
 8004340:	f001 f857 	bl	80053f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8004344:	e01a      	b.n	800437c <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM9)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <HAL_TIM_Base_MspInit+0xf0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d115      	bne.n	800437c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_TIM_Base_MspInit+0xe4>)
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	4a0b      	ldr	r2, [pc, #44]	; (8004388 <HAL_TIM_Base_MspInit+0xe4>)
 800435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435e:	6453      	str	r3, [r2, #68]	; 0x44
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_TIM_Base_MspInit+0xe4>)
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2100      	movs	r1, #0
 8004370:	2018      	movs	r0, #24
 8004372:	f001 f822 	bl	80053ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004376:	2018      	movs	r0, #24
 8004378:	f001 f83b 	bl	80053f2 <HAL_NVIC_EnableIRQ>
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40010000 	.word	0x40010000
 8004388:	40023800 	.word	0x40023800
 800438c:	20000714 	.word	0x20000714
 8004390:	40026428 	.word	0x40026428
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a12      	ldr	r2, [pc, #72]	; (8004400 <HAL_TIM_MspPostInit+0x68>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d11e      	bne.n	80043f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_TIM_MspPostInit+0x6c>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <HAL_TIM_MspPostInit+0x6c>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <HAL_TIM_MspPostInit+0x6c>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 80043d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043dc:	2302      	movs	r3, #2
 80043de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4619      	mov	r1, r3
 80043f2:	4805      	ldr	r0, [pc, #20]	; (8004408 <HAL_TIM_MspPostInit+0x70>)
 80043f4:	f001 ff5c 	bl	80062b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043f8:	bf00      	nop
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40010000 	.word	0x40010000
 8004404:	40023800 	.word	0x40023800
 8004408:	40020000 	.word	0x40020000

0800440c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 8004412:	4a12      	ldr	r2, [pc, #72]	; (800445c <MX_USART1_UART_Init+0x50>)
 8004414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 8004418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800441c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 8004426:	2200      	movs	r2, #0
 8004428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 800442c:	2200      	movs	r2, #0
 800442e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 8004432:	220c      	movs	r2, #12
 8004434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 8004438:	2200      	movs	r2, #0
 800443a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 800443e:	2200      	movs	r2, #0
 8004440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004442:	4805      	ldr	r0, [pc, #20]	; (8004458 <MX_USART1_UART_Init+0x4c>)
 8004444:	f005 fca6 	bl	8009d94 <HAL_UART_Init>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800444e:	f7ff fc25 	bl	8003c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000774 	.word	0x20000774
 800445c:	40011000 	.word	0x40011000

08004460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 0314 	add.w	r3, r7, #20
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <HAL_UART_MspInit+0x94>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d134      	bne.n	80044ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <HAL_UART_MspInit+0x98>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_UART_MspInit+0x98>)
 800448c:	f043 0310 	orr.w	r3, r3, #16
 8004490:	6453      	str	r3, [r2, #68]	; 0x44
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_UART_MspInit+0x98>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_UART_MspInit+0x98>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <HAL_UART_MspInit+0x98>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_UART_MspInit+0x98>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c0:	2302      	movs	r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	2303      	movs	r3, #3
 80044ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044cc:	2307      	movs	r3, #7
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d0:	f107 0314 	add.w	r3, r7, #20
 80044d4:	4619      	mov	r1, r3
 80044d6:	4809      	ldr	r0, [pc, #36]	; (80044fc <HAL_UART_MspInit+0x9c>)
 80044d8:	f001 feea 	bl	80062b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044dc:	2200      	movs	r2, #0
 80044de:	2100      	movs	r1, #0
 80044e0:	2025      	movs	r0, #37	; 0x25
 80044e2:	f000 ff6a 	bl	80053ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044e6:	2025      	movs	r0, #37	; 0x25
 80044e8:	f000 ff83 	bl	80053f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80044ec:	bf00      	nop
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40011000 	.word	0x40011000
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40020000 	.word	0x40020000

08004500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8004500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004504:	480d      	ldr	r0, [pc, #52]	; (800453c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004506:	490e      	ldr	r1, [pc, #56]	; (8004540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800450a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800450c:	e002      	b.n	8004514 <LoopCopyDataInit>

0800450e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800450e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004512:	3304      	adds	r3, #4

08004514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004518:	d3f9      	bcc.n	800450e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800451a:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800451c:	4c0b      	ldr	r4, [pc, #44]	; (800454c <LoopFillZerobss+0x26>)
  movs r3, #0
 800451e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004520:	e001      	b.n	8004526 <LoopFillZerobss>

08004522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004524:	3204      	adds	r2, #4

08004526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004528:	d3fb      	bcc.n	8004522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800452a:	f7ff fdcf 	bl	80040cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800452e:	f006 fcb3 	bl	800ae98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004532:	f7ff fab3 	bl	8003a9c <main>
  bx  lr    
 8004536:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8004538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800453c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004540:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 8004544:	08010368 	.word	0x08010368
  ldr r2, =_sbss
 8004548:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 800454c:	20000bd0 	.word	0x20000bd0

08004550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004550:	e7fe      	b.n	8004550 <ADC_IRQHandler>
	...

08004554 <findState>:
static eState_t oldState;
static stateControl_t *findState(const eState_t state);
static void displayState();

static stateControl_t *findState(const eState_t state)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
	eState_t stateLoop = 0xff;
 800455e:	23ff      	movs	r3, #255	; 0xff
 8004560:	73bb      	strb	r3, [r7, #14]
	uint8_t cnt = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
	while (STATE_NULL != stateLoop)
 8004566:	e00f      	b.n	8004588 <findState+0x34>
	{
		if (state == stateTable[cnt].state)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <findState+0x50>)
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	79fa      	ldrb	r2, [r7, #7]
 8004574:	429a      	cmp	r2, r3
 8004576:	d104      	bne.n	8004582 <findState+0x2e>
			return &stateTable[cnt];
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <findState+0x50>)
 800457e:	4413      	add	r3, r2
 8004580:	e009      	b.n	8004596 <findState+0x42>
		cnt++;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	3301      	adds	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
	while (STATE_NULL != stateLoop)
 8004588:	7bbb      	ldrb	r3, [r7, #14]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ec      	bne.n	8004568 <findState+0x14>
	}
	return &stateTable[cnt];
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <findState+0x50>)
 8004594:	4413      	add	r3, r2
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000224 	.word	0x20000224

080045a8 <setStateControllerMode>:

void setStateControllerMode(eStateControllerMode_t mode)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
	stateControllerMode = mode;
 80045b2:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <setStateControllerMode+0x1c>)
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	7013      	strb	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	200007c1 	.word	0x200007c1

080045c8 <stateContollerInit>:


void stateContollerInit(eState_t state)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
	if (state == STATE_CONFIG)
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d103      	bne.n	80045e0 <stateContollerInit+0x18>
	{
		stateControllerMode = STATE_CONT_MODE_CONFIG;
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <stateContollerInit+0x48>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e002      	b.n	80045e6 <stateContollerInit+0x1e>
	}else
	{
		stateControllerMode  = STATE_CONT_MODE_RUN;
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <stateContollerInit+0x48>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
	}
	currentDodeca = dodecaGet(DODECA_STOP_FACE);
 80045e6:	200b      	movs	r0, #11
 80045e8:	f7fe f82c 	bl	8002644 <dodecaGet>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <stateContollerInit+0x4c>)
 80045f0:	6013      	str	r3, [r2, #0]
	currentDodeca->state = DODECA_STATE_STOPPED;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <stateContollerInit+0x4c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2203      	movs	r2, #3
 80045f8:	621a      	str	r2, [r3, #32]
	currentState = findState(state);
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ffa9 	bl	8004554 <findState>
 8004602:	4603      	mov	r3, r0
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <stateContollerInit+0x50>)
 8004606:	6013      	str	r3, [r2, #0]
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200007c1 	.word	0x200007c1
 8004614:	200007c4 	.word	0x200007c4
 8004618:	200007b8 	.word	0x200007b8

0800461c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
	{

	}
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <displayState>:




static void displayState()
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
	if (oldState == currentState->state) return;
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <displayState+0x34>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <displayState+0x38>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d00e      	beq.n	8004660 <displayState+0x30>
	oldState = currentState->state;
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <displayState+0x34>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <displayState+0x38>)
 800464a:	701a      	strb	r2, [r3, #0]
	ConsoleSendString("State :-> ");
 800464c:	4807      	ldr	r0, [pc, #28]	; (800466c <displayState+0x3c>)
 800464e:	f7fc ffba 	bl	80015c6 <ConsoleSendString>
	ConsoleSendLine(currentState->debugName);
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <displayState+0x34>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	f7fc ffc1 	bl	80015e0 <ConsoleSendLine>
 800465e:	e000      	b.n	8004662 <displayState+0x32>
	if (oldState == currentState->state) return;
 8004660:	bf00      	nop
}
 8004662:	bd80      	pop	{r7, pc}
 8004664:	200007b8 	.word	0x200007b8
 8004668:	200007c9 	.word	0x200007c9
 800466c:	0800f474 	.word	0x0800f474

08004670 <stateController>:


void stateController()
{
 8004670:	b598      	push	{r3, r4, r7, lr}
 8004672:	af00      	add	r7, sp, #0



	switch (currentState->state)
 8004674:	4b93      	ldr	r3, [pc, #588]	; (80048c4 <stateController+0x254>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b0b      	cmp	r3, #11
 800467c:	f200 81a2 	bhi.w	80049c4 <stateController+0x354>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <stateController+0x18>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080049bd 	.word	0x080049bd
 800468c:	08004773 	.word	0x08004773
 8004690:	0800478f 	.word	0x0800478f
 8004694:	0800498f 	.word	0x0800498f
 8004698:	08004893 	.word	0x08004893
 800469c:	080047bd 	.word	0x080047bd
 80046a0:	08004989 	.word	0x08004989
 80046a4:	08004983 	.word	0x08004983
 80046a8:	08004947 	.word	0x08004947
 80046ac:	0800497d 	.word	0x0800497d
 80046b0:	0800494d 	.word	0x0800494d
 80046b4:	080046b9 	.word	0x080046b9
	{
	case STATE_BEGIN:
			displayState();
 80046b8:	f7ff ffba 	bl	8004630 <displayState>
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 80046bc:	4b82      	ldr	r3, [pc, #520]	; (80048c8 <stateController+0x258>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <stateController+0x62>
			{
				currentState = findState(STATE_CONFIG);
 80046c4:	2001      	movs	r0, #1
 80046c6:	f7ff ff45 	bl	8004554 <findState>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a7d      	ldr	r2, [pc, #500]	; (80048c4 <stateController+0x254>)
 80046ce:	6013      	str	r3, [r2, #0]
				break;
 80046d0:	e178      	b.n	80049c4 <stateController+0x354>
			}
			currentFaceUp = detectFaceUp();
 80046d2:	f7fe ffdb 	bl	800368c <detectFaceUp>
 80046d6:	4603      	mov	r3, r0
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4b7c      	ldr	r3, [pc, #496]	; (80048cc <stateController+0x25c>)
 80046dc:	701a      	strb	r2, [r3, #0]
			if (0xff == currentFaceUp )
 80046de:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <stateController+0x25c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2bff      	cmp	r3, #255	; 0xff
 80046e4:	d109      	bne.n	80046fa <stateController+0x8a>
			{
				// TODO Set Error reason
				currentState = findState(currentState->error);
 80046e6:	4b77      	ldr	r3, [pc, #476]	; (80048c4 <stateController+0x254>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	7b5b      	ldrb	r3, [r3, #13]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff31 	bl	8004554 <findState>
 80046f2:	4603      	mov	r3, r0
 80046f4:	4a73      	ldr	r2, [pc, #460]	; (80048c4 <stateController+0x254>)
 80046f6:	6013      	str	r3, [r2, #0]
				break;
 80046f8:	e164      	b.n	80049c4 <stateController+0x354>
			}
			currentDodeca = dodecaGet(currentFaceUp);
 80046fa:	4b74      	ldr	r3, [pc, #464]	; (80048cc <stateController+0x25c>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd ffa0 	bl	8002644 <dodecaGet>
 8004704:	4603      	mov	r3, r0
 8004706:	4a72      	ldr	r2, [pc, #456]	; (80048d0 <stateController+0x260>)
 8004708:	6013      	str	r3, [r2, #0]
			if (DODECA_STATE_NOT_CONFIGURED == currentDodeca->state)
 800470a:	4b71      	ldr	r3, [pc, #452]	; (80048d0 <stateController+0x260>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d109      	bne.n	8004728 <stateController+0xb8>
			{
				// TODO Set Error reason
				currentState = findState(currentState->error);
 8004714:	4b6b      	ldr	r3, [pc, #428]	; (80048c4 <stateController+0x254>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	7b5b      	ldrb	r3, [r3, #13]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff1a 	bl	8004554 <findState>
 8004720:	4603      	mov	r3, r0
 8004722:	4a68      	ldr	r2, [pc, #416]	; (80048c4 <stateController+0x254>)
 8004724:	6013      	str	r3, [r2, #0]
				currentState = findState(currentState->done);
				ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_RED_ID)->code,LED_FACE_MODE_NORMAL);
				ledRender();
			}

			break;
 8004726:	e14d      	b.n	80049c4 <stateController+0x354>
				currentDodeca = dodecaGet(currentFaceUp);
 8004728:	4b68      	ldr	r3, [pc, #416]	; (80048cc <stateController+0x25c>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd ff89 	bl	8002644 <dodecaGet>
 8004732:	4603      	mov	r3, r0
 8004734:	4a66      	ldr	r2, [pc, #408]	; (80048d0 <stateController+0x260>)
 8004736:	6013      	str	r3, [r2, #0]
				currentDodeca->state = DODECA_STATE_STOPPED;
 8004738:	4b65      	ldr	r3, [pc, #404]	; (80048d0 <stateController+0x260>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2203      	movs	r2, #3
 800473e:	621a      	str	r2, [r3, #32]
				currentState = findState(currentState->done);
 8004740:	4b60      	ldr	r3, [pc, #384]	; (80048c4 <stateController+0x254>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	7b1b      	ldrb	r3, [r3, #12]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ff04 	bl	8004554 <findState>
 800474c:	4603      	mov	r3, r0
 800474e:	4a5d      	ldr	r2, [pc, #372]	; (80048c4 <stateController+0x254>)
 8004750:	6013      	str	r3, [r2, #0]
				ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_RED_ID)->code,LED_FACE_MODE_NORMAL);
 8004752:	4b5f      	ldr	r3, [pc, #380]	; (80048d0 <stateController+0x260>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	781c      	ldrb	r4, [r3, #0]
 8004758:	2000      	movs	r0, #0
 800475a:	f7fd feb1 	bl	80024c0 <colourFindByid>
 800475e:	4603      	mov	r3, r0
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2200      	movs	r2, #0
 8004764:	4619      	mov	r1, r3
 8004766:	4620      	mov	r0, r4
 8004768:	f7fe fee1 	bl	800352e <ledSetFaceColour>
				ledRender();
 800476c:	f7fe fed9 	bl	8003522 <ledRender>
			break;
 8004770:	e128      	b.n	80049c4 <stateController+0x354>

	case STATE_CONFIG:
		displayState();
 8004772:	f7ff ff5d 	bl	8004630 <displayState>
		if (STATE_CONT_MODE_RUN ==  stateControllerMode)
 8004776:	4b54      	ldr	r3, [pc, #336]	; (80048c8 <stateController+0x258>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8121 	bne.w	80049c2 <stateController+0x352>
		{
			currentState = findState(STATE_IDLE);
 8004780:	2002      	movs	r0, #2
 8004782:	f7ff fee7 	bl	8004554 <findState>
 8004786:	4603      	mov	r3, r0
 8004788:	4a4e      	ldr	r2, [pc, #312]	; (80048c4 <stateController+0x254>)
 800478a:	6013      	str	r3, [r2, #0]
			break;
 800478c:	e11a      	b.n	80049c4 <stateController+0x354>
		}
		break;
	case STATE_IDLE:
			displayState();
 800478e:	f7ff ff4f 	bl	8004630 <displayState>
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 8004792:	4b4d      	ldr	r3, [pc, #308]	; (80048c8 <stateController+0x258>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d106      	bne.n	80047a8 <stateController+0x138>
				currentState = findState(STATE_CONFIG);
 800479a:	2001      	movs	r0, #1
 800479c:	f7ff feda 	bl	8004554 <findState>
 80047a0:	4603      	mov	r3, r0
 80047a2:	4a48      	ldr	r2, [pc, #288]	; (80048c4 <stateController+0x254>)
 80047a4:	6013      	str	r3, [r2, #0]
			else
				currentState = findState(currentState->done);
		break;
 80047a6:	e10d      	b.n	80049c4 <stateController+0x354>
				currentState = findState(currentState->done);
 80047a8:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <stateController+0x254>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	7b1b      	ldrb	r3, [r3, #12]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fed0 	bl	8004554 <findState>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4a43      	ldr	r2, [pc, #268]	; (80048c4 <stateController+0x254>)
 80047b8:	6013      	str	r3, [r2, #0]
		break;
 80047ba:	e103      	b.n	80049c4 <stateController+0x354>
	case STATE_CHECK_OREN:
		displayState();
 80047bc:	f7ff ff38 	bl	8004630 <displayState>
			detectedFace = detectFaceUp();
 80047c0:	f7fe ff64 	bl	800368c <detectFaceUp>
 80047c4:	4603      	mov	r3, r0
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <stateController+0x264>)
 80047ca:	701a      	strb	r2, [r3, #0]
			if (detectedFace == 0xff)
 80047cc:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <stateController+0x264>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2bff      	cmp	r3, #255	; 0xff
 80047d2:	d10c      	bne.n	80047ee <stateController+0x17e>
			{
				ConsoleSendLine("ERROR - Face not detected");
 80047d4:	4840      	ldr	r0, [pc, #256]	; (80048d8 <stateController+0x268>)
 80047d6:	f7fc ff03 	bl	80015e0 <ConsoleSendLine>
				currentState =  findState(currentState->error);
 80047da:	4b3a      	ldr	r3, [pc, #232]	; (80048c4 <stateController+0x254>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	7b5b      	ldrb	r3, [r3, #13]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff feb7 	bl	8004554 <findState>
 80047e6:	4603      	mov	r3, r0
 80047e8:	4a36      	ldr	r2, [pc, #216]	; (80048c4 <stateController+0x254>)
 80047ea:	6013      	str	r3, [r2, #0]
				break;
 80047ec:	e0ea      	b.n	80049c4 <stateController+0x354>
			}
			newDodecaDetected = dodecaGet(detectedFace);
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <stateController+0x264>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd ff26 	bl	8002644 <dodecaGet>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4a38      	ldr	r2, [pc, #224]	; (80048dc <stateController+0x26c>)
 80047fc:	6013      	str	r3, [r2, #0]
			if (detectedFace == currentDodeca->id) // If its the same face then exit
 80047fe:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <stateController+0x260>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <stateController+0x264>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d109      	bne.n	8004820 <stateController+0x1b0>
			{
				currentState =  findState(currentState->done);
 800480c:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <stateController+0x254>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	7b1b      	ldrb	r3, [r3, #12]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fe9e 	bl	8004554 <findState>
 8004818:	4603      	mov	r3, r0
 800481a:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <stateController+0x254>)
 800481c:	6013      	str	r3, [r2, #0]

			else
			{
				currentState = findState(currentState->newFaceDetect);
			}
		break;
 800481e:	e0d1      	b.n	80049c4 <stateController+0x354>
			else if (newDodecaDetected->state == DODECA_STATE_NOT_CONFIGURED || DODECA_STATE_ERROR == newDodecaDetected->state)
 8004820:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <stateController+0x26c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d004      	beq.n	8004834 <stateController+0x1c4>
 800482a:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <stateController+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d124      	bne.n	800487e <stateController+0x20e>
				ledSetFaceColour(newDodecaDetected->id,newDodecaDetected->colour , LED_FACE_MODE_ERROR);
 8004834:	4b29      	ldr	r3, [pc, #164]	; (80048dc <stateController+0x26c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	7818      	ldrb	r0, [r3, #0]
 800483a:	4b28      	ldr	r3, [pc, #160]	; (80048dc <stateController+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2201      	movs	r2, #1
 8004842:	4619      	mov	r1, r3
 8004844:	f7fe fe73 	bl	800352e <ledSetFaceColour>
				ledRender();
 8004848:	f7fe fe6b 	bl	8003522 <ledRender>
				if (DODECA_STATE_ACTIVE == currentDodeca->state)
 800484c:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <stateController+0x260>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d109      	bne.n	800486a <stateController+0x1fa>
					dodecaStop(currentDodeca->id);
 8004856:	4b1e      	ldr	r3, [pc, #120]	; (80048d0 <stateController+0x260>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd ff26 	bl	80026ae <dodecaStop>
					currentDodeca = newDodecaDetected;
 8004862:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <stateController+0x26c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <stateController+0x260>)
 8004868:	6013      	str	r3, [r2, #0]
				currentState = findState(currentState->error);
 800486a:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <stateController+0x254>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	7b5b      	ldrb	r3, [r3, #13]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fe6f 	bl	8004554 <findState>
 8004876:	4603      	mov	r3, r0
 8004878:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <stateController+0x254>)
 800487a:	6013      	str	r3, [r2, #0]
		break;
 800487c:	e0a2      	b.n	80049c4 <stateController+0x354>
				currentState = findState(currentState->newFaceDetect);
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <stateController+0x254>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	7a1b      	ldrb	r3, [r3, #8]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fe65 	bl	8004554 <findState>
 800488a:	4603      	mov	r3, r0
 800488c:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <stateController+0x254>)
 800488e:	6013      	str	r3, [r2, #0]
		break;
 8004890:	e098      	b.n	80049c4 <stateController+0x354>
	case STATE_CHANGE_TASK: // Chnage Task only happens if there is a Valid new face
		displayState();
 8004892:	f7ff fecd 	bl	8004630 <displayState>

		if (currentDodeca->state == DODECA_STATE_ACTIVE)
 8004896:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <stateController+0x260>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d11f      	bne.n	80048e0 <stateController+0x270>
		{
			dodecaStop(currentDodeca->id);
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <stateController+0x260>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd ff01 	bl	80026ae <dodecaStop>
			currentDodeca = newDodecaDetected;
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <stateController+0x26c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a07      	ldr	r2, [pc, #28]	; (80048d0 <stateController+0x260>)
 80048b2:	6013      	str	r3, [r2, #0]
			dodecaStart(currentDodeca->id);
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <stateController+0x260>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd fedc 	bl	8002678 <dodecaStart>
 80048c0:	e02c      	b.n	800491c <stateController+0x2ac>
 80048c2:	bf00      	nop
 80048c4:	200007b8 	.word	0x200007b8
 80048c8:	200007c1 	.word	0x200007c1
 80048cc:	200007c8 	.word	0x200007c8
 80048d0:	200007c4 	.word	0x200007c4
 80048d4:	200007c0 	.word	0x200007c0
 80048d8:	0800f480 	.word	0x0800f480
 80048dc:	200007bc 	.word	0x200007bc
		}
		else if (currentDodeca->state == DODECA_STATE_NOT_CONFIGURED)
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <stateController+0x358>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d118      	bne.n	800491c <stateController+0x2ac>
		{
			ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_BLACK_ID)->code, LED_FACE_MODE_NORMAL);
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <stateController+0x358>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781c      	ldrb	r4, [r3, #0]
 80048f0:	200c      	movs	r0, #12
 80048f2:	f7fd fde5 	bl	80024c0 <colourFindByid>
 80048f6:	4603      	mov	r3, r0
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2200      	movs	r2, #0
 80048fc:	4619      	mov	r1, r3
 80048fe:	4620      	mov	r0, r4
 8004900:	f7fe fe15 	bl	800352e <ledSetFaceColour>
			ledRender();
 8004904:	f7fe fe0d 	bl	8003522 <ledRender>
			currentDodeca = newDodecaDetected;
 8004908:	4b30      	ldr	r3, [pc, #192]	; (80049cc <stateController+0x35c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <stateController+0x358>)
 800490e:	6013      	str	r3, [r2, #0]
			dodecaStart(currentDodeca->id);
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <stateController+0x358>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd feae 	bl	8002678 <dodecaStart>
		}


		if (currentDodeca->id != DODECA_STOP_FACE)
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <stateController+0x358>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b0b      	cmp	r3, #11
 8004924:	d005      	beq.n	8004932 <stateController+0x2c2>
		{
			dodecaStart(currentDodeca->id);
 8004926:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <stateController+0x358>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd fea3 	bl	8002678 <dodecaStart>
		}

		currentState = findState(currentState->done);
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <stateController+0x360>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	7b1b      	ldrb	r3, [r3, #12]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fe0b 	bl	8004554 <findState>
 800493e:	4603      	mov	r3, r0
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <stateController+0x360>)
 8004942:	6013      	str	r3, [r2, #0]

		break;
 8004944:	e03e      	b.n	80049c4 <stateController+0x354>
	case STATE_UPDATE_TASK:
			displayState();
 8004946:	f7ff fe73 	bl	8004630 <displayState>
			break;
 800494a:	e03b      	b.n	80049c4 <stateController+0x354>
	case STATE_ERROR:
			displayState();
 800494c:	f7ff fe70 	bl	8004630 <displayState>
			ledSetFaceColour(currentDodeca->id,currentDodeca->colour,LED_FACE_MODE_ERROR);
 8004950:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <stateController+0x358>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	7818      	ldrb	r0, [r3, #0]
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <stateController+0x358>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2201      	movs	r2, #1
 800495e:	4619      	mov	r1, r3
 8004960:	f7fe fde5 	bl	800352e <ledSetFaceColour>
			ledRender();
 8004964:	f7fe fddd 	bl	8003522 <ledRender>
			currentState = findState(currentState->done);
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <stateController+0x360>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	7b1b      	ldrb	r3, [r3, #12]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fdf0 	bl	8004554 <findState>
 8004974:	4603      	mov	r3, r0
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <stateController+0x360>)
 8004978:	6013      	str	r3, [r2, #0]
			break;
 800497a:	e023      	b.n	80049c4 <stateController+0x354>
	case STATE_BATTERY_TEST:
			displayState();
 800497c:	f7ff fe58 	bl	8004630 <displayState>
		break;
 8004980:	e020      	b.n	80049c4 <stateController+0x354>
	case STATE_START_TASK:
			displayState();
 8004982:	f7ff fe55 	bl	8004630 <displayState>
		break;
 8004986:	e01d      	b.n	80049c4 <stateController+0x354>
	case STATE_END_TASK:
			displayState();
 8004988:	f7ff fe52 	bl	8004630 <displayState>
		break;
 800498c:	e01a      	b.n	80049c4 <stateController+0x354>
	case STATE_SLEEP:
			displayState();
 800498e:	f7ff fe4f 	bl	8004630 <displayState>
			// TODO : Goto Sleep
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <stateController+0x364>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d106      	bne.n	80049a8 <stateController+0x338>
				currentState = findState(STATE_CONFIG);
 800499a:	2001      	movs	r0, #1
 800499c:	f7ff fdda 	bl	8004554 <findState>
 80049a0:	4603      	mov	r3, r0
 80049a2:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <stateController+0x360>)
 80049a4:	6013      	str	r3, [r2, #0]
			else
				currentState = findState(currentState->done);
		break;
 80049a6:	e00d      	b.n	80049c4 <stateController+0x354>
				currentState = findState(currentState->done);
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <stateController+0x360>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	7b1b      	ldrb	r3, [r3, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fdd0 	bl	8004554 <findState>
 80049b4:	4603      	mov	r3, r0
 80049b6:	4a06      	ldr	r2, [pc, #24]	; (80049d0 <stateController+0x360>)
 80049b8:	6013      	str	r3, [r2, #0]
		break;
 80049ba:	e003      	b.n	80049c4 <stateController+0x354>
	case STATE_NULL:
		displayState();
 80049bc:	f7ff fe38 	bl	8004630 <displayState>
		break;
 80049c0:	e000      	b.n	80049c4 <stateController+0x354>
		break;
 80049c2:	bf00      	nop
	}


}
 80049c4:	bf00      	nop
 80049c6:	bd98      	pop	{r3, r4, r7, pc}
 80049c8:	200007c4 	.word	0x200007c4
 80049cc:	200007bc 	.word	0x200007bc
 80049d0:	200007b8 	.word	0x200007b8
 80049d4:	200007c1 	.word	0x200007c1

080049d8 <sysConfigInit>:
static uint16_t SYS_CONFIG_SIZE_DODEC;



void sysConfigInit()
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
	SYS_CONFIG_SIZE = sizeof(systemConfig.configItems)/4;
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <sysConfigInit+0x24>)
 80049de:	226c      	movs	r2, #108	; 0x6c
 80049e0:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_ALL_SIZE = sizeof(systemConfig)/4;
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <sysConfigInit+0x28>)
 80049e4:	226d      	movs	r2, #109	; 0x6d
 80049e6:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_DODEC = sizeof(systemConfig.configItems.dodecaConfig);
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <sysConfigInit+0x2c>)
 80049ea:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80049ee:	801a      	strh	r2, [r3, #0]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000980 	.word	0x20000980
 8004a00:	20000982 	.word	0x20000982
 8004a04:	20000984 	.word	0x20000984

08004a08 <systemConfigGet>:

systemConfig_t *systemConfigGet()
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
	return &systemConfig;
 8004a0c:	4b02      	ldr	r3, [pc, #8]	; (8004a18 <systemConfigGet+0x10>)
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	200007cc 	.word	0x200007cc

08004a1c <sysConfigValidateConfig>:

static eSYSConfig_t sysConfigValidateConfig()
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8004a22:	f000 f813 	bl	8004a4c <sysConfigCalcChecksum>
 8004a26:	6078      	str	r0, [r7, #4]
	uint32_t crcRO = systemConfigRO->checksum;
 8004a28:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <sysConfigValidateConfig+0x2c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004a30:	603b      	str	r3, [r7, #0]
	if (crc == crcRO)
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d101      	bne.n	8004a3e <sysConfigValidateConfig+0x22>
		return SYS_CONFIG_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <sysConfigValidateConfig+0x24>
	else
		return SYS_CONFIG_BAD_CHECKSUM;
 8004a3e:	2301      	movs	r3, #1
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	200002e4 	.word	0x200002e4

08004a4c <sysConfigCalcChecksum>:

uint32_t sysConfigCalcChecksum()
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
	uint32_t crc;
	crc =  HAL_CRC_Calculate(&hcrc,  (uint32_t*)&systemConfig.configItems, SYS_CONFIG_SIZE);
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <sysConfigCalcChecksum+0x20>)
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	4905      	ldr	r1, [pc, #20]	; (8004a70 <sysConfigCalcChecksum+0x24>)
 8004a5a:	4806      	ldr	r0, [pc, #24]	; (8004a74 <sysConfigCalcChecksum+0x28>)
 8004a5c:	f000 fcff 	bl	800545e <HAL_CRC_Calculate>
 8004a60:	6078      	str	r0, [r7, #4]
	return crc;
 8004a62:	687b      	ldr	r3, [r7, #4]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000980 	.word	0x20000980
 8004a70:	200007cc 	.word	0x200007cc
 8004a74:	200005ac 	.word	0x200005ac

08004a78 <sysConfigRead>:




eSYSConfig_t sysConfigRead()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,SYS_CONFIG_ALL_SIZE );
 8004a7c:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <sysConfigRead+0x28>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <sysConfigRead+0x2c>)
 8004a82:	8812      	ldrh	r2, [r2, #0]
 8004a84:	4908      	ldr	r1, [pc, #32]	; (8004aa8 <sysConfigRead+0x30>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd ff4e 	bl	8002928 <Flash_Read_Data>
	//Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,5 );
	if (SYS_CONFIG_BAD_CHECKSUM == sysConfigValidateConfig())
 8004a8c:	f7ff ffc6 	bl	8004a1c <sysConfigValidateConfig>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <sysConfigRead+0x22>
		return SYS_CONFIG_BAD_DATA;
 8004a96:	2302      	movs	r3, #2
 8004a98:	e000      	b.n	8004a9c <sysConfigRead+0x24>
	else
		return SYS_CONFIG_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	0800fee4 	.word	0x0800fee4
 8004aa4:	20000982 	.word	0x20000982
 8004aa8:	200007cc 	.word	0x200007cc

08004aac <sysConfigSave>:

void sysConfigSave()
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8004ab2:	f7ff ffcb 	bl	8004a4c <sysConfigCalcChecksum>
 8004ab6:	6078      	str	r0, [r7, #4]
	systemConfig.checksum = crc;
 8004ab8:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <sysConfigSave+0x2c>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

	Flash_Write_Data(SYSTEM_CONFIG_ADDRESS, (uint32_t *)&systemConfig, SYS_CONFIG_ALL_SIZE);
 8004ac0:	4b06      	ldr	r3, [pc, #24]	; (8004adc <sysConfigSave+0x30>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <sysConfigSave+0x34>)
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	4903      	ldr	r1, [pc, #12]	; (8004ad8 <sysConfigSave+0x2c>)
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fd fece 	bl	800286c <Flash_Write_Data>
	//TODO: Handle a Confug Save Error - Hard Fault!
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	200007cc 	.word	0x200007cc
 8004adc:	0800fee4 	.word	0x0800fee4
 8004ae0:	20000982 	.word	0x20000982

08004ae4 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	460a      	mov	r2, r1
 8004aee:	71fb      	strb	r3, [r7, #7]
 8004af0:	4613      	mov	r3, r2
 8004af2:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	79ba      	ldrb	r2, [r7, #6]
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	121b      	asrs	r3, r3, #8
 8004afe:	b2db      	uxtb	r3, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4604      	mov	r4, r0
 8004b14:	4608      	mov	r0, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	71fb      	strb	r3, [r7, #7]
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71bb      	strb	r3, [r7, #6]
 8004b22:	460b      	mov	r3, r1
 8004b24:	717b      	strb	r3, [r7, #5]
 8004b26:	4613      	mov	r3, r2
 8004b28:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8004b2a:	79bb      	ldrb	r3, [r7, #6]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b34:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004bd4 <led_set_RGB+0xc8>
 8004b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b40:	edc7 7a00 	vstr	s15, [r7]
 8004b44:	783b      	ldrb	r3, [r7, #0]
 8004b46:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8004b48:	797b      	ldrb	r3, [r7, #5]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b52:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004bd4 <led_set_RGB+0xc8>
 8004b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5e:	edc7 7a00 	vstr	s15, [r7]
 8004b62:	783b      	ldrb	r3, [r7, #0]
 8004b64:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8004b66:	793b      	ldrb	r3, [r7, #4]
 8004b68:	ee07 3a90 	vmov	s15, r3
 8004b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b70:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004bd4 <led_set_RGB+0xc8>
 8004b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b7c:	edc7 7a00 	vstr	s15, [r7]
 8004b80:	783b      	ldrb	r3, [r7, #0]
 8004b82:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8004b84:	79fa      	ldrb	r2, [r7, #7]
 8004b86:	4613      	mov	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	189c      	adds	r4, r3, r2
 8004b8c:	797b      	ldrb	r3, [r7, #5]
 8004b8e:	21b0      	movs	r1, #176	; 0xb0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ffa7 	bl	8004ae4 <scale8>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <led_set_RGB+0xcc>)
 8004b9c:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8004b9e:	79fa      	ldrb	r2, [r7, #7]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	490b      	ldr	r1, [pc, #44]	; (8004bd8 <led_set_RGB+0xcc>)
 8004baa:	79ba      	ldrb	r2, [r7, #6]
 8004bac:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8004bae:	79fa      	ldrb	r2, [r7, #7]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	1c9c      	adds	r4, r3, #2
 8004bb8:	793b      	ldrb	r3, [r7, #4]
 8004bba:	21f0      	movs	r1, #240	; 0xf0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff91 	bl	8004ae4 <scale8>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <led_set_RGB+0xcc>)
 8004bc8:	551a      	strb	r2, [r3, r4]

}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	3e99999a 	.word	0x3e99999a
 8004bd8:	20000988 	.word	0x20000988

08004bdc <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 8004be2:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <led_render+0x148>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <led_render+0x1a>
 8004bea:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <led_render+0x14c>)
 8004bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d015      	beq.n	8004c22 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	71fb      	strb	r3, [r7, #7]
 8004bfa:	e007      	b.n	8004c0c <led_render+0x30>
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	4a4b      	ldr	r2, [pc, #300]	; (8004d2c <led_render+0x150>)
 8004c00:	2100      	movs	r1, #0
 8004c02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	71fb      	strb	r3, [r7, #7]
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	2b2f      	cmp	r3, #47	; 0x2f
 8004c10:	d9f4      	bls.n	8004bfc <led_render+0x20>
    wr_buf_p = 0;
 8004c12:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <led_render+0x148>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4845      	ldr	r0, [pc, #276]	; (8004d30 <led_render+0x154>)
 8004c1c:	f004 f8ca 	bl	8008db4 <HAL_TIM_PWM_Stop_DMA>
    return;
 8004c20:	e07c      	b.n	8004d1c <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8004c22:	2300      	movs	r3, #0
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	e06d      	b.n	8004d04 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8004c28:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <led_render+0x158>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dd01      	ble.n	8004c40 <led_render+0x64>
 8004c3c:	2150      	movs	r1, #80	; 0x50
 8004c3e:	e000      	b.n	8004c42 <led_render+0x66>
 8004c40:	2128      	movs	r1, #40	; 0x28
 8004c42:	4a3a      	ldr	r2, [pc, #232]	; (8004d2c <led_render+0x150>)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8004c4a:	4b3a      	ldr	r3, [pc, #232]	; (8004d34 <led_render+0x158>)
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	dd01      	ble.n	8004c62 <led_render+0x86>
 8004c5e:	2150      	movs	r1, #80	; 0x50
 8004c60:	e000      	b.n	8004c64 <led_render+0x88>
 8004c62:	2128      	movs	r1, #40	; 0x28
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	4a30      	ldr	r2, [pc, #192]	; (8004d2c <led_render+0x150>)
 8004c6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8004c6e:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <led_render+0x158>)
 8004c70:	789b      	ldrb	r3, [r3, #2]
 8004c72:	461a      	mov	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	dd01      	ble.n	8004c86 <led_render+0xaa>
 8004c82:	2150      	movs	r1, #80	; 0x50
 8004c84:	e000      	b.n	8004c88 <led_render+0xac>
 8004c86:	2128      	movs	r1, #40	; 0x28
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	3310      	adds	r3, #16
 8004c8c:	4a27      	ldr	r2, [pc, #156]	; (8004d2c <led_render+0x150>)
 8004c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8004c92:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <led_render+0x158>)
 8004c94:	78db      	ldrb	r3, [r3, #3]
 8004c96:	461a      	mov	r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	dd01      	ble.n	8004caa <led_render+0xce>
 8004ca6:	2150      	movs	r1, #80	; 0x50
 8004ca8:	e000      	b.n	8004cac <led_render+0xd0>
 8004caa:	2128      	movs	r1, #40	; 0x28
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <led_render+0x150>)
 8004cb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <led_render+0x158>)
 8004cb8:	791b      	ldrb	r3, [r3, #4]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dd01      	ble.n	8004cce <led_render+0xf2>
 8004cca:	2150      	movs	r1, #80	; 0x50
 8004ccc:	e000      	b.n	8004cd0 <led_render+0xf4>
 8004cce:	2128      	movs	r1, #40	; 0x28
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	3320      	adds	r3, #32
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <led_render+0x150>)
 8004cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <led_render+0x158>)
 8004cdc:	795b      	ldrb	r3, [r3, #5]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	dd01      	ble.n	8004cf2 <led_render+0x116>
 8004cee:	2150      	movs	r1, #80	; 0x50
 8004cf0:	e000      	b.n	8004cf4 <led_render+0x118>
 8004cf2:	2128      	movs	r1, #40	; 0x28
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	3328      	adds	r3, #40	; 0x28
 8004cf8:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <led_render+0x150>)
 8004cfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b07      	cmp	r3, #7
 8004d08:	d98e      	bls.n	8004c28 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8004d0a:	2330      	movs	r3, #48	; 0x30
 8004d0c:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <led_render+0x150>)
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4807      	ldr	r0, [pc, #28]	; (8004d30 <led_render+0x154>)
 8004d12:	f003 fe9f 	bl	8008a54 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8004d16:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <led_render+0x148>)
 8004d18:	2202      	movs	r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]
}
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000b98 	.word	0x20000b98
 8004d28:	20000714 	.word	0x20000714
 8004d2c:	20000b38 	.word	0x20000b38
 8004d30:	20000684 	.word	0x20000684
 8004d34:	20000988 	.word	0x20000988

08004d38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8004d40:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b8f      	cmp	r3, #143	; 0x8f
 8004d46:	d854      	bhi.n	8004df2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e048      	b.n	8004de0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	4a35      	ldr	r2, [pc, #212]	; (8004e30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	dd01      	ble.n	8004d70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8004d6c:	2150      	movs	r1, #80	; 0x50
 8004d6e:	e000      	b.n	8004d72 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8004d70:	2128      	movs	r1, #40	; 0x28
 8004d72:	4a30      	ldr	r2, [pc, #192]	; (8004e34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8004d7a:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	3301      	adds	r3, #1
 8004d86:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8004d88:	5cd3      	ldrb	r3, [r2, r3]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dd01      	ble.n	8004d9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 8004d9a:	2150      	movs	r1, #80	; 0x50
 8004d9c:	e000      	b.n	8004da0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8004d9e:	2128      	movs	r1, #40	; 0x28
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3308      	adds	r3, #8
 8004da4:	4a23      	ldr	r2, [pc, #140]	; (8004e34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8004daa:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	3302      	adds	r3, #2
 8004db6:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8004db8:	5cd3      	ldrb	r3, [r2, r3]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	dd01      	ble.n	8004dce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8004dca:	2150      	movs	r1, #80	; 0x50
 8004dcc:	e000      	b.n	8004dd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8004dce:	2128      	movs	r1, #40	; 0x28
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004dd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b07      	cmp	r3, #7
 8004de4:	d9b3      	bls.n	8004d4e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	4a0f      	ldr	r2, [pc, #60]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004dee:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8004df0:	e016      	b.n	8004e20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b91      	cmp	r3, #145	; 0x91
 8004df8:	d812      	bhi.n	8004e20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	72fb      	strb	r3, [r7, #11]
 8004dfe:	e007      	b.n	8004e10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 8004e00:	7afb      	ldrb	r3, [r7, #11]
 8004e02:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8004e04:	2100      	movs	r1, #0
 8004e06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	72fb      	strb	r3, [r7, #11]
 8004e10:	7afb      	ldrb	r3, [r7, #11]
 8004e12:	2b17      	cmp	r3, #23
 8004e14:	d9f4      	bls.n	8004e00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4a03      	ldr	r2, [pc, #12]	; (8004e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000b98 	.word	0x20000b98
 8004e30:	20000988 	.word	0x20000988
 8004e34:	20000b38 	.word	0x20000b38

08004e38 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8004e40:	4b3e      	ldr	r3, [pc, #248]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b8f      	cmp	r3, #143	; 0x8f
 8004e46:	d855      	bhi.n	8004ef4 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e049      	b.n	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8004e5a:	5cd3      	ldrb	r3, [r2, r3]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dd01      	ble.n	8004e70 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8004e6c:	2150      	movs	r1, #80	; 0x50
 8004e6e:	e000      	b.n	8004e72 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8004e70:	2128      	movs	r1, #40	; 0x28
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3318      	adds	r3, #24
 8004e76:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004e78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	dd01      	ble.n	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8004e9c:	2150      	movs	r1, #80	; 0x50
 8004e9e:	e000      	b.n	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8004ea0:	2128      	movs	r1, #40	; 0x28
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3320      	adds	r3, #32
 8004ea6:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004ea8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8004eac:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3302      	adds	r3, #2
 8004eb8:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8004eba:	5cd3      	ldrb	r3, [r2, r3]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	dd01      	ble.n	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8004ecc:	2150      	movs	r1, #80	; 0x50
 8004ece:	e000      	b.n	8004ed2 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 8004ed0:	2128      	movs	r1, #40	; 0x28
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3328      	adds	r3, #40	; 0x28
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004ed8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b07      	cmp	r3, #7
 8004ee6:	d9b2      	bls.n	8004e4e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004ef0:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8004ef2:	e01e      	b.n	8004f32 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b91      	cmp	r3, #145	; 0x91
 8004efa:	d813      	bhi.n	8004f24 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8004efc:	2318      	movs	r3, #24
 8004efe:	72fb      	strb	r3, [r7, #11]
 8004f00:	e007      	b.n	8004f12 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	4a0f      	ldr	r2, [pc, #60]	; (8004f44 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8004f06:	2100      	movs	r1, #0
 8004f08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004f0c:	7afb      	ldrb	r3, [r7, #11]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	72fb      	strb	r3, [r7, #11]
 8004f12:	7afb      	ldrb	r3, [r7, #11]
 8004f14:	2b2f      	cmp	r3, #47	; 0x2f
 8004f16:	d9f4      	bls.n	8004f02 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004f20:	6013      	str	r3, [r2, #0]
}
 8004f22:	e006      	b.n	8004f32 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4806      	ldr	r0, [pc, #24]	; (8004f48 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8004f2e:	f003 ff41 	bl	8008db4 <HAL_TIM_PWM_Stop_DMA>
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000b98 	.word	0x20000b98
 8004f40:	20000988 	.word	0x20000988
 8004f44:	20000b38 	.word	0x20000b38
 8004f48:	20000684 	.word	0x20000684

08004f4c <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	71fb      	strb	r3, [r7, #7]
 8004f56:	460b      	mov	r3, r1
 8004f58:	71bb      	strb	r3, [r7, #6]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8004f5e:	797b      	ldrb	r3, [r7, #5]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <hsl_to_rgb+0x1c>
 8004f64:	2300      	movs	r3, #0
 8004f66:	e0b1      	b.n	80050cc <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8004f68:	797b      	ldrb	r3, [r7, #5]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8004f72:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	db09      	blt.n	8004f8e <hsl_to_rgb+0x42>
 8004f7a:	89bb      	ldrh	r3, [r7, #12]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	79ba      	ldrb	r2, [r7, #6]
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	121b      	asrs	r3, r3, #8
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	74fb      	strb	r3, [r7, #19]
 8004f8c:	e00a      	b.n	8004fa4 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8004f8e:	89bb      	ldrh	r3, [r7, #12]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004f98:	79ba      	ldrb	r2, [r7, #6]
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	121b      	asrs	r3, r3, #8
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	0052      	lsls	r2, r2, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8004fb4:	897b      	ldrh	r3, [r7, #10]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8004fbc:	7d3b      	ldrb	r3, [r7, #20]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8004fc8:	897b      	ldrh	r3, [r7, #10]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <hsl_to_rgb+0x9c>
 8004fd4:	89fb      	ldrh	r3, [r7, #14]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	7cfa      	ldrb	r2, [r7, #19]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
 8004fe0:	121b      	asrs	r3, r3, #8
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	74bb      	strb	r3, [r7, #18]
 8004fe6:	e00a      	b.n	8004ffe <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8004fe8:	89fb      	ldrh	r3, [r7, #14]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004ff0:	7cfa      	ldrb	r2, [r7, #19]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	121b      	asrs	r3, r3, #8
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8004ffe:	7cfb      	ldrb	r3, [r7, #19]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	797a      	ldrb	r2, [r7, #5]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	b29b      	uxth	r3, r3
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b04      	cmp	r3, #4
 8005018:	d839      	bhi.n	800508e <hsl_to_rgb+0x142>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <hsl_to_rgb+0xd4>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005035 	.word	0x08005035
 8005024:	08005047 	.word	0x08005047
 8005028:	08005059 	.word	0x08005059
 800502c:	0800506b 	.word	0x0800506b
 8005030:	0800507d 	.word	0x0800507d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	75fb      	strb	r3, [r7, #23]
 800503a:	7cbb      	ldrb	r3, [r7, #18]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	75bb      	strb	r3, [r7, #22]
 8005040:	2300      	movs	r3, #0
 8005042:	757b      	strb	r3, [r7, #21]
 8005044:	e02c      	b.n	80050a0 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8005046:	7cbb      	ldrb	r3, [r7, #18]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	75fb      	strb	r3, [r7, #23]
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	75bb      	strb	r3, [r7, #22]
 8005052:	2300      	movs	r3, #0
 8005054:	757b      	strb	r3, [r7, #21]
 8005056:	e023      	b.n	80050a0 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8005058:	2300      	movs	r3, #0
 800505a:	75fb      	strb	r3, [r7, #23]
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	75bb      	strb	r3, [r7, #22]
 8005062:	7cbb      	ldrb	r3, [r7, #18]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	757b      	strb	r3, [r7, #21]
 8005068:	e01a      	b.n	80050a0 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
 800506e:	7cbb      	ldrb	r3, [r7, #18]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	75bb      	strb	r3, [r7, #22]
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	757b      	strb	r3, [r7, #21]
 800507a:	e011      	b.n	80050a0 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800507c:	7cbb      	ldrb	r3, [r7, #18]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	75fb      	strb	r3, [r7, #23]
 8005082:	2300      	movs	r3, #0
 8005084:	75bb      	strb	r3, [r7, #22]
 8005086:	7cfb      	ldrb	r3, [r7, #19]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	757b      	strb	r3, [r7, #21]
 800508c:	e008      	b.n	80050a0 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	75fb      	strb	r3, [r7, #23]
 8005094:	2300      	movs	r3, #0
 8005096:	75bb      	strb	r3, [r7, #22]
 8005098:	7cbb      	ldrb	r3, [r7, #18]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	757b      	strb	r3, [r7, #21]
 800509e:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	7c7b      	ldrb	r3, [r7, #17]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	041a      	lsls	r2, r3, #16
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	7c7b      	ldrb	r3, [r7, #17]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	440b      	add	r3, r1
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	431a      	orrs	r2, r3
 80050be:	7d7b      	ldrb	r3, [r7, #21]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	7c7b      	ldrb	r3, [r7, #17]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	440b      	add	r3, r1
 80050ca:	4313      	orrs	r3, r2
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <HAL_Init+0x40>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <HAL_Init+0x40>)
 80050e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_Init+0x40>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <HAL_Init+0x40>)
 80050ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050f4:	4b08      	ldr	r3, [pc, #32]	; (8005118 <HAL_Init+0x40>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a07      	ldr	r2, [pc, #28]	; (8005118 <HAL_Init+0x40>)
 80050fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005100:	2003      	movs	r0, #3
 8005102:	f000 f94f 	bl	80053a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005106:	200f      	movs	r0, #15
 8005108:	f000 f808 	bl	800511c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800510c:	f7fe fe9c 	bl	8003e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023c00 	.word	0x40023c00

0800511c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005124:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_InitTick+0x54>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_InitTick+0x58>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005132:	fbb3 f3f1 	udiv	r3, r3, r1
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f967 	bl	800540e <HAL_SYSTICK_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00e      	b.n	8005168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d80a      	bhi.n	8005166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005150:	2200      	movs	r2, #0
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	f000 f92f 	bl	80053ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800515c:	4a06      	ldr	r2, [pc, #24]	; (8005178 <HAL_InitTick+0x5c>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000220 	.word	0x20000220
 8005174:	200002ec 	.word	0x200002ec
 8005178:	200002e8 	.word	0x200002e8

0800517c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_IncTick+0x20>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_IncTick+0x24>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4413      	add	r3, r2
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_IncTick+0x24>)
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	200002ec 	.word	0x200002ec
 80051a0:	20000b9c 	.word	0x20000b9c

080051a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return uwTick;
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <HAL_GetTick+0x14>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000b9c 	.word	0x20000b9c

080051bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051c4:	f7ff ffee 	bl	80051a4 <HAL_GetTick>
 80051c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d005      	beq.n	80051e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_Delay+0x44>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051e2:	bf00      	nop
 80051e4:	f7ff ffde 	bl	80051a4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d8f7      	bhi.n	80051e4 <HAL_Delay+0x28>
  {
  }
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	200002ec 	.word	0x200002ec

08005204 <__NVIC_SetPriorityGrouping>:
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <__NVIC_SetPriorityGrouping+0x44>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005220:	4013      	ands	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800522c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <__NVIC_SetPriorityGrouping+0x44>)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	60d3      	str	r3, [r2, #12]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00

0800524c <__NVIC_GetPriorityGrouping>:
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <__NVIC_GetPriorityGrouping+0x18>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	f003 0307 	and.w	r3, r3, #7
}
 800525a:	4618      	mov	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <__NVIC_EnableIRQ>:
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005276:	2b00      	cmp	r3, #0
 8005278:	db0b      	blt.n	8005292 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	f003 021f 	and.w	r2, r3, #31
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <__NVIC_EnableIRQ+0x38>)
 8005282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2001      	movs	r0, #1
 800528a:	fa00 f202 	lsl.w	r2, r0, r2
 800528e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000e100 	.word	0xe000e100

080052a4 <__NVIC_SetPriority>:
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	db0a      	blt.n	80052ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	490c      	ldr	r1, [pc, #48]	; (80052f0 <__NVIC_SetPriority+0x4c>)
 80052be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	440b      	add	r3, r1
 80052c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052cc:	e00a      	b.n	80052e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	4908      	ldr	r1, [pc, #32]	; (80052f4 <__NVIC_SetPriority+0x50>)
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3b04      	subs	r3, #4
 80052dc:	0112      	lsls	r2, r2, #4
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	440b      	add	r3, r1
 80052e2:	761a      	strb	r2, [r3, #24]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000e100 	.word	0xe000e100
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <NVIC_EncodePriority>:
{
 80052f8:	b480      	push	{r7}
 80052fa:	b089      	sub	sp, #36	; 0x24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f1c3 0307 	rsb	r3, r3, #7
 8005312:	2b04      	cmp	r3, #4
 8005314:	bf28      	it	cs
 8005316:	2304      	movcs	r3, #4
 8005318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3304      	adds	r3, #4
 800531e:	2b06      	cmp	r3, #6
 8005320:	d902      	bls.n	8005328 <NVIC_EncodePriority+0x30>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3b03      	subs	r3, #3
 8005326:	e000      	b.n	800532a <NVIC_EncodePriority+0x32>
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800532c:	f04f 32ff 	mov.w	r2, #4294967295
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43da      	mvns	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	401a      	ands	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005340:	f04f 31ff 	mov.w	r1, #4294967295
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fa01 f303 	lsl.w	r3, r1, r3
 800534a:	43d9      	mvns	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005350:	4313      	orrs	r3, r2
}
 8005352:	4618      	mov	r0, r3
 8005354:	3724      	adds	r7, #36	; 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3b01      	subs	r3, #1
 800536c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005370:	d301      	bcc.n	8005376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005372:	2301      	movs	r3, #1
 8005374:	e00f      	b.n	8005396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <SysTick_Config+0x40>)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800537e:	210f      	movs	r1, #15
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	f7ff ff8e 	bl	80052a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <SysTick_Config+0x40>)
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800538e:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <SysTick_Config+0x40>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	e000e010 	.word	0xe000e010

080053a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ff29 	bl	8005204 <__NVIC_SetPriorityGrouping>
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	4603      	mov	r3, r0
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053cc:	f7ff ff3e 	bl	800524c <__NVIC_GetPriorityGrouping>
 80053d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7ff ff8e 	bl	80052f8 <NVIC_EncodePriority>
 80053dc:	4602      	mov	r2, r0
 80053de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e2:	4611      	mov	r1, r2
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff5d 	bl	80052a4 <__NVIC_SetPriority>
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	4603      	mov	r3, r0
 80053fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff31 	bl	8005268 <__NVIC_EnableIRQ>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ffa2 	bl	8005360 <SysTick_Config>
 800541c:	4603      	mov	r3, r0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e00e      	b.n	8005456 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	795b      	ldrb	r3, [r3, #5]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fe f9bf 	bl	80037cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2202      	movs	r2, #2
 8005472:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e00a      	b.n	80054a0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	3301      	adds	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d3f0      	bcc.n	800548a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80054b6:	693b      	ldr	r3, [r7, #16]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7ff fe68 	bl	80051a4 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e099      	b.n	8005614 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005500:	e00f      	b.n	8005522 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005502:	f7ff fe4f 	bl	80051a4 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b05      	cmp	r3, #5
 800550e:	d908      	bls.n	8005522 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2203      	movs	r2, #3
 800551a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e078      	b.n	8005614 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e8      	bne.n	8005502 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4b38      	ldr	r3, [pc, #224]	; (800561c <HAL_DMA_Init+0x158>)
 800553c:	4013      	ands	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800554e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b04      	cmp	r3, #4
 800557a:	d107      	bne.n	800558c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	4313      	orrs	r3, r2
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d117      	bne.n	80055e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fb01 	bl	8005bd0 <DMA_CheckFifoParam>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055e2:	2301      	movs	r3, #1
 80055e4:	e016      	b.n	8005614 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fab8 	bl	8005b64 <DMA_CalcBaseAndBitshift>
 80055f4:	4603      	mov	r3, r0
 80055f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	223f      	movs	r2, #63	; 0x3f
 80055fe:	409a      	lsls	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	f010803f 	.word	0xf010803f

08005620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005636:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_DMA_Start_IT+0x26>
 8005642:	2302      	movs	r3, #2
 8005644:	e040      	b.n	80056c8 <HAL_DMA_Start_IT+0xa8>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d12f      	bne.n	80056ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fa4a 	bl	8005b08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	223f      	movs	r2, #63	; 0x3f
 800567a:	409a      	lsls	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0216 	orr.w	r2, r2, #22
 800568e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	e005      	b.n	80056c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
 80056c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056de:	f7ff fd61 	bl	80051a4 <HAL_GetTick>
 80056e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d008      	beq.n	8005702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e052      	b.n	80057a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0216 	bic.w	r2, r2, #22
 8005710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <HAL_DMA_Abort+0x62>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0208 	bic.w	r2, r2, #8
 8005740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005752:	e013      	b.n	800577c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005754:	f7ff fd26 	bl	80051a4 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b05      	cmp	r3, #5
 8005760:	d90c      	bls.n	800577c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2203      	movs	r2, #3
 800576c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e015      	b.n	80057a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e4      	bne.n	8005754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	223f      	movs	r2, #63	; 0x3f
 8005790:	409a      	lsls	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d004      	beq.n	80057ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2280      	movs	r2, #128	; 0x80
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e00c      	b.n	80057e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2205      	movs	r2, #5
 80057d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005800:	4b8e      	ldr	r3, [pc, #568]	; (8005a3c <HAL_DMA_IRQHandler+0x248>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a8e      	ldr	r2, [pc, #568]	; (8005a40 <HAL_DMA_IRQHandler+0x24c>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	0a9b      	lsrs	r3, r3, #10
 800580c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581e:	2208      	movs	r2, #8
 8005820:	409a      	lsls	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4013      	ands	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01a      	beq.n	8005860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	2208      	movs	r2, #8
 800584e:	409a      	lsls	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	f043 0201 	orr.w	r2, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005864:	2201      	movs	r2, #1
 8005866:	409a      	lsls	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d012      	beq.n	8005896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	2201      	movs	r2, #1
 8005884:	409a      	lsls	r2, r3
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	f043 0202 	orr.w	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589a:	2204      	movs	r2, #4
 800589c:	409a      	lsls	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b8:	2204      	movs	r2, #4
 80058ba:	409a      	lsls	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	f043 0204 	orr.w	r2, r3, #4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	2210      	movs	r2, #16
 80058d2:	409a      	lsls	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d043      	beq.n	8005964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d03c      	beq.n	8005964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	2210      	movs	r2, #16
 80058f0:	409a      	lsls	r2, r3
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d018      	beq.n	8005936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d108      	bne.n	8005924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d024      	beq.n	8005964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
 8005922:	e01f      	b.n	8005964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
 8005934:	e016      	b.n	8005964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d107      	bne.n	8005954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0208 	bic.w	r2, r2, #8
 8005952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005968:	2220      	movs	r2, #32
 800596a:	409a      	lsls	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 808f 	beq.w	8005a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8087 	beq.w	8005a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598a:	2220      	movs	r2, #32
 800598c:	409a      	lsls	r2, r3
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b05      	cmp	r3, #5
 800599c:	d136      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0216 	bic.w	r2, r2, #22
 80059ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_DMA_IRQHandler+0x1da>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0208 	bic.w	r2, r2, #8
 80059dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e2:	223f      	movs	r2, #63	; 0x3f
 80059e4:	409a      	lsls	r2, r3
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d07e      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
        }
        return;
 8005a0a:	e079      	b.n	8005b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01d      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10d      	bne.n	8005a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d031      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
 8005a38:	e02c      	b.n	8005a94 <HAL_DMA_IRQHandler+0x2a0>
 8005a3a:	bf00      	nop
 8005a3c:	20000220 	.word	0x20000220
 8005a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d023      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
 8005a54:	e01e      	b.n	8005a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10f      	bne.n	8005a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0210 	bic.w	r2, r2, #16
 8005a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d032      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d022      	beq.n	8005aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2205      	movs	r2, #5
 8005aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d307      	bcc.n	8005adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f2      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x2cc>
 8005ada:	e000      	b.n	8005ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
 8005afe:	e000      	b.n	8005b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b00:	bf00      	nop
    }
  }
}
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d108      	bne.n	8005b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b46:	e007      	b.n	8005b58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	60da      	str	r2, [r3, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	3b10      	subs	r3, #16
 8005b74:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b7e:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <DMA_CalcBaseAndBitshift+0x68>)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d909      	bls.n	8005ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ba4:	e007      	b.n	8005bb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	aaaaaaab 	.word	0xaaaaaaab
 8005bcc:	0800fee8 	.word	0x0800fee8

08005bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d11f      	bne.n	8005c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d856      	bhi.n	8005c9e <DMA_CheckFifoParam+0xce>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <DMA_CheckFifoParam+0x28>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c1b 	.word	0x08005c1b
 8005c00:	08005c09 	.word	0x08005c09
 8005c04:	08005c9f 	.word	0x08005c9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d046      	beq.n	8005ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c18:	e043      	b.n	8005ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c22:	d140      	bne.n	8005ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c28:	e03d      	b.n	8005ca6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c32:	d121      	bne.n	8005c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d837      	bhi.n	8005caa <DMA_CheckFifoParam+0xda>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <DMA_CheckFifoParam+0x70>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c51 	.word	0x08005c51
 8005c44:	08005c57 	.word	0x08005c57
 8005c48:	08005c51 	.word	0x08005c51
 8005c4c:	08005c69 	.word	0x08005c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
      break;
 8005c54:	e030      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d025      	beq.n	8005cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c66:	e022      	b.n	8005cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c70:	d11f      	bne.n	8005cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c76:	e01c      	b.n	8005cb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d903      	bls.n	8005c86 <DMA_CheckFifoParam+0xb6>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d003      	beq.n	8005c8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c84:	e018      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8a:	e015      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00e      	beq.n	8005cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9c:	e00b      	b.n	8005cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8005c9e:	bf00      	nop
 8005ca0:	e00a      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ca2:	bf00      	nop
 8005ca4:	e008      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e006      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005caa:	bf00      	nop
 8005cac:	e004      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e002      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cb6:	bf00      	nop
    }
  } 
  
  return status; 
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop

08005cc8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005cda:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <HAL_FLASH_Program+0xa0>)
 8005cdc:	7e1b      	ldrb	r3, [r3, #24]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_FLASH_Program+0x1e>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e03b      	b.n	8005d5e <HAL_FLASH_Program+0x96>
 8005ce6:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <HAL_FLASH_Program+0xa0>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cf0:	f000 f87c 	bl	8005dec <FLASH_WaitForLastOperation>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d12b      	bne.n	8005d56 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005d04:	783b      	ldrb	r3, [r7, #0]
 8005d06:	4619      	mov	r1, r3
 8005d08:	68b8      	ldr	r0, [r7, #8]
 8005d0a:	f000 f927 	bl	8005f5c <FLASH_Program_Byte>
 8005d0e:	e016      	b.n	8005d3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d105      	bne.n	8005d22 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005d16:	883b      	ldrh	r3, [r7, #0]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68b8      	ldr	r0, [r7, #8]
 8005d1c:	f000 f8fa 	bl	8005f14 <FLASH_Program_HalfWord>
 8005d20:	e00d      	b.n	8005d3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d105      	bne.n	8005d34 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68b8      	ldr	r0, [r7, #8]
 8005d2e:	f000 f8cf 	bl	8005ed0 <FLASH_Program_Word>
 8005d32:	e004      	b.n	8005d3e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d38:	68b8      	ldr	r0, [r7, #8]
 8005d3a:	f000 f897 	bl	8005e6c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d42:	f000 f853 	bl	8005dec <FLASH_WaitForLastOperation>
 8005d46:	4603      	mov	r3, r0
 8005d48:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <HAL_FLASH_Program+0xa4>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	4a07      	ldr	r2, [pc, #28]	; (8005d6c <HAL_FLASH_Program+0xa4>)
 8005d50:	f023 0301 	bic.w	r3, r3, #1
 8005d54:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d56:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <HAL_FLASH_Program+0xa0>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000ba0 	.word	0x20000ba0
 8005d6c:	40023c00 	.word	0x40023c00

08005d70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <HAL_FLASH_Unlock+0x38>)
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	da0b      	bge.n	8005d9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_FLASH_Unlock+0x38>)
 8005d84:	4a09      	ldr	r2, [pc, #36]	; (8005dac <HAL_FLASH_Unlock+0x3c>)
 8005d86:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005d88:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <HAL_FLASH_Unlock+0x38>)
 8005d8a:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <HAL_FLASH_Unlock+0x40>)
 8005d8c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <HAL_FLASH_Unlock+0x38>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da01      	bge.n	8005d9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40023c00 	.word	0x40023c00
 8005dac:	45670123 	.word	0x45670123
 8005db0:	cdef89ab 	.word	0xcdef89ab

08005db4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_FLASH_Lock+0x1c>)
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_FLASH_Lock+0x1c>)
 8005dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40023c00 	.word	0x40023c00

08005dd4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005dd8:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <HAL_FLASH_GetError+0x14>)
 8005dda:	69db      	ldr	r3, [r3, #28]
}  
 8005ddc:	4618      	mov	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000ba0 	.word	0x20000ba0

08005dec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005df8:	4b1a      	ldr	r3, [pc, #104]	; (8005e64 <FLASH_WaitForLastOperation+0x78>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005dfe:	f7ff f9d1 	bl	80051a4 <HAL_GetTick>
 8005e02:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005e04:	e010      	b.n	8005e28 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d00c      	beq.n	8005e28 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <FLASH_WaitForLastOperation+0x38>
 8005e14:	f7ff f9c6 	bl	80051a4 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d201      	bcs.n	8005e28 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e019      	b.n	8005e5c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005e28:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <FLASH_WaitForLastOperation+0x7c>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e8      	bne.n	8005e06 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <FLASH_WaitForLastOperation+0x7c>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005e40:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <FLASH_WaitForLastOperation+0x7c>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005e46:	4b08      	ldr	r3, [pc, #32]	; (8005e68 <FLASH_WaitForLastOperation+0x7c>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005e52:	f000 f8a5 	bl	8005fa0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
  
}  
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000ba0 	.word	0x20000ba0
 8005e68:	40023c00 	.word	0x40023c00

08005e6c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <FLASH_Program_DoubleWord+0x60>)
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <FLASH_Program_DoubleWord+0x60>)
 8005e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <FLASH_Program_DoubleWord+0x60>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <FLASH_Program_DoubleWord+0x60>)
 8005e8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005e8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e90:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <FLASH_Program_DoubleWord+0x60>)
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <FLASH_Program_DoubleWord+0x60>)
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005ea2:	f3bf 8f6f 	isb	sy
}
 8005ea6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	000a      	movs	r2, r1
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	68f9      	ldr	r1, [r7, #12]
 8005eba:	3104      	adds	r1, #4
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40023c00 	.word	0x40023c00

08005ed0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <FLASH_Program_Word+0x40>)
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <FLASH_Program_Word+0x40>)
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <FLASH_Program_Word+0x40>)
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <FLASH_Program_Word+0x40>)
 8005eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ef0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <FLASH_Program_Word+0x40>)
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	4a06      	ldr	r2, [pc, #24]	; (8005f10 <FLASH_Program_Word+0x40>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40023c00 	.word	0x40023c00

08005f14 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <FLASH_Program_HalfWord+0x44>)
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <FLASH_Program_HalfWord+0x44>)
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <FLASH_Program_HalfWord+0x44>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <FLASH_Program_HalfWord+0x44>)
 8005f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <FLASH_Program_HalfWord+0x44>)
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	4a06      	ldr	r2, [pc, #24]	; (8005f58 <FLASH_Program_HalfWord+0x44>)
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	887a      	ldrh	r2, [r7, #2]
 8005f48:	801a      	strh	r2, [r3, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40023c00 	.word	0x40023c00

08005f5c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <FLASH_Program_Byte+0x40>)
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	4a0b      	ldr	r2, [pc, #44]	; (8005f9c <FLASH_Program_Byte+0x40>)
 8005f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <FLASH_Program_Byte+0x40>)
 8005f76:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <FLASH_Program_Byte+0x40>)
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <FLASH_Program_Byte+0x40>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	4a06      	ldr	r2, [pc, #24]	; (8005f9c <FLASH_Program_Byte+0x40>)
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	701a      	strb	r2, [r3, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40023c00 	.word	0x40023c00

08005fa0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005fa4:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005fb0:	4b2d      	ldr	r3, [pc, #180]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f043 0310 	orr.w	r3, r3, #16
 8005fb8:	4a2b      	ldr	r2, [pc, #172]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8005fba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005fbc:	4b29      	ldr	r3, [pc, #164]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005fc2:	4b28      	ldr	r3, [pc, #160]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f043 0308 	orr.w	r3, r3, #8
 8005fd6:	4a24      	ldr	r2, [pc, #144]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8005fd8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005fda:	4b22      	ldr	r3, [pc, #136]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8005fdc:	2220      	movs	r2, #32
 8005fde:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005fe0:	4b20      	ldr	r3, [pc, #128]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005fec:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f043 0304 	orr.w	r3, r3, #4
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8005ff6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005ff8:	4b1a      	ldr	r3, [pc, #104]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8005ffa:	2240      	movs	r2, #64	; 0x40
 8005ffc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005ffe:	4b19      	ldr	r3, [pc, #100]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800600a:	4b17      	ldr	r3, [pc, #92]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f043 0302 	orr.w	r3, r3, #2
 8006012:	4a15      	ldr	r2, [pc, #84]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8006014:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006016:	4b13      	ldr	r3, [pc, #76]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8006018:	2280      	movs	r2, #128	; 0x80
 800601a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800601c:	4b11      	ldr	r3, [pc, #68]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	4a0d      	ldr	r2, [pc, #52]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8006032:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8006036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800603a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800603c:	4b09      	ldr	r3, [pc, #36]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006048:	4b07      	ldr	r3, [pc, #28]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f043 0320 	orr.w	r3, r3, #32
 8006050:	4a05      	ldr	r2, [pc, #20]	; (8006068 <FLASH_SetErrorCode+0xc8>)
 8006052:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <FLASH_SetErrorCode+0xc4>)
 8006056:	2202      	movs	r2, #2
 8006058:	60da      	str	r2, [r3, #12]
  }
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40023c00 	.word	0x40023c00
 8006068:	20000ba0 	.word	0x20000ba0

0800606c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_FLASHEx_Erase+0xd8>)
 8006080:	7e1b      	ldrb	r3, [r3, #24]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_FLASHEx_Erase+0x1e>
 8006086:	2302      	movs	r3, #2
 8006088:	e058      	b.n	800613c <HAL_FLASHEx_Erase+0xd0>
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <HAL_FLASHEx_Erase+0xd8>)
 800608c:	2201      	movs	r2, #1
 800608e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006090:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006094:	f7ff feaa 	bl	8005dec <FLASH_WaitForLastOperation>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d148      	bne.n	8006134 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
 80060a8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d115      	bne.n	80060de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f000 f844 	bl	800614c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060c8:	f7ff fe90 	bl	8005dec <FLASH_WaitForLastOperation>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80060d0:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <HAL_FLASHEx_Erase+0xdc>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <HAL_FLASHEx_Erase+0xdc>)
 80060d6:	f023 0304 	bic.w	r3, r3, #4
 80060da:	6113      	str	r3, [r2, #16]
 80060dc:	e028      	b.n	8006130 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	e01c      	b.n	8006120 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	4619      	mov	r1, r3
 80060ee:	68b8      	ldr	r0, [r7, #8]
 80060f0:	f000 f850 	bl	8006194 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060f8:	f7ff fe78 	bl	8005dec <FLASH_WaitForLastOperation>
 80060fc:	4603      	mov	r3, r0
 80060fe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_FLASHEx_Erase+0xdc>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4a10      	ldr	r2, [pc, #64]	; (8006148 <HAL_FLASHEx_Erase+0xdc>)
 8006106:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800610a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	601a      	str	r2, [r3, #0]
          break;
 8006118:	e00a      	b.n	8006130 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	3301      	adds	r3, #1
 800611e:	60bb      	str	r3, [r7, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4413      	add	r3, r2
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d3da      	bcc.n	80060e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006130:	f000 f878 	bl	8006224 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006134:	4b03      	ldr	r3, [pc, #12]	; (8006144 <HAL_FLASHEx_Erase+0xd8>)
 8006136:	2200      	movs	r2, #0
 8006138:	761a      	strb	r2, [r3, #24]

  return status;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20000ba0 	.word	0x20000ba0
 8006148:	40023c00 	.word	0x40023c00

0800614c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	6039      	str	r1, [r7, #0]
 8006156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <FLASH_MassErase+0x44>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <FLASH_MassErase+0x44>)
 800615e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <FLASH_MassErase+0x44>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	4a09      	ldr	r2, [pc, #36]	; (8006190 <FLASH_MassErase+0x44>)
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <FLASH_MassErase+0x44>)
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	4313      	orrs	r3, r2
 800617a:	4a05      	ldr	r2, [pc, #20]	; (8006190 <FLASH_MassErase+0x44>)
 800617c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006180:	6113      	str	r3, [r2, #16]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40023c00 	.word	0x40023c00

08006194 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e010      	b.n	80061d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d103      	bne.n	80061be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80061b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e009      	b.n	80061d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d103      	bne.n	80061cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80061c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e002      	b.n	80061d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80061cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	4a12      	ldr	r2, [pc, #72]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 80061d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	490f      	ldr	r1, [pc, #60]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 80061f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80061f6:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4313      	orrs	r3, r2
 8006200:	4a07      	ldr	r2, [pc, #28]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 8006202:	f043 0302 	orr.w	r3, r3, #2
 8006206:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	4a04      	ldr	r2, [pc, #16]	; (8006220 <FLASH_Erase_Sector+0x8c>)
 800620e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006212:	6113      	str	r3, [r2, #16]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40023c00 	.word	0x40023c00

08006224 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <FLASH_FlushCaches+0x88>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006230:	2b00      	cmp	r3, #0
 8006232:	d017      	beq.n	8006264 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <FLASH_FlushCaches+0x88>)
 800623a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800623e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a19      	ldr	r2, [pc, #100]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006246:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4b17      	ldr	r3, [pc, #92]	; (80062ac <FLASH_FlushCaches+0x88>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a16      	ldr	r2, [pc, #88]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006256:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <FLASH_FlushCaches+0x88>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <FLASH_FlushCaches+0x88>)
 800625e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006262:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	2b00      	cmp	r3, #0
 800626e:	d017      	beq.n	80062a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a0d      	ldr	r2, [pc, #52]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800627a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <FLASH_FlushCaches+0x88>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006282:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	4b08      	ldr	r3, [pc, #32]	; (80062ac <FLASH_FlushCaches+0x88>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a07      	ldr	r2, [pc, #28]	; (80062ac <FLASH_FlushCaches+0x88>)
 800628e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006292:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <FLASH_FlushCaches+0x88>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a04      	ldr	r2, [pc, #16]	; (80062ac <FLASH_FlushCaches+0x88>)
 800629a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800629e:	6013      	str	r3, [r2, #0]
  }
}
 80062a0:	bf00      	nop
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40023c00 	.word	0x40023c00

080062b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	; 0x24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	e159      	b.n	8006580 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062cc:	2201      	movs	r2, #1
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4013      	ands	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	f040 8148 	bne.w	800657a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d005      	beq.n	8006302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d130      	bne.n	8006364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	2203      	movs	r2, #3
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006338:	2201      	movs	r2, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	f003 0201 	and.w	r2, r3, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	4313      	orrs	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	2b03      	cmp	r3, #3
 800636e:	d017      	beq.n	80063a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	2203      	movs	r2, #3
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	43db      	mvns	r3, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4013      	ands	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d123      	bne.n	80063f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	08da      	lsrs	r2, r3, #3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3208      	adds	r2, #8
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	220f      	movs	r2, #15
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	43db      	mvns	r3, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	4013      	ands	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	08da      	lsrs	r2, r3, #3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3208      	adds	r2, #8
 80063ee:	69b9      	ldr	r1, [r7, #24]
 80063f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	2203      	movs	r2, #3
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0203 	and.w	r2, r3, #3
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80a2 	beq.w	800657a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	4b57      	ldr	r3, [pc, #348]	; (8006598 <HAL_GPIO_Init+0x2e8>)
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	4a56      	ldr	r2, [pc, #344]	; (8006598 <HAL_GPIO_Init+0x2e8>)
 8006440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006444:	6453      	str	r3, [r2, #68]	; 0x44
 8006446:	4b54      	ldr	r3, [pc, #336]	; (8006598 <HAL_GPIO_Init+0x2e8>)
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006452:	4a52      	ldr	r2, [pc, #328]	; (800659c <HAL_GPIO_Init+0x2ec>)
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	089b      	lsrs	r3, r3, #2
 8006458:	3302      	adds	r3, #2
 800645a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	220f      	movs	r2, #15
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a49      	ldr	r2, [pc, #292]	; (80065a0 <HAL_GPIO_Init+0x2f0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d019      	beq.n	80064b2 <HAL_GPIO_Init+0x202>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a48      	ldr	r2, [pc, #288]	; (80065a4 <HAL_GPIO_Init+0x2f4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_GPIO_Init+0x1fe>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a47      	ldr	r2, [pc, #284]	; (80065a8 <HAL_GPIO_Init+0x2f8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00d      	beq.n	80064aa <HAL_GPIO_Init+0x1fa>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a46      	ldr	r2, [pc, #280]	; (80065ac <HAL_GPIO_Init+0x2fc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <HAL_GPIO_Init+0x1f6>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a45      	ldr	r2, [pc, #276]	; (80065b0 <HAL_GPIO_Init+0x300>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <HAL_GPIO_Init+0x1f2>
 800649e:	2304      	movs	r3, #4
 80064a0:	e008      	b.n	80064b4 <HAL_GPIO_Init+0x204>
 80064a2:	2307      	movs	r3, #7
 80064a4:	e006      	b.n	80064b4 <HAL_GPIO_Init+0x204>
 80064a6:	2303      	movs	r3, #3
 80064a8:	e004      	b.n	80064b4 <HAL_GPIO_Init+0x204>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e002      	b.n	80064b4 <HAL_GPIO_Init+0x204>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_GPIO_Init+0x204>
 80064b2:	2300      	movs	r3, #0
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	f002 0203 	and.w	r2, r2, #3
 80064ba:	0092      	lsls	r2, r2, #2
 80064bc:	4093      	lsls	r3, r2
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064c4:	4935      	ldr	r1, [pc, #212]	; (800659c <HAL_GPIO_Init+0x2ec>)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	3302      	adds	r3, #2
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064d2:	4b38      	ldr	r3, [pc, #224]	; (80065b4 <HAL_GPIO_Init+0x304>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064f6:	4a2f      	ldr	r2, [pc, #188]	; (80065b4 <HAL_GPIO_Init+0x304>)
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064fc:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <HAL_GPIO_Init+0x304>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	43db      	mvns	r3, r3
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	4013      	ands	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006520:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <HAL_GPIO_Init+0x304>)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006526:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <HAL_GPIO_Init+0x304>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	43db      	mvns	r3, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	4013      	ands	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_GPIO_Init+0x304>)
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006550:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <HAL_GPIO_Init+0x304>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	43db      	mvns	r3, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006574:	4a0f      	ldr	r2, [pc, #60]	; (80065b4 <HAL_GPIO_Init+0x304>)
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	3301      	adds	r3, #1
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	2b0f      	cmp	r3, #15
 8006584:	f67f aea2 	bls.w	80062cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	3724      	adds	r7, #36	; 0x24
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40023800 	.word	0x40023800
 800659c:	40013800 	.word	0x40013800
 80065a0:	40020000 	.word	0x40020000
 80065a4:	40020400 	.word	0x40020400
 80065a8:	40020800 	.word	0x40020800
 80065ac:	40020c00 	.word	0x40020c00
 80065b0:	40021000 	.word	0x40021000
 80065b4:	40013c00 	.word	0x40013c00

080065b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e0bb      	b.n	800674c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065d4:	2201      	movs	r2, #1
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4013      	ands	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	f040 80ab 	bne.w	8006746 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80065f0:	4a5c      	ldr	r2, [pc, #368]	; (8006764 <HAL_GPIO_DeInit+0x1ac>)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	089b      	lsrs	r3, r3, #2
 80065f6:	3302      	adds	r3, #2
 80065f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	220f      	movs	r2, #15
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4013      	ands	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a54      	ldr	r2, [pc, #336]	; (8006768 <HAL_GPIO_DeInit+0x1b0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d019      	beq.n	800664e <HAL_GPIO_DeInit+0x96>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a53      	ldr	r2, [pc, #332]	; (800676c <HAL_GPIO_DeInit+0x1b4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <HAL_GPIO_DeInit+0x92>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a52      	ldr	r2, [pc, #328]	; (8006770 <HAL_GPIO_DeInit+0x1b8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00d      	beq.n	8006646 <HAL_GPIO_DeInit+0x8e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a51      	ldr	r2, [pc, #324]	; (8006774 <HAL_GPIO_DeInit+0x1bc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <HAL_GPIO_DeInit+0x8a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a50      	ldr	r2, [pc, #320]	; (8006778 <HAL_GPIO_DeInit+0x1c0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d101      	bne.n	800663e <HAL_GPIO_DeInit+0x86>
 800663a:	2304      	movs	r3, #4
 800663c:	e008      	b.n	8006650 <HAL_GPIO_DeInit+0x98>
 800663e:	2307      	movs	r3, #7
 8006640:	e006      	b.n	8006650 <HAL_GPIO_DeInit+0x98>
 8006642:	2303      	movs	r3, #3
 8006644:	e004      	b.n	8006650 <HAL_GPIO_DeInit+0x98>
 8006646:	2302      	movs	r3, #2
 8006648:	e002      	b.n	8006650 <HAL_GPIO_DeInit+0x98>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <HAL_GPIO_DeInit+0x98>
 800664e:	2300      	movs	r3, #0
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	f002 0203 	and.w	r2, r2, #3
 8006656:	0092      	lsls	r2, r2, #2
 8006658:	4093      	lsls	r3, r2
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	429a      	cmp	r2, r3
 800665e:	d132      	bne.n	80066c6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006660:	4b46      	ldr	r3, [pc, #280]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	43db      	mvns	r3, r3
 8006668:	4944      	ldr	r1, [pc, #272]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 800666a:	4013      	ands	r3, r2
 800666c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800666e:	4b43      	ldr	r3, [pc, #268]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	43db      	mvns	r3, r3
 8006676:	4941      	ldr	r1, [pc, #260]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 8006678:	4013      	ands	r3, r2
 800667a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800667c:	4b3f      	ldr	r3, [pc, #252]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	43db      	mvns	r3, r3
 8006684:	493d      	ldr	r1, [pc, #244]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 8006686:	4013      	ands	r3, r2
 8006688:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800668a:	4b3c      	ldr	r3, [pc, #240]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	43db      	mvns	r3, r3
 8006692:	493a      	ldr	r1, [pc, #232]	; (800677c <HAL_GPIO_DeInit+0x1c4>)
 8006694:	4013      	ands	r3, r2
 8006696:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	220f      	movs	r2, #15
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80066a8:	4a2e      	ldr	r2, [pc, #184]	; (8006764 <HAL_GPIO_DeInit+0x1ac>)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	089b      	lsrs	r3, r3, #2
 80066ae:	3302      	adds	r3, #2
 80066b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	43da      	mvns	r2, r3
 80066b8:	482a      	ldr	r0, [pc, #168]	; (8006764 <HAL_GPIO_DeInit+0x1ac>)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	089b      	lsrs	r3, r3, #2
 80066be:	400a      	ands	r2, r1
 80066c0:	3302      	adds	r3, #2
 80066c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	2103      	movs	r1, #3
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	43db      	mvns	r3, r3
 80066d6:	401a      	ands	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	08da      	lsrs	r2, r3, #3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3208      	adds	r2, #8
 80066e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	220f      	movs	r2, #15
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	08d2      	lsrs	r2, r2, #3
 80066fc:	4019      	ands	r1, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3208      	adds	r2, #8
 8006702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	2103      	movs	r1, #3
 8006710:	fa01 f303 	lsl.w	r3, r1, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	401a      	ands	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	2101      	movs	r1, #1
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	43db      	mvns	r3, r3
 800672a:	401a      	ands	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	2103      	movs	r1, #3
 800673a:	fa01 f303 	lsl.w	r3, r1, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	401a      	ands	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	3301      	adds	r3, #1
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b0f      	cmp	r3, #15
 8006750:	f67f af40 	bls.w	80065d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40013800 	.word	0x40013800
 8006768:	40020000 	.word	0x40020000
 800676c:	40020400 	.word	0x40020400
 8006770:	40020800 	.word	0x40020800
 8006774:	40020c00 	.word	0x40020c00
 8006778:	40021000 	.word	0x40021000
 800677c:	40013c00 	.word	0x40013c00

08006780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	807b      	strh	r3, [r7, #2]
 800678c:	4613      	mov	r3, r2
 800678e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006790:	787b      	ldrb	r3, [r7, #1]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800679c:	e003      	b.n	80067a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800679e:	887b      	ldrh	r3, [r7, #2]
 80067a0:	041a      	lsls	r2, r3, #16
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	619a      	str	r2, [r3, #24]
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
	...

080067b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067be:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d006      	beq.n	80067d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ca:	4a05      	ldr	r2, [pc, #20]	; (80067e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fc f8c9 	bl	800296a <HAL_GPIO_EXTI_Callback>
  }
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40013c00 	.word	0x40013c00

080067e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e12b      	b.n	8006a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fd f8dc 	bl	80039c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2224      	movs	r2, #36	; 0x24
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006848:	f001 fbbc 	bl	8007fc4 <HAL_RCC_GetPCLK1Freq>
 800684c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4a81      	ldr	r2, [pc, #516]	; (8006a58 <HAL_I2C_Init+0x274>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d807      	bhi.n	8006868 <HAL_I2C_Init+0x84>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a80      	ldr	r2, [pc, #512]	; (8006a5c <HAL_I2C_Init+0x278>)
 800685c:	4293      	cmp	r3, r2
 800685e:	bf94      	ite	ls
 8006860:	2301      	movls	r3, #1
 8006862:	2300      	movhi	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	e006      	b.n	8006876 <HAL_I2C_Init+0x92>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a7d      	ldr	r2, [pc, #500]	; (8006a60 <HAL_I2C_Init+0x27c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	bf94      	ite	ls
 8006870:	2301      	movls	r3, #1
 8006872:	2300      	movhi	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e0e7      	b.n	8006a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4a78      	ldr	r2, [pc, #480]	; (8006a64 <HAL_I2C_Init+0x280>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	0c9b      	lsrs	r3, r3, #18
 8006888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4a6a      	ldr	r2, [pc, #424]	; (8006a58 <HAL_I2C_Init+0x274>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d802      	bhi.n	80068b8 <HAL_I2C_Init+0xd4>
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	3301      	adds	r3, #1
 80068b6:	e009      	b.n	80068cc <HAL_I2C_Init+0xe8>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	4a69      	ldr	r2, [pc, #420]	; (8006a68 <HAL_I2C_Init+0x284>)
 80068c4:	fba2 2303 	umull	r2, r3, r2, r3
 80068c8:	099b      	lsrs	r3, r3, #6
 80068ca:	3301      	adds	r3, #1
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	495c      	ldr	r1, [pc, #368]	; (8006a58 <HAL_I2C_Init+0x274>)
 80068e8:	428b      	cmp	r3, r1
 80068ea:	d819      	bhi.n	8006920 <HAL_I2C_Init+0x13c>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1e59      	subs	r1, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80068fa:	1c59      	adds	r1, r3, #1
 80068fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006900:	400b      	ands	r3, r1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <HAL_I2C_Init+0x138>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	1e59      	subs	r1, r3, #1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	fbb1 f3f3 	udiv	r3, r1, r3
 8006914:	3301      	adds	r3, #1
 8006916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800691a:	e051      	b.n	80069c0 <HAL_I2C_Init+0x1dc>
 800691c:	2304      	movs	r3, #4
 800691e:	e04f      	b.n	80069c0 <HAL_I2C_Init+0x1dc>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d111      	bne.n	800694c <HAL_I2C_Init+0x168>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1e58      	subs	r0, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	440b      	add	r3, r1
 8006936:	fbb0 f3f3 	udiv	r3, r0, r3
 800693a:	3301      	adds	r3, #1
 800693c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	e012      	b.n	8006972 <HAL_I2C_Init+0x18e>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	1e58      	subs	r0, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	0099      	lsls	r1, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006962:	3301      	adds	r3, #1
 8006964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006968:	2b00      	cmp	r3, #0
 800696a:	bf0c      	ite	eq
 800696c:	2301      	moveq	r3, #1
 800696e:	2300      	movne	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_I2C_Init+0x196>
 8006976:	2301      	movs	r3, #1
 8006978:	e022      	b.n	80069c0 <HAL_I2C_Init+0x1dc>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10e      	bne.n	80069a0 <HAL_I2C_Init+0x1bc>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1e58      	subs	r0, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6859      	ldr	r1, [r3, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	440b      	add	r3, r1
 8006990:	fbb0 f3f3 	udiv	r3, r0, r3
 8006994:	3301      	adds	r3, #1
 8006996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699e:	e00f      	b.n	80069c0 <HAL_I2C_Init+0x1dc>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1e58      	subs	r0, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	0099      	lsls	r1, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b6:	3301      	adds	r3, #1
 80069b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	6809      	ldr	r1, [r1, #0]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6911      	ldr	r1, [r2, #16]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68d2      	ldr	r2, [r2, #12]
 80069fa:	4311      	orrs	r1, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695a      	ldr	r2, [r3, #20]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	000186a0 	.word	0x000186a0
 8006a5c:	001e847f 	.word	0x001e847f
 8006a60:	003d08ff 	.word	0x003d08ff
 8006a64:	431bde83 	.word	0x431bde83
 8006a68:	10624dd3 	.word	0x10624dd3

08006a6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	817b      	strh	r3, [r7, #10]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	813b      	strh	r3, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a86:	f7fe fb8d 	bl	80051a4 <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	f040 80d9 	bne.w	8006c4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	2319      	movs	r3, #25
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	496d      	ldr	r1, [pc, #436]	; (8006c58 <HAL_I2C_Mem_Write+0x1ec>)
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fc7f 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e0cc      	b.n	8006c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_I2C_Mem_Write+0x56>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e0c5      	b.n	8006c4e <HAL_I2C_Mem_Write+0x1e2>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d007      	beq.n	8006ae8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006af6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2221      	movs	r2, #33	; 0x21
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2240      	movs	r2, #64	; 0x40
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4a4d      	ldr	r2, [pc, #308]	; (8006c5c <HAL_I2C_Mem_Write+0x1f0>)
 8006b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b2a:	88f8      	ldrh	r0, [r7, #6]
 8006b2c:	893a      	ldrh	r2, [r7, #8]
 8006b2e:	8979      	ldrh	r1, [r7, #10]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4603      	mov	r3, r0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fab6 	bl	80070ac <I2C_RequestMemoryWrite>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d052      	beq.n	8006bec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e081      	b.n	8006c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fd00 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00d      	beq.n	8006b76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d107      	bne.n	8006b72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e06b      	b.n	8006c4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	781a      	ldrb	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d11b      	bne.n	8006bec <HAL_I2C_Mem_Write+0x180>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d017      	beq.n	8006bec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	781a      	ldrb	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1aa      	bne.n	8006b4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fcec 	bl	80075d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00d      	beq.n	8006c20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d107      	bne.n	8006c1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e016      	b.n	8006c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e000      	b.n	8006c4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	00100002 	.word	0x00100002
 8006c5c:	ffff0000 	.word	0xffff0000

08006c60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08c      	sub	sp, #48	; 0x30
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	817b      	strh	r3, [r7, #10]
 8006c72:	460b      	mov	r3, r1
 8006c74:	813b      	strh	r3, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c7a:	f7fe fa93 	bl	80051a4 <HAL_GetTick>
 8006c7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	f040 8208 	bne.w	800709e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	2319      	movs	r3, #25
 8006c94:	2201      	movs	r2, #1
 8006c96:	497b      	ldr	r1, [pc, #492]	; (8006e84 <HAL_I2C_Mem_Read+0x224>)
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fb85 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e1fb      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_I2C_Mem_Read+0x56>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e1f4      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d007      	beq.n	8006cdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2222      	movs	r2, #34	; 0x22
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2240      	movs	r2, #64	; 0x40
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4a5b      	ldr	r2, [pc, #364]	; (8006e88 <HAL_I2C_Mem_Read+0x228>)
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d1e:	88f8      	ldrh	r0, [r7, #6]
 8006d20:	893a      	ldrh	r2, [r7, #8]
 8006d22:	8979      	ldrh	r1, [r7, #10]
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fa52 	bl	80071d8 <I2C_RequestMemoryRead>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e1b0      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d113      	bne.n	8006d6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d46:	2300      	movs	r3, #0
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	623b      	str	r3, [r7, #32]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	623b      	str	r3, [r7, #32]
 8006d5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e184      	b.n	8007078 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d11b      	bne.n	8006dae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e164      	b.n	8007078 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d11b      	bne.n	8006dee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	e144      	b.n	8007078 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e04:	e138      	b.n	8007078 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	f200 80f1 	bhi.w	8006ff2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d123      	bne.n	8006e60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fc1b 	bl	8007658 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e139      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e5e:	e10b      	b.n	8007078 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d14e      	bne.n	8006f06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4906      	ldr	r1, [pc, #24]	; (8006e8c <HAL_I2C_Mem_Read+0x22c>)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fa98 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e10e      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
 8006e82:	bf00      	nop
 8006e84:	00100002 	.word	0x00100002
 8006e88:	ffff0000 	.word	0xffff0000
 8006e8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f04:	e0b8      	b.n	8007078 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4966      	ldr	r1, [pc, #408]	; (80070a8 <HAL_I2C_Mem_Read+0x448>)
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 fa49 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e0bf      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2200      	movs	r2, #0
 8006f6a:	494f      	ldr	r1, [pc, #316]	; (80070a8 <HAL_I2C_Mem_Read+0x448>)
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fa1b 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e091      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ff0:	e042      	b.n	8007078 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fb2e 	bl	8007658 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e04c      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b04      	cmp	r3, #4
 8007044:	d118      	bne.n	8007078 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707c:	2b00      	cmp	r3, #0
 800707e:	f47f aec2 	bne.w	8006e06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e000      	b.n	80070a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800709e:	2302      	movs	r3, #2
  }
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	00010004 	.word	0x00010004

080070ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	817b      	strh	r3, [r7, #10]
 80070be:	460b      	mov	r3, r1
 80070c0:	813b      	strh	r3, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	2200      	movs	r2, #0
 80070de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f960 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fc:	d103      	bne.n	8007106 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e05f      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800710a:	897b      	ldrh	r3, [r7, #10]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007118:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	6a3a      	ldr	r2, [r7, #32]
 800711e:	492d      	ldr	r1, [pc, #180]	; (80071d4 <I2C_RequestMemoryWrite+0x128>)
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f998 	bl	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e04c      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007148:	6a39      	ldr	r1, [r7, #32]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fa02 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00d      	beq.n	8007172 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	2b04      	cmp	r3, #4
 800715c:	d107      	bne.n	800716e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800716c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e02b      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d105      	bne.n	8007184 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007178:	893b      	ldrh	r3, [r7, #8]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	611a      	str	r2, [r3, #16]
 8007182:	e021      	b.n	80071c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007184:	893b      	ldrh	r3, [r7, #8]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	b29b      	uxth	r3, r3
 800718a:	b2da      	uxtb	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	6a39      	ldr	r1, [r7, #32]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f9dc 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d107      	bne.n	80071ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e005      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071be:	893b      	ldrh	r3, [r7, #8]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	00010002 	.word	0x00010002

080071d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	4608      	mov	r0, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	817b      	strh	r3, [r7, #10]
 80071ea:	460b      	mov	r3, r1
 80071ec:	813b      	strh	r3, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007200:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007210:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	2200      	movs	r2, #0
 800721a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f8c2 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007238:	d103      	bne.n	8007242 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007240:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e0aa      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007246:	897b      	ldrh	r3, [r7, #10]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007254:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	4952      	ldr	r1, [pc, #328]	; (80073a4 <I2C_RequestMemoryRead+0x1cc>)
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f8fa 	bl	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e097      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007284:	6a39      	ldr	r1, [r7, #32]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f964 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00d      	beq.n	80072ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	2b04      	cmp	r3, #4
 8007298:	d107      	bne.n	80072aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e076      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d105      	bne.n	80072c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072b4:	893b      	ldrh	r3, [r7, #8]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	611a      	str	r2, [r3, #16]
 80072be:	e021      	b.n	8007304 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072c0:	893b      	ldrh	r3, [r7, #8]
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d0:	6a39      	ldr	r1, [r7, #32]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f93e 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d107      	bne.n	80072f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e050      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072fa:	893b      	ldrh	r3, [r7, #8]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007306:	6a39      	ldr	r1, [r7, #32]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f923 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00d      	beq.n	8007330 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	2b04      	cmp	r3, #4
 800731a:	d107      	bne.n	800732c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e035      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800733e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2200      	movs	r2, #0
 8007348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f82b 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007366:	d103      	bne.n	8007370 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800736e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e013      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007374:	897b      	ldrh	r3, [r7, #10]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	4906      	ldr	r1, [pc, #24]	; (80073a4 <I2C_RequestMemoryRead+0x1cc>)
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f863 	bl	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	00010002 	.word	0x00010002

080073a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073b8:	e025      	b.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d021      	beq.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c2:	f7fd feef 	bl	80051a4 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d302      	bcc.n	80073d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d116      	bne.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f043 0220 	orr.w	r2, r3, #32
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e023      	b.n	800744e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10d      	bne.n	800742c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	43da      	mvns	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4013      	ands	r3, r2
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	bf0c      	ite	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	2300      	movne	r3, #0
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	e00c      	b.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	43da      	mvns	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d0b6      	beq.n	80073ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007464:	e051      	b.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007474:	d123      	bne.n	80074be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007484:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800748e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0204 	orr.w	r2, r3, #4
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e046      	b.n	800754c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d021      	beq.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c6:	f7fd fe6d 	bl	80051a4 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d302      	bcc.n	80074dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d116      	bne.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e020      	b.n	800754c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10c      	bne.n	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	43da      	mvns	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4013      	ands	r3, r2
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	e00b      	b.n	8007546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	43da      	mvns	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	4013      	ands	r3, r2
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d18d      	bne.n	8007466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007560:	e02d      	b.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f8ce 	bl	8007704 <I2C_IsAcknowledgeFailed>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e02d      	b.n	80075ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007578:	d021      	beq.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757a:	f7fd fe13 	bl	80051a4 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	429a      	cmp	r2, r3
 8007588:	d302      	bcc.n	8007590 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d116      	bne.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e007      	b.n	80075ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d1ca      	bne.n	8007562 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075e2:	e02d      	b.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f88d 	bl	8007704 <I2C_IsAcknowledgeFailed>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e02d      	b.n	8007650 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d021      	beq.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fc:	f7fd fdd2 	bl	80051a4 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d116      	bne.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	f043 0220 	orr.w	r2, r3, #32
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e007      	b.n	8007650 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	2b04      	cmp	r3, #4
 800764c:	d1ca      	bne.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007664:	e042      	b.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b10      	cmp	r3, #16
 8007672:	d119      	bne.n	80076a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0210 	mvn.w	r2, #16
 800767c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e029      	b.n	80076fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a8:	f7fd fd7c 	bl	80051a4 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d302      	bcc.n	80076be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d116      	bne.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e007      	b.n	80076fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d1b5      	bne.n	8007666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771a:	d11b      	bne.n	8007754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	f043 0204 	orr.w	r2, r3, #4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e000      	b.n	8007756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e267      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d075      	beq.n	800786e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007782:	4b88      	ldr	r3, [pc, #544]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d00c      	beq.n	80077a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800778e:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007796:	2b08      	cmp	r3, #8
 8007798:	d112      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800779a:	4b82      	ldr	r3, [pc, #520]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077a6:	d10b      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a8:	4b7e      	ldr	r3, [pc, #504]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d05b      	beq.n	800786c <HAL_RCC_OscConfig+0x108>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d157      	bne.n	800786c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e242      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c8:	d106      	bne.n	80077d8 <HAL_RCC_OscConfig+0x74>
 80077ca:	4b76      	ldr	r3, [pc, #472]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a75      	ldr	r2, [pc, #468]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e01d      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x98>
 80077e2:	4b70      	ldr	r3, [pc, #448]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a6f      	ldr	r2, [pc, #444]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4b6d      	ldr	r3, [pc, #436]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6c      	ldr	r2, [pc, #432]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077fc:	4b69      	ldr	r3, [pc, #420]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a68      	ldr	r2, [pc, #416]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	4b66      	ldr	r3, [pc, #408]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a65      	ldr	r2, [pc, #404]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800780e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800781c:	f7fd fcc2 	bl	80051a4 <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007824:	f7fd fcbe 	bl	80051a4 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	; 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e207      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007836:	4b5b      	ldr	r3, [pc, #364]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0f0      	beq.n	8007824 <HAL_RCC_OscConfig+0xc0>
 8007842:	e014      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007844:	f7fd fcae 	bl	80051a4 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800784c:	f7fd fcaa 	bl	80051a4 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b64      	cmp	r3, #100	; 0x64
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1f3      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800785e:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0xe8>
 800786a:	e000      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d063      	beq.n	8007942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787a:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007886:	4b47      	ldr	r3, [pc, #284]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800788e:	2b08      	cmp	r3, #8
 8007890:	d11c      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007892:	4b44      	ldr	r3, [pc, #272]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d116      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800789e:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d001      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e1c7      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b6:	4b3b      	ldr	r3, [pc, #236]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4937      	ldr	r1, [pc, #220]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ca:	e03a      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d4:	4b34      	ldr	r3, [pc, #208]	; (80079a8 <HAL_RCC_OscConfig+0x244>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078da:	f7fd fc63 	bl	80051a4 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e2:	f7fd fc5f 	bl	80051a4 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e1a8      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007900:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4925      	ldr	r1, [pc, #148]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007910:	4313      	orrs	r3, r2
 8007912:	600b      	str	r3, [r1, #0]
 8007914:	e015      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <HAL_RCC_OscConfig+0x244>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fd fc42 	bl	80051a4 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007924:	f7fd fc3e 	bl	80051a4 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e187      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007936:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d036      	beq.n	80079bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007956:	4b15      	ldr	r3, [pc, #84]	; (80079ac <HAL_RCC_OscConfig+0x248>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795c:	f7fd fc22 	bl	80051a4 <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007964:	f7fd fc1e 	bl	80051a4 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e167      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_RCC_OscConfig+0x240>)
 8007978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x200>
 8007982:	e01b      	b.n	80079bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <HAL_RCC_OscConfig+0x248>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798a:	f7fd fc0b 	bl	80051a4 <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	e00e      	b.n	80079b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007992:	f7fd fc07 	bl	80051a4 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d907      	bls.n	80079b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e150      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
 80079a4:	40023800 	.word	0x40023800
 80079a8:	42470000 	.word	0x42470000
 80079ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b0:	4b88      	ldr	r3, [pc, #544]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1ea      	bne.n	8007992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8097 	beq.w	8007af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ce:	4b81      	ldr	r3, [pc, #516]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10f      	bne.n	80079fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	4b7d      	ldr	r3, [pc, #500]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	4a7c      	ldr	r2, [pc, #496]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ea:	4b7a      	ldr	r3, [pc, #488]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fa:	4b77      	ldr	r3, [pc, #476]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d118      	bne.n	8007a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a06:	4b74      	ldr	r3, [pc, #464]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a73      	ldr	r2, [pc, #460]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a12:	f7fd fbc7 	bl	80051a4 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a1a:	f7fd fbc3 	bl	80051a4 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e10c      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a2c:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <HAL_RCC_OscConfig+0x474>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f0      	beq.n	8007a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <HAL_RCC_OscConfig+0x2ea>
 8007a40:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a63      	ldr	r2, [pc, #396]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4c:	e01c      	b.n	8007a88 <HAL_RCC_OscConfig+0x324>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCC_OscConfig+0x30c>
 8007a56:	4b5f      	ldr	r3, [pc, #380]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	4a5e      	ldr	r2, [pc, #376]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	f043 0304 	orr.w	r3, r3, #4
 8007a60:	6713      	str	r3, [r2, #112]	; 0x70
 8007a62:	4b5c      	ldr	r3, [pc, #368]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a5b      	ldr	r2, [pc, #364]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	e00b      	b.n	8007a88 <HAL_RCC_OscConfig+0x324>
 8007a70:	4b58      	ldr	r3, [pc, #352]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a74:	4a57      	ldr	r2, [pc, #348]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7c:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a80:	4a54      	ldr	r2, [pc, #336]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007a82:	f023 0304 	bic.w	r3, r3, #4
 8007a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d015      	beq.n	8007abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a90:	f7fd fb88 	bl	80051a4 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a96:	e00a      	b.n	8007aae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a98:	f7fd fb84 	bl	80051a4 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e0cb      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aae:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0ee      	beq.n	8007a98 <HAL_RCC_OscConfig+0x334>
 8007aba:	e014      	b.n	8007ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007abc:	f7fd fb72 	bl	80051a4 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ac2:	e00a      	b.n	8007ada <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ac4:	f7fd fb6e 	bl	80051a4 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e0b5      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ada:	4b3e      	ldr	r3, [pc, #248]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1ee      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d105      	bne.n	8007af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aec:	4b39      	ldr	r3, [pc, #228]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	4a38      	ldr	r2, [pc, #224]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80a1 	beq.w	8007c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b02:	4b34      	ldr	r3, [pc, #208]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d05c      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d141      	bne.n	8007b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b16:	4b31      	ldr	r3, [pc, #196]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b1c:	f7fd fb42 	bl	80051a4 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b24:	f7fd fb3e 	bl	80051a4 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e087      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b36:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f0      	bne.n	8007b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69da      	ldr	r2, [r3, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	491b      	ldr	r1, [pc, #108]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b6c:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b72:	f7fd fb17 	bl	80051a4 <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b78:	e008      	b.n	8007b8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b7a:	f7fd fb13 	bl	80051a4 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e05c      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b8c:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0f0      	beq.n	8007b7a <HAL_RCC_OscConfig+0x416>
 8007b98:	e054      	b.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <HAL_RCC_OscConfig+0x478>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba0:	f7fd fb00 	bl	80051a4 <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba8:	f7fd fafc 	bl	80051a4 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e045      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <HAL_RCC_OscConfig+0x470>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f0      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x444>
 8007bc6:	e03d      	b.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d107      	bne.n	8007be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e038      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000
 8007bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <HAL_RCC_OscConfig+0x4ec>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d028      	beq.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d121      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d11a      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c10:	4013      	ands	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d111      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d107      	bne.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d001      	beq.n	8007c44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40023800 	.word	0x40023800

08007c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e0cc      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c68:	4b68      	ldr	r3, [pc, #416]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d90c      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c76:	4b65      	ldr	r3, [pc, #404]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b63      	ldr	r3, [pc, #396]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0b8      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d020      	beq.n	8007cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ca8:	4b59      	ldr	r3, [pc, #356]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	4a58      	ldr	r2, [pc, #352]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cc0:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	4a52      	ldr	r2, [pc, #328]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ccc:	4b50      	ldr	r3, [pc, #320]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	494d      	ldr	r1, [pc, #308]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d044      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d119      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e07f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d003      	beq.n	8007d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d107      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d12:	4b3f      	ldr	r3, [pc, #252]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e06f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d22:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e067      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d32:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f023 0203 	bic.w	r2, r3, #3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4934      	ldr	r1, [pc, #208]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d44:	f7fd fa2e 	bl	80051a4 <HAL_GetTick>
 8007d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d4c:	f7fd fa2a 	bl	80051a4 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e04f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 020c 	and.w	r2, r3, #12
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d1eb      	bne.n	8007d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d74:	4b25      	ldr	r3, [pc, #148]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d20c      	bcs.n	8007d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d82:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8a:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e032      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007da8:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4916      	ldr	r1, [pc, #88]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dc6:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	490e      	ldr	r1, [pc, #56]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dda:	f000 f821 	bl	8007e20 <HAL_RCC_GetSysClockFreq>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	490a      	ldr	r1, [pc, #40]	; (8007e14 <HAL_RCC_ClockConfig+0x1c0>)
 8007dec:	5ccb      	ldrb	r3, [r1, r3]
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <HAL_RCC_ClockConfig+0x1c4>)
 8007df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <HAL_RCC_ClockConfig+0x1c8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fd f98e 	bl	800511c <HAL_InitTick>

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40023c00 	.word	0x40023c00
 8007e10:	40023800 	.word	0x40023800
 8007e14:	0800fecc 	.word	0x0800fecc
 8007e18:	20000220 	.word	0x20000220
 8007e1c:	200002e8 	.word	0x200002e8

08007e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e24:	b090      	sub	sp, #64	; 0x40
 8007e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e30:	2300      	movs	r3, #0
 8007e32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e38:	4b59      	ldr	r3, [pc, #356]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 030c 	and.w	r3, r3, #12
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d00d      	beq.n	8007e60 <HAL_RCC_GetSysClockFreq+0x40>
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	f200 80a1 	bhi.w	8007f8c <HAL_RCC_GetSysClockFreq+0x16c>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_RCC_GetSysClockFreq+0x34>
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d003      	beq.n	8007e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e52:	e09b      	b.n	8007f8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e54:	4b53      	ldr	r3, [pc, #332]	; (8007fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007e58:	e09b      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e5a:	4b53      	ldr	r3, [pc, #332]	; (8007fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e5e:	e098      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e60:	4b4f      	ldr	r3, [pc, #316]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e6a:	4b4d      	ldr	r3, [pc, #308]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d028      	beq.n	8007ec8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e76:	4b4a      	ldr	r3, [pc, #296]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	099b      	lsrs	r3, r3, #6
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	623b      	str	r3, [r7, #32]
 8007e80:	627a      	str	r2, [r7, #36]	; 0x24
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4b47      	ldr	r3, [pc, #284]	; (8007fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e8c:	fb03 f201 	mul.w	r2, r3, r1
 8007e90:	2300      	movs	r3, #0
 8007e92:	fb00 f303 	mul.w	r3, r0, r3
 8007e96:	4413      	add	r3, r2
 8007e98:	4a43      	ldr	r2, [pc, #268]	; (8007fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e9a:	fba0 1202 	umull	r1, r2, r0, r2
 8007e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ea0:	460a      	mov	r2, r1
 8007ea2:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ea6:	4413      	add	r3, r2
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eac:	2200      	movs	r2, #0
 8007eae:	61bb      	str	r3, [r7, #24]
 8007eb0:	61fa      	str	r2, [r7, #28]
 8007eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007eba:	f7f8 fe8d 	bl	8000bd8 <__aeabi_uldivmod>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec6:	e053      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ec8:	4b35      	ldr	r3, [pc, #212]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	099b      	lsrs	r3, r3, #6
 8007ece:	2200      	movs	r2, #0
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	617a      	str	r2, [r7, #20]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007eda:	f04f 0b00 	mov.w	fp, #0
 8007ede:	4652      	mov	r2, sl
 8007ee0:	465b      	mov	r3, fp
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f04f 0100 	mov.w	r1, #0
 8007eea:	0159      	lsls	r1, r3, #5
 8007eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ef0:	0150      	lsls	r0, r2, #5
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	ebb2 080a 	subs.w	r8, r2, sl
 8007efa:	eb63 090b 	sbc.w	r9, r3, fp
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f12:	ebb2 0408 	subs.w	r4, r2, r8
 8007f16:	eb63 0509 	sbc.w	r5, r3, r9
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	00eb      	lsls	r3, r5, #3
 8007f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f28:	00e2      	lsls	r2, r4, #3
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	461d      	mov	r5, r3
 8007f2e:	eb14 030a 	adds.w	r3, r4, sl
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	eb45 030b 	adc.w	r3, r5, fp
 8007f38:	607b      	str	r3, [r7, #4]
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f46:	4629      	mov	r1, r5
 8007f48:	028b      	lsls	r3, r1, #10
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f50:	4621      	mov	r1, r4
 8007f52:	028a      	lsls	r2, r1, #10
 8007f54:	4610      	mov	r0, r2
 8007f56:	4619      	mov	r1, r3
 8007f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	60bb      	str	r3, [r7, #8]
 8007f5e:	60fa      	str	r2, [r7, #12]
 8007f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f64:	f7f8 fe38 	bl	8000bd8 <__aeabi_uldivmod>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f8a:	e002      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3740      	adds	r7, #64	; 0x40
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	00f42400 	.word	0x00f42400
 8007fa8:	017d7840 	.word	0x017d7840

08007fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fb0:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20000220 	.word	0x20000220

08007fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fc8:	f7ff fff0 	bl	8007fac <HAL_RCC_GetHCLKFreq>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	0a9b      	lsrs	r3, r3, #10
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	4903      	ldr	r1, [pc, #12]	; (8007fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fda:	5ccb      	ldrb	r3, [r1, r3]
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	0800fedc 	.word	0x0800fedc

08007fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ff0:	f7ff ffdc 	bl	8007fac <HAL_RCC_GetHCLKFreq>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	0b5b      	lsrs	r3, r3, #13
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	4903      	ldr	r1, [pc, #12]	; (8008010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008002:	5ccb      	ldrb	r3, [r1, r3]
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008008:	4618      	mov	r0, r3
 800800a:	bd80      	pop	{r7, pc}
 800800c:	40023800 	.word	0x40023800
 8008010:	0800fedc 	.word	0x0800fedc

08008014 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d105      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008038:	2b00      	cmp	r3, #0
 800803a:	d038      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800803c:	4b68      	ldr	r3, [pc, #416]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008042:	f7fd f8af 	bl	80051a4 <HAL_GetTick>
 8008046:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008048:	e008      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800804a:	f7fd f8ab 	bl	80051a4 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d901      	bls.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e0bd      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800805c:	4b61      	ldr	r3, [pc, #388]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f0      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	019b      	lsls	r3, r3, #6
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	071b      	lsls	r3, r3, #28
 800807a:	495a      	ldr	r1, [pc, #360]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800807c:	4313      	orrs	r3, r2
 800807e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008082:	4b57      	ldr	r3, [pc, #348]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008088:	f7fd f88c 	bl	80051a4 <HAL_GetTick>
 800808c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800808e:	e008      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008090:	f7fd f888 	bl	80051a4 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d901      	bls.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e09a      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080a2:	4b50      	ldr	r3, [pc, #320]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0f0      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 8083 	beq.w	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	4b48      	ldr	r3, [pc, #288]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	4a47      	ldr	r2, [pc, #284]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ca:	6413      	str	r3, [r2, #64]	; 0x40
 80080cc:	4b45      	ldr	r3, [pc, #276]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80080d8:	4b43      	ldr	r3, [pc, #268]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a42      	ldr	r2, [pc, #264]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080e4:	f7fd f85e 	bl	80051a4 <HAL_GetTick>
 80080e8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80080ea:	e008      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80080ec:	f7fd f85a 	bl	80051a4 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e06c      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80080fe:	4b3a      	ldr	r3, [pc, #232]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800810a:	4b36      	ldr	r3, [pc, #216]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008112:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d02f      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	429a      	cmp	r2, r3
 8008126:	d028      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008128:	4b2e      	ldr	r3, [pc, #184]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008130:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008132:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008134:	2201      	movs	r2, #1
 8008136:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008138:	4b2c      	ldr	r3, [pc, #176]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800813e:	4a29      	ldr	r2, [pc, #164]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008144:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	d114      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008150:	f7fd f828 	bl	80051a4 <HAL_GetTick>
 8008154:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008156:	e00a      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008158:	f7fd f824 	bl	80051a4 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	f241 3288 	movw	r2, #5000	; 0x1388
 8008166:	4293      	cmp	r3, r2
 8008168:	d901      	bls.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e034      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ee      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008186:	d10d      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008188:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819c:	4911      	ldr	r1, [pc, #68]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	608b      	str	r3, [r1, #8]
 80081a2:	e005      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80081a4:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	4a0e      	ldr	r2, [pc, #56]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081ae:	6093      	str	r3, [r2, #8]
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081bc:	4909      	ldr	r1, [pc, #36]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7d1a      	ldrb	r2, [r3, #20]
 80081d2:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80081d4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	42470068 	.word	0x42470068
 80081e4:	40023800 	.word	0x40023800
 80081e8:	40007000 	.word	0x40007000
 80081ec:	42470e40 	.word	0x42470e40
 80081f0:	424711e0 	.word	0x424711e0

080081f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e066      	b.n	80082d8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	7f5b      	ldrb	r3, [r3, #29]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fb fd6a 	bl	8003cf4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	22ca      	movs	r2, #202	; 0xca
 800822c:	625a      	str	r2, [r3, #36]	; 0x24
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2253      	movs	r2, #83	; 0x53
 8008234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa45 	bl	80086c6 <RTC_EnterInitMode>
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d12c      	bne.n	80082a0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008258:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6899      	ldr	r1, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	68d2      	ldr	r2, [r2, #12]
 8008280:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6919      	ldr	r1, [r3, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	041a      	lsls	r2, r3, #16
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa4c 	bl	8008734 <RTC_ExitInitMode>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d113      	bne.n	80082ce <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082b4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	22ff      	movs	r2, #255	; 0xff
 80082d4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	7f1b      	ldrb	r3, [r3, #28]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_RTC_SetTime+0x1c>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e087      	b.n	800840c <HAL_RTC_SetTime+0x12c>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2202      	movs	r2, #2
 8008306:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d126      	bne.n	800835c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2200      	movs	r2, #0
 8008320:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fa29 	bl	800877e <RTC_ByteToBcd2>
 800832c:	4603      	mov	r3, r0
 800832e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fa22 	bl	800877e <RTC_ByteToBcd2>
 800833a:	4603      	mov	r3, r0
 800833c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800833e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	789b      	ldrb	r3, [r3, #2]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fa1a 	bl	800877e <RTC_ByteToBcd2>
 800834a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800834c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	78db      	ldrb	r3, [r3, #3]
 8008354:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008356:	4313      	orrs	r3, r2
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	e018      	b.n	800838e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d102      	bne.n	8008370 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2200      	movs	r2, #0
 800836e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800837c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008382:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	78db      	ldrb	r3, [r3, #3]
 8008388:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800838a:	4313      	orrs	r3, r2
 800838c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	22ca      	movs	r2, #202	; 0xca
 8008394:	625a      	str	r2, [r3, #36]	; 0x24
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2253      	movs	r2, #83	; 0x53
 800839c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 f991 	bl	80086c6 <RTC_EnterInitMode>
 80083a4:	4603      	mov	r3, r0
 80083a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80083a8:	7cfb      	ldrb	r3, [r7, #19]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d120      	bne.n	80083f0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80083b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6899      	ldr	r1, [r3, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	431a      	orrs	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 f9a4 	bl	8008734 <RTC_ExitInitMode>
 80083ec:	4603      	mov	r3, r0
 80083ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80083f0:	7cfb      	ldrb	r3, [r7, #19]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d102      	bne.n	80083fc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	22ff      	movs	r2, #255	; 0xff
 8008402:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	771a      	strb	r2, [r3, #28]

  return status;
 800840a:	7cfb      	ldrb	r3, [r7, #19]
}
 800840c:	4618      	mov	r0, r3
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	bd90      	pop	{r4, r7, pc}

08008414 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008446:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800844a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	0c1b      	lsrs	r3, r3, #16
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008456:	b2da      	uxtb	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	0a1b      	lsrs	r3, r3, #8
 8008460:	b2db      	uxtb	r3, r3
 8008462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008466:	b2da      	uxtb	r2, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008474:	b2da      	uxtb	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	0d9b      	lsrs	r3, r3, #22
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	b2da      	uxtb	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d11a      	bne.n	80084c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 f98f 	bl	80087b8 <RTC_Bcd2ToByte>
 800849a:	4603      	mov	r3, r0
 800849c:	461a      	mov	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f986 	bl	80087b8 <RTC_Bcd2ToByte>
 80084ac:	4603      	mov	r3, r0
 80084ae:	461a      	mov	r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	789b      	ldrb	r3, [r3, #2]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f97d 	bl	80087b8 <RTC_Bcd2ToByte>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084d0:	b590      	push	{r4, r7, lr}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	7f1b      	ldrb	r3, [r3, #28]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_RTC_SetDate+0x1c>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e071      	b.n	80085d0 <HAL_RTC_SetDate+0x100>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2202      	movs	r2, #2
 80084f6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10e      	bne.n	800851c <HAL_RTC_SetDate+0x4c>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	f003 0310 	and.w	r3, r3, #16
 8008506:	2b00      	cmp	r3, #0
 8008508:	d008      	beq.n	800851c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	785b      	ldrb	r3, [r3, #1]
 800850e:	f023 0310 	bic.w	r3, r3, #16
 8008512:	b2db      	uxtb	r3, r3
 8008514:	330a      	adds	r3, #10
 8008516:	b2da      	uxtb	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d11c      	bne.n	800855c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	78db      	ldrb	r3, [r3, #3]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f929 	bl	800877e <RTC_ByteToBcd2>
 800852c:	4603      	mov	r3, r0
 800852e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f922 	bl	800877e <RTC_ByteToBcd2>
 800853a:	4603      	mov	r3, r0
 800853c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800853e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	789b      	ldrb	r3, [r3, #2]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f91a 	bl	800877e <RTC_ByteToBcd2>
 800854a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800854c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	e00e      	b.n	800857a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	78db      	ldrb	r3, [r3, #3]
 8008560:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	785b      	ldrb	r3, [r3, #1]
 8008566:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008568:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800856e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	22ca      	movs	r2, #202	; 0xca
 8008580:	625a      	str	r2, [r3, #36]	; 0x24
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2253      	movs	r2, #83	; 0x53
 8008588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f89b 	bl	80086c6 <RTC_EnterInitMode>
 8008590:	4603      	mov	r3, r0
 8008592:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008594:	7cfb      	ldrb	r3, [r7, #19]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10c      	bne.n	80085b4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 f8c2 	bl	8008734 <RTC_ExitInitMode>
 80085b0:	4603      	mov	r3, r0
 80085b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80085b4:	7cfb      	ldrb	r3, [r7, #19]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d102      	bne.n	80085c0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	771a      	strb	r2, [r3, #28]

  return status;
 80085ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd90      	pop	{r4, r7, pc}

080085d8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	0c1b      	lsrs	r3, r3, #16
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	0a1b      	lsrs	r3, r3, #8
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 031f 	and.w	r3, r3, #31
 800860c:	b2da      	uxtb	r2, r3
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800861a:	b2da      	uxtb	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	0b5b      	lsrs	r3, r3, #13
 8008624:	b2db      	uxtb	r3, r3
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d11a      	bne.n	800866c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	78db      	ldrb	r3, [r3, #3]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f8bc 	bl	80087b8 <RTC_Bcd2ToByte>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 f8b3 	bl	80087b8 <RTC_Bcd2ToByte>
 8008652:	4603      	mov	r3, r0
 8008654:	461a      	mov	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	789b      	ldrb	r3, [r3, #2]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f8aa 	bl	80087b8 <RTC_Bcd2ToByte>
 8008664:	4603      	mov	r3, r0
 8008666:	461a      	mov	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008690:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008692:	f7fc fd87 	bl	80051a4 <HAL_GetTick>
 8008696:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008698:	e009      	b.n	80086ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800869a:	f7fc fd83 	bl	80051a4 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086a8:	d901      	bls.n	80086ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e007      	b.n	80086be <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0ee      	beq.n	800869a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d122      	bne.n	800872a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086f4:	f7fc fd56 	bl	80051a4 <HAL_GetTick>
 80086f8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80086fa:	e00c      	b.n	8008716 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086fc:	f7fc fd52 	bl	80051a4 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800870a:	d904      	bls.n	8008716 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2204      	movs	r2, #4
 8008710:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d102      	bne.n	800872a <RTC_EnterInitMode+0x64>
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d1e8      	bne.n	80086fc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800874e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff ff89 	bl	8008676 <HAL_RTC_WaitForSynchro>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2204      	movs	r2, #4
 800876e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008774:	7bfb      	ldrb	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	4603      	mov	r3, r0
 8008786:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800878c:	e005      	b.n	800879a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	3301      	adds	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	3b0a      	subs	r3, #10
 8008798:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	2b09      	cmp	r3, #9
 800879e:	d8f6      	bhi.n	800878e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	b2db      	uxtb	r3, r3
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	091b      	lsrs	r3, r3, #4
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	0092      	lsls	r2, r2, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	4413      	add	r3, r2
 80087e2:	b2db      	uxtb	r3, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e07b      	b.n	80088fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d108      	bne.n	800881c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008812:	d009      	beq.n	8008828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	61da      	str	r2, [r3, #28]
 800881a:	e005      	b.n	8008828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fb fab8 	bl	8003db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800885e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800887a:	431a      	orrs	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ac:	ea42 0103 	orr.w	r1, r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	0c1b      	lsrs	r3, r3, #16
 80088c6:	f003 0104 	and.w	r1, r3, #4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	f003 0210 	and.w	r2, r3, #16
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69da      	ldr	r2, [r3, #28]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e041      	b.n	8008998 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d106      	bne.n	800892e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fb fcbb 	bl	80042a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3304      	adds	r3, #4
 800893e:	4619      	mov	r1, r3
 8008940:	4610      	mov	r0, r2
 8008942:	f000 fe87 	bl	8009654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e041      	b.n	8008a36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f839 	bl	8008a3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f000 fe38 	bl	8009654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
	...

08008a54 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d109      	bne.n	8008a80 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	e022      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d109      	bne.n	8008a9a <HAL_TIM_PWM_Start_DMA+0x46>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	bf0c      	ite	eq
 8008a92:	2301      	moveq	r3, #1
 8008a94:	2300      	movne	r3, #0
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	e015      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d109      	bne.n	8008ab4 <HAL_TIM_PWM_Start_DMA+0x60>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	bf0c      	ite	eq
 8008aac:	2301      	moveq	r3, #1
 8008aae:	2300      	movne	r3, #0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	e008      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	bf0c      	ite	eq
 8008ac0:	2301      	moveq	r3, #1
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008aca:	2302      	movs	r3, #2
 8008acc:	e15d      	b.n	8008d8a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d109      	bne.n	8008ae8 <HAL_TIM_PWM_Start_DMA+0x94>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	bf0c      	ite	eq
 8008ae0:	2301      	moveq	r3, #1
 8008ae2:	2300      	movne	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	e022      	b.n	8008b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d109      	bne.n	8008b02 <HAL_TIM_PWM_Start_DMA+0xae>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	bf0c      	ite	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	2300      	movne	r3, #0
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	e015      	b.n	8008b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d109      	bne.n	8008b1c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	bf0c      	ite	eq
 8008b14:	2301      	moveq	r3, #1
 8008b16:	2300      	movne	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	e008      	b.n	8008b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	bf0c      	ite	eq
 8008b28:	2301      	moveq	r3, #1
 8008b2a:	2300      	movne	r3, #0
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d024      	beq.n	8008b7c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <HAL_TIM_PWM_Start_DMA+0xee>
 8008b38:	887b      	ldrh	r3, [r7, #2]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e123      	b.n	8008d8a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d104      	bne.n	8008b52 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b50:	e016      	b.n	8008b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d104      	bne.n	8008b62 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b60:	e00e      	b.n	8008b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d104      	bne.n	8008b72 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b70:	e006      	b.n	8008b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2202      	movs	r2, #2
 8008b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b7a:	e001      	b.n	8008b80 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e104      	b.n	8008d8a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b0c      	cmp	r3, #12
 8008b84:	f200 80ae 	bhi.w	8008ce4 <HAL_TIM_PWM_Start_DMA+0x290>
 8008b88:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8e:	bf00      	nop
 8008b90:	08008bc5 	.word	0x08008bc5
 8008b94:	08008ce5 	.word	0x08008ce5
 8008b98:	08008ce5 	.word	0x08008ce5
 8008b9c:	08008ce5 	.word	0x08008ce5
 8008ba0:	08008c0d 	.word	0x08008c0d
 8008ba4:	08008ce5 	.word	0x08008ce5
 8008ba8:	08008ce5 	.word	0x08008ce5
 8008bac:	08008ce5 	.word	0x08008ce5
 8008bb0:	08008c55 	.word	0x08008c55
 8008bb4:	08008ce5 	.word	0x08008ce5
 8008bb8:	08008ce5 	.word	0x08008ce5
 8008bbc:	08008ce5 	.word	0x08008ce5
 8008bc0:	08008c9d 	.word	0x08008c9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	4a72      	ldr	r2, [pc, #456]	; (8008d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008bca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	4a71      	ldr	r2, [pc, #452]	; (8008d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	4a70      	ldr	r2, [pc, #448]	; (8008d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008bda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3334      	adds	r3, #52	; 0x34
 8008be8:	461a      	mov	r2, r3
 8008bea:	887b      	ldrh	r3, [r7, #2]
 8008bec:	f7fc fd18 	bl	8005620 <HAL_DMA_Start_IT>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e0c7      	b.n	8008d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c08:	60da      	str	r2, [r3, #12]
      break;
 8008c0a:	e06e      	b.n	8008cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	4a60      	ldr	r2, [pc, #384]	; (8008d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008c12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	4a5f      	ldr	r2, [pc, #380]	; (8008d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	4a5e      	ldr	r2, [pc, #376]	; (8008d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008c22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3338      	adds	r3, #56	; 0x38
 8008c30:	461a      	mov	r2, r3
 8008c32:	887b      	ldrh	r3, [r7, #2]
 8008c34:	f7fc fcf4 	bl	8005620 <HAL_DMA_Start_IT>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e0a3      	b.n	8008d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c50:	60da      	str	r2, [r3, #12]
      break;
 8008c52:	e04a      	b.n	8008cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	4a4e      	ldr	r2, [pc, #312]	; (8008d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008c5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a4d      	ldr	r2, [pc, #308]	; (8008d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	4a4c      	ldr	r2, [pc, #304]	; (8008d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008c6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	333c      	adds	r3, #60	; 0x3c
 8008c78:	461a      	mov	r2, r3
 8008c7a:	887b      	ldrh	r3, [r7, #2]
 8008c7c:	f7fc fcd0 	bl	8005620 <HAL_DMA_Start_IT>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e07f      	b.n	8008d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c98:	60da      	str	r2, [r3, #12]
      break;
 8008c9a:	e026      	b.n	8008cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca0:	4a3c      	ldr	r2, [pc, #240]	; (8008d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008ca2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	4a3b      	ldr	r2, [pc, #236]	; (8008d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb0:	4a3a      	ldr	r2, [pc, #232]	; (8008d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008cb2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3340      	adds	r3, #64	; 0x40
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	887b      	ldrh	r3, [r7, #2]
 8008cc4:	f7fc fcac 	bl	8005620 <HAL_DMA_Start_IT>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e05b      	b.n	8008d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ce0:	60da      	str	r2, [r3, #12]
      break;
 8008ce2:	e002      	b.n	8008cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d14b      	bne.n	8008d88 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 ff51 	bl	8009ba0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a27      	ldr	r2, [pc, #156]	; (8008da0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d107      	bne.n	8008d18 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a20      	ldr	r2, [pc, #128]	; (8008da0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d018      	beq.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2a:	d013      	beq.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1c      	ldr	r2, [pc, #112]	; (8008da4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00e      	beq.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a1b      	ldr	r2, [pc, #108]	; (8008da8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d009      	beq.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a19      	ldr	r2, [pc, #100]	; (8008dac <HAL_TIM_PWM_Start_DMA+0x358>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d004      	beq.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a18      	ldr	r2, [pc, #96]	; (8008db0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d111      	bne.n	8008d78 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	2b06      	cmp	r3, #6
 8008d64:	d010      	beq.n	8008d88 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0201 	orr.w	r2, r2, #1
 8008d74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d76:	e007      	b.n	8008d88 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	08009545 	.word	0x08009545
 8008d98:	080095ed 	.word	0x080095ed
 8008d9c:	080094b3 	.word	0x080094b3
 8008da0:	40010000 	.word	0x40010000
 8008da4:	40000400 	.word	0x40000400
 8008da8:	40000800 	.word	0x40000800
 8008dac:	40000c00 	.word	0x40000c00
 8008db0:	40014000 	.word	0x40014000

08008db4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	d855      	bhi.n	8008e74 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008e05 	.word	0x08008e05
 8008dd4:	08008e75 	.word	0x08008e75
 8008dd8:	08008e75 	.word	0x08008e75
 8008ddc:	08008e75 	.word	0x08008e75
 8008de0:	08008e21 	.word	0x08008e21
 8008de4:	08008e75 	.word	0x08008e75
 8008de8:	08008e75 	.word	0x08008e75
 8008dec:	08008e75 	.word	0x08008e75
 8008df0:	08008e3d 	.word	0x08008e3d
 8008df4:	08008e75 	.word	0x08008e75
 8008df8:	08008e75 	.word	0x08008e75
 8008dfc:	08008e75 	.word	0x08008e75
 8008e00:	08008e59 	.word	0x08008e59
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fc fcc9 	bl	80057b0 <HAL_DMA_Abort_IT>
      break;
 8008e1e:	e02c      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fc fcbb 	bl	80057b0 <HAL_DMA_Abort_IT>
      break;
 8008e3a:	e01e      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fc fcad 	bl	80057b0 <HAL_DMA_Abort_IT>
      break;
 8008e56:	e010      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fc fc9f 	bl	80057b0 <HAL_DMA_Abort_IT>
      break;
 8008e72:	e002      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
      break;
 8008e78:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d157      	bne.n	8008f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2200      	movs	r2, #0
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fe89 	bl	8009ba0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a2a      	ldr	r2, [pc, #168]	; (8008f3c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d117      	bne.n	8008ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6a1a      	ldr	r2, [r3, #32]
 8008e9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10f      	bne.n	8008ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6a1a      	ldr	r2, [r3, #32]
 8008eae:	f240 4344 	movw	r3, #1092	; 0x444
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d107      	bne.n	8008ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ec6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6a1a      	ldr	r2, [r3, #32]
 8008ece:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10f      	bne.n	8008ef8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6a1a      	ldr	r2, [r3, #32]
 8008ede:	f240 4344 	movw	r3, #1092	; 0x444
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d107      	bne.n	8008ef8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0201 	bic.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d104      	bne.n	8008f08 <HAL_TIM_PWM_Stop_DMA+0x154>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f06:	e013      	b.n	8008f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d104      	bne.n	8008f18 <HAL_TIM_PWM_Stop_DMA+0x164>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f16:	e00b      	b.n	8008f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d104      	bne.n	8008f28 <HAL_TIM_PWM_Stop_DMA+0x174>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f26:	e003      	b.n	8008f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	40010000 	.word	0x40010000

08008f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d122      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d11b      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0202 	mvn.w	r2, #2
 8008f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa77 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 8008f88:	e005      	b.n	8008f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa69 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7fb ff51 	bl	8004e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d122      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d11b      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0204 	mvn.w	r2, #4
 8008fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fa4d 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 8008fdc:	e005      	b.n	8008fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa3f 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7fb ff27 	bl	8004e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d122      	bne.n	8009044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b08      	cmp	r3, #8
 800900a:	d11b      	bne.n	8009044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0208 	mvn.w	r2, #8
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2204      	movs	r2, #4
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa23 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa15 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7fb fefd 	bl	8004e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b10      	cmp	r3, #16
 8009050:	d122      	bne.n	8009098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b10      	cmp	r3, #16
 800905e:	d11b      	bne.n	8009098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f06f 0210 	mvn.w	r2, #16
 8009068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2208      	movs	r2, #8
 800906e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f9f9 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 8009084:	e005      	b.n	8009092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f9eb 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7fb fed3 	bl	8004e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d10e      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d107      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f06f 0201 	mvn.w	r2, #1
 80090bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fb faac 	bl	800461c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ce:	2b80      	cmp	r3, #128	; 0x80
 80090d0:	d10e      	bne.n	80090f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090dc:	2b80      	cmp	r3, #128	; 0x80
 80090de:	d107      	bne.n	80090f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fe48 	bl	8009d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fa:	2b40      	cmp	r3, #64	; 0x40
 80090fc:	d10e      	bne.n	800911c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009108:	2b40      	cmp	r3, #64	; 0x40
 800910a:	d107      	bne.n	800911c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9b7 	bl	800948a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b20      	cmp	r3, #32
 8009128:	d10e      	bne.n	8009148 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f003 0320 	and.w	r3, r3, #32
 8009134:	2b20      	cmp	r3, #32
 8009136:	d107      	bne.n	8009148 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f06f 0220 	mvn.w	r2, #32
 8009140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fe12 	bl	8009d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009166:	2b01      	cmp	r3, #1
 8009168:	d101      	bne.n	800916e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800916a:	2302      	movs	r3, #2
 800916c:	e0ae      	b.n	80092cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b0c      	cmp	r3, #12
 800917a:	f200 809f 	bhi.w	80092bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800917e:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	080091b9 	.word	0x080091b9
 8009188:	080092bd 	.word	0x080092bd
 800918c:	080092bd 	.word	0x080092bd
 8009190:	080092bd 	.word	0x080092bd
 8009194:	080091f9 	.word	0x080091f9
 8009198:	080092bd 	.word	0x080092bd
 800919c:	080092bd 	.word	0x080092bd
 80091a0:	080092bd 	.word	0x080092bd
 80091a4:	0800923b 	.word	0x0800923b
 80091a8:	080092bd 	.word	0x080092bd
 80091ac:	080092bd 	.word	0x080092bd
 80091b0:	080092bd 	.word	0x080092bd
 80091b4:	0800927b 	.word	0x0800927b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fac8 	bl	8009754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0208 	orr.w	r2, r2, #8
 80091d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0204 	bic.w	r2, r2, #4
 80091e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6999      	ldr	r1, [r3, #24]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	619a      	str	r2, [r3, #24]
      break;
 80091f6:	e064      	b.n	80092c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fb0e 	bl	8009820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6999      	ldr	r1, [r3, #24]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	021a      	lsls	r2, r3, #8
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	619a      	str	r2, [r3, #24]
      break;
 8009238:	e043      	b.n	80092c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fb59 	bl	80098f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	69da      	ldr	r2, [r3, #28]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0208 	orr.w	r2, r2, #8
 8009254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0204 	bic.w	r2, r2, #4
 8009264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69d9      	ldr	r1, [r3, #28]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	61da      	str	r2, [r3, #28]
      break;
 8009278:	e023      	b.n	80092c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fba3 	bl	80099cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69da      	ldr	r2, [r3, #28]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69d9      	ldr	r1, [r3, #28]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	021a      	lsls	r2, r3, #8
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	61da      	str	r2, [r3, #28]
      break;
 80092ba:	e002      	b.n	80092c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]
      break;
 80092c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_TIM_ConfigClockSource+0x1c>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e0b4      	b.n	800945a <HAL_TIM_ConfigClockSource+0x186>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800930e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009328:	d03e      	beq.n	80093a8 <HAL_TIM_ConfigClockSource+0xd4>
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932e:	f200 8087 	bhi.w	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009336:	f000 8086 	beq.w	8009446 <HAL_TIM_ConfigClockSource+0x172>
 800933a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800933e:	d87f      	bhi.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009340:	2b70      	cmp	r3, #112	; 0x70
 8009342:	d01a      	beq.n	800937a <HAL_TIM_ConfigClockSource+0xa6>
 8009344:	2b70      	cmp	r3, #112	; 0x70
 8009346:	d87b      	bhi.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009348:	2b60      	cmp	r3, #96	; 0x60
 800934a:	d050      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x11a>
 800934c:	2b60      	cmp	r3, #96	; 0x60
 800934e:	d877      	bhi.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009350:	2b50      	cmp	r3, #80	; 0x50
 8009352:	d03c      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0xfa>
 8009354:	2b50      	cmp	r3, #80	; 0x50
 8009356:	d873      	bhi.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009358:	2b40      	cmp	r3, #64	; 0x40
 800935a:	d058      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x13a>
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d86f      	bhi.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009360:	2b30      	cmp	r3, #48	; 0x30
 8009362:	d064      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x15a>
 8009364:	2b30      	cmp	r3, #48	; 0x30
 8009366:	d86b      	bhi.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009368:	2b20      	cmp	r3, #32
 800936a:	d060      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x15a>
 800936c:	2b20      	cmp	r3, #32
 800936e:	d867      	bhi.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d05c      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x15a>
 8009374:	2b10      	cmp	r3, #16
 8009376:	d05a      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x15a>
 8009378:	e062      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6899      	ldr	r1, [r3, #8]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f000 fbe9 	bl	8009b60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800939c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	609a      	str	r2, [r3, #8]
      break;
 80093a6:	e04f      	b.n	8009448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	6899      	ldr	r1, [r3, #8]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f000 fbd2 	bl	8009b60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ca:	609a      	str	r2, [r3, #8]
      break;
 80093cc:	e03c      	b.n	8009448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6859      	ldr	r1, [r3, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	f000 fb46 	bl	8009a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2150      	movs	r1, #80	; 0x50
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fb9f 	bl	8009b2a <TIM_ITRx_SetConfig>
      break;
 80093ec:	e02c      	b.n	8009448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6859      	ldr	r1, [r3, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f000 fb65 	bl	8009aca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2160      	movs	r1, #96	; 0x60
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fb8f 	bl	8009b2a <TIM_ITRx_SetConfig>
      break;
 800940c:	e01c      	b.n	8009448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6859      	ldr	r1, [r3, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	461a      	mov	r2, r3
 800941c:	f000 fb26 	bl	8009a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2140      	movs	r1, #64	; 0x40
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fb7f 	bl	8009b2a <TIM_ITRx_SetConfig>
      break;
 800942c:	e00c      	b.n	8009448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f000 fb76 	bl	8009b2a <TIM_ITRx_SetConfig>
      break;
 800943e:	e003      	b.n	8009448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
      break;
 8009444:	e000      	b.n	8009448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009458:	7bfb      	ldrb	r3, [r7, #15]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d107      	bne.n	80094da <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2201      	movs	r2, #1
 80094ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094d8:	e02a      	b.n	8009530 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d107      	bne.n	80094f4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2202      	movs	r2, #2
 80094e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094f2:	e01d      	b.n	8009530 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d107      	bne.n	800950e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2204      	movs	r2, #4
 8009502:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800950c:	e010      	b.n	8009530 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d107      	bne.n	8009528 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2208      	movs	r2, #8
 800951c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009526:	e003      	b.n	8009530 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff ffb4 	bl	800949e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	771a      	strb	r2, [r3, #28]
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	429a      	cmp	r2, r3
 800955a:	d10b      	bne.n	8009574 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2201      	movs	r2, #1
 8009560:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d136      	bne.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009572:	e031      	b.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	429a      	cmp	r2, r3
 800957c:	d10b      	bne.n	8009596 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2202      	movs	r2, #2
 8009582:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d125      	bne.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009594:	e020      	b.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d10b      	bne.n	80095b8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2204      	movs	r2, #4
 80095a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d114      	bne.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095b6:	e00f      	b.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d10a      	bne.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2208      	movs	r2, #8
 80095c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7fb fc2d 	bl	8004e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	771a      	strb	r2, [r3, #28]
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d103      	bne.n	800960c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	771a      	strb	r2, [r3, #28]
 800960a:	e019      	b.n	8009640 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d103      	bne.n	800961e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2202      	movs	r2, #2
 800961a:	771a      	strb	r2, [r3, #28]
 800961c:	e010      	b.n	8009640 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d103      	bne.n	8009630 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2204      	movs	r2, #4
 800962c:	771a      	strb	r2, [r3, #28]
 800962e:	e007      	b.n	8009640 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d102      	bne.n	8009640 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2208      	movs	r2, #8
 800963e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7fb fb79 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	771a      	strb	r2, [r3, #28]
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a34      	ldr	r2, [pc, #208]	; (8009738 <TIM_Base_SetConfig+0xe4>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00f      	beq.n	800968c <TIM_Base_SetConfig+0x38>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009672:	d00b      	beq.n	800968c <TIM_Base_SetConfig+0x38>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a31      	ldr	r2, [pc, #196]	; (800973c <TIM_Base_SetConfig+0xe8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d007      	beq.n	800968c <TIM_Base_SetConfig+0x38>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a30      	ldr	r2, [pc, #192]	; (8009740 <TIM_Base_SetConfig+0xec>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d003      	beq.n	800968c <TIM_Base_SetConfig+0x38>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a2f      	ldr	r2, [pc, #188]	; (8009744 <TIM_Base_SetConfig+0xf0>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d108      	bne.n	800969e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a25      	ldr	r2, [pc, #148]	; (8009738 <TIM_Base_SetConfig+0xe4>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d01b      	beq.n	80096de <TIM_Base_SetConfig+0x8a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ac:	d017      	beq.n	80096de <TIM_Base_SetConfig+0x8a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a22      	ldr	r2, [pc, #136]	; (800973c <TIM_Base_SetConfig+0xe8>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <TIM_Base_SetConfig+0x8a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a21      	ldr	r2, [pc, #132]	; (8009740 <TIM_Base_SetConfig+0xec>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00f      	beq.n	80096de <TIM_Base_SetConfig+0x8a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a20      	ldr	r2, [pc, #128]	; (8009744 <TIM_Base_SetConfig+0xf0>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d00b      	beq.n	80096de <TIM_Base_SetConfig+0x8a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <TIM_Base_SetConfig+0xf4>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d007      	beq.n	80096de <TIM_Base_SetConfig+0x8a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a1e      	ldr	r2, [pc, #120]	; (800974c <TIM_Base_SetConfig+0xf8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d003      	beq.n	80096de <TIM_Base_SetConfig+0x8a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a1d      	ldr	r2, [pc, #116]	; (8009750 <TIM_Base_SetConfig+0xfc>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d108      	bne.n	80096f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a08      	ldr	r2, [pc, #32]	; (8009738 <TIM_Base_SetConfig+0xe4>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d103      	bne.n	8009724 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	691a      	ldr	r2, [r3, #16]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	615a      	str	r2, [r3, #20]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40010000 	.word	0x40010000
 800973c:	40000400 	.word	0x40000400
 8009740:	40000800 	.word	0x40000800
 8009744:	40000c00 	.word	0x40000c00
 8009748:	40014000 	.word	0x40014000
 800974c:	40014400 	.word	0x40014400
 8009750:	40014800 	.word	0x40014800

08009754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	f023 0201 	bic.w	r2, r3, #1
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0303 	bic.w	r3, r3, #3
 800978a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f023 0302 	bic.w	r3, r3, #2
 800979c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a1c      	ldr	r2, [pc, #112]	; (800981c <TIM_OC1_SetConfig+0xc8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d10c      	bne.n	80097ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f023 0308 	bic.w	r3, r3, #8
 80097b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	4313      	orrs	r3, r2
 80097c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f023 0304 	bic.w	r3, r3, #4
 80097c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a13      	ldr	r2, [pc, #76]	; (800981c <TIM_OC1_SetConfig+0xc8>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d111      	bne.n	80097f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	621a      	str	r2, [r3, #32]
}
 8009810:	bf00      	nop
 8009812:	371c      	adds	r7, #28
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	40010000 	.word	0x40010000

08009820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	f023 0210 	bic.w	r2, r3, #16
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800984e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	021b      	lsls	r3, r3, #8
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	4313      	orrs	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f023 0320 	bic.w	r3, r3, #32
 800986a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <TIM_OC2_SetConfig+0xd4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d10d      	bne.n	800989c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	011b      	lsls	r3, r3, #4
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	4313      	orrs	r3, r2
 8009892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800989a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a15      	ldr	r2, [pc, #84]	; (80098f4 <TIM_OC2_SetConfig+0xd4>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d113      	bne.n	80098cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	621a      	str	r2, [r3, #32]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	40010000 	.word	0x40010000

080098f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0303 	bic.w	r3, r3, #3
 800992e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	4313      	orrs	r3, r2
 800994c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a1d      	ldr	r2, [pc, #116]	; (80099c8 <TIM_OC3_SetConfig+0xd0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d10d      	bne.n	8009972 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800995c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a14      	ldr	r2, [pc, #80]	; (80099c8 <TIM_OC3_SetConfig+0xd0>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d113      	bne.n	80099a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	4313      	orrs	r3, r2
 8009994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	621a      	str	r2, [r3, #32]
}
 80099bc:	bf00      	nop
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	40010000 	.word	0x40010000

080099cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	021b      	lsls	r3, r3, #8
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	031b      	lsls	r3, r3, #12
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a10      	ldr	r2, [pc, #64]	; (8009a68 <TIM_OC4_SetConfig+0x9c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d109      	bne.n	8009a40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	019b      	lsls	r3, r3, #6
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	621a      	str	r2, [r3, #32]
}
 8009a5a:	bf00      	nop
 8009a5c:	371c      	adds	r7, #28
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40010000 	.word	0x40010000

08009a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	f023 0201 	bic.w	r2, r3, #1
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	011b      	lsls	r3, r3, #4
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f023 030a 	bic.w	r3, r3, #10
 8009aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	621a      	str	r2, [r3, #32]
}
 8009abe:	bf00      	nop
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b087      	sub	sp, #28
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	f023 0210 	bic.w	r2, r3, #16
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	031b      	lsls	r3, r3, #12
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	621a      	str	r2, [r3, #32]
}
 8009b1e:	bf00      	nop
 8009b20:	371c      	adds	r7, #28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f043 0307 	orr.w	r3, r3, #7
 8009b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	609a      	str	r2, [r3, #8]
}
 8009b54:	bf00      	nop
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	021a      	lsls	r2, r3, #8
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	609a      	str	r2, [r3, #8]
}
 8009b94:	bf00      	nop
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f003 031f 	and.w	r3, r3, #31
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a1a      	ldr	r2, [r3, #32]
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	43db      	mvns	r3, r3
 8009bc2:	401a      	ands	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a1a      	ldr	r2, [r3, #32]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f003 031f 	and.w	r3, r3, #31
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	621a      	str	r2, [r3, #32]
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d101      	bne.n	8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c00:	2302      	movs	r3, #2
 8009c02:	e050      	b.n	8009ca6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1c      	ldr	r2, [pc, #112]	; (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d018      	beq.n	8009c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c50:	d013      	beq.n	8009c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a18      	ldr	r2, [pc, #96]	; (8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00e      	beq.n	8009c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a16      	ldr	r2, [pc, #88]	; (8009cbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d009      	beq.n	8009c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a15      	ldr	r2, [pc, #84]	; (8009cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d004      	beq.n	8009c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d10c      	bne.n	8009c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40000400 	.word	0x40000400
 8009cbc:	40000800 	.word	0x40000800
 8009cc0:	40000c00 	.word	0x40000c00
 8009cc4:	40014000 	.word	0x40014000

08009cc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d101      	bne.n	8009ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e03d      	b.n	8009d60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e03f      	b.n	8009e26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fa fb50 	bl	8004460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2224      	movs	r2, #36	; 0x24
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68da      	ldr	r2, [r3, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fddf 	bl	800a99c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	691a      	ldr	r2, [r3, #16]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695a      	ldr	r2, [r3, #20]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b08a      	sub	sp, #40	; 0x28
 8009e32:	af02      	add	r7, sp, #8
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	603b      	str	r3, [r7, #0]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b20      	cmp	r3, #32
 8009e4c:	d17c      	bne.n	8009f48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <HAL_UART_Transmit+0x2c>
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e075      	b.n	8009f4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_UART_Transmit+0x3e>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e06e      	b.n	8009f4a <HAL_UART_Transmit+0x11c>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2221      	movs	r2, #33	; 0x21
 8009e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e82:	f7fb f98f 	bl	80051a4 <HAL_GetTick>
 8009e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	88fa      	ldrh	r2, [r7, #6]
 8009e8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	88fa      	ldrh	r2, [r7, #6]
 8009e92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9c:	d108      	bne.n	8009eb0 <HAL_UART_Transmit+0x82>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d104      	bne.n	8009eb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	e003      	b.n	8009eb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ec0:	e02a      	b.n	8009f18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2180      	movs	r1, #128	; 0x80
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 fb1f 	bl	800a510 <UART_WaitOnFlagUntilTimeout>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e036      	b.n	8009f4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ef0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	3302      	adds	r3, #2
 8009ef6:	61bb      	str	r3, [r7, #24]
 8009ef8:	e007      	b.n	8009f0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	781a      	ldrb	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	3301      	adds	r3, #1
 8009f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	3b01      	subs	r3, #1
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1cf      	bne.n	8009ec2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2140      	movs	r1, #64	; 0x40
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 faef 	bl	800a510 <UART_WaitOnFlagUntilTimeout>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e006      	b.n	8009f4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	e000      	b.n	8009f4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009f48:	2302      	movs	r3, #2
  }
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3720      	adds	r7, #32
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	d11d      	bne.n	8009fa8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d002      	beq.n	8009f78 <HAL_UART_Receive_IT+0x26>
 8009f72:	88fb      	ldrh	r3, [r7, #6]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e016      	b.n	8009faa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_UART_Receive_IT+0x38>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e00f      	b.n	8009faa <HAL_UART_Receive_IT+0x58>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68b9      	ldr	r1, [r7, #8]
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fb24 	bl	800a5ec <UART_Start_Receive_IT>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	e000      	b.n	8009faa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009fa8:	2302      	movs	r3, #2
  }
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b0ba      	sub	sp, #232	; 0xe8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fea:	f003 030f 	and.w	r3, r3, #15
 8009fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10f      	bne.n	800a01a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d009      	beq.n	800a01a <HAL_UART_IRQHandler+0x66>
 800a006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fc07 	bl	800a826 <UART_Receive_IT>
      return;
 800a018:	e256      	b.n	800a4c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a01a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 80de 	beq.w	800a1e0 <HAL_UART_IRQHandler+0x22c>
 800a024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d106      	bne.n	800a03e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a034:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 80d1 	beq.w	800a1e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00b      	beq.n	800a062 <HAL_UART_IRQHandler+0xae>
 800a04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	f043 0201 	orr.w	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <HAL_UART_IRQHandler+0xd2>
 800a06e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d005      	beq.n	800a086 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	f043 0202 	orr.w	r2, r3, #2
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <HAL_UART_IRQHandler+0xf6>
 800a092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d005      	beq.n	800a0aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	f043 0204 	orr.w	r2, r3, #4
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ae:	f003 0308 	and.w	r3, r3, #8
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d011      	beq.n	800a0da <HAL_UART_IRQHandler+0x126>
 800a0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ba:	f003 0320 	and.w	r3, r3, #32
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d105      	bne.n	800a0ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	f043 0208 	orr.w	r2, r3, #8
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 81ed 	beq.w	800a4be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d008      	beq.n	800a102 <HAL_UART_IRQHandler+0x14e>
 800a0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f4:	f003 0320 	and.w	r3, r3, #32
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fb92 	bl	800a826 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10c:	2b40      	cmp	r3, #64	; 0x40
 800a10e:	bf0c      	ite	eq
 800a110:	2301      	moveq	r3, #1
 800a112:	2300      	movne	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b00      	cmp	r3, #0
 800a124:	d103      	bne.n	800a12e <HAL_UART_IRQHandler+0x17a>
 800a126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d04f      	beq.n	800a1ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa9a 	bl	800a668 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13e:	2b40      	cmp	r3, #64	; 0x40
 800a140:	d141      	bne.n	800a1c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3314      	adds	r3, #20
 800a148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a15c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3314      	adds	r3, #20
 800a16a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a16e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a17a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1d9      	bne.n	800a142 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	2b00      	cmp	r3, #0
 800a194:	d013      	beq.n	800a1be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	4a7d      	ldr	r2, [pc, #500]	; (800a390 <HAL_UART_IRQHandler+0x3dc>)
 800a19c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fb fb04 	bl	80057b0 <HAL_DMA_Abort_IT>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d016      	beq.n	800a1dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1bc:	e00e      	b.n	800a1dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f990 	bl	800a4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c4:	e00a      	b.n	800a1dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f98c 	bl	800a4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1cc:	e006      	b.n	800a1dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f988 	bl	800a4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a1da:	e170      	b.n	800a4be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1dc:	bf00      	nop
    return;
 800a1de:	e16e      	b.n	800a4be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	f040 814a 	bne.w	800a47e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 8143 	beq.w	800a47e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1fc:	f003 0310 	and.w	r3, r3, #16
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 813c 	beq.w	800a47e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60bb      	str	r3, [r7, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	60bb      	str	r3, [r7, #8]
 800a21a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	f040 80b4 	bne.w	800a394 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 8140 	beq.w	800a4c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a24a:	429a      	cmp	r2, r3
 800a24c:	f080 8139 	bcs.w	800a4c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a256:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a262:	f000 8088 	beq.w	800a376 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	330c      	adds	r3, #12
 800a26c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a27c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	330c      	adds	r3, #12
 800a28e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a29e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a2a2:	e841 2300 	strex	r3, r2, [r1]
 800a2a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a2aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1d9      	bne.n	800a266 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3314      	adds	r3, #20
 800a2b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a2c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2c4:	f023 0301 	bic.w	r3, r3, #1
 800a2c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a2d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a2da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a2de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a2e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e1      	bne.n	800a2b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3314      	adds	r3, #20
 800a2f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3314      	adds	r3, #20
 800a30e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a312:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a314:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a316:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a318:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a31a:	e841 2300 	strex	r3, r2, [r1]
 800a31e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e3      	bne.n	800a2ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	330c      	adds	r3, #12
 800a33a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33e:	e853 3f00 	ldrex	r3, [r3]
 800a342:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a346:	f023 0310 	bic.w	r3, r3, #16
 800a34a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	330c      	adds	r3, #12
 800a354:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a358:	65ba      	str	r2, [r7, #88]	; 0x58
 800a35a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a35e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a360:	e841 2300 	strex	r3, r2, [r1]
 800a364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e3      	bne.n	800a334 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	4618      	mov	r0, r3
 800a372:	f7fb f9ad 	bl	80056d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a37e:	b29b      	uxth	r3, r3
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	b29b      	uxth	r3, r3
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f8b6 	bl	800a4f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a38c:	e099      	b.n	800a4c2 <HAL_UART_IRQHandler+0x50e>
 800a38e:	bf00      	nop
 800a390:	0800a72f 	.word	0x0800a72f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 808b 	beq.w	800a4c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a3b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 8086 	beq.w	800a4c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	330c      	adds	r3, #12
 800a3c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	330c      	adds	r3, #12
 800a3da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a3de:	647a      	str	r2, [r7, #68]	; 0x44
 800a3e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e3      	bne.n	800a3ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3314      	adds	r3, #20
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	623b      	str	r3, [r7, #32]
   return(result);
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	f023 0301 	bic.w	r3, r3, #1
 800a408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3314      	adds	r3, #20
 800a412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a416:	633a      	str	r2, [r7, #48]	; 0x30
 800a418:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e3      	bne.n	800a3f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	330c      	adds	r3, #12
 800a43e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	60fb      	str	r3, [r7, #12]
   return(result);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0310 	bic.w	r3, r3, #16
 800a44e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	330c      	adds	r3, #12
 800a458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a45c:	61fa      	str	r2, [r7, #28]
 800a45e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a460:	69b9      	ldr	r1, [r7, #24]
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	e841 2300 	strex	r3, r2, [r1]
 800a468:	617b      	str	r3, [r7, #20]
   return(result);
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e3      	bne.n	800a438 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f83e 	bl	800a4f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a47c:	e023      	b.n	800a4c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <HAL_UART_IRQHandler+0x4ea>
 800a48a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f95d 	bl	800a756 <UART_Transmit_IT>
    return;
 800a49c:	e014      	b.n	800a4c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00e      	beq.n	800a4c8 <HAL_UART_IRQHandler+0x514>
 800a4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d008      	beq.n	800a4c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f99d 	bl	800a7f6 <UART_EndTransmit_IT>
    return;
 800a4bc:	e004      	b.n	800a4c8 <HAL_UART_IRQHandler+0x514>
    return;
 800a4be:	bf00      	nop
 800a4c0:	e002      	b.n	800a4c8 <HAL_UART_IRQHandler+0x514>
      return;
 800a4c2:	bf00      	nop
 800a4c4:	e000      	b.n	800a4c8 <HAL_UART_IRQHandler+0x514>
      return;
 800a4c6:	bf00      	nop
  }
}
 800a4c8:	37e8      	adds	r7, #232	; 0xe8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop

0800a4d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b090      	sub	sp, #64	; 0x40
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	4613      	mov	r3, r2
 800a51e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a520:	e050      	b.n	800a5c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a528:	d04c      	beq.n	800a5c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d007      	beq.n	800a540 <UART_WaitOnFlagUntilTimeout+0x30>
 800a530:	f7fa fe38 	bl	80051a4 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d241      	bcs.n	800a5c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	e853 3f00 	ldrex	r3, [r3]
 800a54e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	330c      	adds	r3, #12
 800a55e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a560:	637a      	str	r2, [r7, #52]	; 0x34
 800a562:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a568:	e841 2300 	strex	r3, r2, [r1]
 800a56c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1e5      	bne.n	800a540 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3314      	adds	r3, #20
 800a57a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	613b      	str	r3, [r7, #16]
   return(result);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f023 0301 	bic.w	r3, r3, #1
 800a58a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3314      	adds	r3, #20
 800a592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a594:	623a      	str	r2, [r7, #32]
 800a596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	69f9      	ldr	r1, [r7, #28]
 800a59a:	6a3a      	ldr	r2, [r7, #32]
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e5      	bne.n	800a574 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e00f      	b.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2301      	moveq	r3, #1
 800a5d6:	2300      	movne	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	461a      	mov	r2, r3
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d09f      	beq.n	800a522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3740      	adds	r7, #64	; 0x40
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	88fa      	ldrh	r2, [r7, #6]
 800a604:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	88fa      	ldrh	r2, [r7, #6]
 800a60a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2222      	movs	r2, #34	; 0x22
 800a616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a638:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	695a      	ldr	r2, [r3, #20]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f042 0201 	orr.w	r2, r2, #1
 800a648:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f042 0220 	orr.w	r2, r2, #32
 800a658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a668:	b480      	push	{r7}
 800a66a:	b095      	sub	sp, #84	; 0x54
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	330c      	adds	r3, #12
 800a676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67a:	e853 3f00 	ldrex	r3, [r3]
 800a67e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a686:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	330c      	adds	r3, #12
 800a68e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a690:	643a      	str	r2, [r7, #64]	; 0x40
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a698:	e841 2300 	strex	r3, r2, [r1]
 800a69c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1e5      	bne.n	800a670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3314      	adds	r3, #20
 800a6aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f023 0301 	bic.w	r3, r3, #1
 800a6ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e5      	bne.n	800a6a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d119      	bne.n	800a714 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	330c      	adds	r3, #12
 800a6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	e853 3f00 	ldrex	r3, [r3]
 800a6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f023 0310 	bic.w	r3, r3, #16
 800a6f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a700:	61ba      	str	r2, [r7, #24]
 800a702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a704:	6979      	ldr	r1, [r7, #20]
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	e841 2300 	strex	r3, r2, [r1]
 800a70c:	613b      	str	r3, [r7, #16]
   return(result);
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e5      	bne.n	800a6e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2220      	movs	r2, #32
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a722:	bf00      	nop
 800a724:	3754      	adds	r7, #84	; 0x54
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7ff fecb 	bl	800a4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a74e:	bf00      	nop
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a756:	b480      	push	{r7}
 800a758:	b085      	sub	sp, #20
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b21      	cmp	r3, #33	; 0x21
 800a768:	d13e      	bne.n	800a7e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a772:	d114      	bne.n	800a79e <UART_Transmit_IT+0x48>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d110      	bne.n	800a79e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a790:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	1c9a      	adds	r2, r3, #2
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	621a      	str	r2, [r3, #32]
 800a79c:	e008      	b.n	800a7b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	1c59      	adds	r1, r3, #1
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	6211      	str	r1, [r2, #32]
 800a7a8:	781a      	ldrb	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10f      	bne.n	800a7e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	e000      	b.n	800a7ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a7e8:	2302      	movs	r3, #2
  }
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a80c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff fe5a 	bl	800a4d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b08c      	sub	sp, #48	; 0x30
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b22      	cmp	r3, #34	; 0x22
 800a838:	f040 80ab 	bne.w	800a992 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a844:	d117      	bne.n	800a876 <UART_Receive_IT+0x50>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d113      	bne.n	800a876 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a864:	b29a      	uxth	r2, r3
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86e:	1c9a      	adds	r2, r3, #2
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	629a      	str	r2, [r3, #40]	; 0x28
 800a874:	e026      	b.n	800a8c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a888:	d007      	beq.n	800a89a <UART_Receive_IT+0x74>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <UART_Receive_IT+0x82>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	701a      	strb	r2, [r3, #0]
 800a8a6:	e008      	b.n	800a8ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d15a      	bne.n	800a98e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f022 0220 	bic.w	r2, r2, #32
 800a8e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	695a      	ldr	r2, [r3, #20]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0201 	bic.w	r2, r2, #1
 800a906:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a914:	2b01      	cmp	r3, #1
 800a916:	d135      	bne.n	800a984 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	330c      	adds	r3, #12
 800a924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	e853 3f00 	ldrex	r3, [r3]
 800a92c:	613b      	str	r3, [r7, #16]
   return(result);
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f023 0310 	bic.w	r3, r3, #16
 800a934:	627b      	str	r3, [r7, #36]	; 0x24
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	330c      	adds	r3, #12
 800a93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a93e:	623a      	str	r2, [r7, #32]
 800a940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a942:	69f9      	ldr	r1, [r7, #28]
 800a944:	6a3a      	ldr	r2, [r7, #32]
 800a946:	e841 2300 	strex	r3, r2, [r1]
 800a94a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1e5      	bne.n	800a91e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0310 	and.w	r3, r3, #16
 800a95c:	2b10      	cmp	r3, #16
 800a95e:	d10a      	bne.n	800a976 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a960:	2300      	movs	r3, #0
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff fdbb 	bl	800a4f8 <HAL_UARTEx_RxEventCallback>
 800a982:	e002      	b.n	800a98a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7f7 fd05 	bl	8002394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	e002      	b.n	800a994 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	e000      	b.n	800a994 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a992:	2302      	movs	r3, #2
  }
}
 800a994:	4618      	mov	r0, r3
 800a996:	3730      	adds	r7, #48	; 0x30
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a99c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9a0:	b0c0      	sub	sp, #256	; 0x100
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b8:	68d9      	ldr	r1, [r3, #12]
 800a9ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	ea40 0301 	orr.w	r3, r0, r1
 800a9c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a9f4:	f021 010c 	bic.w	r1, r1, #12
 800a9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa02:	430b      	orrs	r3, r1
 800aa04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aa12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa16:	6999      	ldr	r1, [r3, #24]
 800aa18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	ea40 0301 	orr.w	r3, r0, r1
 800aa22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b8f      	ldr	r3, [pc, #572]	; (800ac68 <UART_SetConfig+0x2cc>)
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d005      	beq.n	800aa3c <UART_SetConfig+0xa0>
 800aa30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	4b8d      	ldr	r3, [pc, #564]	; (800ac6c <UART_SetConfig+0x2d0>)
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d104      	bne.n	800aa46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa3c:	f7fd fad6 	bl	8007fec <HAL_RCC_GetPCLK2Freq>
 800aa40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aa44:	e003      	b.n	800aa4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa46:	f7fd fabd 	bl	8007fc4 <HAL_RCC_GetPCLK1Freq>
 800aa4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa58:	f040 810c 	bne.w	800ac74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa60:	2200      	movs	r2, #0
 800aa62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aa6e:	4622      	mov	r2, r4
 800aa70:	462b      	mov	r3, r5
 800aa72:	1891      	adds	r1, r2, r2
 800aa74:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa76:	415b      	adcs	r3, r3
 800aa78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa7e:	4621      	mov	r1, r4
 800aa80:	eb12 0801 	adds.w	r8, r2, r1
 800aa84:	4629      	mov	r1, r5
 800aa86:	eb43 0901 	adc.w	r9, r3, r1
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	f04f 0300 	mov.w	r3, #0
 800aa92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa9e:	4690      	mov	r8, r2
 800aaa0:	4699      	mov	r9, r3
 800aaa2:	4623      	mov	r3, r4
 800aaa4:	eb18 0303 	adds.w	r3, r8, r3
 800aaa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aaac:	462b      	mov	r3, r5
 800aaae:	eb49 0303 	adc.w	r3, r9, r3
 800aab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aac2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aaca:	460b      	mov	r3, r1
 800aacc:	18db      	adds	r3, r3, r3
 800aace:	653b      	str	r3, [r7, #80]	; 0x50
 800aad0:	4613      	mov	r3, r2
 800aad2:	eb42 0303 	adc.w	r3, r2, r3
 800aad6:	657b      	str	r3, [r7, #84]	; 0x54
 800aad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aadc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aae0:	f7f6 f87a 	bl	8000bd8 <__aeabi_uldivmod>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4b61      	ldr	r3, [pc, #388]	; (800ac70 <UART_SetConfig+0x2d4>)
 800aaea:	fba3 2302 	umull	r2, r3, r3, r2
 800aaee:	095b      	lsrs	r3, r3, #5
 800aaf0:	011c      	lsls	r4, r3, #4
 800aaf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aafc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ab00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ab04:	4642      	mov	r2, r8
 800ab06:	464b      	mov	r3, r9
 800ab08:	1891      	adds	r1, r2, r2
 800ab0a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ab0c:	415b      	adcs	r3, r3
 800ab0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ab14:	4641      	mov	r1, r8
 800ab16:	eb12 0a01 	adds.w	sl, r2, r1
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	eb43 0b01 	adc.w	fp, r3, r1
 800ab20:	f04f 0200 	mov.w	r2, #0
 800ab24:	f04f 0300 	mov.w	r3, #0
 800ab28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab34:	4692      	mov	sl, r2
 800ab36:	469b      	mov	fp, r3
 800ab38:	4643      	mov	r3, r8
 800ab3a:	eb1a 0303 	adds.w	r3, sl, r3
 800ab3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab42:	464b      	mov	r3, r9
 800ab44:	eb4b 0303 	adc.w	r3, fp, r3
 800ab48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab60:	460b      	mov	r3, r1
 800ab62:	18db      	adds	r3, r3, r3
 800ab64:	643b      	str	r3, [r7, #64]	; 0x40
 800ab66:	4613      	mov	r3, r2
 800ab68:	eb42 0303 	adc.w	r3, r2, r3
 800ab6c:	647b      	str	r3, [r7, #68]	; 0x44
 800ab6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ab76:	f7f6 f82f 	bl	8000bd8 <__aeabi_uldivmod>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4b3b      	ldr	r3, [pc, #236]	; (800ac70 <UART_SetConfig+0x2d4>)
 800ab82:	fba3 2301 	umull	r2, r3, r3, r1
 800ab86:	095b      	lsrs	r3, r3, #5
 800ab88:	2264      	movs	r2, #100	; 0x64
 800ab8a:	fb02 f303 	mul.w	r3, r2, r3
 800ab8e:	1acb      	subs	r3, r1, r3
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ab96:	4b36      	ldr	r3, [pc, #216]	; (800ac70 <UART_SetConfig+0x2d4>)
 800ab98:	fba3 2302 	umull	r2, r3, r3, r2
 800ab9c:	095b      	lsrs	r3, r3, #5
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aba4:	441c      	add	r4, r3
 800aba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abaa:	2200      	movs	r2, #0
 800abac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800abb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800abb8:	4642      	mov	r2, r8
 800abba:	464b      	mov	r3, r9
 800abbc:	1891      	adds	r1, r2, r2
 800abbe:	63b9      	str	r1, [r7, #56]	; 0x38
 800abc0:	415b      	adcs	r3, r3
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800abc8:	4641      	mov	r1, r8
 800abca:	1851      	adds	r1, r2, r1
 800abcc:	6339      	str	r1, [r7, #48]	; 0x30
 800abce:	4649      	mov	r1, r9
 800abd0:	414b      	adcs	r3, r1
 800abd2:	637b      	str	r3, [r7, #52]	; 0x34
 800abd4:	f04f 0200 	mov.w	r2, #0
 800abd8:	f04f 0300 	mov.w	r3, #0
 800abdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800abe0:	4659      	mov	r1, fp
 800abe2:	00cb      	lsls	r3, r1, #3
 800abe4:	4651      	mov	r1, sl
 800abe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abea:	4651      	mov	r1, sl
 800abec:	00ca      	lsls	r2, r1, #3
 800abee:	4610      	mov	r0, r2
 800abf0:	4619      	mov	r1, r3
 800abf2:	4603      	mov	r3, r0
 800abf4:	4642      	mov	r2, r8
 800abf6:	189b      	adds	r3, r3, r2
 800abf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abfc:	464b      	mov	r3, r9
 800abfe:	460a      	mov	r2, r1
 800ac00:	eb42 0303 	adc.w	r3, r2, r3
 800ac04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ac14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ac18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	18db      	adds	r3, r3, r3
 800ac20:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac22:	4613      	mov	r3, r2
 800ac24:	eb42 0303 	adc.w	r3, r2, r3
 800ac28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ac2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ac32:	f7f5 ffd1 	bl	8000bd8 <__aeabi_uldivmod>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4b0d      	ldr	r3, [pc, #52]	; (800ac70 <UART_SetConfig+0x2d4>)
 800ac3c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac40:	095b      	lsrs	r3, r3, #5
 800ac42:	2164      	movs	r1, #100	; 0x64
 800ac44:	fb01 f303 	mul.w	r3, r1, r3
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	3332      	adds	r3, #50	; 0x32
 800ac4e:	4a08      	ldr	r2, [pc, #32]	; (800ac70 <UART_SetConfig+0x2d4>)
 800ac50:	fba2 2303 	umull	r2, r3, r2, r3
 800ac54:	095b      	lsrs	r3, r3, #5
 800ac56:	f003 0207 	and.w	r2, r3, #7
 800ac5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4422      	add	r2, r4
 800ac62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac64:	e105      	b.n	800ae72 <UART_SetConfig+0x4d6>
 800ac66:	bf00      	nop
 800ac68:	40011000 	.word	0x40011000
 800ac6c:	40011400 	.word	0x40011400
 800ac70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ac86:	4642      	mov	r2, r8
 800ac88:	464b      	mov	r3, r9
 800ac8a:	1891      	adds	r1, r2, r2
 800ac8c:	6239      	str	r1, [r7, #32]
 800ac8e:	415b      	adcs	r3, r3
 800ac90:	627b      	str	r3, [r7, #36]	; 0x24
 800ac92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac96:	4641      	mov	r1, r8
 800ac98:	1854      	adds	r4, r2, r1
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	eb43 0501 	adc.w	r5, r3, r1
 800aca0:	f04f 0200 	mov.w	r2, #0
 800aca4:	f04f 0300 	mov.w	r3, #0
 800aca8:	00eb      	lsls	r3, r5, #3
 800acaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800acae:	00e2      	lsls	r2, r4, #3
 800acb0:	4614      	mov	r4, r2
 800acb2:	461d      	mov	r5, r3
 800acb4:	4643      	mov	r3, r8
 800acb6:	18e3      	adds	r3, r4, r3
 800acb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800acbc:	464b      	mov	r3, r9
 800acbe:	eb45 0303 	adc.w	r3, r5, r3
 800acc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800acc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800acd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	f04f 0300 	mov.w	r3, #0
 800acde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ace2:	4629      	mov	r1, r5
 800ace4:	008b      	lsls	r3, r1, #2
 800ace6:	4621      	mov	r1, r4
 800ace8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acec:	4621      	mov	r1, r4
 800acee:	008a      	lsls	r2, r1, #2
 800acf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800acf4:	f7f5 ff70 	bl	8000bd8 <__aeabi_uldivmod>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4b60      	ldr	r3, [pc, #384]	; (800ae80 <UART_SetConfig+0x4e4>)
 800acfe:	fba3 2302 	umull	r2, r3, r3, r2
 800ad02:	095b      	lsrs	r3, r3, #5
 800ad04:	011c      	lsls	r4, r3, #4
 800ad06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ad10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	1891      	adds	r1, r2, r2
 800ad1e:	61b9      	str	r1, [r7, #24]
 800ad20:	415b      	adcs	r3, r3
 800ad22:	61fb      	str	r3, [r7, #28]
 800ad24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad28:	4641      	mov	r1, r8
 800ad2a:	1851      	adds	r1, r2, r1
 800ad2c:	6139      	str	r1, [r7, #16]
 800ad2e:	4649      	mov	r1, r9
 800ad30:	414b      	adcs	r3, r1
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	f04f 0200 	mov.w	r2, #0
 800ad38:	f04f 0300 	mov.w	r3, #0
 800ad3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad40:	4659      	mov	r1, fp
 800ad42:	00cb      	lsls	r3, r1, #3
 800ad44:	4651      	mov	r1, sl
 800ad46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad4a:	4651      	mov	r1, sl
 800ad4c:	00ca      	lsls	r2, r1, #3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	4619      	mov	r1, r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	4642      	mov	r2, r8
 800ad56:	189b      	adds	r3, r3, r2
 800ad58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	460a      	mov	r2, r1
 800ad60:	eb42 0303 	adc.w	r3, r2, r3
 800ad64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad72:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad74:	f04f 0200 	mov.w	r2, #0
 800ad78:	f04f 0300 	mov.w	r3, #0
 800ad7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ad80:	4649      	mov	r1, r9
 800ad82:	008b      	lsls	r3, r1, #2
 800ad84:	4641      	mov	r1, r8
 800ad86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad8a:	4641      	mov	r1, r8
 800ad8c:	008a      	lsls	r2, r1, #2
 800ad8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad92:	f7f5 ff21 	bl	8000bd8 <__aeabi_uldivmod>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4b39      	ldr	r3, [pc, #228]	; (800ae80 <UART_SetConfig+0x4e4>)
 800ad9c:	fba3 1302 	umull	r1, r3, r3, r2
 800ada0:	095b      	lsrs	r3, r3, #5
 800ada2:	2164      	movs	r1, #100	; 0x64
 800ada4:	fb01 f303 	mul.w	r3, r1, r3
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	3332      	adds	r3, #50	; 0x32
 800adae:	4a34      	ldr	r2, [pc, #208]	; (800ae80 <UART_SetConfig+0x4e4>)
 800adb0:	fba2 2303 	umull	r2, r3, r2, r3
 800adb4:	095b      	lsrs	r3, r3, #5
 800adb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adba:	441c      	add	r4, r3
 800adbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adc0:	2200      	movs	r2, #0
 800adc2:	673b      	str	r3, [r7, #112]	; 0x70
 800adc4:	677a      	str	r2, [r7, #116]	; 0x74
 800adc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800adca:	4642      	mov	r2, r8
 800adcc:	464b      	mov	r3, r9
 800adce:	1891      	adds	r1, r2, r2
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	415b      	adcs	r3, r3
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800adda:	4641      	mov	r1, r8
 800addc:	1851      	adds	r1, r2, r1
 800adde:	6039      	str	r1, [r7, #0]
 800ade0:	4649      	mov	r1, r9
 800ade2:	414b      	adcs	r3, r1
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	f04f 0200 	mov.w	r2, #0
 800adea:	f04f 0300 	mov.w	r3, #0
 800adee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800adf2:	4659      	mov	r1, fp
 800adf4:	00cb      	lsls	r3, r1, #3
 800adf6:	4651      	mov	r1, sl
 800adf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adfc:	4651      	mov	r1, sl
 800adfe:	00ca      	lsls	r2, r1, #3
 800ae00:	4610      	mov	r0, r2
 800ae02:	4619      	mov	r1, r3
 800ae04:	4603      	mov	r3, r0
 800ae06:	4642      	mov	r2, r8
 800ae08:	189b      	adds	r3, r3, r2
 800ae0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	460a      	mov	r2, r1
 800ae10:	eb42 0303 	adc.w	r3, r2, r3
 800ae14:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	663b      	str	r3, [r7, #96]	; 0x60
 800ae20:	667a      	str	r2, [r7, #100]	; 0x64
 800ae22:	f04f 0200 	mov.w	r2, #0
 800ae26:	f04f 0300 	mov.w	r3, #0
 800ae2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ae2e:	4649      	mov	r1, r9
 800ae30:	008b      	lsls	r3, r1, #2
 800ae32:	4641      	mov	r1, r8
 800ae34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae38:	4641      	mov	r1, r8
 800ae3a:	008a      	lsls	r2, r1, #2
 800ae3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ae40:	f7f5 feca 	bl	8000bd8 <__aeabi_uldivmod>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <UART_SetConfig+0x4e4>)
 800ae4a:	fba3 1302 	umull	r1, r3, r3, r2
 800ae4e:	095b      	lsrs	r3, r3, #5
 800ae50:	2164      	movs	r1, #100	; 0x64
 800ae52:	fb01 f303 	mul.w	r3, r1, r3
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	3332      	adds	r3, #50	; 0x32
 800ae5c:	4a08      	ldr	r2, [pc, #32]	; (800ae80 <UART_SetConfig+0x4e4>)
 800ae5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae62:	095b      	lsrs	r3, r3, #5
 800ae64:	f003 020f 	and.w	r2, r3, #15
 800ae68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4422      	add	r2, r4
 800ae70:	609a      	str	r2, [r3, #8]
}
 800ae72:	bf00      	nop
 800ae74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae7e:	bf00      	nop
 800ae80:	51eb851f 	.word	0x51eb851f

0800ae84 <atoi>:
 800ae84:	220a      	movs	r2, #10
 800ae86:	2100      	movs	r1, #0
 800ae88:	f000 beda 	b.w	800bc40 <strtol>

0800ae8c <__errno>:
 800ae8c:	4b01      	ldr	r3, [pc, #4]	; (800ae94 <__errno+0x8>)
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	200002f0 	.word	0x200002f0

0800ae98 <__libc_init_array>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	4d0d      	ldr	r5, [pc, #52]	; (800aed0 <__libc_init_array+0x38>)
 800ae9c:	4c0d      	ldr	r4, [pc, #52]	; (800aed4 <__libc_init_array+0x3c>)
 800ae9e:	1b64      	subs	r4, r4, r5
 800aea0:	10a4      	asrs	r4, r4, #2
 800aea2:	2600      	movs	r6, #0
 800aea4:	42a6      	cmp	r6, r4
 800aea6:	d109      	bne.n	800aebc <__libc_init_array+0x24>
 800aea8:	4d0b      	ldr	r5, [pc, #44]	; (800aed8 <__libc_init_array+0x40>)
 800aeaa:	4c0c      	ldr	r4, [pc, #48]	; (800aedc <__libc_init_array+0x44>)
 800aeac:	f003 ff4c 	bl	800ed48 <_init>
 800aeb0:	1b64      	subs	r4, r4, r5
 800aeb2:	10a4      	asrs	r4, r4, #2
 800aeb4:	2600      	movs	r6, #0
 800aeb6:	42a6      	cmp	r6, r4
 800aeb8:	d105      	bne.n	800aec6 <__libc_init_array+0x2e>
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec0:	4798      	blx	r3
 800aec2:	3601      	adds	r6, #1
 800aec4:	e7ee      	b.n	800aea4 <__libc_init_array+0xc>
 800aec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeca:	4798      	blx	r3
 800aecc:	3601      	adds	r6, #1
 800aece:	e7f2      	b.n	800aeb6 <__libc_init_array+0x1e>
 800aed0:	08010360 	.word	0x08010360
 800aed4:	08010360 	.word	0x08010360
 800aed8:	08010360 	.word	0x08010360
 800aedc:	08010364 	.word	0x08010364

0800aee0 <malloc>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <malloc+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f000 b87f 	b.w	800afe8 <_malloc_r>
 800aeea:	bf00      	nop
 800aeec:	200002f0 	.word	0x200002f0

0800aef0 <free>:
 800aef0:	4b02      	ldr	r3, [pc, #8]	; (800aefc <free+0xc>)
 800aef2:	4601      	mov	r1, r0
 800aef4:	6818      	ldr	r0, [r3, #0]
 800aef6:	f000 b80b 	b.w	800af10 <_free_r>
 800aefa:	bf00      	nop
 800aefc:	200002f0 	.word	0x200002f0

0800af00 <memset>:
 800af00:	4402      	add	r2, r0
 800af02:	4603      	mov	r3, r0
 800af04:	4293      	cmp	r3, r2
 800af06:	d100      	bne.n	800af0a <memset+0xa>
 800af08:	4770      	bx	lr
 800af0a:	f803 1b01 	strb.w	r1, [r3], #1
 800af0e:	e7f9      	b.n	800af04 <memset+0x4>

0800af10 <_free_r>:
 800af10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af12:	2900      	cmp	r1, #0
 800af14:	d044      	beq.n	800afa0 <_free_r+0x90>
 800af16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af1a:	9001      	str	r0, [sp, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f1a1 0404 	sub.w	r4, r1, #4
 800af22:	bfb8      	it	lt
 800af24:	18e4      	addlt	r4, r4, r3
 800af26:	f001 fd55 	bl	800c9d4 <__malloc_lock>
 800af2a:	4a1e      	ldr	r2, [pc, #120]	; (800afa4 <_free_r+0x94>)
 800af2c:	9801      	ldr	r0, [sp, #4]
 800af2e:	6813      	ldr	r3, [r2, #0]
 800af30:	b933      	cbnz	r3, 800af40 <_free_r+0x30>
 800af32:	6063      	str	r3, [r4, #4]
 800af34:	6014      	str	r4, [r2, #0]
 800af36:	b003      	add	sp, #12
 800af38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af3c:	f001 bd50 	b.w	800c9e0 <__malloc_unlock>
 800af40:	42a3      	cmp	r3, r4
 800af42:	d908      	bls.n	800af56 <_free_r+0x46>
 800af44:	6825      	ldr	r5, [r4, #0]
 800af46:	1961      	adds	r1, r4, r5
 800af48:	428b      	cmp	r3, r1
 800af4a:	bf01      	itttt	eq
 800af4c:	6819      	ldreq	r1, [r3, #0]
 800af4e:	685b      	ldreq	r3, [r3, #4]
 800af50:	1949      	addeq	r1, r1, r5
 800af52:	6021      	streq	r1, [r4, #0]
 800af54:	e7ed      	b.n	800af32 <_free_r+0x22>
 800af56:	461a      	mov	r2, r3
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	b10b      	cbz	r3, 800af60 <_free_r+0x50>
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	d9fa      	bls.n	800af56 <_free_r+0x46>
 800af60:	6811      	ldr	r1, [r2, #0]
 800af62:	1855      	adds	r5, r2, r1
 800af64:	42a5      	cmp	r5, r4
 800af66:	d10b      	bne.n	800af80 <_free_r+0x70>
 800af68:	6824      	ldr	r4, [r4, #0]
 800af6a:	4421      	add	r1, r4
 800af6c:	1854      	adds	r4, r2, r1
 800af6e:	42a3      	cmp	r3, r4
 800af70:	6011      	str	r1, [r2, #0]
 800af72:	d1e0      	bne.n	800af36 <_free_r+0x26>
 800af74:	681c      	ldr	r4, [r3, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	6053      	str	r3, [r2, #4]
 800af7a:	4421      	add	r1, r4
 800af7c:	6011      	str	r1, [r2, #0]
 800af7e:	e7da      	b.n	800af36 <_free_r+0x26>
 800af80:	d902      	bls.n	800af88 <_free_r+0x78>
 800af82:	230c      	movs	r3, #12
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	e7d6      	b.n	800af36 <_free_r+0x26>
 800af88:	6825      	ldr	r5, [r4, #0]
 800af8a:	1961      	adds	r1, r4, r5
 800af8c:	428b      	cmp	r3, r1
 800af8e:	bf04      	itt	eq
 800af90:	6819      	ldreq	r1, [r3, #0]
 800af92:	685b      	ldreq	r3, [r3, #4]
 800af94:	6063      	str	r3, [r4, #4]
 800af96:	bf04      	itt	eq
 800af98:	1949      	addeq	r1, r1, r5
 800af9a:	6021      	streq	r1, [r4, #0]
 800af9c:	6054      	str	r4, [r2, #4]
 800af9e:	e7ca      	b.n	800af36 <_free_r+0x26>
 800afa0:	b003      	add	sp, #12
 800afa2:	bd30      	pop	{r4, r5, pc}
 800afa4:	20000bc0 	.word	0x20000bc0

0800afa8 <sbrk_aligned>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	4e0e      	ldr	r6, [pc, #56]	; (800afe4 <sbrk_aligned+0x3c>)
 800afac:	460c      	mov	r4, r1
 800afae:	6831      	ldr	r1, [r6, #0]
 800afb0:	4605      	mov	r5, r0
 800afb2:	b911      	cbnz	r1, 800afba <sbrk_aligned+0x12>
 800afb4:	f000 fcf6 	bl	800b9a4 <_sbrk_r>
 800afb8:	6030      	str	r0, [r6, #0]
 800afba:	4621      	mov	r1, r4
 800afbc:	4628      	mov	r0, r5
 800afbe:	f000 fcf1 	bl	800b9a4 <_sbrk_r>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	d00a      	beq.n	800afdc <sbrk_aligned+0x34>
 800afc6:	1cc4      	adds	r4, r0, #3
 800afc8:	f024 0403 	bic.w	r4, r4, #3
 800afcc:	42a0      	cmp	r0, r4
 800afce:	d007      	beq.n	800afe0 <sbrk_aligned+0x38>
 800afd0:	1a21      	subs	r1, r4, r0
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 fce6 	bl	800b9a4 <_sbrk_r>
 800afd8:	3001      	adds	r0, #1
 800afda:	d101      	bne.n	800afe0 <sbrk_aligned+0x38>
 800afdc:	f04f 34ff 	mov.w	r4, #4294967295
 800afe0:	4620      	mov	r0, r4
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	20000bc4 	.word	0x20000bc4

0800afe8 <_malloc_r>:
 800afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afec:	1ccd      	adds	r5, r1, #3
 800afee:	f025 0503 	bic.w	r5, r5, #3
 800aff2:	3508      	adds	r5, #8
 800aff4:	2d0c      	cmp	r5, #12
 800aff6:	bf38      	it	cc
 800aff8:	250c      	movcc	r5, #12
 800affa:	2d00      	cmp	r5, #0
 800affc:	4607      	mov	r7, r0
 800affe:	db01      	blt.n	800b004 <_malloc_r+0x1c>
 800b000:	42a9      	cmp	r1, r5
 800b002:	d905      	bls.n	800b010 <_malloc_r+0x28>
 800b004:	230c      	movs	r3, #12
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	2600      	movs	r6, #0
 800b00a:	4630      	mov	r0, r6
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	4e2e      	ldr	r6, [pc, #184]	; (800b0cc <_malloc_r+0xe4>)
 800b012:	f001 fcdf 	bl	800c9d4 <__malloc_lock>
 800b016:	6833      	ldr	r3, [r6, #0]
 800b018:	461c      	mov	r4, r3
 800b01a:	bb34      	cbnz	r4, 800b06a <_malloc_r+0x82>
 800b01c:	4629      	mov	r1, r5
 800b01e:	4638      	mov	r0, r7
 800b020:	f7ff ffc2 	bl	800afa8 <sbrk_aligned>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	4604      	mov	r4, r0
 800b028:	d14d      	bne.n	800b0c6 <_malloc_r+0xde>
 800b02a:	6834      	ldr	r4, [r6, #0]
 800b02c:	4626      	mov	r6, r4
 800b02e:	2e00      	cmp	r6, #0
 800b030:	d140      	bne.n	800b0b4 <_malloc_r+0xcc>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	4631      	mov	r1, r6
 800b036:	4638      	mov	r0, r7
 800b038:	eb04 0803 	add.w	r8, r4, r3
 800b03c:	f000 fcb2 	bl	800b9a4 <_sbrk_r>
 800b040:	4580      	cmp	r8, r0
 800b042:	d13a      	bne.n	800b0ba <_malloc_r+0xd2>
 800b044:	6821      	ldr	r1, [r4, #0]
 800b046:	3503      	adds	r5, #3
 800b048:	1a6d      	subs	r5, r5, r1
 800b04a:	f025 0503 	bic.w	r5, r5, #3
 800b04e:	3508      	adds	r5, #8
 800b050:	2d0c      	cmp	r5, #12
 800b052:	bf38      	it	cc
 800b054:	250c      	movcc	r5, #12
 800b056:	4629      	mov	r1, r5
 800b058:	4638      	mov	r0, r7
 800b05a:	f7ff ffa5 	bl	800afa8 <sbrk_aligned>
 800b05e:	3001      	adds	r0, #1
 800b060:	d02b      	beq.n	800b0ba <_malloc_r+0xd2>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	442b      	add	r3, r5
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	e00e      	b.n	800b088 <_malloc_r+0xa0>
 800b06a:	6822      	ldr	r2, [r4, #0]
 800b06c:	1b52      	subs	r2, r2, r5
 800b06e:	d41e      	bmi.n	800b0ae <_malloc_r+0xc6>
 800b070:	2a0b      	cmp	r2, #11
 800b072:	d916      	bls.n	800b0a2 <_malloc_r+0xba>
 800b074:	1961      	adds	r1, r4, r5
 800b076:	42a3      	cmp	r3, r4
 800b078:	6025      	str	r5, [r4, #0]
 800b07a:	bf18      	it	ne
 800b07c:	6059      	strne	r1, [r3, #4]
 800b07e:	6863      	ldr	r3, [r4, #4]
 800b080:	bf08      	it	eq
 800b082:	6031      	streq	r1, [r6, #0]
 800b084:	5162      	str	r2, [r4, r5]
 800b086:	604b      	str	r3, [r1, #4]
 800b088:	4638      	mov	r0, r7
 800b08a:	f104 060b 	add.w	r6, r4, #11
 800b08e:	f001 fca7 	bl	800c9e0 <__malloc_unlock>
 800b092:	f026 0607 	bic.w	r6, r6, #7
 800b096:	1d23      	adds	r3, r4, #4
 800b098:	1af2      	subs	r2, r6, r3
 800b09a:	d0b6      	beq.n	800b00a <_malloc_r+0x22>
 800b09c:	1b9b      	subs	r3, r3, r6
 800b09e:	50a3      	str	r3, [r4, r2]
 800b0a0:	e7b3      	b.n	800b00a <_malloc_r+0x22>
 800b0a2:	6862      	ldr	r2, [r4, #4]
 800b0a4:	42a3      	cmp	r3, r4
 800b0a6:	bf0c      	ite	eq
 800b0a8:	6032      	streq	r2, [r6, #0]
 800b0aa:	605a      	strne	r2, [r3, #4]
 800b0ac:	e7ec      	b.n	800b088 <_malloc_r+0xa0>
 800b0ae:	4623      	mov	r3, r4
 800b0b0:	6864      	ldr	r4, [r4, #4]
 800b0b2:	e7b2      	b.n	800b01a <_malloc_r+0x32>
 800b0b4:	4634      	mov	r4, r6
 800b0b6:	6876      	ldr	r6, [r6, #4]
 800b0b8:	e7b9      	b.n	800b02e <_malloc_r+0x46>
 800b0ba:	230c      	movs	r3, #12
 800b0bc:	603b      	str	r3, [r7, #0]
 800b0be:	4638      	mov	r0, r7
 800b0c0:	f001 fc8e 	bl	800c9e0 <__malloc_unlock>
 800b0c4:	e7a1      	b.n	800b00a <_malloc_r+0x22>
 800b0c6:	6025      	str	r5, [r4, #0]
 800b0c8:	e7de      	b.n	800b088 <_malloc_r+0xa0>
 800b0ca:	bf00      	nop
 800b0cc:	20000bc0 	.word	0x20000bc0

0800b0d0 <__cvt>:
 800b0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d4:	ec55 4b10 	vmov	r4, r5, d0
 800b0d8:	2d00      	cmp	r5, #0
 800b0da:	460e      	mov	r6, r1
 800b0dc:	4619      	mov	r1, r3
 800b0de:	462b      	mov	r3, r5
 800b0e0:	bfbb      	ittet	lt
 800b0e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b0e6:	461d      	movlt	r5, r3
 800b0e8:	2300      	movge	r3, #0
 800b0ea:	232d      	movlt	r3, #45	; 0x2d
 800b0ec:	700b      	strb	r3, [r1, #0]
 800b0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b0f4:	4691      	mov	r9, r2
 800b0f6:	f023 0820 	bic.w	r8, r3, #32
 800b0fa:	bfbc      	itt	lt
 800b0fc:	4622      	movlt	r2, r4
 800b0fe:	4614      	movlt	r4, r2
 800b100:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b104:	d005      	beq.n	800b112 <__cvt+0x42>
 800b106:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b10a:	d100      	bne.n	800b10e <__cvt+0x3e>
 800b10c:	3601      	adds	r6, #1
 800b10e:	2102      	movs	r1, #2
 800b110:	e000      	b.n	800b114 <__cvt+0x44>
 800b112:	2103      	movs	r1, #3
 800b114:	ab03      	add	r3, sp, #12
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	ab02      	add	r3, sp, #8
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	ec45 4b10 	vmov	d0, r4, r5
 800b120:	4653      	mov	r3, sl
 800b122:	4632      	mov	r2, r6
 800b124:	f000 fe44 	bl	800bdb0 <_dtoa_r>
 800b128:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b12c:	4607      	mov	r7, r0
 800b12e:	d102      	bne.n	800b136 <__cvt+0x66>
 800b130:	f019 0f01 	tst.w	r9, #1
 800b134:	d022      	beq.n	800b17c <__cvt+0xac>
 800b136:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b13a:	eb07 0906 	add.w	r9, r7, r6
 800b13e:	d110      	bne.n	800b162 <__cvt+0x92>
 800b140:	783b      	ldrb	r3, [r7, #0]
 800b142:	2b30      	cmp	r3, #48	; 0x30
 800b144:	d10a      	bne.n	800b15c <__cvt+0x8c>
 800b146:	2200      	movs	r2, #0
 800b148:	2300      	movs	r3, #0
 800b14a:	4620      	mov	r0, r4
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7f5 fcd3 	bl	8000af8 <__aeabi_dcmpeq>
 800b152:	b918      	cbnz	r0, 800b15c <__cvt+0x8c>
 800b154:	f1c6 0601 	rsb	r6, r6, #1
 800b158:	f8ca 6000 	str.w	r6, [sl]
 800b15c:	f8da 3000 	ldr.w	r3, [sl]
 800b160:	4499      	add	r9, r3
 800b162:	2200      	movs	r2, #0
 800b164:	2300      	movs	r3, #0
 800b166:	4620      	mov	r0, r4
 800b168:	4629      	mov	r1, r5
 800b16a:	f7f5 fcc5 	bl	8000af8 <__aeabi_dcmpeq>
 800b16e:	b108      	cbz	r0, 800b174 <__cvt+0xa4>
 800b170:	f8cd 900c 	str.w	r9, [sp, #12]
 800b174:	2230      	movs	r2, #48	; 0x30
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	454b      	cmp	r3, r9
 800b17a:	d307      	bcc.n	800b18c <__cvt+0xbc>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b180:	1bdb      	subs	r3, r3, r7
 800b182:	4638      	mov	r0, r7
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	b004      	add	sp, #16
 800b188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18c:	1c59      	adds	r1, r3, #1
 800b18e:	9103      	str	r1, [sp, #12]
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	e7f0      	b.n	800b176 <__cvt+0xa6>

0800b194 <__exponent>:
 800b194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b196:	4603      	mov	r3, r0
 800b198:	2900      	cmp	r1, #0
 800b19a:	bfb8      	it	lt
 800b19c:	4249      	neglt	r1, r1
 800b19e:	f803 2b02 	strb.w	r2, [r3], #2
 800b1a2:	bfb4      	ite	lt
 800b1a4:	222d      	movlt	r2, #45	; 0x2d
 800b1a6:	222b      	movge	r2, #43	; 0x2b
 800b1a8:	2909      	cmp	r1, #9
 800b1aa:	7042      	strb	r2, [r0, #1]
 800b1ac:	dd2a      	ble.n	800b204 <__exponent+0x70>
 800b1ae:	f10d 0407 	add.w	r4, sp, #7
 800b1b2:	46a4      	mov	ip, r4
 800b1b4:	270a      	movs	r7, #10
 800b1b6:	46a6      	mov	lr, r4
 800b1b8:	460a      	mov	r2, r1
 800b1ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800b1be:	fb07 1516 	mls	r5, r7, r6, r1
 800b1c2:	3530      	adds	r5, #48	; 0x30
 800b1c4:	2a63      	cmp	r2, #99	; 0x63
 800b1c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b1ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	dcf1      	bgt.n	800b1b6 <__exponent+0x22>
 800b1d2:	3130      	adds	r1, #48	; 0x30
 800b1d4:	f1ae 0502 	sub.w	r5, lr, #2
 800b1d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b1dc:	1c44      	adds	r4, r0, #1
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4561      	cmp	r1, ip
 800b1e2:	d30a      	bcc.n	800b1fa <__exponent+0x66>
 800b1e4:	f10d 0209 	add.w	r2, sp, #9
 800b1e8:	eba2 020e 	sub.w	r2, r2, lr
 800b1ec:	4565      	cmp	r5, ip
 800b1ee:	bf88      	it	hi
 800b1f0:	2200      	movhi	r2, #0
 800b1f2:	4413      	add	r3, r2
 800b1f4:	1a18      	subs	r0, r3, r0
 800b1f6:	b003      	add	sp, #12
 800b1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b202:	e7ed      	b.n	800b1e0 <__exponent+0x4c>
 800b204:	2330      	movs	r3, #48	; 0x30
 800b206:	3130      	adds	r1, #48	; 0x30
 800b208:	7083      	strb	r3, [r0, #2]
 800b20a:	70c1      	strb	r1, [r0, #3]
 800b20c:	1d03      	adds	r3, r0, #4
 800b20e:	e7f1      	b.n	800b1f4 <__exponent+0x60>

0800b210 <_printf_float>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ed2d 8b02 	vpush	{d8}
 800b218:	b08d      	sub	sp, #52	; 0x34
 800b21a:	460c      	mov	r4, r1
 800b21c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b220:	4616      	mov	r6, r2
 800b222:	461f      	mov	r7, r3
 800b224:	4605      	mov	r5, r0
 800b226:	f001 fbb1 	bl	800c98c <_localeconv_r>
 800b22a:	f8d0 a000 	ldr.w	sl, [r0]
 800b22e:	4650      	mov	r0, sl
 800b230:	f7f4 ffe0 	bl	80001f4 <strlen>
 800b234:	2300      	movs	r3, #0
 800b236:	930a      	str	r3, [sp, #40]	; 0x28
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	9305      	str	r3, [sp, #20]
 800b23c:	f8d8 3000 	ldr.w	r3, [r8]
 800b240:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b244:	3307      	adds	r3, #7
 800b246:	f023 0307 	bic.w	r3, r3, #7
 800b24a:	f103 0208 	add.w	r2, r3, #8
 800b24e:	f8c8 2000 	str.w	r2, [r8]
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b25a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b25e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b262:	9307      	str	r3, [sp, #28]
 800b264:	f8cd 8018 	str.w	r8, [sp, #24]
 800b268:	ee08 0a10 	vmov	s16, r0
 800b26c:	4b9f      	ldr	r3, [pc, #636]	; (800b4ec <_printf_float+0x2dc>)
 800b26e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b272:	f04f 32ff 	mov.w	r2, #4294967295
 800b276:	f7f5 fc71 	bl	8000b5c <__aeabi_dcmpun>
 800b27a:	bb88      	cbnz	r0, 800b2e0 <_printf_float+0xd0>
 800b27c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b280:	4b9a      	ldr	r3, [pc, #616]	; (800b4ec <_printf_float+0x2dc>)
 800b282:	f04f 32ff 	mov.w	r2, #4294967295
 800b286:	f7f5 fc4b 	bl	8000b20 <__aeabi_dcmple>
 800b28a:	bb48      	cbnz	r0, 800b2e0 <_printf_float+0xd0>
 800b28c:	2200      	movs	r2, #0
 800b28e:	2300      	movs	r3, #0
 800b290:	4640      	mov	r0, r8
 800b292:	4649      	mov	r1, r9
 800b294:	f7f5 fc3a 	bl	8000b0c <__aeabi_dcmplt>
 800b298:	b110      	cbz	r0, 800b2a0 <_printf_float+0x90>
 800b29a:	232d      	movs	r3, #45	; 0x2d
 800b29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2a0:	4b93      	ldr	r3, [pc, #588]	; (800b4f0 <_printf_float+0x2e0>)
 800b2a2:	4894      	ldr	r0, [pc, #592]	; (800b4f4 <_printf_float+0x2e4>)
 800b2a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b2a8:	bf94      	ite	ls
 800b2aa:	4698      	movls	r8, r3
 800b2ac:	4680      	movhi	r8, r0
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	6123      	str	r3, [r4, #16]
 800b2b2:	9b05      	ldr	r3, [sp, #20]
 800b2b4:	f023 0204 	bic.w	r2, r3, #4
 800b2b8:	6022      	str	r2, [r4, #0]
 800b2ba:	f04f 0900 	mov.w	r9, #0
 800b2be:	9700      	str	r7, [sp, #0]
 800b2c0:	4633      	mov	r3, r6
 800b2c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f000 f9d8 	bl	800b67c <_printf_common>
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	f040 8090 	bne.w	800b3f2 <_printf_float+0x1e2>
 800b2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d6:	b00d      	add	sp, #52	; 0x34
 800b2d8:	ecbd 8b02 	vpop	{d8}
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	4642      	mov	r2, r8
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	f7f5 fc38 	bl	8000b5c <__aeabi_dcmpun>
 800b2ec:	b140      	cbz	r0, 800b300 <_printf_float+0xf0>
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	bfbc      	itt	lt
 800b2f4:	232d      	movlt	r3, #45	; 0x2d
 800b2f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b2fa:	487f      	ldr	r0, [pc, #508]	; (800b4f8 <_printf_float+0x2e8>)
 800b2fc:	4b7f      	ldr	r3, [pc, #508]	; (800b4fc <_printf_float+0x2ec>)
 800b2fe:	e7d1      	b.n	800b2a4 <_printf_float+0x94>
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b306:	9206      	str	r2, [sp, #24]
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	d13f      	bne.n	800b38c <_printf_float+0x17c>
 800b30c:	2306      	movs	r3, #6
 800b30e:	6063      	str	r3, [r4, #4]
 800b310:	9b05      	ldr	r3, [sp, #20]
 800b312:	6861      	ldr	r1, [r4, #4]
 800b314:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b318:	2300      	movs	r3, #0
 800b31a:	9303      	str	r3, [sp, #12]
 800b31c:	ab0a      	add	r3, sp, #40	; 0x28
 800b31e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b322:	ab09      	add	r3, sp, #36	; 0x24
 800b324:	ec49 8b10 	vmov	d0, r8, r9
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	6022      	str	r2, [r4, #0]
 800b32c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b330:	4628      	mov	r0, r5
 800b332:	f7ff fecd 	bl	800b0d0 <__cvt>
 800b336:	9b06      	ldr	r3, [sp, #24]
 800b338:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b33a:	2b47      	cmp	r3, #71	; 0x47
 800b33c:	4680      	mov	r8, r0
 800b33e:	d108      	bne.n	800b352 <_printf_float+0x142>
 800b340:	1cc8      	adds	r0, r1, #3
 800b342:	db02      	blt.n	800b34a <_printf_float+0x13a>
 800b344:	6863      	ldr	r3, [r4, #4]
 800b346:	4299      	cmp	r1, r3
 800b348:	dd41      	ble.n	800b3ce <_printf_float+0x1be>
 800b34a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b34e:	fa5f fb8b 	uxtb.w	fp, fp
 800b352:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b356:	d820      	bhi.n	800b39a <_printf_float+0x18a>
 800b358:	3901      	subs	r1, #1
 800b35a:	465a      	mov	r2, fp
 800b35c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b360:	9109      	str	r1, [sp, #36]	; 0x24
 800b362:	f7ff ff17 	bl	800b194 <__exponent>
 800b366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b368:	1813      	adds	r3, r2, r0
 800b36a:	2a01      	cmp	r2, #1
 800b36c:	4681      	mov	r9, r0
 800b36e:	6123      	str	r3, [r4, #16]
 800b370:	dc02      	bgt.n	800b378 <_printf_float+0x168>
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	07d2      	lsls	r2, r2, #31
 800b376:	d501      	bpl.n	800b37c <_printf_float+0x16c>
 800b378:	3301      	adds	r3, #1
 800b37a:	6123      	str	r3, [r4, #16]
 800b37c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b380:	2b00      	cmp	r3, #0
 800b382:	d09c      	beq.n	800b2be <_printf_float+0xae>
 800b384:	232d      	movs	r3, #45	; 0x2d
 800b386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b38a:	e798      	b.n	800b2be <_printf_float+0xae>
 800b38c:	9a06      	ldr	r2, [sp, #24]
 800b38e:	2a47      	cmp	r2, #71	; 0x47
 800b390:	d1be      	bne.n	800b310 <_printf_float+0x100>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1bc      	bne.n	800b310 <_printf_float+0x100>
 800b396:	2301      	movs	r3, #1
 800b398:	e7b9      	b.n	800b30e <_printf_float+0xfe>
 800b39a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b39e:	d118      	bne.n	800b3d2 <_printf_float+0x1c2>
 800b3a0:	2900      	cmp	r1, #0
 800b3a2:	6863      	ldr	r3, [r4, #4]
 800b3a4:	dd0b      	ble.n	800b3be <_printf_float+0x1ae>
 800b3a6:	6121      	str	r1, [r4, #16]
 800b3a8:	b913      	cbnz	r3, 800b3b0 <_printf_float+0x1a0>
 800b3aa:	6822      	ldr	r2, [r4, #0]
 800b3ac:	07d0      	lsls	r0, r2, #31
 800b3ae:	d502      	bpl.n	800b3b6 <_printf_float+0x1a6>
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	440b      	add	r3, r1
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b3b8:	f04f 0900 	mov.w	r9, #0
 800b3bc:	e7de      	b.n	800b37c <_printf_float+0x16c>
 800b3be:	b913      	cbnz	r3, 800b3c6 <_printf_float+0x1b6>
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	07d2      	lsls	r2, r2, #31
 800b3c4:	d501      	bpl.n	800b3ca <_printf_float+0x1ba>
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	e7f4      	b.n	800b3b4 <_printf_float+0x1a4>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e7f2      	b.n	800b3b4 <_printf_float+0x1a4>
 800b3ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d4:	4299      	cmp	r1, r3
 800b3d6:	db05      	blt.n	800b3e4 <_printf_float+0x1d4>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	6121      	str	r1, [r4, #16]
 800b3dc:	07d8      	lsls	r0, r3, #31
 800b3de:	d5ea      	bpl.n	800b3b6 <_printf_float+0x1a6>
 800b3e0:	1c4b      	adds	r3, r1, #1
 800b3e2:	e7e7      	b.n	800b3b4 <_printf_float+0x1a4>
 800b3e4:	2900      	cmp	r1, #0
 800b3e6:	bfd4      	ite	le
 800b3e8:	f1c1 0202 	rsble	r2, r1, #2
 800b3ec:	2201      	movgt	r2, #1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	e7e0      	b.n	800b3b4 <_printf_float+0x1a4>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	055a      	lsls	r2, r3, #21
 800b3f6:	d407      	bmi.n	800b408 <_printf_float+0x1f8>
 800b3f8:	6923      	ldr	r3, [r4, #16]
 800b3fa:	4642      	mov	r2, r8
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4628      	mov	r0, r5
 800b400:	47b8      	blx	r7
 800b402:	3001      	adds	r0, #1
 800b404:	d12c      	bne.n	800b460 <_printf_float+0x250>
 800b406:	e764      	b.n	800b2d2 <_printf_float+0xc2>
 800b408:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b40c:	f240 80e0 	bls.w	800b5d0 <_printf_float+0x3c0>
 800b410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b414:	2200      	movs	r2, #0
 800b416:	2300      	movs	r3, #0
 800b418:	f7f5 fb6e 	bl	8000af8 <__aeabi_dcmpeq>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d034      	beq.n	800b48a <_printf_float+0x27a>
 800b420:	4a37      	ldr	r2, [pc, #220]	; (800b500 <_printf_float+0x2f0>)
 800b422:	2301      	movs	r3, #1
 800b424:	4631      	mov	r1, r6
 800b426:	4628      	mov	r0, r5
 800b428:	47b8      	blx	r7
 800b42a:	3001      	adds	r0, #1
 800b42c:	f43f af51 	beq.w	800b2d2 <_printf_float+0xc2>
 800b430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b434:	429a      	cmp	r2, r3
 800b436:	db02      	blt.n	800b43e <_printf_float+0x22e>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	07d8      	lsls	r0, r3, #31
 800b43c:	d510      	bpl.n	800b460 <_printf_float+0x250>
 800b43e:	ee18 3a10 	vmov	r3, s16
 800b442:	4652      	mov	r2, sl
 800b444:	4631      	mov	r1, r6
 800b446:	4628      	mov	r0, r5
 800b448:	47b8      	blx	r7
 800b44a:	3001      	adds	r0, #1
 800b44c:	f43f af41 	beq.w	800b2d2 <_printf_float+0xc2>
 800b450:	f04f 0800 	mov.w	r8, #0
 800b454:	f104 091a 	add.w	r9, r4, #26
 800b458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b45a:	3b01      	subs	r3, #1
 800b45c:	4543      	cmp	r3, r8
 800b45e:	dc09      	bgt.n	800b474 <_printf_float+0x264>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	079b      	lsls	r3, r3, #30
 800b464:	f100 8105 	bmi.w	800b672 <_printf_float+0x462>
 800b468:	68e0      	ldr	r0, [r4, #12]
 800b46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b46c:	4298      	cmp	r0, r3
 800b46e:	bfb8      	it	lt
 800b470:	4618      	movlt	r0, r3
 800b472:	e730      	b.n	800b2d6 <_printf_float+0xc6>
 800b474:	2301      	movs	r3, #1
 800b476:	464a      	mov	r2, r9
 800b478:	4631      	mov	r1, r6
 800b47a:	4628      	mov	r0, r5
 800b47c:	47b8      	blx	r7
 800b47e:	3001      	adds	r0, #1
 800b480:	f43f af27 	beq.w	800b2d2 <_printf_float+0xc2>
 800b484:	f108 0801 	add.w	r8, r8, #1
 800b488:	e7e6      	b.n	800b458 <_printf_float+0x248>
 800b48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dc39      	bgt.n	800b504 <_printf_float+0x2f4>
 800b490:	4a1b      	ldr	r2, [pc, #108]	; (800b500 <_printf_float+0x2f0>)
 800b492:	2301      	movs	r3, #1
 800b494:	4631      	mov	r1, r6
 800b496:	4628      	mov	r0, r5
 800b498:	47b8      	blx	r7
 800b49a:	3001      	adds	r0, #1
 800b49c:	f43f af19 	beq.w	800b2d2 <_printf_float+0xc2>
 800b4a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	d102      	bne.n	800b4ae <_printf_float+0x29e>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07d9      	lsls	r1, r3, #31
 800b4ac:	d5d8      	bpl.n	800b460 <_printf_float+0x250>
 800b4ae:	ee18 3a10 	vmov	r3, s16
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f43f af09 	beq.w	800b2d2 <_printf_float+0xc2>
 800b4c0:	f04f 0900 	mov.w	r9, #0
 800b4c4:	f104 0a1a 	add.w	sl, r4, #26
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	425b      	negs	r3, r3
 800b4cc:	454b      	cmp	r3, r9
 800b4ce:	dc01      	bgt.n	800b4d4 <_printf_float+0x2c4>
 800b4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d2:	e792      	b.n	800b3fa <_printf_float+0x1ea>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	4652      	mov	r2, sl
 800b4d8:	4631      	mov	r1, r6
 800b4da:	4628      	mov	r0, r5
 800b4dc:	47b8      	blx	r7
 800b4de:	3001      	adds	r0, #1
 800b4e0:	f43f aef7 	beq.w	800b2d2 <_printf_float+0xc2>
 800b4e4:	f109 0901 	add.w	r9, r9, #1
 800b4e8:	e7ee      	b.n	800b4c8 <_printf_float+0x2b8>
 800b4ea:	bf00      	nop
 800b4ec:	7fefffff 	.word	0x7fefffff
 800b4f0:	0800fef4 	.word	0x0800fef4
 800b4f4:	0800fef8 	.word	0x0800fef8
 800b4f8:	0800ff00 	.word	0x0800ff00
 800b4fc:	0800fefc 	.word	0x0800fefc
 800b500:	08010229 	.word	0x08010229
 800b504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b508:	429a      	cmp	r2, r3
 800b50a:	bfa8      	it	ge
 800b50c:	461a      	movge	r2, r3
 800b50e:	2a00      	cmp	r2, #0
 800b510:	4691      	mov	r9, r2
 800b512:	dc37      	bgt.n	800b584 <_printf_float+0x374>
 800b514:	f04f 0b00 	mov.w	fp, #0
 800b518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b51c:	f104 021a 	add.w	r2, r4, #26
 800b520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	eba3 0309 	sub.w	r3, r3, r9
 800b528:	455b      	cmp	r3, fp
 800b52a:	dc33      	bgt.n	800b594 <_printf_float+0x384>
 800b52c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b530:	429a      	cmp	r2, r3
 800b532:	db3b      	blt.n	800b5ac <_printf_float+0x39c>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	07da      	lsls	r2, r3, #31
 800b538:	d438      	bmi.n	800b5ac <_printf_float+0x39c>
 800b53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b53c:	9a05      	ldr	r2, [sp, #20]
 800b53e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b540:	1a9a      	subs	r2, r3, r2
 800b542:	eba3 0901 	sub.w	r9, r3, r1
 800b546:	4591      	cmp	r9, r2
 800b548:	bfa8      	it	ge
 800b54a:	4691      	movge	r9, r2
 800b54c:	f1b9 0f00 	cmp.w	r9, #0
 800b550:	dc35      	bgt.n	800b5be <_printf_float+0x3ae>
 800b552:	f04f 0800 	mov.w	r8, #0
 800b556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b55a:	f104 0a1a 	add.w	sl, r4, #26
 800b55e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b562:	1a9b      	subs	r3, r3, r2
 800b564:	eba3 0309 	sub.w	r3, r3, r9
 800b568:	4543      	cmp	r3, r8
 800b56a:	f77f af79 	ble.w	800b460 <_printf_float+0x250>
 800b56e:	2301      	movs	r3, #1
 800b570:	4652      	mov	r2, sl
 800b572:	4631      	mov	r1, r6
 800b574:	4628      	mov	r0, r5
 800b576:	47b8      	blx	r7
 800b578:	3001      	adds	r0, #1
 800b57a:	f43f aeaa 	beq.w	800b2d2 <_printf_float+0xc2>
 800b57e:	f108 0801 	add.w	r8, r8, #1
 800b582:	e7ec      	b.n	800b55e <_printf_float+0x34e>
 800b584:	4613      	mov	r3, r2
 800b586:	4631      	mov	r1, r6
 800b588:	4642      	mov	r2, r8
 800b58a:	4628      	mov	r0, r5
 800b58c:	47b8      	blx	r7
 800b58e:	3001      	adds	r0, #1
 800b590:	d1c0      	bne.n	800b514 <_printf_float+0x304>
 800b592:	e69e      	b.n	800b2d2 <_printf_float+0xc2>
 800b594:	2301      	movs	r3, #1
 800b596:	4631      	mov	r1, r6
 800b598:	4628      	mov	r0, r5
 800b59a:	9205      	str	r2, [sp, #20]
 800b59c:	47b8      	blx	r7
 800b59e:	3001      	adds	r0, #1
 800b5a0:	f43f ae97 	beq.w	800b2d2 <_printf_float+0xc2>
 800b5a4:	9a05      	ldr	r2, [sp, #20]
 800b5a6:	f10b 0b01 	add.w	fp, fp, #1
 800b5aa:	e7b9      	b.n	800b520 <_printf_float+0x310>
 800b5ac:	ee18 3a10 	vmov	r3, s16
 800b5b0:	4652      	mov	r2, sl
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	47b8      	blx	r7
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d1be      	bne.n	800b53a <_printf_float+0x32a>
 800b5bc:	e689      	b.n	800b2d2 <_printf_float+0xc2>
 800b5be:	9a05      	ldr	r2, [sp, #20]
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	4442      	add	r2, r8
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	47b8      	blx	r7
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	d1c1      	bne.n	800b552 <_printf_float+0x342>
 800b5ce:	e680      	b.n	800b2d2 <_printf_float+0xc2>
 800b5d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5d2:	2a01      	cmp	r2, #1
 800b5d4:	dc01      	bgt.n	800b5da <_printf_float+0x3ca>
 800b5d6:	07db      	lsls	r3, r3, #31
 800b5d8:	d538      	bpl.n	800b64c <_printf_float+0x43c>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	4642      	mov	r2, r8
 800b5de:	4631      	mov	r1, r6
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	47b8      	blx	r7
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	f43f ae74 	beq.w	800b2d2 <_printf_float+0xc2>
 800b5ea:	ee18 3a10 	vmov	r3, s16
 800b5ee:	4652      	mov	r2, sl
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	47b8      	blx	r7
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f43f ae6b 	beq.w	800b2d2 <_printf_float+0xc2>
 800b5fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b600:	2200      	movs	r2, #0
 800b602:	2300      	movs	r3, #0
 800b604:	f7f5 fa78 	bl	8000af8 <__aeabi_dcmpeq>
 800b608:	b9d8      	cbnz	r0, 800b642 <_printf_float+0x432>
 800b60a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b60c:	f108 0201 	add.w	r2, r8, #1
 800b610:	3b01      	subs	r3, #1
 800b612:	4631      	mov	r1, r6
 800b614:	4628      	mov	r0, r5
 800b616:	47b8      	blx	r7
 800b618:	3001      	adds	r0, #1
 800b61a:	d10e      	bne.n	800b63a <_printf_float+0x42a>
 800b61c:	e659      	b.n	800b2d2 <_printf_float+0xc2>
 800b61e:	2301      	movs	r3, #1
 800b620:	4652      	mov	r2, sl
 800b622:	4631      	mov	r1, r6
 800b624:	4628      	mov	r0, r5
 800b626:	47b8      	blx	r7
 800b628:	3001      	adds	r0, #1
 800b62a:	f43f ae52 	beq.w	800b2d2 <_printf_float+0xc2>
 800b62e:	f108 0801 	add.w	r8, r8, #1
 800b632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b634:	3b01      	subs	r3, #1
 800b636:	4543      	cmp	r3, r8
 800b638:	dcf1      	bgt.n	800b61e <_printf_float+0x40e>
 800b63a:	464b      	mov	r3, r9
 800b63c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b640:	e6dc      	b.n	800b3fc <_printf_float+0x1ec>
 800b642:	f04f 0800 	mov.w	r8, #0
 800b646:	f104 0a1a 	add.w	sl, r4, #26
 800b64a:	e7f2      	b.n	800b632 <_printf_float+0x422>
 800b64c:	2301      	movs	r3, #1
 800b64e:	4642      	mov	r2, r8
 800b650:	e7df      	b.n	800b612 <_printf_float+0x402>
 800b652:	2301      	movs	r3, #1
 800b654:	464a      	mov	r2, r9
 800b656:	4631      	mov	r1, r6
 800b658:	4628      	mov	r0, r5
 800b65a:	47b8      	blx	r7
 800b65c:	3001      	adds	r0, #1
 800b65e:	f43f ae38 	beq.w	800b2d2 <_printf_float+0xc2>
 800b662:	f108 0801 	add.w	r8, r8, #1
 800b666:	68e3      	ldr	r3, [r4, #12]
 800b668:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b66a:	1a5b      	subs	r3, r3, r1
 800b66c:	4543      	cmp	r3, r8
 800b66e:	dcf0      	bgt.n	800b652 <_printf_float+0x442>
 800b670:	e6fa      	b.n	800b468 <_printf_float+0x258>
 800b672:	f04f 0800 	mov.w	r8, #0
 800b676:	f104 0919 	add.w	r9, r4, #25
 800b67a:	e7f4      	b.n	800b666 <_printf_float+0x456>

0800b67c <_printf_common>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	4616      	mov	r6, r2
 800b682:	4699      	mov	r9, r3
 800b684:	688a      	ldr	r2, [r1, #8]
 800b686:	690b      	ldr	r3, [r1, #16]
 800b688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	bfb8      	it	lt
 800b690:	4613      	movlt	r3, r2
 800b692:	6033      	str	r3, [r6, #0]
 800b694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b698:	4607      	mov	r7, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	b10a      	cbz	r2, 800b6a2 <_printf_common+0x26>
 800b69e:	3301      	adds	r3, #1
 800b6a0:	6033      	str	r3, [r6, #0]
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	0699      	lsls	r1, r3, #26
 800b6a6:	bf42      	ittt	mi
 800b6a8:	6833      	ldrmi	r3, [r6, #0]
 800b6aa:	3302      	addmi	r3, #2
 800b6ac:	6033      	strmi	r3, [r6, #0]
 800b6ae:	6825      	ldr	r5, [r4, #0]
 800b6b0:	f015 0506 	ands.w	r5, r5, #6
 800b6b4:	d106      	bne.n	800b6c4 <_printf_common+0x48>
 800b6b6:	f104 0a19 	add.w	sl, r4, #25
 800b6ba:	68e3      	ldr	r3, [r4, #12]
 800b6bc:	6832      	ldr	r2, [r6, #0]
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	42ab      	cmp	r3, r5
 800b6c2:	dc26      	bgt.n	800b712 <_printf_common+0x96>
 800b6c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6c8:	1e13      	subs	r3, r2, #0
 800b6ca:	6822      	ldr	r2, [r4, #0]
 800b6cc:	bf18      	it	ne
 800b6ce:	2301      	movne	r3, #1
 800b6d0:	0692      	lsls	r2, r2, #26
 800b6d2:	d42b      	bmi.n	800b72c <_printf_common+0xb0>
 800b6d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6d8:	4649      	mov	r1, r9
 800b6da:	4638      	mov	r0, r7
 800b6dc:	47c0      	blx	r8
 800b6de:	3001      	adds	r0, #1
 800b6e0:	d01e      	beq.n	800b720 <_printf_common+0xa4>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	68e5      	ldr	r5, [r4, #12]
 800b6e6:	6832      	ldr	r2, [r6, #0]
 800b6e8:	f003 0306 	and.w	r3, r3, #6
 800b6ec:	2b04      	cmp	r3, #4
 800b6ee:	bf08      	it	eq
 800b6f0:	1aad      	subeq	r5, r5, r2
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	6922      	ldr	r2, [r4, #16]
 800b6f6:	bf0c      	ite	eq
 800b6f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6fc:	2500      	movne	r5, #0
 800b6fe:	4293      	cmp	r3, r2
 800b700:	bfc4      	itt	gt
 800b702:	1a9b      	subgt	r3, r3, r2
 800b704:	18ed      	addgt	r5, r5, r3
 800b706:	2600      	movs	r6, #0
 800b708:	341a      	adds	r4, #26
 800b70a:	42b5      	cmp	r5, r6
 800b70c:	d11a      	bne.n	800b744 <_printf_common+0xc8>
 800b70e:	2000      	movs	r0, #0
 800b710:	e008      	b.n	800b724 <_printf_common+0xa8>
 800b712:	2301      	movs	r3, #1
 800b714:	4652      	mov	r2, sl
 800b716:	4649      	mov	r1, r9
 800b718:	4638      	mov	r0, r7
 800b71a:	47c0      	blx	r8
 800b71c:	3001      	adds	r0, #1
 800b71e:	d103      	bne.n	800b728 <_printf_common+0xac>
 800b720:	f04f 30ff 	mov.w	r0, #4294967295
 800b724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b728:	3501      	adds	r5, #1
 800b72a:	e7c6      	b.n	800b6ba <_printf_common+0x3e>
 800b72c:	18e1      	adds	r1, r4, r3
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	2030      	movs	r0, #48	; 0x30
 800b732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b736:	4422      	add	r2, r4
 800b738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b73c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b740:	3302      	adds	r3, #2
 800b742:	e7c7      	b.n	800b6d4 <_printf_common+0x58>
 800b744:	2301      	movs	r3, #1
 800b746:	4622      	mov	r2, r4
 800b748:	4649      	mov	r1, r9
 800b74a:	4638      	mov	r0, r7
 800b74c:	47c0      	blx	r8
 800b74e:	3001      	adds	r0, #1
 800b750:	d0e6      	beq.n	800b720 <_printf_common+0xa4>
 800b752:	3601      	adds	r6, #1
 800b754:	e7d9      	b.n	800b70a <_printf_common+0x8e>
	...

0800b758 <_printf_i>:
 800b758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b75c:	7e0f      	ldrb	r7, [r1, #24]
 800b75e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b760:	2f78      	cmp	r7, #120	; 0x78
 800b762:	4691      	mov	r9, r2
 800b764:	4680      	mov	r8, r0
 800b766:	460c      	mov	r4, r1
 800b768:	469a      	mov	sl, r3
 800b76a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b76e:	d807      	bhi.n	800b780 <_printf_i+0x28>
 800b770:	2f62      	cmp	r7, #98	; 0x62
 800b772:	d80a      	bhi.n	800b78a <_printf_i+0x32>
 800b774:	2f00      	cmp	r7, #0
 800b776:	f000 80d8 	beq.w	800b92a <_printf_i+0x1d2>
 800b77a:	2f58      	cmp	r7, #88	; 0x58
 800b77c:	f000 80a3 	beq.w	800b8c6 <_printf_i+0x16e>
 800b780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b788:	e03a      	b.n	800b800 <_printf_i+0xa8>
 800b78a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b78e:	2b15      	cmp	r3, #21
 800b790:	d8f6      	bhi.n	800b780 <_printf_i+0x28>
 800b792:	a101      	add	r1, pc, #4	; (adr r1, 800b798 <_printf_i+0x40>)
 800b794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b798:	0800b7f1 	.word	0x0800b7f1
 800b79c:	0800b805 	.word	0x0800b805
 800b7a0:	0800b781 	.word	0x0800b781
 800b7a4:	0800b781 	.word	0x0800b781
 800b7a8:	0800b781 	.word	0x0800b781
 800b7ac:	0800b781 	.word	0x0800b781
 800b7b0:	0800b805 	.word	0x0800b805
 800b7b4:	0800b781 	.word	0x0800b781
 800b7b8:	0800b781 	.word	0x0800b781
 800b7bc:	0800b781 	.word	0x0800b781
 800b7c0:	0800b781 	.word	0x0800b781
 800b7c4:	0800b911 	.word	0x0800b911
 800b7c8:	0800b835 	.word	0x0800b835
 800b7cc:	0800b8f3 	.word	0x0800b8f3
 800b7d0:	0800b781 	.word	0x0800b781
 800b7d4:	0800b781 	.word	0x0800b781
 800b7d8:	0800b933 	.word	0x0800b933
 800b7dc:	0800b781 	.word	0x0800b781
 800b7e0:	0800b835 	.word	0x0800b835
 800b7e4:	0800b781 	.word	0x0800b781
 800b7e8:	0800b781 	.word	0x0800b781
 800b7ec:	0800b8fb 	.word	0x0800b8fb
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	1d1a      	adds	r2, r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	602a      	str	r2, [r5, #0]
 800b7f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b800:	2301      	movs	r3, #1
 800b802:	e0a3      	b.n	800b94c <_printf_i+0x1f4>
 800b804:	6820      	ldr	r0, [r4, #0]
 800b806:	6829      	ldr	r1, [r5, #0]
 800b808:	0606      	lsls	r6, r0, #24
 800b80a:	f101 0304 	add.w	r3, r1, #4
 800b80e:	d50a      	bpl.n	800b826 <_printf_i+0xce>
 800b810:	680e      	ldr	r6, [r1, #0]
 800b812:	602b      	str	r3, [r5, #0]
 800b814:	2e00      	cmp	r6, #0
 800b816:	da03      	bge.n	800b820 <_printf_i+0xc8>
 800b818:	232d      	movs	r3, #45	; 0x2d
 800b81a:	4276      	negs	r6, r6
 800b81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b820:	485e      	ldr	r0, [pc, #376]	; (800b99c <_printf_i+0x244>)
 800b822:	230a      	movs	r3, #10
 800b824:	e019      	b.n	800b85a <_printf_i+0x102>
 800b826:	680e      	ldr	r6, [r1, #0]
 800b828:	602b      	str	r3, [r5, #0]
 800b82a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b82e:	bf18      	it	ne
 800b830:	b236      	sxthne	r6, r6
 800b832:	e7ef      	b.n	800b814 <_printf_i+0xbc>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	6820      	ldr	r0, [r4, #0]
 800b838:	1d19      	adds	r1, r3, #4
 800b83a:	6029      	str	r1, [r5, #0]
 800b83c:	0601      	lsls	r1, r0, #24
 800b83e:	d501      	bpl.n	800b844 <_printf_i+0xec>
 800b840:	681e      	ldr	r6, [r3, #0]
 800b842:	e002      	b.n	800b84a <_printf_i+0xf2>
 800b844:	0646      	lsls	r6, r0, #25
 800b846:	d5fb      	bpl.n	800b840 <_printf_i+0xe8>
 800b848:	881e      	ldrh	r6, [r3, #0]
 800b84a:	4854      	ldr	r0, [pc, #336]	; (800b99c <_printf_i+0x244>)
 800b84c:	2f6f      	cmp	r7, #111	; 0x6f
 800b84e:	bf0c      	ite	eq
 800b850:	2308      	moveq	r3, #8
 800b852:	230a      	movne	r3, #10
 800b854:	2100      	movs	r1, #0
 800b856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b85a:	6865      	ldr	r5, [r4, #4]
 800b85c:	60a5      	str	r5, [r4, #8]
 800b85e:	2d00      	cmp	r5, #0
 800b860:	bfa2      	ittt	ge
 800b862:	6821      	ldrge	r1, [r4, #0]
 800b864:	f021 0104 	bicge.w	r1, r1, #4
 800b868:	6021      	strge	r1, [r4, #0]
 800b86a:	b90e      	cbnz	r6, 800b870 <_printf_i+0x118>
 800b86c:	2d00      	cmp	r5, #0
 800b86e:	d04d      	beq.n	800b90c <_printf_i+0x1b4>
 800b870:	4615      	mov	r5, r2
 800b872:	fbb6 f1f3 	udiv	r1, r6, r3
 800b876:	fb03 6711 	mls	r7, r3, r1, r6
 800b87a:	5dc7      	ldrb	r7, [r0, r7]
 800b87c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b880:	4637      	mov	r7, r6
 800b882:	42bb      	cmp	r3, r7
 800b884:	460e      	mov	r6, r1
 800b886:	d9f4      	bls.n	800b872 <_printf_i+0x11a>
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d10b      	bne.n	800b8a4 <_printf_i+0x14c>
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	07de      	lsls	r6, r3, #31
 800b890:	d508      	bpl.n	800b8a4 <_printf_i+0x14c>
 800b892:	6923      	ldr	r3, [r4, #16]
 800b894:	6861      	ldr	r1, [r4, #4]
 800b896:	4299      	cmp	r1, r3
 800b898:	bfde      	ittt	le
 800b89a:	2330      	movle	r3, #48	; 0x30
 800b89c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8a4:	1b52      	subs	r2, r2, r5
 800b8a6:	6122      	str	r2, [r4, #16]
 800b8a8:	f8cd a000 	str.w	sl, [sp]
 800b8ac:	464b      	mov	r3, r9
 800b8ae:	aa03      	add	r2, sp, #12
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	f7ff fee2 	bl	800b67c <_printf_common>
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d14c      	bne.n	800b956 <_printf_i+0x1fe>
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c0:	b004      	add	sp, #16
 800b8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c6:	4835      	ldr	r0, [pc, #212]	; (800b99c <_printf_i+0x244>)
 800b8c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8cc:	6829      	ldr	r1, [r5, #0]
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8d4:	6029      	str	r1, [r5, #0]
 800b8d6:	061d      	lsls	r5, r3, #24
 800b8d8:	d514      	bpl.n	800b904 <_printf_i+0x1ac>
 800b8da:	07df      	lsls	r7, r3, #31
 800b8dc:	bf44      	itt	mi
 800b8de:	f043 0320 	orrmi.w	r3, r3, #32
 800b8e2:	6023      	strmi	r3, [r4, #0]
 800b8e4:	b91e      	cbnz	r6, 800b8ee <_printf_i+0x196>
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	f023 0320 	bic.w	r3, r3, #32
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	2310      	movs	r3, #16
 800b8f0:	e7b0      	b.n	800b854 <_printf_i+0xfc>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	f043 0320 	orr.w	r3, r3, #32
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	2378      	movs	r3, #120	; 0x78
 800b8fc:	4828      	ldr	r0, [pc, #160]	; (800b9a0 <_printf_i+0x248>)
 800b8fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b902:	e7e3      	b.n	800b8cc <_printf_i+0x174>
 800b904:	0659      	lsls	r1, r3, #25
 800b906:	bf48      	it	mi
 800b908:	b2b6      	uxthmi	r6, r6
 800b90a:	e7e6      	b.n	800b8da <_printf_i+0x182>
 800b90c:	4615      	mov	r5, r2
 800b90e:	e7bb      	b.n	800b888 <_printf_i+0x130>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	6826      	ldr	r6, [r4, #0]
 800b914:	6961      	ldr	r1, [r4, #20]
 800b916:	1d18      	adds	r0, r3, #4
 800b918:	6028      	str	r0, [r5, #0]
 800b91a:	0635      	lsls	r5, r6, #24
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	d501      	bpl.n	800b924 <_printf_i+0x1cc>
 800b920:	6019      	str	r1, [r3, #0]
 800b922:	e002      	b.n	800b92a <_printf_i+0x1d2>
 800b924:	0670      	lsls	r0, r6, #25
 800b926:	d5fb      	bpl.n	800b920 <_printf_i+0x1c8>
 800b928:	8019      	strh	r1, [r3, #0]
 800b92a:	2300      	movs	r3, #0
 800b92c:	6123      	str	r3, [r4, #16]
 800b92e:	4615      	mov	r5, r2
 800b930:	e7ba      	b.n	800b8a8 <_printf_i+0x150>
 800b932:	682b      	ldr	r3, [r5, #0]
 800b934:	1d1a      	adds	r2, r3, #4
 800b936:	602a      	str	r2, [r5, #0]
 800b938:	681d      	ldr	r5, [r3, #0]
 800b93a:	6862      	ldr	r2, [r4, #4]
 800b93c:	2100      	movs	r1, #0
 800b93e:	4628      	mov	r0, r5
 800b940:	f7f4 fc66 	bl	8000210 <memchr>
 800b944:	b108      	cbz	r0, 800b94a <_printf_i+0x1f2>
 800b946:	1b40      	subs	r0, r0, r5
 800b948:	6060      	str	r0, [r4, #4]
 800b94a:	6863      	ldr	r3, [r4, #4]
 800b94c:	6123      	str	r3, [r4, #16]
 800b94e:	2300      	movs	r3, #0
 800b950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b954:	e7a8      	b.n	800b8a8 <_printf_i+0x150>
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	462a      	mov	r2, r5
 800b95a:	4649      	mov	r1, r9
 800b95c:	4640      	mov	r0, r8
 800b95e:	47d0      	blx	sl
 800b960:	3001      	adds	r0, #1
 800b962:	d0ab      	beq.n	800b8bc <_printf_i+0x164>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	079b      	lsls	r3, r3, #30
 800b968:	d413      	bmi.n	800b992 <_printf_i+0x23a>
 800b96a:	68e0      	ldr	r0, [r4, #12]
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	4298      	cmp	r0, r3
 800b970:	bfb8      	it	lt
 800b972:	4618      	movlt	r0, r3
 800b974:	e7a4      	b.n	800b8c0 <_printf_i+0x168>
 800b976:	2301      	movs	r3, #1
 800b978:	4632      	mov	r2, r6
 800b97a:	4649      	mov	r1, r9
 800b97c:	4640      	mov	r0, r8
 800b97e:	47d0      	blx	sl
 800b980:	3001      	adds	r0, #1
 800b982:	d09b      	beq.n	800b8bc <_printf_i+0x164>
 800b984:	3501      	adds	r5, #1
 800b986:	68e3      	ldr	r3, [r4, #12]
 800b988:	9903      	ldr	r1, [sp, #12]
 800b98a:	1a5b      	subs	r3, r3, r1
 800b98c:	42ab      	cmp	r3, r5
 800b98e:	dcf2      	bgt.n	800b976 <_printf_i+0x21e>
 800b990:	e7eb      	b.n	800b96a <_printf_i+0x212>
 800b992:	2500      	movs	r5, #0
 800b994:	f104 0619 	add.w	r6, r4, #25
 800b998:	e7f5      	b.n	800b986 <_printf_i+0x22e>
 800b99a:	bf00      	nop
 800b99c:	0800ff04 	.word	0x0800ff04
 800b9a0:	0800ff15 	.word	0x0800ff15

0800b9a4 <_sbrk_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d06      	ldr	r5, [pc, #24]	; (800b9c0 <_sbrk_r+0x1c>)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	602b      	str	r3, [r5, #0]
 800b9b0:	f7f8 fb56 	bl	8004060 <_sbrk>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_sbrk_r+0x1a>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_sbrk_r+0x1a>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	20000bc8 	.word	0x20000bc8

0800b9c4 <siprintf>:
 800b9c4:	b40e      	push	{r1, r2, r3}
 800b9c6:	b500      	push	{lr}
 800b9c8:	b09c      	sub	sp, #112	; 0x70
 800b9ca:	ab1d      	add	r3, sp, #116	; 0x74
 800b9cc:	9002      	str	r0, [sp, #8]
 800b9ce:	9006      	str	r0, [sp, #24]
 800b9d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9d4:	4809      	ldr	r0, [pc, #36]	; (800b9fc <siprintf+0x38>)
 800b9d6:	9107      	str	r1, [sp, #28]
 800b9d8:	9104      	str	r1, [sp, #16]
 800b9da:	4909      	ldr	r1, [pc, #36]	; (800ba00 <siprintf+0x3c>)
 800b9dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e0:	9105      	str	r1, [sp, #20]
 800b9e2:	6800      	ldr	r0, [r0, #0]
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	a902      	add	r1, sp, #8
 800b9e8:	f001 fbf6 	bl	800d1d8 <_svfiprintf_r>
 800b9ec:	9b02      	ldr	r3, [sp, #8]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	701a      	strb	r2, [r3, #0]
 800b9f2:	b01c      	add	sp, #112	; 0x70
 800b9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9f8:	b003      	add	sp, #12
 800b9fa:	4770      	bx	lr
 800b9fc:	200002f0 	.word	0x200002f0
 800ba00:	ffff0208 	.word	0xffff0208

0800ba04 <siscanf>:
 800ba04:	b40e      	push	{r1, r2, r3}
 800ba06:	b510      	push	{r4, lr}
 800ba08:	b09f      	sub	sp, #124	; 0x7c
 800ba0a:	ac21      	add	r4, sp, #132	; 0x84
 800ba0c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ba10:	f854 2b04 	ldr.w	r2, [r4], #4
 800ba14:	9201      	str	r2, [sp, #4]
 800ba16:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ba1a:	9004      	str	r0, [sp, #16]
 800ba1c:	9008      	str	r0, [sp, #32]
 800ba1e:	f7f4 fbe9 	bl	80001f4 <strlen>
 800ba22:	4b0c      	ldr	r3, [pc, #48]	; (800ba54 <siscanf+0x50>)
 800ba24:	9005      	str	r0, [sp, #20]
 800ba26:	9009      	str	r0, [sp, #36]	; 0x24
 800ba28:	930d      	str	r3, [sp, #52]	; 0x34
 800ba2a:	480b      	ldr	r0, [pc, #44]	; (800ba58 <siscanf+0x54>)
 800ba2c:	9a01      	ldr	r2, [sp, #4]
 800ba2e:	6800      	ldr	r0, [r0, #0]
 800ba30:	9403      	str	r4, [sp, #12]
 800ba32:	2300      	movs	r3, #0
 800ba34:	9311      	str	r3, [sp, #68]	; 0x44
 800ba36:	9316      	str	r3, [sp, #88]	; 0x58
 800ba38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ba40:	a904      	add	r1, sp, #16
 800ba42:	4623      	mov	r3, r4
 800ba44:	f001 fd22 	bl	800d48c <__ssvfiscanf_r>
 800ba48:	b01f      	add	sp, #124	; 0x7c
 800ba4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba4e:	b003      	add	sp, #12
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	0800ba7f 	.word	0x0800ba7f
 800ba58:	200002f0 	.word	0x200002f0

0800ba5c <__sread>:
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	460c      	mov	r4, r1
 800ba60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba64:	f001 ffdc 	bl	800da20 <_read_r>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	bfab      	itete	ge
 800ba6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba70:	181b      	addge	r3, r3, r0
 800ba72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba76:	bfac      	ite	ge
 800ba78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba7a:	81a3      	strhlt	r3, [r4, #12]
 800ba7c:	bd10      	pop	{r4, pc}

0800ba7e <__seofread>:
 800ba7e:	2000      	movs	r0, #0
 800ba80:	4770      	bx	lr

0800ba82 <__swrite>:
 800ba82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba86:	461f      	mov	r7, r3
 800ba88:	898b      	ldrh	r3, [r1, #12]
 800ba8a:	05db      	lsls	r3, r3, #23
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	4616      	mov	r6, r2
 800ba92:	d505      	bpl.n	800baa0 <__swrite+0x1e>
 800ba94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba98:	2302      	movs	r3, #2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f000 ff7a 	bl	800c994 <_lseek_r>
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baaa:	81a3      	strh	r3, [r4, #12]
 800baac:	4632      	mov	r2, r6
 800baae:	463b      	mov	r3, r7
 800bab0:	4628      	mov	r0, r5
 800bab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bab6:	f000 b8cd 	b.w	800bc54 <_write_r>

0800baba <__sseek>:
 800baba:	b510      	push	{r4, lr}
 800babc:	460c      	mov	r4, r1
 800babe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac2:	f000 ff67 	bl	800c994 <_lseek_r>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	bf15      	itete	ne
 800bacc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bad6:	81a3      	strheq	r3, [r4, #12]
 800bad8:	bf18      	it	ne
 800bada:	81a3      	strhne	r3, [r4, #12]
 800badc:	bd10      	pop	{r4, pc}

0800bade <__sclose>:
 800bade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae2:	f000 b8c9 	b.w	800bc78 <_close_r>

0800bae6 <strchr>:
 800bae6:	b2c9      	uxtb	r1, r1
 800bae8:	4603      	mov	r3, r0
 800baea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baee:	b11a      	cbz	r2, 800baf8 <strchr+0x12>
 800baf0:	428a      	cmp	r2, r1
 800baf2:	d1f9      	bne.n	800bae8 <strchr+0x2>
 800baf4:	4618      	mov	r0, r3
 800baf6:	4770      	bx	lr
 800baf8:	2900      	cmp	r1, #0
 800bafa:	bf18      	it	ne
 800bafc:	2300      	movne	r3, #0
 800bafe:	e7f9      	b.n	800baf4 <strchr+0xe>

0800bb00 <strcpy>:
 800bb00:	4603      	mov	r3, r0
 800bb02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb06:	f803 2b01 	strb.w	r2, [r3], #1
 800bb0a:	2a00      	cmp	r2, #0
 800bb0c:	d1f9      	bne.n	800bb02 <strcpy+0x2>
 800bb0e:	4770      	bx	lr

0800bb10 <strncmp>:
 800bb10:	b510      	push	{r4, lr}
 800bb12:	b17a      	cbz	r2, 800bb34 <strncmp+0x24>
 800bb14:	4603      	mov	r3, r0
 800bb16:	3901      	subs	r1, #1
 800bb18:	1884      	adds	r4, r0, r2
 800bb1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bb22:	4290      	cmp	r0, r2
 800bb24:	d101      	bne.n	800bb2a <strncmp+0x1a>
 800bb26:	42a3      	cmp	r3, r4
 800bb28:	d101      	bne.n	800bb2e <strncmp+0x1e>
 800bb2a:	1a80      	subs	r0, r0, r2
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d1f3      	bne.n	800bb1a <strncmp+0xa>
 800bb32:	e7fa      	b.n	800bb2a <strncmp+0x1a>
 800bb34:	4610      	mov	r0, r2
 800bb36:	e7f9      	b.n	800bb2c <strncmp+0x1c>

0800bb38 <_strtol_l.constprop.0>:
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb3e:	d001      	beq.n	800bb44 <_strtol_l.constprop.0+0xc>
 800bb40:	2b24      	cmp	r3, #36	; 0x24
 800bb42:	d906      	bls.n	800bb52 <_strtol_l.constprop.0+0x1a>
 800bb44:	f7ff f9a2 	bl	800ae8c <__errno>
 800bb48:	2316      	movs	r3, #22
 800bb4a:	6003      	str	r3, [r0, #0]
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc38 <_strtol_l.constprop.0+0x100>
 800bb56:	460d      	mov	r5, r1
 800bb58:	462e      	mov	r6, r5
 800bb5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb62:	f017 0708 	ands.w	r7, r7, #8
 800bb66:	d1f7      	bne.n	800bb58 <_strtol_l.constprop.0+0x20>
 800bb68:	2c2d      	cmp	r4, #45	; 0x2d
 800bb6a:	d132      	bne.n	800bbd2 <_strtol_l.constprop.0+0x9a>
 800bb6c:	782c      	ldrb	r4, [r5, #0]
 800bb6e:	2701      	movs	r7, #1
 800bb70:	1cb5      	adds	r5, r6, #2
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d05b      	beq.n	800bc2e <_strtol_l.constprop.0+0xf6>
 800bb76:	2b10      	cmp	r3, #16
 800bb78:	d109      	bne.n	800bb8e <_strtol_l.constprop.0+0x56>
 800bb7a:	2c30      	cmp	r4, #48	; 0x30
 800bb7c:	d107      	bne.n	800bb8e <_strtol_l.constprop.0+0x56>
 800bb7e:	782c      	ldrb	r4, [r5, #0]
 800bb80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb84:	2c58      	cmp	r4, #88	; 0x58
 800bb86:	d14d      	bne.n	800bc24 <_strtol_l.constprop.0+0xec>
 800bb88:	786c      	ldrb	r4, [r5, #1]
 800bb8a:	2310      	movs	r3, #16
 800bb8c:	3502      	adds	r5, #2
 800bb8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb92:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb96:	f04f 0c00 	mov.w	ip, #0
 800bb9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb9e:	4666      	mov	r6, ip
 800bba0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bba4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bba8:	f1be 0f09 	cmp.w	lr, #9
 800bbac:	d816      	bhi.n	800bbdc <_strtol_l.constprop.0+0xa4>
 800bbae:	4674      	mov	r4, lr
 800bbb0:	42a3      	cmp	r3, r4
 800bbb2:	dd24      	ble.n	800bbfe <_strtol_l.constprop.0+0xc6>
 800bbb4:	f1bc 0f00 	cmp.w	ip, #0
 800bbb8:	db1e      	blt.n	800bbf8 <_strtol_l.constprop.0+0xc0>
 800bbba:	45b1      	cmp	r9, r6
 800bbbc:	d31c      	bcc.n	800bbf8 <_strtol_l.constprop.0+0xc0>
 800bbbe:	d101      	bne.n	800bbc4 <_strtol_l.constprop.0+0x8c>
 800bbc0:	45a2      	cmp	sl, r4
 800bbc2:	db19      	blt.n	800bbf8 <_strtol_l.constprop.0+0xc0>
 800bbc4:	fb06 4603 	mla	r6, r6, r3, r4
 800bbc8:	f04f 0c01 	mov.w	ip, #1
 800bbcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbd0:	e7e8      	b.n	800bba4 <_strtol_l.constprop.0+0x6c>
 800bbd2:	2c2b      	cmp	r4, #43	; 0x2b
 800bbd4:	bf04      	itt	eq
 800bbd6:	782c      	ldrbeq	r4, [r5, #0]
 800bbd8:	1cb5      	addeq	r5, r6, #2
 800bbda:	e7ca      	b.n	800bb72 <_strtol_l.constprop.0+0x3a>
 800bbdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bbe0:	f1be 0f19 	cmp.w	lr, #25
 800bbe4:	d801      	bhi.n	800bbea <_strtol_l.constprop.0+0xb2>
 800bbe6:	3c37      	subs	r4, #55	; 0x37
 800bbe8:	e7e2      	b.n	800bbb0 <_strtol_l.constprop.0+0x78>
 800bbea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bbee:	f1be 0f19 	cmp.w	lr, #25
 800bbf2:	d804      	bhi.n	800bbfe <_strtol_l.constprop.0+0xc6>
 800bbf4:	3c57      	subs	r4, #87	; 0x57
 800bbf6:	e7db      	b.n	800bbb0 <_strtol_l.constprop.0+0x78>
 800bbf8:	f04f 3cff 	mov.w	ip, #4294967295
 800bbfc:	e7e6      	b.n	800bbcc <_strtol_l.constprop.0+0x94>
 800bbfe:	f1bc 0f00 	cmp.w	ip, #0
 800bc02:	da05      	bge.n	800bc10 <_strtol_l.constprop.0+0xd8>
 800bc04:	2322      	movs	r3, #34	; 0x22
 800bc06:	6003      	str	r3, [r0, #0]
 800bc08:	4646      	mov	r6, r8
 800bc0a:	b942      	cbnz	r2, 800bc1e <_strtol_l.constprop.0+0xe6>
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	e79e      	b.n	800bb4e <_strtol_l.constprop.0+0x16>
 800bc10:	b107      	cbz	r7, 800bc14 <_strtol_l.constprop.0+0xdc>
 800bc12:	4276      	negs	r6, r6
 800bc14:	2a00      	cmp	r2, #0
 800bc16:	d0f9      	beq.n	800bc0c <_strtol_l.constprop.0+0xd4>
 800bc18:	f1bc 0f00 	cmp.w	ip, #0
 800bc1c:	d000      	beq.n	800bc20 <_strtol_l.constprop.0+0xe8>
 800bc1e:	1e69      	subs	r1, r5, #1
 800bc20:	6011      	str	r1, [r2, #0]
 800bc22:	e7f3      	b.n	800bc0c <_strtol_l.constprop.0+0xd4>
 800bc24:	2430      	movs	r4, #48	; 0x30
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1b1      	bne.n	800bb8e <_strtol_l.constprop.0+0x56>
 800bc2a:	2308      	movs	r3, #8
 800bc2c:	e7af      	b.n	800bb8e <_strtol_l.constprop.0+0x56>
 800bc2e:	2c30      	cmp	r4, #48	; 0x30
 800bc30:	d0a5      	beq.n	800bb7e <_strtol_l.constprop.0+0x46>
 800bc32:	230a      	movs	r3, #10
 800bc34:	e7ab      	b.n	800bb8e <_strtol_l.constprop.0+0x56>
 800bc36:	bf00      	nop
 800bc38:	0800ff27 	.word	0x0800ff27

0800bc3c <_strtol_r>:
 800bc3c:	f7ff bf7c 	b.w	800bb38 <_strtol_l.constprop.0>

0800bc40 <strtol>:
 800bc40:	4613      	mov	r3, r2
 800bc42:	460a      	mov	r2, r1
 800bc44:	4601      	mov	r1, r0
 800bc46:	4802      	ldr	r0, [pc, #8]	; (800bc50 <strtol+0x10>)
 800bc48:	6800      	ldr	r0, [r0, #0]
 800bc4a:	f7ff bf75 	b.w	800bb38 <_strtol_l.constprop.0>
 800bc4e:	bf00      	nop
 800bc50:	200002f0 	.word	0x200002f0

0800bc54 <_write_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d07      	ldr	r5, [pc, #28]	; (800bc74 <_write_r+0x20>)
 800bc58:	4604      	mov	r4, r0
 800bc5a:	4608      	mov	r0, r1
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	602a      	str	r2, [r5, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	f7f8 f9ab 	bl	8003fbe <_write>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_write_r+0x1e>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_write_r+0x1e>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	20000bc8 	.word	0x20000bc8

0800bc78 <_close_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4d06      	ldr	r5, [pc, #24]	; (800bc94 <_close_r+0x1c>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	f7f8 f9b7 	bl	8003ff6 <_close>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_close_r+0x1a>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_close_r+0x1a>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	20000bc8 	.word	0x20000bc8

0800bc98 <quorem>:
 800bc98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	6903      	ldr	r3, [r0, #16]
 800bc9e:	690c      	ldr	r4, [r1, #16]
 800bca0:	42a3      	cmp	r3, r4
 800bca2:	4607      	mov	r7, r0
 800bca4:	f2c0 8081 	blt.w	800bdaa <quorem+0x112>
 800bca8:	3c01      	subs	r4, #1
 800bcaa:	f101 0814 	add.w	r8, r1, #20
 800bcae:	f100 0514 	add.w	r5, r0, #20
 800bcb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bccc:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcd0:	d331      	bcc.n	800bd36 <quorem+0x9e>
 800bcd2:	f04f 0e00 	mov.w	lr, #0
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	46ac      	mov	ip, r5
 800bcda:	46f2      	mov	sl, lr
 800bcdc:	f850 2b04 	ldr.w	r2, [r0], #4
 800bce0:	b293      	uxth	r3, r2
 800bce2:	fb06 e303 	mla	r3, r6, r3, lr
 800bce6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	ebaa 0303 	sub.w	r3, sl, r3
 800bcf0:	f8dc a000 	ldr.w	sl, [ip]
 800bcf4:	0c12      	lsrs	r2, r2, #16
 800bcf6:	fa13 f38a 	uxtah	r3, r3, sl
 800bcfa:	fb06 e202 	mla	r2, r6, r2, lr
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	9b00      	ldr	r3, [sp, #0]
 800bd02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd06:	b292      	uxth	r2, r2
 800bd08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd10:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd14:	4581      	cmp	r9, r0
 800bd16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd1a:	f84c 3b04 	str.w	r3, [ip], #4
 800bd1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd22:	d2db      	bcs.n	800bcdc <quorem+0x44>
 800bd24:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd28:	b92b      	cbnz	r3, 800bd36 <quorem+0x9e>
 800bd2a:	9b01      	ldr	r3, [sp, #4]
 800bd2c:	3b04      	subs	r3, #4
 800bd2e:	429d      	cmp	r5, r3
 800bd30:	461a      	mov	r2, r3
 800bd32:	d32e      	bcc.n	800bd92 <quorem+0xfa>
 800bd34:	613c      	str	r4, [r7, #16]
 800bd36:	4638      	mov	r0, r7
 800bd38:	f001 f8da 	bl	800cef0 <__mcmp>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	db24      	blt.n	800bd8a <quorem+0xf2>
 800bd40:	3601      	adds	r6, #1
 800bd42:	4628      	mov	r0, r5
 800bd44:	f04f 0c00 	mov.w	ip, #0
 800bd48:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd4c:	f8d0 e000 	ldr.w	lr, [r0]
 800bd50:	b293      	uxth	r3, r2
 800bd52:	ebac 0303 	sub.w	r3, ip, r3
 800bd56:	0c12      	lsrs	r2, r2, #16
 800bd58:	fa13 f38e 	uxtah	r3, r3, lr
 800bd5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd6a:	45c1      	cmp	r9, r8
 800bd6c:	f840 3b04 	str.w	r3, [r0], #4
 800bd70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd74:	d2e8      	bcs.n	800bd48 <quorem+0xb0>
 800bd76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd7e:	b922      	cbnz	r2, 800bd8a <quorem+0xf2>
 800bd80:	3b04      	subs	r3, #4
 800bd82:	429d      	cmp	r5, r3
 800bd84:	461a      	mov	r2, r3
 800bd86:	d30a      	bcc.n	800bd9e <quorem+0x106>
 800bd88:	613c      	str	r4, [r7, #16]
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	b003      	add	sp, #12
 800bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd92:	6812      	ldr	r2, [r2, #0]
 800bd94:	3b04      	subs	r3, #4
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	d1cc      	bne.n	800bd34 <quorem+0x9c>
 800bd9a:	3c01      	subs	r4, #1
 800bd9c:	e7c7      	b.n	800bd2e <quorem+0x96>
 800bd9e:	6812      	ldr	r2, [r2, #0]
 800bda0:	3b04      	subs	r3, #4
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	d1f0      	bne.n	800bd88 <quorem+0xf0>
 800bda6:	3c01      	subs	r4, #1
 800bda8:	e7eb      	b.n	800bd82 <quorem+0xea>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e7ee      	b.n	800bd8c <quorem+0xf4>
	...

0800bdb0 <_dtoa_r>:
 800bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb4:	ed2d 8b04 	vpush	{d8-d9}
 800bdb8:	ec57 6b10 	vmov	r6, r7, d0
 800bdbc:	b093      	sub	sp, #76	; 0x4c
 800bdbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bdc4:	9106      	str	r1, [sp, #24]
 800bdc6:	ee10 aa10 	vmov	sl, s0
 800bdca:	4604      	mov	r4, r0
 800bdcc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdce:	930c      	str	r3, [sp, #48]	; 0x30
 800bdd0:	46bb      	mov	fp, r7
 800bdd2:	b975      	cbnz	r5, 800bdf2 <_dtoa_r+0x42>
 800bdd4:	2010      	movs	r0, #16
 800bdd6:	f7ff f883 	bl	800aee0 <malloc>
 800bdda:	4602      	mov	r2, r0
 800bddc:	6260      	str	r0, [r4, #36]	; 0x24
 800bdde:	b920      	cbnz	r0, 800bdea <_dtoa_r+0x3a>
 800bde0:	4ba7      	ldr	r3, [pc, #668]	; (800c080 <_dtoa_r+0x2d0>)
 800bde2:	21ea      	movs	r1, #234	; 0xea
 800bde4:	48a7      	ldr	r0, [pc, #668]	; (800c084 <_dtoa_r+0x2d4>)
 800bde6:	f001 ff13 	bl	800dc10 <__assert_func>
 800bdea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bdee:	6005      	str	r5, [r0, #0]
 800bdf0:	60c5      	str	r5, [r0, #12]
 800bdf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdf4:	6819      	ldr	r1, [r3, #0]
 800bdf6:	b151      	cbz	r1, 800be0e <_dtoa_r+0x5e>
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	604a      	str	r2, [r1, #4]
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4093      	lsls	r3, r2
 800be00:	608b      	str	r3, [r1, #8]
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fe32 	bl	800ca6c <_Bfree>
 800be08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be0a:	2200      	movs	r2, #0
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	1e3b      	subs	r3, r7, #0
 800be10:	bfaa      	itet	ge
 800be12:	2300      	movge	r3, #0
 800be14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be18:	f8c8 3000 	strge.w	r3, [r8]
 800be1c:	4b9a      	ldr	r3, [pc, #616]	; (800c088 <_dtoa_r+0x2d8>)
 800be1e:	bfbc      	itt	lt
 800be20:	2201      	movlt	r2, #1
 800be22:	f8c8 2000 	strlt.w	r2, [r8]
 800be26:	ea33 030b 	bics.w	r3, r3, fp
 800be2a:	d11b      	bne.n	800be64 <_dtoa_r+0xb4>
 800be2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be38:	4333      	orrs	r3, r6
 800be3a:	f000 8592 	beq.w	800c962 <_dtoa_r+0xbb2>
 800be3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be40:	b963      	cbnz	r3, 800be5c <_dtoa_r+0xac>
 800be42:	4b92      	ldr	r3, [pc, #584]	; (800c08c <_dtoa_r+0x2dc>)
 800be44:	e022      	b.n	800be8c <_dtoa_r+0xdc>
 800be46:	4b92      	ldr	r3, [pc, #584]	; (800c090 <_dtoa_r+0x2e0>)
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	3308      	adds	r3, #8
 800be4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	9801      	ldr	r0, [sp, #4]
 800be52:	b013      	add	sp, #76	; 0x4c
 800be54:	ecbd 8b04 	vpop	{d8-d9}
 800be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5c:	4b8b      	ldr	r3, [pc, #556]	; (800c08c <_dtoa_r+0x2dc>)
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	3303      	adds	r3, #3
 800be62:	e7f3      	b.n	800be4c <_dtoa_r+0x9c>
 800be64:	2200      	movs	r2, #0
 800be66:	2300      	movs	r3, #0
 800be68:	4650      	mov	r0, sl
 800be6a:	4659      	mov	r1, fp
 800be6c:	f7f4 fe44 	bl	8000af8 <__aeabi_dcmpeq>
 800be70:	ec4b ab19 	vmov	d9, sl, fp
 800be74:	4680      	mov	r8, r0
 800be76:	b158      	cbz	r0, 800be90 <_dtoa_r+0xe0>
 800be78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be7a:	2301      	movs	r3, #1
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 856b 	beq.w	800c95c <_dtoa_r+0xbac>
 800be86:	4883      	ldr	r0, [pc, #524]	; (800c094 <_dtoa_r+0x2e4>)
 800be88:	6018      	str	r0, [r3, #0]
 800be8a:	1e43      	subs	r3, r0, #1
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	e7df      	b.n	800be50 <_dtoa_r+0xa0>
 800be90:	ec4b ab10 	vmov	d0, sl, fp
 800be94:	aa10      	add	r2, sp, #64	; 0x40
 800be96:	a911      	add	r1, sp, #68	; 0x44
 800be98:	4620      	mov	r0, r4
 800be9a:	f001 f8cf 	bl	800d03c <__d2b>
 800be9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bea2:	ee08 0a10 	vmov	s16, r0
 800bea6:	2d00      	cmp	r5, #0
 800bea8:	f000 8084 	beq.w	800bfb4 <_dtoa_r+0x204>
 800beac:	ee19 3a90 	vmov	r3, s19
 800beb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800beb8:	4656      	mov	r6, sl
 800beba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bec6:	4b74      	ldr	r3, [pc, #464]	; (800c098 <_dtoa_r+0x2e8>)
 800bec8:	2200      	movs	r2, #0
 800beca:	4630      	mov	r0, r6
 800becc:	4639      	mov	r1, r7
 800bece:	f7f4 f9f3 	bl	80002b8 <__aeabi_dsub>
 800bed2:	a365      	add	r3, pc, #404	; (adr r3, 800c068 <_dtoa_r+0x2b8>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f7f4 fba6 	bl	8000628 <__aeabi_dmul>
 800bedc:	a364      	add	r3, pc, #400	; (adr r3, 800c070 <_dtoa_r+0x2c0>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 f9eb 	bl	80002bc <__adddf3>
 800bee6:	4606      	mov	r6, r0
 800bee8:	4628      	mov	r0, r5
 800beea:	460f      	mov	r7, r1
 800beec:	f7f4 fb32 	bl	8000554 <__aeabi_i2d>
 800bef0:	a361      	add	r3, pc, #388	; (adr r3, 800c078 <_dtoa_r+0x2c8>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	f7f4 fb97 	bl	8000628 <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4630      	mov	r0, r6
 800bf00:	4639      	mov	r1, r7
 800bf02:	f7f4 f9db 	bl	80002bc <__adddf3>
 800bf06:	4606      	mov	r6, r0
 800bf08:	460f      	mov	r7, r1
 800bf0a:	f7f4 fe3d 	bl	8000b88 <__aeabi_d2iz>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	9000      	str	r0, [sp, #0]
 800bf12:	2300      	movs	r3, #0
 800bf14:	4630      	mov	r0, r6
 800bf16:	4639      	mov	r1, r7
 800bf18:	f7f4 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 800bf1c:	b150      	cbz	r0, 800bf34 <_dtoa_r+0x184>
 800bf1e:	9800      	ldr	r0, [sp, #0]
 800bf20:	f7f4 fb18 	bl	8000554 <__aeabi_i2d>
 800bf24:	4632      	mov	r2, r6
 800bf26:	463b      	mov	r3, r7
 800bf28:	f7f4 fde6 	bl	8000af8 <__aeabi_dcmpeq>
 800bf2c:	b910      	cbnz	r0, 800bf34 <_dtoa_r+0x184>
 800bf2e:	9b00      	ldr	r3, [sp, #0]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	9b00      	ldr	r3, [sp, #0]
 800bf36:	2b16      	cmp	r3, #22
 800bf38:	d85a      	bhi.n	800bff0 <_dtoa_r+0x240>
 800bf3a:	9a00      	ldr	r2, [sp, #0]
 800bf3c:	4b57      	ldr	r3, [pc, #348]	; (800c09c <_dtoa_r+0x2ec>)
 800bf3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	ec51 0b19 	vmov	r0, r1, d9
 800bf4a:	f7f4 fddf 	bl	8000b0c <__aeabi_dcmplt>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d050      	beq.n	800bff4 <_dtoa_r+0x244>
 800bf52:	9b00      	ldr	r3, [sp, #0]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf5e:	1b5d      	subs	r5, r3, r5
 800bf60:	1e6b      	subs	r3, r5, #1
 800bf62:	9305      	str	r3, [sp, #20]
 800bf64:	bf45      	ittet	mi
 800bf66:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf6a:	9304      	strmi	r3, [sp, #16]
 800bf6c:	2300      	movpl	r3, #0
 800bf6e:	2300      	movmi	r3, #0
 800bf70:	bf4c      	ite	mi
 800bf72:	9305      	strmi	r3, [sp, #20]
 800bf74:	9304      	strpl	r3, [sp, #16]
 800bf76:	9b00      	ldr	r3, [sp, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	db3d      	blt.n	800bff8 <_dtoa_r+0x248>
 800bf7c:	9b05      	ldr	r3, [sp, #20]
 800bf7e:	9a00      	ldr	r2, [sp, #0]
 800bf80:	920a      	str	r2, [sp, #40]	; 0x28
 800bf82:	4413      	add	r3, r2
 800bf84:	9305      	str	r3, [sp, #20]
 800bf86:	2300      	movs	r3, #0
 800bf88:	9307      	str	r3, [sp, #28]
 800bf8a:	9b06      	ldr	r3, [sp, #24]
 800bf8c:	2b09      	cmp	r3, #9
 800bf8e:	f200 8089 	bhi.w	800c0a4 <_dtoa_r+0x2f4>
 800bf92:	2b05      	cmp	r3, #5
 800bf94:	bfc4      	itt	gt
 800bf96:	3b04      	subgt	r3, #4
 800bf98:	9306      	strgt	r3, [sp, #24]
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	f1a3 0302 	sub.w	r3, r3, #2
 800bfa0:	bfcc      	ite	gt
 800bfa2:	2500      	movgt	r5, #0
 800bfa4:	2501      	movle	r5, #1
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	f200 8087 	bhi.w	800c0ba <_dtoa_r+0x30a>
 800bfac:	e8df f003 	tbb	[pc, r3]
 800bfb0:	59383a2d 	.word	0x59383a2d
 800bfb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bfb8:	441d      	add	r5, r3
 800bfba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bfbe:	2b20      	cmp	r3, #32
 800bfc0:	bfc1      	itttt	gt
 800bfc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bfc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bfca:	fa0b f303 	lslgt.w	r3, fp, r3
 800bfce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bfd2:	bfda      	itte	le
 800bfd4:	f1c3 0320 	rsble	r3, r3, #32
 800bfd8:	fa06 f003 	lslle.w	r0, r6, r3
 800bfdc:	4318      	orrgt	r0, r3
 800bfde:	f7f4 faa9 	bl	8000534 <__aeabi_ui2d>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bfea:	3d01      	subs	r5, #1
 800bfec:	930e      	str	r3, [sp, #56]	; 0x38
 800bfee:	e76a      	b.n	800bec6 <_dtoa_r+0x116>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e7b2      	b.n	800bf5a <_dtoa_r+0x1aa>
 800bff4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bff6:	e7b1      	b.n	800bf5c <_dtoa_r+0x1ac>
 800bff8:	9b04      	ldr	r3, [sp, #16]
 800bffa:	9a00      	ldr	r2, [sp, #0]
 800bffc:	1a9b      	subs	r3, r3, r2
 800bffe:	9304      	str	r3, [sp, #16]
 800c000:	4253      	negs	r3, r2
 800c002:	9307      	str	r3, [sp, #28]
 800c004:	2300      	movs	r3, #0
 800c006:	930a      	str	r3, [sp, #40]	; 0x28
 800c008:	e7bf      	b.n	800bf8a <_dtoa_r+0x1da>
 800c00a:	2300      	movs	r3, #0
 800c00c:	9308      	str	r3, [sp, #32]
 800c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c010:	2b00      	cmp	r3, #0
 800c012:	dc55      	bgt.n	800c0c0 <_dtoa_r+0x310>
 800c014:	2301      	movs	r3, #1
 800c016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c01a:	461a      	mov	r2, r3
 800c01c:	9209      	str	r2, [sp, #36]	; 0x24
 800c01e:	e00c      	b.n	800c03a <_dtoa_r+0x28a>
 800c020:	2301      	movs	r3, #1
 800c022:	e7f3      	b.n	800c00c <_dtoa_r+0x25c>
 800c024:	2300      	movs	r3, #0
 800c026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c028:	9308      	str	r3, [sp, #32]
 800c02a:	9b00      	ldr	r3, [sp, #0]
 800c02c:	4413      	add	r3, r2
 800c02e:	9302      	str	r3, [sp, #8]
 800c030:	3301      	adds	r3, #1
 800c032:	2b01      	cmp	r3, #1
 800c034:	9303      	str	r3, [sp, #12]
 800c036:	bfb8      	it	lt
 800c038:	2301      	movlt	r3, #1
 800c03a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c03c:	2200      	movs	r2, #0
 800c03e:	6042      	str	r2, [r0, #4]
 800c040:	2204      	movs	r2, #4
 800c042:	f102 0614 	add.w	r6, r2, #20
 800c046:	429e      	cmp	r6, r3
 800c048:	6841      	ldr	r1, [r0, #4]
 800c04a:	d93d      	bls.n	800c0c8 <_dtoa_r+0x318>
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fccd 	bl	800c9ec <_Balloc>
 800c052:	9001      	str	r0, [sp, #4]
 800c054:	2800      	cmp	r0, #0
 800c056:	d13b      	bne.n	800c0d0 <_dtoa_r+0x320>
 800c058:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <_dtoa_r+0x2f0>)
 800c05a:	4602      	mov	r2, r0
 800c05c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c060:	e6c0      	b.n	800bde4 <_dtoa_r+0x34>
 800c062:	2301      	movs	r3, #1
 800c064:	e7df      	b.n	800c026 <_dtoa_r+0x276>
 800c066:	bf00      	nop
 800c068:	636f4361 	.word	0x636f4361
 800c06c:	3fd287a7 	.word	0x3fd287a7
 800c070:	8b60c8b3 	.word	0x8b60c8b3
 800c074:	3fc68a28 	.word	0x3fc68a28
 800c078:	509f79fb 	.word	0x509f79fb
 800c07c:	3fd34413 	.word	0x3fd34413
 800c080:	08010034 	.word	0x08010034
 800c084:	0801004b 	.word	0x0801004b
 800c088:	7ff00000 	.word	0x7ff00000
 800c08c:	08010030 	.word	0x08010030
 800c090:	08010027 	.word	0x08010027
 800c094:	0801022a 	.word	0x0801022a
 800c098:	3ff80000 	.word	0x3ff80000
 800c09c:	08010140 	.word	0x08010140
 800c0a0:	080100a6 	.word	0x080100a6
 800c0a4:	2501      	movs	r5, #1
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	9306      	str	r3, [sp, #24]
 800c0aa:	9508      	str	r5, [sp, #32]
 800c0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2312      	movs	r3, #18
 800c0b8:	e7b0      	b.n	800c01c <_dtoa_r+0x26c>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	9308      	str	r3, [sp, #32]
 800c0be:	e7f5      	b.n	800c0ac <_dtoa_r+0x2fc>
 800c0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0c6:	e7b8      	b.n	800c03a <_dtoa_r+0x28a>
 800c0c8:	3101      	adds	r1, #1
 800c0ca:	6041      	str	r1, [r0, #4]
 800c0cc:	0052      	lsls	r2, r2, #1
 800c0ce:	e7b8      	b.n	800c042 <_dtoa_r+0x292>
 800c0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0d2:	9a01      	ldr	r2, [sp, #4]
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	9b03      	ldr	r3, [sp, #12]
 800c0d8:	2b0e      	cmp	r3, #14
 800c0da:	f200 809d 	bhi.w	800c218 <_dtoa_r+0x468>
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	f000 809a 	beq.w	800c218 <_dtoa_r+0x468>
 800c0e4:	9b00      	ldr	r3, [sp, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	dd32      	ble.n	800c150 <_dtoa_r+0x3a0>
 800c0ea:	4ab7      	ldr	r2, [pc, #732]	; (800c3c8 <_dtoa_r+0x618>)
 800c0ec:	f003 030f 	and.w	r3, r3, #15
 800c0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0f8:	9b00      	ldr	r3, [sp, #0]
 800c0fa:	05d8      	lsls	r0, r3, #23
 800c0fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c100:	d516      	bpl.n	800c130 <_dtoa_r+0x380>
 800c102:	4bb2      	ldr	r3, [pc, #712]	; (800c3cc <_dtoa_r+0x61c>)
 800c104:	ec51 0b19 	vmov	r0, r1, d9
 800c108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c10c:	f7f4 fbb6 	bl	800087c <__aeabi_ddiv>
 800c110:	f007 070f 	and.w	r7, r7, #15
 800c114:	4682      	mov	sl, r0
 800c116:	468b      	mov	fp, r1
 800c118:	2503      	movs	r5, #3
 800c11a:	4eac      	ldr	r6, [pc, #688]	; (800c3cc <_dtoa_r+0x61c>)
 800c11c:	b957      	cbnz	r7, 800c134 <_dtoa_r+0x384>
 800c11e:	4642      	mov	r2, r8
 800c120:	464b      	mov	r3, r9
 800c122:	4650      	mov	r0, sl
 800c124:	4659      	mov	r1, fp
 800c126:	f7f4 fba9 	bl	800087c <__aeabi_ddiv>
 800c12a:	4682      	mov	sl, r0
 800c12c:	468b      	mov	fp, r1
 800c12e:	e028      	b.n	800c182 <_dtoa_r+0x3d2>
 800c130:	2502      	movs	r5, #2
 800c132:	e7f2      	b.n	800c11a <_dtoa_r+0x36a>
 800c134:	07f9      	lsls	r1, r7, #31
 800c136:	d508      	bpl.n	800c14a <_dtoa_r+0x39a>
 800c138:	4640      	mov	r0, r8
 800c13a:	4649      	mov	r1, r9
 800c13c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c140:	f7f4 fa72 	bl	8000628 <__aeabi_dmul>
 800c144:	3501      	adds	r5, #1
 800c146:	4680      	mov	r8, r0
 800c148:	4689      	mov	r9, r1
 800c14a:	107f      	asrs	r7, r7, #1
 800c14c:	3608      	adds	r6, #8
 800c14e:	e7e5      	b.n	800c11c <_dtoa_r+0x36c>
 800c150:	f000 809b 	beq.w	800c28a <_dtoa_r+0x4da>
 800c154:	9b00      	ldr	r3, [sp, #0]
 800c156:	4f9d      	ldr	r7, [pc, #628]	; (800c3cc <_dtoa_r+0x61c>)
 800c158:	425e      	negs	r6, r3
 800c15a:	4b9b      	ldr	r3, [pc, #620]	; (800c3c8 <_dtoa_r+0x618>)
 800c15c:	f006 020f 	and.w	r2, r6, #15
 800c160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	ec51 0b19 	vmov	r0, r1, d9
 800c16c:	f7f4 fa5c 	bl	8000628 <__aeabi_dmul>
 800c170:	1136      	asrs	r6, r6, #4
 800c172:	4682      	mov	sl, r0
 800c174:	468b      	mov	fp, r1
 800c176:	2300      	movs	r3, #0
 800c178:	2502      	movs	r5, #2
 800c17a:	2e00      	cmp	r6, #0
 800c17c:	d17a      	bne.n	800c274 <_dtoa_r+0x4c4>
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1d3      	bne.n	800c12a <_dtoa_r+0x37a>
 800c182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 8082 	beq.w	800c28e <_dtoa_r+0x4de>
 800c18a:	4b91      	ldr	r3, [pc, #580]	; (800c3d0 <_dtoa_r+0x620>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	4650      	mov	r0, sl
 800c190:	4659      	mov	r1, fp
 800c192:	f7f4 fcbb 	bl	8000b0c <__aeabi_dcmplt>
 800c196:	2800      	cmp	r0, #0
 800c198:	d079      	beq.n	800c28e <_dtoa_r+0x4de>
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d076      	beq.n	800c28e <_dtoa_r+0x4de>
 800c1a0:	9b02      	ldr	r3, [sp, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	dd36      	ble.n	800c214 <_dtoa_r+0x464>
 800c1a6:	9b00      	ldr	r3, [sp, #0]
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	4659      	mov	r1, fp
 800c1ac:	1e5f      	subs	r7, r3, #1
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4b88      	ldr	r3, [pc, #544]	; (800c3d4 <_dtoa_r+0x624>)
 800c1b2:	f7f4 fa39 	bl	8000628 <__aeabi_dmul>
 800c1b6:	9e02      	ldr	r6, [sp, #8]
 800c1b8:	4682      	mov	sl, r0
 800c1ba:	468b      	mov	fp, r1
 800c1bc:	3501      	adds	r5, #1
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f7f4 f9c8 	bl	8000554 <__aeabi_i2d>
 800c1c4:	4652      	mov	r2, sl
 800c1c6:	465b      	mov	r3, fp
 800c1c8:	f7f4 fa2e 	bl	8000628 <__aeabi_dmul>
 800c1cc:	4b82      	ldr	r3, [pc, #520]	; (800c3d8 <_dtoa_r+0x628>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f7f4 f874 	bl	80002bc <__adddf3>
 800c1d4:	46d0      	mov	r8, sl
 800c1d6:	46d9      	mov	r9, fp
 800c1d8:	4682      	mov	sl, r0
 800c1da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c1de:	2e00      	cmp	r6, #0
 800c1e0:	d158      	bne.n	800c294 <_dtoa_r+0x4e4>
 800c1e2:	4b7e      	ldr	r3, [pc, #504]	; (800c3dc <_dtoa_r+0x62c>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4640      	mov	r0, r8
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	f7f4 f865 	bl	80002b8 <__aeabi_dsub>
 800c1ee:	4652      	mov	r2, sl
 800c1f0:	465b      	mov	r3, fp
 800c1f2:	4680      	mov	r8, r0
 800c1f4:	4689      	mov	r9, r1
 800c1f6:	f7f4 fca7 	bl	8000b48 <__aeabi_dcmpgt>
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	f040 8295 	bne.w	800c72a <_dtoa_r+0x97a>
 800c200:	4652      	mov	r2, sl
 800c202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c206:	4640      	mov	r0, r8
 800c208:	4649      	mov	r1, r9
 800c20a:	f7f4 fc7f 	bl	8000b0c <__aeabi_dcmplt>
 800c20e:	2800      	cmp	r0, #0
 800c210:	f040 8289 	bne.w	800c726 <_dtoa_r+0x976>
 800c214:	ec5b ab19 	vmov	sl, fp, d9
 800c218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f2c0 8148 	blt.w	800c4b0 <_dtoa_r+0x700>
 800c220:	9a00      	ldr	r2, [sp, #0]
 800c222:	2a0e      	cmp	r2, #14
 800c224:	f300 8144 	bgt.w	800c4b0 <_dtoa_r+0x700>
 800c228:	4b67      	ldr	r3, [pc, #412]	; (800c3c8 <_dtoa_r+0x618>)
 800c22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c22e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c234:	2b00      	cmp	r3, #0
 800c236:	f280 80d5 	bge.w	800c3e4 <_dtoa_r+0x634>
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f300 80d1 	bgt.w	800c3e4 <_dtoa_r+0x634>
 800c242:	f040 826f 	bne.w	800c724 <_dtoa_r+0x974>
 800c246:	4b65      	ldr	r3, [pc, #404]	; (800c3dc <_dtoa_r+0x62c>)
 800c248:	2200      	movs	r2, #0
 800c24a:	4640      	mov	r0, r8
 800c24c:	4649      	mov	r1, r9
 800c24e:	f7f4 f9eb 	bl	8000628 <__aeabi_dmul>
 800c252:	4652      	mov	r2, sl
 800c254:	465b      	mov	r3, fp
 800c256:	f7f4 fc6d 	bl	8000b34 <__aeabi_dcmpge>
 800c25a:	9e03      	ldr	r6, [sp, #12]
 800c25c:	4637      	mov	r7, r6
 800c25e:	2800      	cmp	r0, #0
 800c260:	f040 8245 	bne.w	800c6ee <_dtoa_r+0x93e>
 800c264:	9d01      	ldr	r5, [sp, #4]
 800c266:	2331      	movs	r3, #49	; 0x31
 800c268:	f805 3b01 	strb.w	r3, [r5], #1
 800c26c:	9b00      	ldr	r3, [sp, #0]
 800c26e:	3301      	adds	r3, #1
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	e240      	b.n	800c6f6 <_dtoa_r+0x946>
 800c274:	07f2      	lsls	r2, r6, #31
 800c276:	d505      	bpl.n	800c284 <_dtoa_r+0x4d4>
 800c278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c27c:	f7f4 f9d4 	bl	8000628 <__aeabi_dmul>
 800c280:	3501      	adds	r5, #1
 800c282:	2301      	movs	r3, #1
 800c284:	1076      	asrs	r6, r6, #1
 800c286:	3708      	adds	r7, #8
 800c288:	e777      	b.n	800c17a <_dtoa_r+0x3ca>
 800c28a:	2502      	movs	r5, #2
 800c28c:	e779      	b.n	800c182 <_dtoa_r+0x3d2>
 800c28e:	9f00      	ldr	r7, [sp, #0]
 800c290:	9e03      	ldr	r6, [sp, #12]
 800c292:	e794      	b.n	800c1be <_dtoa_r+0x40e>
 800c294:	9901      	ldr	r1, [sp, #4]
 800c296:	4b4c      	ldr	r3, [pc, #304]	; (800c3c8 <_dtoa_r+0x618>)
 800c298:	4431      	add	r1, r6
 800c29a:	910d      	str	r1, [sp, #52]	; 0x34
 800c29c:	9908      	ldr	r1, [sp, #32]
 800c29e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c2a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2a6:	2900      	cmp	r1, #0
 800c2a8:	d043      	beq.n	800c332 <_dtoa_r+0x582>
 800c2aa:	494d      	ldr	r1, [pc, #308]	; (800c3e0 <_dtoa_r+0x630>)
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	f7f4 fae5 	bl	800087c <__aeabi_ddiv>
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	f7f3 ffff 	bl	80002b8 <__aeabi_dsub>
 800c2ba:	9d01      	ldr	r5, [sp, #4]
 800c2bc:	4682      	mov	sl, r0
 800c2be:	468b      	mov	fp, r1
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	f7f4 fc60 	bl	8000b88 <__aeabi_d2iz>
 800c2c8:	4606      	mov	r6, r0
 800c2ca:	f7f4 f943 	bl	8000554 <__aeabi_i2d>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	f7f3 ffef 	bl	80002b8 <__aeabi_dsub>
 800c2da:	3630      	adds	r6, #48	; 0x30
 800c2dc:	f805 6b01 	strb.w	r6, [r5], #1
 800c2e0:	4652      	mov	r2, sl
 800c2e2:	465b      	mov	r3, fp
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	f7f4 fc10 	bl	8000b0c <__aeabi_dcmplt>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d163      	bne.n	800c3b8 <_dtoa_r+0x608>
 800c2f0:	4642      	mov	r2, r8
 800c2f2:	464b      	mov	r3, r9
 800c2f4:	4936      	ldr	r1, [pc, #216]	; (800c3d0 <_dtoa_r+0x620>)
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	f7f3 ffde 	bl	80002b8 <__aeabi_dsub>
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	465b      	mov	r3, fp
 800c300:	f7f4 fc04 	bl	8000b0c <__aeabi_dcmplt>
 800c304:	2800      	cmp	r0, #0
 800c306:	f040 80b5 	bne.w	800c474 <_dtoa_r+0x6c4>
 800c30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c30c:	429d      	cmp	r5, r3
 800c30e:	d081      	beq.n	800c214 <_dtoa_r+0x464>
 800c310:	4b30      	ldr	r3, [pc, #192]	; (800c3d4 <_dtoa_r+0x624>)
 800c312:	2200      	movs	r2, #0
 800c314:	4650      	mov	r0, sl
 800c316:	4659      	mov	r1, fp
 800c318:	f7f4 f986 	bl	8000628 <__aeabi_dmul>
 800c31c:	4b2d      	ldr	r3, [pc, #180]	; (800c3d4 <_dtoa_r+0x624>)
 800c31e:	4682      	mov	sl, r0
 800c320:	468b      	mov	fp, r1
 800c322:	4640      	mov	r0, r8
 800c324:	4649      	mov	r1, r9
 800c326:	2200      	movs	r2, #0
 800c328:	f7f4 f97e 	bl	8000628 <__aeabi_dmul>
 800c32c:	4680      	mov	r8, r0
 800c32e:	4689      	mov	r9, r1
 800c330:	e7c6      	b.n	800c2c0 <_dtoa_r+0x510>
 800c332:	4650      	mov	r0, sl
 800c334:	4659      	mov	r1, fp
 800c336:	f7f4 f977 	bl	8000628 <__aeabi_dmul>
 800c33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c33c:	9d01      	ldr	r5, [sp, #4]
 800c33e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c340:	4682      	mov	sl, r0
 800c342:	468b      	mov	fp, r1
 800c344:	4649      	mov	r1, r9
 800c346:	4640      	mov	r0, r8
 800c348:	f7f4 fc1e 	bl	8000b88 <__aeabi_d2iz>
 800c34c:	4606      	mov	r6, r0
 800c34e:	f7f4 f901 	bl	8000554 <__aeabi_i2d>
 800c352:	3630      	adds	r6, #48	; 0x30
 800c354:	4602      	mov	r2, r0
 800c356:	460b      	mov	r3, r1
 800c358:	4640      	mov	r0, r8
 800c35a:	4649      	mov	r1, r9
 800c35c:	f7f3 ffac 	bl	80002b8 <__aeabi_dsub>
 800c360:	f805 6b01 	strb.w	r6, [r5], #1
 800c364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c366:	429d      	cmp	r5, r3
 800c368:	4680      	mov	r8, r0
 800c36a:	4689      	mov	r9, r1
 800c36c:	f04f 0200 	mov.w	r2, #0
 800c370:	d124      	bne.n	800c3bc <_dtoa_r+0x60c>
 800c372:	4b1b      	ldr	r3, [pc, #108]	; (800c3e0 <_dtoa_r+0x630>)
 800c374:	4650      	mov	r0, sl
 800c376:	4659      	mov	r1, fp
 800c378:	f7f3 ffa0 	bl	80002bc <__adddf3>
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4640      	mov	r0, r8
 800c382:	4649      	mov	r1, r9
 800c384:	f7f4 fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d173      	bne.n	800c474 <_dtoa_r+0x6c4>
 800c38c:	4652      	mov	r2, sl
 800c38e:	465b      	mov	r3, fp
 800c390:	4913      	ldr	r1, [pc, #76]	; (800c3e0 <_dtoa_r+0x630>)
 800c392:	2000      	movs	r0, #0
 800c394:	f7f3 ff90 	bl	80002b8 <__aeabi_dsub>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4640      	mov	r0, r8
 800c39e:	4649      	mov	r1, r9
 800c3a0:	f7f4 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	f43f af35 	beq.w	800c214 <_dtoa_r+0x464>
 800c3aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3ac:	1e6b      	subs	r3, r5, #1
 800c3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3b4:	2b30      	cmp	r3, #48	; 0x30
 800c3b6:	d0f8      	beq.n	800c3aa <_dtoa_r+0x5fa>
 800c3b8:	9700      	str	r7, [sp, #0]
 800c3ba:	e049      	b.n	800c450 <_dtoa_r+0x6a0>
 800c3bc:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <_dtoa_r+0x624>)
 800c3be:	f7f4 f933 	bl	8000628 <__aeabi_dmul>
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	4689      	mov	r9, r1
 800c3c6:	e7bd      	b.n	800c344 <_dtoa_r+0x594>
 800c3c8:	08010140 	.word	0x08010140
 800c3cc:	08010118 	.word	0x08010118
 800c3d0:	3ff00000 	.word	0x3ff00000
 800c3d4:	40240000 	.word	0x40240000
 800c3d8:	401c0000 	.word	0x401c0000
 800c3dc:	40140000 	.word	0x40140000
 800c3e0:	3fe00000 	.word	0x3fe00000
 800c3e4:	9d01      	ldr	r5, [sp, #4]
 800c3e6:	4656      	mov	r6, sl
 800c3e8:	465f      	mov	r7, fp
 800c3ea:	4642      	mov	r2, r8
 800c3ec:	464b      	mov	r3, r9
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	4639      	mov	r1, r7
 800c3f2:	f7f4 fa43 	bl	800087c <__aeabi_ddiv>
 800c3f6:	f7f4 fbc7 	bl	8000b88 <__aeabi_d2iz>
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	f7f4 f8aa 	bl	8000554 <__aeabi_i2d>
 800c400:	4642      	mov	r2, r8
 800c402:	464b      	mov	r3, r9
 800c404:	f7f4 f910 	bl	8000628 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4630      	mov	r0, r6
 800c40e:	4639      	mov	r1, r7
 800c410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c414:	f7f3 ff50 	bl	80002b8 <__aeabi_dsub>
 800c418:	f805 6b01 	strb.w	r6, [r5], #1
 800c41c:	9e01      	ldr	r6, [sp, #4]
 800c41e:	9f03      	ldr	r7, [sp, #12]
 800c420:	1bae      	subs	r6, r5, r6
 800c422:	42b7      	cmp	r7, r6
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	d135      	bne.n	800c496 <_dtoa_r+0x6e6>
 800c42a:	f7f3 ff47 	bl	80002bc <__adddf3>
 800c42e:	4642      	mov	r2, r8
 800c430:	464b      	mov	r3, r9
 800c432:	4606      	mov	r6, r0
 800c434:	460f      	mov	r7, r1
 800c436:	f7f4 fb87 	bl	8000b48 <__aeabi_dcmpgt>
 800c43a:	b9d0      	cbnz	r0, 800c472 <_dtoa_r+0x6c2>
 800c43c:	4642      	mov	r2, r8
 800c43e:	464b      	mov	r3, r9
 800c440:	4630      	mov	r0, r6
 800c442:	4639      	mov	r1, r7
 800c444:	f7f4 fb58 	bl	8000af8 <__aeabi_dcmpeq>
 800c448:	b110      	cbz	r0, 800c450 <_dtoa_r+0x6a0>
 800c44a:	f01a 0f01 	tst.w	sl, #1
 800c44e:	d110      	bne.n	800c472 <_dtoa_r+0x6c2>
 800c450:	4620      	mov	r0, r4
 800c452:	ee18 1a10 	vmov	r1, s16
 800c456:	f000 fb09 	bl	800ca6c <_Bfree>
 800c45a:	2300      	movs	r3, #0
 800c45c:	9800      	ldr	r0, [sp, #0]
 800c45e:	702b      	strb	r3, [r5, #0]
 800c460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c462:	3001      	adds	r0, #1
 800c464:	6018      	str	r0, [r3, #0]
 800c466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f43f acf1 	beq.w	800be50 <_dtoa_r+0xa0>
 800c46e:	601d      	str	r5, [r3, #0]
 800c470:	e4ee      	b.n	800be50 <_dtoa_r+0xa0>
 800c472:	9f00      	ldr	r7, [sp, #0]
 800c474:	462b      	mov	r3, r5
 800c476:	461d      	mov	r5, r3
 800c478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c47c:	2a39      	cmp	r2, #57	; 0x39
 800c47e:	d106      	bne.n	800c48e <_dtoa_r+0x6de>
 800c480:	9a01      	ldr	r2, [sp, #4]
 800c482:	429a      	cmp	r2, r3
 800c484:	d1f7      	bne.n	800c476 <_dtoa_r+0x6c6>
 800c486:	9901      	ldr	r1, [sp, #4]
 800c488:	2230      	movs	r2, #48	; 0x30
 800c48a:	3701      	adds	r7, #1
 800c48c:	700a      	strb	r2, [r1, #0]
 800c48e:	781a      	ldrb	r2, [r3, #0]
 800c490:	3201      	adds	r2, #1
 800c492:	701a      	strb	r2, [r3, #0]
 800c494:	e790      	b.n	800c3b8 <_dtoa_r+0x608>
 800c496:	4ba6      	ldr	r3, [pc, #664]	; (800c730 <_dtoa_r+0x980>)
 800c498:	2200      	movs	r2, #0
 800c49a:	f7f4 f8c5 	bl	8000628 <__aeabi_dmul>
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	f7f4 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d09d      	beq.n	800c3ea <_dtoa_r+0x63a>
 800c4ae:	e7cf      	b.n	800c450 <_dtoa_r+0x6a0>
 800c4b0:	9a08      	ldr	r2, [sp, #32]
 800c4b2:	2a00      	cmp	r2, #0
 800c4b4:	f000 80d7 	beq.w	800c666 <_dtoa_r+0x8b6>
 800c4b8:	9a06      	ldr	r2, [sp, #24]
 800c4ba:	2a01      	cmp	r2, #1
 800c4bc:	f300 80ba 	bgt.w	800c634 <_dtoa_r+0x884>
 800c4c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	f000 80b2 	beq.w	800c62c <_dtoa_r+0x87c>
 800c4c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4cc:	9e07      	ldr	r6, [sp, #28]
 800c4ce:	9d04      	ldr	r5, [sp, #16]
 800c4d0:	9a04      	ldr	r2, [sp, #16]
 800c4d2:	441a      	add	r2, r3
 800c4d4:	9204      	str	r2, [sp, #16]
 800c4d6:	9a05      	ldr	r2, [sp, #20]
 800c4d8:	2101      	movs	r1, #1
 800c4da:	441a      	add	r2, r3
 800c4dc:	4620      	mov	r0, r4
 800c4de:	9205      	str	r2, [sp, #20]
 800c4e0:	f000 fb7c 	bl	800cbdc <__i2b>
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	2d00      	cmp	r5, #0
 800c4e8:	dd0c      	ble.n	800c504 <_dtoa_r+0x754>
 800c4ea:	9b05      	ldr	r3, [sp, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	dd09      	ble.n	800c504 <_dtoa_r+0x754>
 800c4f0:	42ab      	cmp	r3, r5
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	bfa8      	it	ge
 800c4f6:	462b      	movge	r3, r5
 800c4f8:	1ad2      	subs	r2, r2, r3
 800c4fa:	9204      	str	r2, [sp, #16]
 800c4fc:	9a05      	ldr	r2, [sp, #20]
 800c4fe:	1aed      	subs	r5, r5, r3
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	9b07      	ldr	r3, [sp, #28]
 800c506:	b31b      	cbz	r3, 800c550 <_dtoa_r+0x7a0>
 800c508:	9b08      	ldr	r3, [sp, #32]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 80af 	beq.w	800c66e <_dtoa_r+0x8be>
 800c510:	2e00      	cmp	r6, #0
 800c512:	dd13      	ble.n	800c53c <_dtoa_r+0x78c>
 800c514:	4639      	mov	r1, r7
 800c516:	4632      	mov	r2, r6
 800c518:	4620      	mov	r0, r4
 800c51a:	f000 fc1f 	bl	800cd5c <__pow5mult>
 800c51e:	ee18 2a10 	vmov	r2, s16
 800c522:	4601      	mov	r1, r0
 800c524:	4607      	mov	r7, r0
 800c526:	4620      	mov	r0, r4
 800c528:	f000 fb6e 	bl	800cc08 <__multiply>
 800c52c:	ee18 1a10 	vmov	r1, s16
 800c530:	4680      	mov	r8, r0
 800c532:	4620      	mov	r0, r4
 800c534:	f000 fa9a 	bl	800ca6c <_Bfree>
 800c538:	ee08 8a10 	vmov	s16, r8
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	1b9a      	subs	r2, r3, r6
 800c540:	d006      	beq.n	800c550 <_dtoa_r+0x7a0>
 800c542:	ee18 1a10 	vmov	r1, s16
 800c546:	4620      	mov	r0, r4
 800c548:	f000 fc08 	bl	800cd5c <__pow5mult>
 800c54c:	ee08 0a10 	vmov	s16, r0
 800c550:	2101      	movs	r1, #1
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fb42 	bl	800cbdc <__i2b>
 800c558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	4606      	mov	r6, r0
 800c55e:	f340 8088 	ble.w	800c672 <_dtoa_r+0x8c2>
 800c562:	461a      	mov	r2, r3
 800c564:	4601      	mov	r1, r0
 800c566:	4620      	mov	r0, r4
 800c568:	f000 fbf8 	bl	800cd5c <__pow5mult>
 800c56c:	9b06      	ldr	r3, [sp, #24]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	4606      	mov	r6, r0
 800c572:	f340 8081 	ble.w	800c678 <_dtoa_r+0x8c8>
 800c576:	f04f 0800 	mov.w	r8, #0
 800c57a:	6933      	ldr	r3, [r6, #16]
 800c57c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c580:	6918      	ldr	r0, [r3, #16]
 800c582:	f000 fadb 	bl	800cb3c <__hi0bits>
 800c586:	f1c0 0020 	rsb	r0, r0, #32
 800c58a:	9b05      	ldr	r3, [sp, #20]
 800c58c:	4418      	add	r0, r3
 800c58e:	f010 001f 	ands.w	r0, r0, #31
 800c592:	f000 8092 	beq.w	800c6ba <_dtoa_r+0x90a>
 800c596:	f1c0 0320 	rsb	r3, r0, #32
 800c59a:	2b04      	cmp	r3, #4
 800c59c:	f340 808a 	ble.w	800c6b4 <_dtoa_r+0x904>
 800c5a0:	f1c0 001c 	rsb	r0, r0, #28
 800c5a4:	9b04      	ldr	r3, [sp, #16]
 800c5a6:	4403      	add	r3, r0
 800c5a8:	9304      	str	r3, [sp, #16]
 800c5aa:	9b05      	ldr	r3, [sp, #20]
 800c5ac:	4403      	add	r3, r0
 800c5ae:	4405      	add	r5, r0
 800c5b0:	9305      	str	r3, [sp, #20]
 800c5b2:	9b04      	ldr	r3, [sp, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	dd07      	ble.n	800c5c8 <_dtoa_r+0x818>
 800c5b8:	ee18 1a10 	vmov	r1, s16
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 fc26 	bl	800ce10 <__lshift>
 800c5c4:	ee08 0a10 	vmov	s16, r0
 800c5c8:	9b05      	ldr	r3, [sp, #20]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	dd05      	ble.n	800c5da <_dtoa_r+0x82a>
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f000 fc1c 	bl	800ce10 <__lshift>
 800c5d8:	4606      	mov	r6, r0
 800c5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d06e      	beq.n	800c6be <_dtoa_r+0x90e>
 800c5e0:	ee18 0a10 	vmov	r0, s16
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	f000 fc83 	bl	800cef0 <__mcmp>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	da67      	bge.n	800c6be <_dtoa_r+0x90e>
 800c5ee:	9b00      	ldr	r3, [sp, #0]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	ee18 1a10 	vmov	r1, s16
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	220a      	movs	r2, #10
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f000 fa57 	bl	800cab0 <__multadd>
 800c602:	9b08      	ldr	r3, [sp, #32]
 800c604:	ee08 0a10 	vmov	s16, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 81b1 	beq.w	800c970 <_dtoa_r+0xbc0>
 800c60e:	2300      	movs	r3, #0
 800c610:	4639      	mov	r1, r7
 800c612:	220a      	movs	r2, #10
 800c614:	4620      	mov	r0, r4
 800c616:	f000 fa4b 	bl	800cab0 <__multadd>
 800c61a:	9b02      	ldr	r3, [sp, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	4607      	mov	r7, r0
 800c620:	f300 808e 	bgt.w	800c740 <_dtoa_r+0x990>
 800c624:	9b06      	ldr	r3, [sp, #24]
 800c626:	2b02      	cmp	r3, #2
 800c628:	dc51      	bgt.n	800c6ce <_dtoa_r+0x91e>
 800c62a:	e089      	b.n	800c740 <_dtoa_r+0x990>
 800c62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c62e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c632:	e74b      	b.n	800c4cc <_dtoa_r+0x71c>
 800c634:	9b03      	ldr	r3, [sp, #12]
 800c636:	1e5e      	subs	r6, r3, #1
 800c638:	9b07      	ldr	r3, [sp, #28]
 800c63a:	42b3      	cmp	r3, r6
 800c63c:	bfbf      	itttt	lt
 800c63e:	9b07      	ldrlt	r3, [sp, #28]
 800c640:	9607      	strlt	r6, [sp, #28]
 800c642:	1af2      	sublt	r2, r6, r3
 800c644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c646:	bfb6      	itet	lt
 800c648:	189b      	addlt	r3, r3, r2
 800c64a:	1b9e      	subge	r6, r3, r6
 800c64c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	bfb8      	it	lt
 800c652:	2600      	movlt	r6, #0
 800c654:	2b00      	cmp	r3, #0
 800c656:	bfb7      	itett	lt
 800c658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c65c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c660:	1a9d      	sublt	r5, r3, r2
 800c662:	2300      	movlt	r3, #0
 800c664:	e734      	b.n	800c4d0 <_dtoa_r+0x720>
 800c666:	9e07      	ldr	r6, [sp, #28]
 800c668:	9d04      	ldr	r5, [sp, #16]
 800c66a:	9f08      	ldr	r7, [sp, #32]
 800c66c:	e73b      	b.n	800c4e6 <_dtoa_r+0x736>
 800c66e:	9a07      	ldr	r2, [sp, #28]
 800c670:	e767      	b.n	800c542 <_dtoa_r+0x792>
 800c672:	9b06      	ldr	r3, [sp, #24]
 800c674:	2b01      	cmp	r3, #1
 800c676:	dc18      	bgt.n	800c6aa <_dtoa_r+0x8fa>
 800c678:	f1ba 0f00 	cmp.w	sl, #0
 800c67c:	d115      	bne.n	800c6aa <_dtoa_r+0x8fa>
 800c67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c682:	b993      	cbnz	r3, 800c6aa <_dtoa_r+0x8fa>
 800c684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c688:	0d1b      	lsrs	r3, r3, #20
 800c68a:	051b      	lsls	r3, r3, #20
 800c68c:	b183      	cbz	r3, 800c6b0 <_dtoa_r+0x900>
 800c68e:	9b04      	ldr	r3, [sp, #16]
 800c690:	3301      	adds	r3, #1
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	9b05      	ldr	r3, [sp, #20]
 800c696:	3301      	adds	r3, #1
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	f04f 0801 	mov.w	r8, #1
 800c69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f47f af6a 	bne.w	800c57a <_dtoa_r+0x7ca>
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	e76f      	b.n	800c58a <_dtoa_r+0x7da>
 800c6aa:	f04f 0800 	mov.w	r8, #0
 800c6ae:	e7f6      	b.n	800c69e <_dtoa_r+0x8ee>
 800c6b0:	4698      	mov	r8, r3
 800c6b2:	e7f4      	b.n	800c69e <_dtoa_r+0x8ee>
 800c6b4:	f43f af7d 	beq.w	800c5b2 <_dtoa_r+0x802>
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	301c      	adds	r0, #28
 800c6bc:	e772      	b.n	800c5a4 <_dtoa_r+0x7f4>
 800c6be:	9b03      	ldr	r3, [sp, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	dc37      	bgt.n	800c734 <_dtoa_r+0x984>
 800c6c4:	9b06      	ldr	r3, [sp, #24]
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	dd34      	ble.n	800c734 <_dtoa_r+0x984>
 800c6ca:	9b03      	ldr	r3, [sp, #12]
 800c6cc:	9302      	str	r3, [sp, #8]
 800c6ce:	9b02      	ldr	r3, [sp, #8]
 800c6d0:	b96b      	cbnz	r3, 800c6ee <_dtoa_r+0x93e>
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	2205      	movs	r2, #5
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f000 f9ea 	bl	800cab0 <__multadd>
 800c6dc:	4601      	mov	r1, r0
 800c6de:	4606      	mov	r6, r0
 800c6e0:	ee18 0a10 	vmov	r0, s16
 800c6e4:	f000 fc04 	bl	800cef0 <__mcmp>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f73f adbb 	bgt.w	800c264 <_dtoa_r+0x4b4>
 800c6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f0:	9d01      	ldr	r5, [sp, #4]
 800c6f2:	43db      	mvns	r3, r3
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	f04f 0800 	mov.w	r8, #0
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f000 f9b5 	bl	800ca6c <_Bfree>
 800c702:	2f00      	cmp	r7, #0
 800c704:	f43f aea4 	beq.w	800c450 <_dtoa_r+0x6a0>
 800c708:	f1b8 0f00 	cmp.w	r8, #0
 800c70c:	d005      	beq.n	800c71a <_dtoa_r+0x96a>
 800c70e:	45b8      	cmp	r8, r7
 800c710:	d003      	beq.n	800c71a <_dtoa_r+0x96a>
 800c712:	4641      	mov	r1, r8
 800c714:	4620      	mov	r0, r4
 800c716:	f000 f9a9 	bl	800ca6c <_Bfree>
 800c71a:	4639      	mov	r1, r7
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 f9a5 	bl	800ca6c <_Bfree>
 800c722:	e695      	b.n	800c450 <_dtoa_r+0x6a0>
 800c724:	2600      	movs	r6, #0
 800c726:	4637      	mov	r7, r6
 800c728:	e7e1      	b.n	800c6ee <_dtoa_r+0x93e>
 800c72a:	9700      	str	r7, [sp, #0]
 800c72c:	4637      	mov	r7, r6
 800c72e:	e599      	b.n	800c264 <_dtoa_r+0x4b4>
 800c730:	40240000 	.word	0x40240000
 800c734:	9b08      	ldr	r3, [sp, #32]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 80ca 	beq.w	800c8d0 <_dtoa_r+0xb20>
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	9302      	str	r3, [sp, #8]
 800c740:	2d00      	cmp	r5, #0
 800c742:	dd05      	ble.n	800c750 <_dtoa_r+0x9a0>
 800c744:	4639      	mov	r1, r7
 800c746:	462a      	mov	r2, r5
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fb61 	bl	800ce10 <__lshift>
 800c74e:	4607      	mov	r7, r0
 800c750:	f1b8 0f00 	cmp.w	r8, #0
 800c754:	d05b      	beq.n	800c80e <_dtoa_r+0xa5e>
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 f947 	bl	800c9ec <_Balloc>
 800c75e:	4605      	mov	r5, r0
 800c760:	b928      	cbnz	r0, 800c76e <_dtoa_r+0x9be>
 800c762:	4b87      	ldr	r3, [pc, #540]	; (800c980 <_dtoa_r+0xbd0>)
 800c764:	4602      	mov	r2, r0
 800c766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c76a:	f7ff bb3b 	b.w	800bde4 <_dtoa_r+0x34>
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	3202      	adds	r2, #2
 800c772:	0092      	lsls	r2, r2, #2
 800c774:	f107 010c 	add.w	r1, r7, #12
 800c778:	300c      	adds	r0, #12
 800c77a:	f000 f91d 	bl	800c9b8 <memcpy>
 800c77e:	2201      	movs	r2, #1
 800c780:	4629      	mov	r1, r5
 800c782:	4620      	mov	r0, r4
 800c784:	f000 fb44 	bl	800ce10 <__lshift>
 800c788:	9b01      	ldr	r3, [sp, #4]
 800c78a:	f103 0901 	add.w	r9, r3, #1
 800c78e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c792:	4413      	add	r3, r2
 800c794:	9305      	str	r3, [sp, #20]
 800c796:	f00a 0301 	and.w	r3, sl, #1
 800c79a:	46b8      	mov	r8, r7
 800c79c:	9304      	str	r3, [sp, #16]
 800c79e:	4607      	mov	r7, r0
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	ee18 0a10 	vmov	r0, s16
 800c7a6:	f7ff fa77 	bl	800bc98 <quorem>
 800c7aa:	4641      	mov	r1, r8
 800c7ac:	9002      	str	r0, [sp, #8]
 800c7ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c7b2:	ee18 0a10 	vmov	r0, s16
 800c7b6:	f000 fb9b 	bl	800cef0 <__mcmp>
 800c7ba:	463a      	mov	r2, r7
 800c7bc:	9003      	str	r0, [sp, #12]
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 fbb1 	bl	800cf28 <__mdiff>
 800c7c6:	68c2      	ldr	r2, [r0, #12]
 800c7c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	bb02      	cbnz	r2, 800c812 <_dtoa_r+0xa62>
 800c7d0:	4601      	mov	r1, r0
 800c7d2:	ee18 0a10 	vmov	r0, s16
 800c7d6:	f000 fb8b 	bl	800cef0 <__mcmp>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	4629      	mov	r1, r5
 800c7de:	4620      	mov	r0, r4
 800c7e0:	9207      	str	r2, [sp, #28]
 800c7e2:	f000 f943 	bl	800ca6c <_Bfree>
 800c7e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c7ea:	ea43 0102 	orr.w	r1, r3, r2
 800c7ee:	9b04      	ldr	r3, [sp, #16]
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	464d      	mov	r5, r9
 800c7f4:	d10f      	bne.n	800c816 <_dtoa_r+0xa66>
 800c7f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7fa:	d02a      	beq.n	800c852 <_dtoa_r+0xaa2>
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dd02      	ble.n	800c808 <_dtoa_r+0xa58>
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c808:	f88b a000 	strb.w	sl, [fp]
 800c80c:	e775      	b.n	800c6fa <_dtoa_r+0x94a>
 800c80e:	4638      	mov	r0, r7
 800c810:	e7ba      	b.n	800c788 <_dtoa_r+0x9d8>
 800c812:	2201      	movs	r2, #1
 800c814:	e7e2      	b.n	800c7dc <_dtoa_r+0xa2c>
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	db04      	blt.n	800c826 <_dtoa_r+0xa76>
 800c81c:	9906      	ldr	r1, [sp, #24]
 800c81e:	430b      	orrs	r3, r1
 800c820:	9904      	ldr	r1, [sp, #16]
 800c822:	430b      	orrs	r3, r1
 800c824:	d122      	bne.n	800c86c <_dtoa_r+0xabc>
 800c826:	2a00      	cmp	r2, #0
 800c828:	ddee      	ble.n	800c808 <_dtoa_r+0xa58>
 800c82a:	ee18 1a10 	vmov	r1, s16
 800c82e:	2201      	movs	r2, #1
 800c830:	4620      	mov	r0, r4
 800c832:	f000 faed 	bl	800ce10 <__lshift>
 800c836:	4631      	mov	r1, r6
 800c838:	ee08 0a10 	vmov	s16, r0
 800c83c:	f000 fb58 	bl	800cef0 <__mcmp>
 800c840:	2800      	cmp	r0, #0
 800c842:	dc03      	bgt.n	800c84c <_dtoa_r+0xa9c>
 800c844:	d1e0      	bne.n	800c808 <_dtoa_r+0xa58>
 800c846:	f01a 0f01 	tst.w	sl, #1
 800c84a:	d0dd      	beq.n	800c808 <_dtoa_r+0xa58>
 800c84c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c850:	d1d7      	bne.n	800c802 <_dtoa_r+0xa52>
 800c852:	2339      	movs	r3, #57	; 0x39
 800c854:	f88b 3000 	strb.w	r3, [fp]
 800c858:	462b      	mov	r3, r5
 800c85a:	461d      	mov	r5, r3
 800c85c:	3b01      	subs	r3, #1
 800c85e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c862:	2a39      	cmp	r2, #57	; 0x39
 800c864:	d071      	beq.n	800c94a <_dtoa_r+0xb9a>
 800c866:	3201      	adds	r2, #1
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	e746      	b.n	800c6fa <_dtoa_r+0x94a>
 800c86c:	2a00      	cmp	r2, #0
 800c86e:	dd07      	ble.n	800c880 <_dtoa_r+0xad0>
 800c870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c874:	d0ed      	beq.n	800c852 <_dtoa_r+0xaa2>
 800c876:	f10a 0301 	add.w	r3, sl, #1
 800c87a:	f88b 3000 	strb.w	r3, [fp]
 800c87e:	e73c      	b.n	800c6fa <_dtoa_r+0x94a>
 800c880:	9b05      	ldr	r3, [sp, #20]
 800c882:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c886:	4599      	cmp	r9, r3
 800c888:	d047      	beq.n	800c91a <_dtoa_r+0xb6a>
 800c88a:	ee18 1a10 	vmov	r1, s16
 800c88e:	2300      	movs	r3, #0
 800c890:	220a      	movs	r2, #10
 800c892:	4620      	mov	r0, r4
 800c894:	f000 f90c 	bl	800cab0 <__multadd>
 800c898:	45b8      	cmp	r8, r7
 800c89a:	ee08 0a10 	vmov	s16, r0
 800c89e:	f04f 0300 	mov.w	r3, #0
 800c8a2:	f04f 020a 	mov.w	r2, #10
 800c8a6:	4641      	mov	r1, r8
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	d106      	bne.n	800c8ba <_dtoa_r+0xb0a>
 800c8ac:	f000 f900 	bl	800cab0 <__multadd>
 800c8b0:	4680      	mov	r8, r0
 800c8b2:	4607      	mov	r7, r0
 800c8b4:	f109 0901 	add.w	r9, r9, #1
 800c8b8:	e772      	b.n	800c7a0 <_dtoa_r+0x9f0>
 800c8ba:	f000 f8f9 	bl	800cab0 <__multadd>
 800c8be:	4639      	mov	r1, r7
 800c8c0:	4680      	mov	r8, r0
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	220a      	movs	r2, #10
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f000 f8f2 	bl	800cab0 <__multadd>
 800c8cc:	4607      	mov	r7, r0
 800c8ce:	e7f1      	b.n	800c8b4 <_dtoa_r+0xb04>
 800c8d0:	9b03      	ldr	r3, [sp, #12]
 800c8d2:	9302      	str	r3, [sp, #8]
 800c8d4:	9d01      	ldr	r5, [sp, #4]
 800c8d6:	ee18 0a10 	vmov	r0, s16
 800c8da:	4631      	mov	r1, r6
 800c8dc:	f7ff f9dc 	bl	800bc98 <quorem>
 800c8e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c8e4:	9b01      	ldr	r3, [sp, #4]
 800c8e6:	f805 ab01 	strb.w	sl, [r5], #1
 800c8ea:	1aea      	subs	r2, r5, r3
 800c8ec:	9b02      	ldr	r3, [sp, #8]
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	dd09      	ble.n	800c906 <_dtoa_r+0xb56>
 800c8f2:	ee18 1a10 	vmov	r1, s16
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	220a      	movs	r2, #10
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 f8d8 	bl	800cab0 <__multadd>
 800c900:	ee08 0a10 	vmov	s16, r0
 800c904:	e7e7      	b.n	800c8d6 <_dtoa_r+0xb26>
 800c906:	9b02      	ldr	r3, [sp, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	bfc8      	it	gt
 800c90c:	461d      	movgt	r5, r3
 800c90e:	9b01      	ldr	r3, [sp, #4]
 800c910:	bfd8      	it	le
 800c912:	2501      	movle	r5, #1
 800c914:	441d      	add	r5, r3
 800c916:	f04f 0800 	mov.w	r8, #0
 800c91a:	ee18 1a10 	vmov	r1, s16
 800c91e:	2201      	movs	r2, #1
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fa75 	bl	800ce10 <__lshift>
 800c926:	4631      	mov	r1, r6
 800c928:	ee08 0a10 	vmov	s16, r0
 800c92c:	f000 fae0 	bl	800cef0 <__mcmp>
 800c930:	2800      	cmp	r0, #0
 800c932:	dc91      	bgt.n	800c858 <_dtoa_r+0xaa8>
 800c934:	d102      	bne.n	800c93c <_dtoa_r+0xb8c>
 800c936:	f01a 0f01 	tst.w	sl, #1
 800c93a:	d18d      	bne.n	800c858 <_dtoa_r+0xaa8>
 800c93c:	462b      	mov	r3, r5
 800c93e:	461d      	mov	r5, r3
 800c940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c944:	2a30      	cmp	r2, #48	; 0x30
 800c946:	d0fa      	beq.n	800c93e <_dtoa_r+0xb8e>
 800c948:	e6d7      	b.n	800c6fa <_dtoa_r+0x94a>
 800c94a:	9a01      	ldr	r2, [sp, #4]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d184      	bne.n	800c85a <_dtoa_r+0xaaa>
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	2331      	movs	r3, #49	; 0x31
 800c958:	7013      	strb	r3, [r2, #0]
 800c95a:	e6ce      	b.n	800c6fa <_dtoa_r+0x94a>
 800c95c:	4b09      	ldr	r3, [pc, #36]	; (800c984 <_dtoa_r+0xbd4>)
 800c95e:	f7ff ba95 	b.w	800be8c <_dtoa_r+0xdc>
 800c962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c964:	2b00      	cmp	r3, #0
 800c966:	f47f aa6e 	bne.w	800be46 <_dtoa_r+0x96>
 800c96a:	4b07      	ldr	r3, [pc, #28]	; (800c988 <_dtoa_r+0xbd8>)
 800c96c:	f7ff ba8e 	b.w	800be8c <_dtoa_r+0xdc>
 800c970:	9b02      	ldr	r3, [sp, #8]
 800c972:	2b00      	cmp	r3, #0
 800c974:	dcae      	bgt.n	800c8d4 <_dtoa_r+0xb24>
 800c976:	9b06      	ldr	r3, [sp, #24]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	f73f aea8 	bgt.w	800c6ce <_dtoa_r+0x91e>
 800c97e:	e7a9      	b.n	800c8d4 <_dtoa_r+0xb24>
 800c980:	080100a6 	.word	0x080100a6
 800c984:	08010229 	.word	0x08010229
 800c988:	08010027 	.word	0x08010027

0800c98c <_localeconv_r>:
 800c98c:	4800      	ldr	r0, [pc, #0]	; (800c990 <_localeconv_r+0x4>)
 800c98e:	4770      	bx	lr
 800c990:	20000444 	.word	0x20000444

0800c994 <_lseek_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d07      	ldr	r5, [pc, #28]	; (800c9b4 <_lseek_r+0x20>)
 800c998:	4604      	mov	r4, r0
 800c99a:	4608      	mov	r0, r1
 800c99c:	4611      	mov	r1, r2
 800c99e:	2200      	movs	r2, #0
 800c9a0:	602a      	str	r2, [r5, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	f7f7 fb4e 	bl	8004044 <_lseek>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_lseek_r+0x1e>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_lseek_r+0x1e>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	20000bc8 	.word	0x20000bc8

0800c9b8 <memcpy>:
 800c9b8:	440a      	add	r2, r1
 800c9ba:	4291      	cmp	r1, r2
 800c9bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9c0:	d100      	bne.n	800c9c4 <memcpy+0xc>
 800c9c2:	4770      	bx	lr
 800c9c4:	b510      	push	{r4, lr}
 800c9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9ce:	4291      	cmp	r1, r2
 800c9d0:	d1f9      	bne.n	800c9c6 <memcpy+0xe>
 800c9d2:	bd10      	pop	{r4, pc}

0800c9d4 <__malloc_lock>:
 800c9d4:	4801      	ldr	r0, [pc, #4]	; (800c9dc <__malloc_lock+0x8>)
 800c9d6:	f001 bb03 	b.w	800dfe0 <__retarget_lock_acquire_recursive>
 800c9da:	bf00      	nop
 800c9dc:	20000bcc 	.word	0x20000bcc

0800c9e0 <__malloc_unlock>:
 800c9e0:	4801      	ldr	r0, [pc, #4]	; (800c9e8 <__malloc_unlock+0x8>)
 800c9e2:	f001 bafe 	b.w	800dfe2 <__retarget_lock_release_recursive>
 800c9e6:	bf00      	nop
 800c9e8:	20000bcc 	.word	0x20000bcc

0800c9ec <_Balloc>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	460d      	mov	r5, r1
 800c9f4:	b976      	cbnz	r6, 800ca14 <_Balloc+0x28>
 800c9f6:	2010      	movs	r0, #16
 800c9f8:	f7fe fa72 	bl	800aee0 <malloc>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	6260      	str	r0, [r4, #36]	; 0x24
 800ca00:	b920      	cbnz	r0, 800ca0c <_Balloc+0x20>
 800ca02:	4b18      	ldr	r3, [pc, #96]	; (800ca64 <_Balloc+0x78>)
 800ca04:	4818      	ldr	r0, [pc, #96]	; (800ca68 <_Balloc+0x7c>)
 800ca06:	2166      	movs	r1, #102	; 0x66
 800ca08:	f001 f902 	bl	800dc10 <__assert_func>
 800ca0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca10:	6006      	str	r6, [r0, #0]
 800ca12:	60c6      	str	r6, [r0, #12]
 800ca14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca16:	68f3      	ldr	r3, [r6, #12]
 800ca18:	b183      	cbz	r3, 800ca3c <_Balloc+0x50>
 800ca1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca22:	b9b8      	cbnz	r0, 800ca54 <_Balloc+0x68>
 800ca24:	2101      	movs	r1, #1
 800ca26:	fa01 f605 	lsl.w	r6, r1, r5
 800ca2a:	1d72      	adds	r2, r6, #5
 800ca2c:	0092      	lsls	r2, r2, #2
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 fb60 	bl	800d0f4 <_calloc_r>
 800ca34:	b160      	cbz	r0, 800ca50 <_Balloc+0x64>
 800ca36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca3a:	e00e      	b.n	800ca5a <_Balloc+0x6e>
 800ca3c:	2221      	movs	r2, #33	; 0x21
 800ca3e:	2104      	movs	r1, #4
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 fb57 	bl	800d0f4 <_calloc_r>
 800ca46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca48:	60f0      	str	r0, [r6, #12]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1e4      	bne.n	800ca1a <_Balloc+0x2e>
 800ca50:	2000      	movs	r0, #0
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	6802      	ldr	r2, [r0, #0]
 800ca56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca60:	e7f7      	b.n	800ca52 <_Balloc+0x66>
 800ca62:	bf00      	nop
 800ca64:	08010034 	.word	0x08010034
 800ca68:	080100b7 	.word	0x080100b7

0800ca6c <_Bfree>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca70:	4605      	mov	r5, r0
 800ca72:	460c      	mov	r4, r1
 800ca74:	b976      	cbnz	r6, 800ca94 <_Bfree+0x28>
 800ca76:	2010      	movs	r0, #16
 800ca78:	f7fe fa32 	bl	800aee0 <malloc>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	6268      	str	r0, [r5, #36]	; 0x24
 800ca80:	b920      	cbnz	r0, 800ca8c <_Bfree+0x20>
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <_Bfree+0x3c>)
 800ca84:	4809      	ldr	r0, [pc, #36]	; (800caac <_Bfree+0x40>)
 800ca86:	218a      	movs	r1, #138	; 0x8a
 800ca88:	f001 f8c2 	bl	800dc10 <__assert_func>
 800ca8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca90:	6006      	str	r6, [r0, #0]
 800ca92:	60c6      	str	r6, [r0, #12]
 800ca94:	b13c      	cbz	r4, 800caa6 <_Bfree+0x3a>
 800ca96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca98:	6862      	ldr	r2, [r4, #4]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800caa0:	6021      	str	r1, [r4, #0]
 800caa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	08010034 	.word	0x08010034
 800caac:	080100b7 	.word	0x080100b7

0800cab0 <__multadd>:
 800cab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab4:	690d      	ldr	r5, [r1, #16]
 800cab6:	4607      	mov	r7, r0
 800cab8:	460c      	mov	r4, r1
 800caba:	461e      	mov	r6, r3
 800cabc:	f101 0c14 	add.w	ip, r1, #20
 800cac0:	2000      	movs	r0, #0
 800cac2:	f8dc 3000 	ldr.w	r3, [ip]
 800cac6:	b299      	uxth	r1, r3
 800cac8:	fb02 6101 	mla	r1, r2, r1, r6
 800cacc:	0c1e      	lsrs	r6, r3, #16
 800cace:	0c0b      	lsrs	r3, r1, #16
 800cad0:	fb02 3306 	mla	r3, r2, r6, r3
 800cad4:	b289      	uxth	r1, r1
 800cad6:	3001      	adds	r0, #1
 800cad8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cadc:	4285      	cmp	r5, r0
 800cade:	f84c 1b04 	str.w	r1, [ip], #4
 800cae2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cae6:	dcec      	bgt.n	800cac2 <__multadd+0x12>
 800cae8:	b30e      	cbz	r6, 800cb2e <__multadd+0x7e>
 800caea:	68a3      	ldr	r3, [r4, #8]
 800caec:	42ab      	cmp	r3, r5
 800caee:	dc19      	bgt.n	800cb24 <__multadd+0x74>
 800caf0:	6861      	ldr	r1, [r4, #4]
 800caf2:	4638      	mov	r0, r7
 800caf4:	3101      	adds	r1, #1
 800caf6:	f7ff ff79 	bl	800c9ec <_Balloc>
 800cafa:	4680      	mov	r8, r0
 800cafc:	b928      	cbnz	r0, 800cb0a <__multadd+0x5a>
 800cafe:	4602      	mov	r2, r0
 800cb00:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <__multadd+0x84>)
 800cb02:	480d      	ldr	r0, [pc, #52]	; (800cb38 <__multadd+0x88>)
 800cb04:	21b5      	movs	r1, #181	; 0xb5
 800cb06:	f001 f883 	bl	800dc10 <__assert_func>
 800cb0a:	6922      	ldr	r2, [r4, #16]
 800cb0c:	3202      	adds	r2, #2
 800cb0e:	f104 010c 	add.w	r1, r4, #12
 800cb12:	0092      	lsls	r2, r2, #2
 800cb14:	300c      	adds	r0, #12
 800cb16:	f7ff ff4f 	bl	800c9b8 <memcpy>
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f7ff ffa5 	bl	800ca6c <_Bfree>
 800cb22:	4644      	mov	r4, r8
 800cb24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb28:	3501      	adds	r5, #1
 800cb2a:	615e      	str	r6, [r3, #20]
 800cb2c:	6125      	str	r5, [r4, #16]
 800cb2e:	4620      	mov	r0, r4
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb34:	080100a6 	.word	0x080100a6
 800cb38:	080100b7 	.word	0x080100b7

0800cb3c <__hi0bits>:
 800cb3c:	0c03      	lsrs	r3, r0, #16
 800cb3e:	041b      	lsls	r3, r3, #16
 800cb40:	b9d3      	cbnz	r3, 800cb78 <__hi0bits+0x3c>
 800cb42:	0400      	lsls	r0, r0, #16
 800cb44:	2310      	movs	r3, #16
 800cb46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb4a:	bf04      	itt	eq
 800cb4c:	0200      	lsleq	r0, r0, #8
 800cb4e:	3308      	addeq	r3, #8
 800cb50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb54:	bf04      	itt	eq
 800cb56:	0100      	lsleq	r0, r0, #4
 800cb58:	3304      	addeq	r3, #4
 800cb5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb5e:	bf04      	itt	eq
 800cb60:	0080      	lsleq	r0, r0, #2
 800cb62:	3302      	addeq	r3, #2
 800cb64:	2800      	cmp	r0, #0
 800cb66:	db05      	blt.n	800cb74 <__hi0bits+0x38>
 800cb68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb6c:	f103 0301 	add.w	r3, r3, #1
 800cb70:	bf08      	it	eq
 800cb72:	2320      	moveq	r3, #32
 800cb74:	4618      	mov	r0, r3
 800cb76:	4770      	bx	lr
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e7e4      	b.n	800cb46 <__hi0bits+0xa>

0800cb7c <__lo0bits>:
 800cb7c:	6803      	ldr	r3, [r0, #0]
 800cb7e:	f013 0207 	ands.w	r2, r3, #7
 800cb82:	4601      	mov	r1, r0
 800cb84:	d00b      	beq.n	800cb9e <__lo0bits+0x22>
 800cb86:	07da      	lsls	r2, r3, #31
 800cb88:	d423      	bmi.n	800cbd2 <__lo0bits+0x56>
 800cb8a:	0798      	lsls	r0, r3, #30
 800cb8c:	bf49      	itett	mi
 800cb8e:	085b      	lsrmi	r3, r3, #1
 800cb90:	089b      	lsrpl	r3, r3, #2
 800cb92:	2001      	movmi	r0, #1
 800cb94:	600b      	strmi	r3, [r1, #0]
 800cb96:	bf5c      	itt	pl
 800cb98:	600b      	strpl	r3, [r1, #0]
 800cb9a:	2002      	movpl	r0, #2
 800cb9c:	4770      	bx	lr
 800cb9e:	b298      	uxth	r0, r3
 800cba0:	b9a8      	cbnz	r0, 800cbce <__lo0bits+0x52>
 800cba2:	0c1b      	lsrs	r3, r3, #16
 800cba4:	2010      	movs	r0, #16
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	b90a      	cbnz	r2, 800cbae <__lo0bits+0x32>
 800cbaa:	3008      	adds	r0, #8
 800cbac:	0a1b      	lsrs	r3, r3, #8
 800cbae:	071a      	lsls	r2, r3, #28
 800cbb0:	bf04      	itt	eq
 800cbb2:	091b      	lsreq	r3, r3, #4
 800cbb4:	3004      	addeq	r0, #4
 800cbb6:	079a      	lsls	r2, r3, #30
 800cbb8:	bf04      	itt	eq
 800cbba:	089b      	lsreq	r3, r3, #2
 800cbbc:	3002      	addeq	r0, #2
 800cbbe:	07da      	lsls	r2, r3, #31
 800cbc0:	d403      	bmi.n	800cbca <__lo0bits+0x4e>
 800cbc2:	085b      	lsrs	r3, r3, #1
 800cbc4:	f100 0001 	add.w	r0, r0, #1
 800cbc8:	d005      	beq.n	800cbd6 <__lo0bits+0x5a>
 800cbca:	600b      	str	r3, [r1, #0]
 800cbcc:	4770      	bx	lr
 800cbce:	4610      	mov	r0, r2
 800cbd0:	e7e9      	b.n	800cba6 <__lo0bits+0x2a>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	4770      	bx	lr
 800cbd6:	2020      	movs	r0, #32
 800cbd8:	4770      	bx	lr
	...

0800cbdc <__i2b>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	460c      	mov	r4, r1
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	f7ff ff03 	bl	800c9ec <_Balloc>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	b928      	cbnz	r0, 800cbf6 <__i2b+0x1a>
 800cbea:	4b05      	ldr	r3, [pc, #20]	; (800cc00 <__i2b+0x24>)
 800cbec:	4805      	ldr	r0, [pc, #20]	; (800cc04 <__i2b+0x28>)
 800cbee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cbf2:	f001 f80d 	bl	800dc10 <__assert_func>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	6144      	str	r4, [r0, #20]
 800cbfa:	6103      	str	r3, [r0, #16]
 800cbfc:	bd10      	pop	{r4, pc}
 800cbfe:	bf00      	nop
 800cc00:	080100a6 	.word	0x080100a6
 800cc04:	080100b7 	.word	0x080100b7

0800cc08 <__multiply>:
 800cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	4691      	mov	r9, r2
 800cc0e:	690a      	ldr	r2, [r1, #16]
 800cc10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	bfb8      	it	lt
 800cc18:	460b      	movlt	r3, r1
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	bfbc      	itt	lt
 800cc1e:	464c      	movlt	r4, r9
 800cc20:	4699      	movlt	r9, r3
 800cc22:	6927      	ldr	r7, [r4, #16]
 800cc24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc28:	68a3      	ldr	r3, [r4, #8]
 800cc2a:	6861      	ldr	r1, [r4, #4]
 800cc2c:	eb07 060a 	add.w	r6, r7, sl
 800cc30:	42b3      	cmp	r3, r6
 800cc32:	b085      	sub	sp, #20
 800cc34:	bfb8      	it	lt
 800cc36:	3101      	addlt	r1, #1
 800cc38:	f7ff fed8 	bl	800c9ec <_Balloc>
 800cc3c:	b930      	cbnz	r0, 800cc4c <__multiply+0x44>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	4b44      	ldr	r3, [pc, #272]	; (800cd54 <__multiply+0x14c>)
 800cc42:	4845      	ldr	r0, [pc, #276]	; (800cd58 <__multiply+0x150>)
 800cc44:	f240 115d 	movw	r1, #349	; 0x15d
 800cc48:	f000 ffe2 	bl	800dc10 <__assert_func>
 800cc4c:	f100 0514 	add.w	r5, r0, #20
 800cc50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc54:	462b      	mov	r3, r5
 800cc56:	2200      	movs	r2, #0
 800cc58:	4543      	cmp	r3, r8
 800cc5a:	d321      	bcc.n	800cca0 <__multiply+0x98>
 800cc5c:	f104 0314 	add.w	r3, r4, #20
 800cc60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc64:	f109 0314 	add.w	r3, r9, #20
 800cc68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc6c:	9202      	str	r2, [sp, #8]
 800cc6e:	1b3a      	subs	r2, r7, r4
 800cc70:	3a15      	subs	r2, #21
 800cc72:	f022 0203 	bic.w	r2, r2, #3
 800cc76:	3204      	adds	r2, #4
 800cc78:	f104 0115 	add.w	r1, r4, #21
 800cc7c:	428f      	cmp	r7, r1
 800cc7e:	bf38      	it	cc
 800cc80:	2204      	movcc	r2, #4
 800cc82:	9201      	str	r2, [sp, #4]
 800cc84:	9a02      	ldr	r2, [sp, #8]
 800cc86:	9303      	str	r3, [sp, #12]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d80c      	bhi.n	800cca6 <__multiply+0x9e>
 800cc8c:	2e00      	cmp	r6, #0
 800cc8e:	dd03      	ble.n	800cc98 <__multiply+0x90>
 800cc90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d05a      	beq.n	800cd4e <__multiply+0x146>
 800cc98:	6106      	str	r6, [r0, #16]
 800cc9a:	b005      	add	sp, #20
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	f843 2b04 	str.w	r2, [r3], #4
 800cca4:	e7d8      	b.n	800cc58 <__multiply+0x50>
 800cca6:	f8b3 a000 	ldrh.w	sl, [r3]
 800ccaa:	f1ba 0f00 	cmp.w	sl, #0
 800ccae:	d024      	beq.n	800ccfa <__multiply+0xf2>
 800ccb0:	f104 0e14 	add.w	lr, r4, #20
 800ccb4:	46a9      	mov	r9, r5
 800ccb6:	f04f 0c00 	mov.w	ip, #0
 800ccba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ccbe:	f8d9 1000 	ldr.w	r1, [r9]
 800ccc2:	fa1f fb82 	uxth.w	fp, r2
 800ccc6:	b289      	uxth	r1, r1
 800ccc8:	fb0a 110b 	mla	r1, sl, fp, r1
 800cccc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ccd0:	f8d9 2000 	ldr.w	r2, [r9]
 800ccd4:	4461      	add	r1, ip
 800ccd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccda:	fb0a c20b 	mla	r2, sl, fp, ip
 800ccde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cce2:	b289      	uxth	r1, r1
 800cce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cce8:	4577      	cmp	r7, lr
 800ccea:	f849 1b04 	str.w	r1, [r9], #4
 800ccee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccf2:	d8e2      	bhi.n	800ccba <__multiply+0xb2>
 800ccf4:	9a01      	ldr	r2, [sp, #4]
 800ccf6:	f845 c002 	str.w	ip, [r5, r2]
 800ccfa:	9a03      	ldr	r2, [sp, #12]
 800ccfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd00:	3304      	adds	r3, #4
 800cd02:	f1b9 0f00 	cmp.w	r9, #0
 800cd06:	d020      	beq.n	800cd4a <__multiply+0x142>
 800cd08:	6829      	ldr	r1, [r5, #0]
 800cd0a:	f104 0c14 	add.w	ip, r4, #20
 800cd0e:	46ae      	mov	lr, r5
 800cd10:	f04f 0a00 	mov.w	sl, #0
 800cd14:	f8bc b000 	ldrh.w	fp, [ip]
 800cd18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd1c:	fb09 220b 	mla	r2, r9, fp, r2
 800cd20:	4492      	add	sl, r2
 800cd22:	b289      	uxth	r1, r1
 800cd24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cd28:	f84e 1b04 	str.w	r1, [lr], #4
 800cd2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd30:	f8be 1000 	ldrh.w	r1, [lr]
 800cd34:	0c12      	lsrs	r2, r2, #16
 800cd36:	fb09 1102 	mla	r1, r9, r2, r1
 800cd3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cd3e:	4567      	cmp	r7, ip
 800cd40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd44:	d8e6      	bhi.n	800cd14 <__multiply+0x10c>
 800cd46:	9a01      	ldr	r2, [sp, #4]
 800cd48:	50a9      	str	r1, [r5, r2]
 800cd4a:	3504      	adds	r5, #4
 800cd4c:	e79a      	b.n	800cc84 <__multiply+0x7c>
 800cd4e:	3e01      	subs	r6, #1
 800cd50:	e79c      	b.n	800cc8c <__multiply+0x84>
 800cd52:	bf00      	nop
 800cd54:	080100a6 	.word	0x080100a6
 800cd58:	080100b7 	.word	0x080100b7

0800cd5c <__pow5mult>:
 800cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd60:	4615      	mov	r5, r2
 800cd62:	f012 0203 	ands.w	r2, r2, #3
 800cd66:	4606      	mov	r6, r0
 800cd68:	460f      	mov	r7, r1
 800cd6a:	d007      	beq.n	800cd7c <__pow5mult+0x20>
 800cd6c:	4c25      	ldr	r4, [pc, #148]	; (800ce04 <__pow5mult+0xa8>)
 800cd6e:	3a01      	subs	r2, #1
 800cd70:	2300      	movs	r3, #0
 800cd72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd76:	f7ff fe9b 	bl	800cab0 <__multadd>
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	10ad      	asrs	r5, r5, #2
 800cd7e:	d03d      	beq.n	800cdfc <__pow5mult+0xa0>
 800cd80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd82:	b97c      	cbnz	r4, 800cda4 <__pow5mult+0x48>
 800cd84:	2010      	movs	r0, #16
 800cd86:	f7fe f8ab 	bl	800aee0 <malloc>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	6270      	str	r0, [r6, #36]	; 0x24
 800cd8e:	b928      	cbnz	r0, 800cd9c <__pow5mult+0x40>
 800cd90:	4b1d      	ldr	r3, [pc, #116]	; (800ce08 <__pow5mult+0xac>)
 800cd92:	481e      	ldr	r0, [pc, #120]	; (800ce0c <__pow5mult+0xb0>)
 800cd94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd98:	f000 ff3a 	bl	800dc10 <__assert_func>
 800cd9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cda0:	6004      	str	r4, [r0, #0]
 800cda2:	60c4      	str	r4, [r0, #12]
 800cda4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cda8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdac:	b94c      	cbnz	r4, 800cdc2 <__pow5mult+0x66>
 800cdae:	f240 2171 	movw	r1, #625	; 0x271
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	f7ff ff12 	bl	800cbdc <__i2b>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	6003      	str	r3, [r0, #0]
 800cdc2:	f04f 0900 	mov.w	r9, #0
 800cdc6:	07eb      	lsls	r3, r5, #31
 800cdc8:	d50a      	bpl.n	800cde0 <__pow5mult+0x84>
 800cdca:	4639      	mov	r1, r7
 800cdcc:	4622      	mov	r2, r4
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7ff ff1a 	bl	800cc08 <__multiply>
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	4680      	mov	r8, r0
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f7ff fe47 	bl	800ca6c <_Bfree>
 800cdde:	4647      	mov	r7, r8
 800cde0:	106d      	asrs	r5, r5, #1
 800cde2:	d00b      	beq.n	800cdfc <__pow5mult+0xa0>
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	b938      	cbnz	r0, 800cdf8 <__pow5mult+0x9c>
 800cde8:	4622      	mov	r2, r4
 800cdea:	4621      	mov	r1, r4
 800cdec:	4630      	mov	r0, r6
 800cdee:	f7ff ff0b 	bl	800cc08 <__multiply>
 800cdf2:	6020      	str	r0, [r4, #0]
 800cdf4:	f8c0 9000 	str.w	r9, [r0]
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	e7e4      	b.n	800cdc6 <__pow5mult+0x6a>
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce02:	bf00      	nop
 800ce04:	08010208 	.word	0x08010208
 800ce08:	08010034 	.word	0x08010034
 800ce0c:	080100b7 	.word	0x080100b7

0800ce10 <__lshift>:
 800ce10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce14:	460c      	mov	r4, r1
 800ce16:	6849      	ldr	r1, [r1, #4]
 800ce18:	6923      	ldr	r3, [r4, #16]
 800ce1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	4607      	mov	r7, r0
 800ce22:	4691      	mov	r9, r2
 800ce24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce28:	f108 0601 	add.w	r6, r8, #1
 800ce2c:	42b3      	cmp	r3, r6
 800ce2e:	db0b      	blt.n	800ce48 <__lshift+0x38>
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7ff fddb 	bl	800c9ec <_Balloc>
 800ce36:	4605      	mov	r5, r0
 800ce38:	b948      	cbnz	r0, 800ce4e <__lshift+0x3e>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	4b2a      	ldr	r3, [pc, #168]	; (800cee8 <__lshift+0xd8>)
 800ce3e:	482b      	ldr	r0, [pc, #172]	; (800ceec <__lshift+0xdc>)
 800ce40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ce44:	f000 fee4 	bl	800dc10 <__assert_func>
 800ce48:	3101      	adds	r1, #1
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	e7ee      	b.n	800ce2c <__lshift+0x1c>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f100 0114 	add.w	r1, r0, #20
 800ce54:	f100 0210 	add.w	r2, r0, #16
 800ce58:	4618      	mov	r0, r3
 800ce5a:	4553      	cmp	r3, sl
 800ce5c:	db37      	blt.n	800cece <__lshift+0xbe>
 800ce5e:	6920      	ldr	r0, [r4, #16]
 800ce60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce64:	f104 0314 	add.w	r3, r4, #20
 800ce68:	f019 091f 	ands.w	r9, r9, #31
 800ce6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce74:	d02f      	beq.n	800ced6 <__lshift+0xc6>
 800ce76:	f1c9 0e20 	rsb	lr, r9, #32
 800ce7a:	468a      	mov	sl, r1
 800ce7c:	f04f 0c00 	mov.w	ip, #0
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	fa02 f209 	lsl.w	r2, r2, r9
 800ce86:	ea42 020c 	orr.w	r2, r2, ip
 800ce8a:	f84a 2b04 	str.w	r2, [sl], #4
 800ce8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce92:	4298      	cmp	r0, r3
 800ce94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ce98:	d8f2      	bhi.n	800ce80 <__lshift+0x70>
 800ce9a:	1b03      	subs	r3, r0, r4
 800ce9c:	3b15      	subs	r3, #21
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	3304      	adds	r3, #4
 800cea4:	f104 0215 	add.w	r2, r4, #21
 800cea8:	4290      	cmp	r0, r2
 800ceaa:	bf38      	it	cc
 800ceac:	2304      	movcc	r3, #4
 800ceae:	f841 c003 	str.w	ip, [r1, r3]
 800ceb2:	f1bc 0f00 	cmp.w	ip, #0
 800ceb6:	d001      	beq.n	800cebc <__lshift+0xac>
 800ceb8:	f108 0602 	add.w	r6, r8, #2
 800cebc:	3e01      	subs	r6, #1
 800cebe:	4638      	mov	r0, r7
 800cec0:	612e      	str	r6, [r5, #16]
 800cec2:	4621      	mov	r1, r4
 800cec4:	f7ff fdd2 	bl	800ca6c <_Bfree>
 800cec8:	4628      	mov	r0, r5
 800ceca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cece:	f842 0f04 	str.w	r0, [r2, #4]!
 800ced2:	3301      	adds	r3, #1
 800ced4:	e7c1      	b.n	800ce5a <__lshift+0x4a>
 800ced6:	3904      	subs	r1, #4
 800ced8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cedc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cee0:	4298      	cmp	r0, r3
 800cee2:	d8f9      	bhi.n	800ced8 <__lshift+0xc8>
 800cee4:	e7ea      	b.n	800cebc <__lshift+0xac>
 800cee6:	bf00      	nop
 800cee8:	080100a6 	.word	0x080100a6
 800ceec:	080100b7 	.word	0x080100b7

0800cef0 <__mcmp>:
 800cef0:	b530      	push	{r4, r5, lr}
 800cef2:	6902      	ldr	r2, [r0, #16]
 800cef4:	690c      	ldr	r4, [r1, #16]
 800cef6:	1b12      	subs	r2, r2, r4
 800cef8:	d10e      	bne.n	800cf18 <__mcmp+0x28>
 800cefa:	f100 0314 	add.w	r3, r0, #20
 800cefe:	3114      	adds	r1, #20
 800cf00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cf04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cf08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cf0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf10:	42a5      	cmp	r5, r4
 800cf12:	d003      	beq.n	800cf1c <__mcmp+0x2c>
 800cf14:	d305      	bcc.n	800cf22 <__mcmp+0x32>
 800cf16:	2201      	movs	r2, #1
 800cf18:	4610      	mov	r0, r2
 800cf1a:	bd30      	pop	{r4, r5, pc}
 800cf1c:	4283      	cmp	r3, r0
 800cf1e:	d3f3      	bcc.n	800cf08 <__mcmp+0x18>
 800cf20:	e7fa      	b.n	800cf18 <__mcmp+0x28>
 800cf22:	f04f 32ff 	mov.w	r2, #4294967295
 800cf26:	e7f7      	b.n	800cf18 <__mcmp+0x28>

0800cf28 <__mdiff>:
 800cf28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	4606      	mov	r6, r0
 800cf30:	4611      	mov	r1, r2
 800cf32:	4620      	mov	r0, r4
 800cf34:	4690      	mov	r8, r2
 800cf36:	f7ff ffdb 	bl	800cef0 <__mcmp>
 800cf3a:	1e05      	subs	r5, r0, #0
 800cf3c:	d110      	bne.n	800cf60 <__mdiff+0x38>
 800cf3e:	4629      	mov	r1, r5
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7ff fd53 	bl	800c9ec <_Balloc>
 800cf46:	b930      	cbnz	r0, 800cf56 <__mdiff+0x2e>
 800cf48:	4b3a      	ldr	r3, [pc, #232]	; (800d034 <__mdiff+0x10c>)
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	f240 2132 	movw	r1, #562	; 0x232
 800cf50:	4839      	ldr	r0, [pc, #228]	; (800d038 <__mdiff+0x110>)
 800cf52:	f000 fe5d 	bl	800dc10 <__assert_func>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf60:	bfa4      	itt	ge
 800cf62:	4643      	movge	r3, r8
 800cf64:	46a0      	movge	r8, r4
 800cf66:	4630      	mov	r0, r6
 800cf68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf6c:	bfa6      	itte	ge
 800cf6e:	461c      	movge	r4, r3
 800cf70:	2500      	movge	r5, #0
 800cf72:	2501      	movlt	r5, #1
 800cf74:	f7ff fd3a 	bl	800c9ec <_Balloc>
 800cf78:	b920      	cbnz	r0, 800cf84 <__mdiff+0x5c>
 800cf7a:	4b2e      	ldr	r3, [pc, #184]	; (800d034 <__mdiff+0x10c>)
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf82:	e7e5      	b.n	800cf50 <__mdiff+0x28>
 800cf84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf88:	6926      	ldr	r6, [r4, #16]
 800cf8a:	60c5      	str	r5, [r0, #12]
 800cf8c:	f104 0914 	add.w	r9, r4, #20
 800cf90:	f108 0514 	add.w	r5, r8, #20
 800cf94:	f100 0e14 	add.w	lr, r0, #20
 800cf98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cfa0:	f108 0210 	add.w	r2, r8, #16
 800cfa4:	46f2      	mov	sl, lr
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cfb0:	fa1f f883 	uxth.w	r8, r3
 800cfb4:	fa11 f18b 	uxtah	r1, r1, fp
 800cfb8:	0c1b      	lsrs	r3, r3, #16
 800cfba:	eba1 0808 	sub.w	r8, r1, r8
 800cfbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cfc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cfc6:	fa1f f888 	uxth.w	r8, r8
 800cfca:	1419      	asrs	r1, r3, #16
 800cfcc:	454e      	cmp	r6, r9
 800cfce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cfd2:	f84a 3b04 	str.w	r3, [sl], #4
 800cfd6:	d8e7      	bhi.n	800cfa8 <__mdiff+0x80>
 800cfd8:	1b33      	subs	r3, r6, r4
 800cfda:	3b15      	subs	r3, #21
 800cfdc:	f023 0303 	bic.w	r3, r3, #3
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	3415      	adds	r4, #21
 800cfe4:	42a6      	cmp	r6, r4
 800cfe6:	bf38      	it	cc
 800cfe8:	2304      	movcc	r3, #4
 800cfea:	441d      	add	r5, r3
 800cfec:	4473      	add	r3, lr
 800cfee:	469e      	mov	lr, r3
 800cff0:	462e      	mov	r6, r5
 800cff2:	4566      	cmp	r6, ip
 800cff4:	d30e      	bcc.n	800d014 <__mdiff+0xec>
 800cff6:	f10c 0203 	add.w	r2, ip, #3
 800cffa:	1b52      	subs	r2, r2, r5
 800cffc:	f022 0203 	bic.w	r2, r2, #3
 800d000:	3d03      	subs	r5, #3
 800d002:	45ac      	cmp	ip, r5
 800d004:	bf38      	it	cc
 800d006:	2200      	movcc	r2, #0
 800d008:	441a      	add	r2, r3
 800d00a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d00e:	b17b      	cbz	r3, 800d030 <__mdiff+0x108>
 800d010:	6107      	str	r7, [r0, #16]
 800d012:	e7a3      	b.n	800cf5c <__mdiff+0x34>
 800d014:	f856 8b04 	ldr.w	r8, [r6], #4
 800d018:	fa11 f288 	uxtah	r2, r1, r8
 800d01c:	1414      	asrs	r4, r2, #16
 800d01e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d022:	b292      	uxth	r2, r2
 800d024:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d028:	f84e 2b04 	str.w	r2, [lr], #4
 800d02c:	1421      	asrs	r1, r4, #16
 800d02e:	e7e0      	b.n	800cff2 <__mdiff+0xca>
 800d030:	3f01      	subs	r7, #1
 800d032:	e7ea      	b.n	800d00a <__mdiff+0xe2>
 800d034:	080100a6 	.word	0x080100a6
 800d038:	080100b7 	.word	0x080100b7

0800d03c <__d2b>:
 800d03c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d040:	4689      	mov	r9, r1
 800d042:	2101      	movs	r1, #1
 800d044:	ec57 6b10 	vmov	r6, r7, d0
 800d048:	4690      	mov	r8, r2
 800d04a:	f7ff fccf 	bl	800c9ec <_Balloc>
 800d04e:	4604      	mov	r4, r0
 800d050:	b930      	cbnz	r0, 800d060 <__d2b+0x24>
 800d052:	4602      	mov	r2, r0
 800d054:	4b25      	ldr	r3, [pc, #148]	; (800d0ec <__d2b+0xb0>)
 800d056:	4826      	ldr	r0, [pc, #152]	; (800d0f0 <__d2b+0xb4>)
 800d058:	f240 310a 	movw	r1, #778	; 0x30a
 800d05c:	f000 fdd8 	bl	800dc10 <__assert_func>
 800d060:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d064:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d068:	bb35      	cbnz	r5, 800d0b8 <__d2b+0x7c>
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	d028      	beq.n	800d0c2 <__d2b+0x86>
 800d070:	4668      	mov	r0, sp
 800d072:	9600      	str	r6, [sp, #0]
 800d074:	f7ff fd82 	bl	800cb7c <__lo0bits>
 800d078:	9900      	ldr	r1, [sp, #0]
 800d07a:	b300      	cbz	r0, 800d0be <__d2b+0x82>
 800d07c:	9a01      	ldr	r2, [sp, #4]
 800d07e:	f1c0 0320 	rsb	r3, r0, #32
 800d082:	fa02 f303 	lsl.w	r3, r2, r3
 800d086:	430b      	orrs	r3, r1
 800d088:	40c2      	lsrs	r2, r0
 800d08a:	6163      	str	r3, [r4, #20]
 800d08c:	9201      	str	r2, [sp, #4]
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	61a3      	str	r3, [r4, #24]
 800d092:	2b00      	cmp	r3, #0
 800d094:	bf14      	ite	ne
 800d096:	2202      	movne	r2, #2
 800d098:	2201      	moveq	r2, #1
 800d09a:	6122      	str	r2, [r4, #16]
 800d09c:	b1d5      	cbz	r5, 800d0d4 <__d2b+0x98>
 800d09e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d0a2:	4405      	add	r5, r0
 800d0a4:	f8c9 5000 	str.w	r5, [r9]
 800d0a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0ac:	f8c8 0000 	str.w	r0, [r8]
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	b003      	add	sp, #12
 800d0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0bc:	e7d5      	b.n	800d06a <__d2b+0x2e>
 800d0be:	6161      	str	r1, [r4, #20]
 800d0c0:	e7e5      	b.n	800d08e <__d2b+0x52>
 800d0c2:	a801      	add	r0, sp, #4
 800d0c4:	f7ff fd5a 	bl	800cb7c <__lo0bits>
 800d0c8:	9b01      	ldr	r3, [sp, #4]
 800d0ca:	6163      	str	r3, [r4, #20]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	6122      	str	r2, [r4, #16]
 800d0d0:	3020      	adds	r0, #32
 800d0d2:	e7e3      	b.n	800d09c <__d2b+0x60>
 800d0d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0dc:	f8c9 0000 	str.w	r0, [r9]
 800d0e0:	6918      	ldr	r0, [r3, #16]
 800d0e2:	f7ff fd2b 	bl	800cb3c <__hi0bits>
 800d0e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0ea:	e7df      	b.n	800d0ac <__d2b+0x70>
 800d0ec:	080100a6 	.word	0x080100a6
 800d0f0:	080100b7 	.word	0x080100b7

0800d0f4 <_calloc_r>:
 800d0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0f6:	fba1 2402 	umull	r2, r4, r1, r2
 800d0fa:	b94c      	cbnz	r4, 800d110 <_calloc_r+0x1c>
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	9201      	str	r2, [sp, #4]
 800d100:	f7fd ff72 	bl	800afe8 <_malloc_r>
 800d104:	9a01      	ldr	r2, [sp, #4]
 800d106:	4605      	mov	r5, r0
 800d108:	b930      	cbnz	r0, 800d118 <_calloc_r+0x24>
 800d10a:	4628      	mov	r0, r5
 800d10c:	b003      	add	sp, #12
 800d10e:	bd30      	pop	{r4, r5, pc}
 800d110:	220c      	movs	r2, #12
 800d112:	6002      	str	r2, [r0, #0]
 800d114:	2500      	movs	r5, #0
 800d116:	e7f8      	b.n	800d10a <_calloc_r+0x16>
 800d118:	4621      	mov	r1, r4
 800d11a:	f7fd fef1 	bl	800af00 <memset>
 800d11e:	e7f4      	b.n	800d10a <_calloc_r+0x16>

0800d120 <__ssputs_r>:
 800d120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d124:	688e      	ldr	r6, [r1, #8]
 800d126:	429e      	cmp	r6, r3
 800d128:	4682      	mov	sl, r0
 800d12a:	460c      	mov	r4, r1
 800d12c:	4690      	mov	r8, r2
 800d12e:	461f      	mov	r7, r3
 800d130:	d838      	bhi.n	800d1a4 <__ssputs_r+0x84>
 800d132:	898a      	ldrh	r2, [r1, #12]
 800d134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d138:	d032      	beq.n	800d1a0 <__ssputs_r+0x80>
 800d13a:	6825      	ldr	r5, [r4, #0]
 800d13c:	6909      	ldr	r1, [r1, #16]
 800d13e:	eba5 0901 	sub.w	r9, r5, r1
 800d142:	6965      	ldr	r5, [r4, #20]
 800d144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d14c:	3301      	adds	r3, #1
 800d14e:	444b      	add	r3, r9
 800d150:	106d      	asrs	r5, r5, #1
 800d152:	429d      	cmp	r5, r3
 800d154:	bf38      	it	cc
 800d156:	461d      	movcc	r5, r3
 800d158:	0553      	lsls	r3, r2, #21
 800d15a:	d531      	bpl.n	800d1c0 <__ssputs_r+0xa0>
 800d15c:	4629      	mov	r1, r5
 800d15e:	f7fd ff43 	bl	800afe8 <_malloc_r>
 800d162:	4606      	mov	r6, r0
 800d164:	b950      	cbnz	r0, 800d17c <__ssputs_r+0x5c>
 800d166:	230c      	movs	r3, #12
 800d168:	f8ca 3000 	str.w	r3, [sl]
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d172:	81a3      	strh	r3, [r4, #12]
 800d174:	f04f 30ff 	mov.w	r0, #4294967295
 800d178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d17c:	6921      	ldr	r1, [r4, #16]
 800d17e:	464a      	mov	r2, r9
 800d180:	f7ff fc1a 	bl	800c9b8 <memcpy>
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	6126      	str	r6, [r4, #16]
 800d192:	6165      	str	r5, [r4, #20]
 800d194:	444e      	add	r6, r9
 800d196:	eba5 0509 	sub.w	r5, r5, r9
 800d19a:	6026      	str	r6, [r4, #0]
 800d19c:	60a5      	str	r5, [r4, #8]
 800d19e:	463e      	mov	r6, r7
 800d1a0:	42be      	cmp	r6, r7
 800d1a2:	d900      	bls.n	800d1a6 <__ssputs_r+0x86>
 800d1a4:	463e      	mov	r6, r7
 800d1a6:	6820      	ldr	r0, [r4, #0]
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	4641      	mov	r1, r8
 800d1ac:	f000 ff2c 	bl	800e008 <memmove>
 800d1b0:	68a3      	ldr	r3, [r4, #8]
 800d1b2:	1b9b      	subs	r3, r3, r6
 800d1b4:	60a3      	str	r3, [r4, #8]
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	4433      	add	r3, r6
 800d1ba:	6023      	str	r3, [r4, #0]
 800d1bc:	2000      	movs	r0, #0
 800d1be:	e7db      	b.n	800d178 <__ssputs_r+0x58>
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	f000 ff3b 	bl	800e03c <_realloc_r>
 800d1c6:	4606      	mov	r6, r0
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d1e1      	bne.n	800d190 <__ssputs_r+0x70>
 800d1cc:	6921      	ldr	r1, [r4, #16]
 800d1ce:	4650      	mov	r0, sl
 800d1d0:	f7fd fe9e 	bl	800af10 <_free_r>
 800d1d4:	e7c7      	b.n	800d166 <__ssputs_r+0x46>
	...

0800d1d8 <_svfiprintf_r>:
 800d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1dc:	4698      	mov	r8, r3
 800d1de:	898b      	ldrh	r3, [r1, #12]
 800d1e0:	061b      	lsls	r3, r3, #24
 800d1e2:	b09d      	sub	sp, #116	; 0x74
 800d1e4:	4607      	mov	r7, r0
 800d1e6:	460d      	mov	r5, r1
 800d1e8:	4614      	mov	r4, r2
 800d1ea:	d50e      	bpl.n	800d20a <_svfiprintf_r+0x32>
 800d1ec:	690b      	ldr	r3, [r1, #16]
 800d1ee:	b963      	cbnz	r3, 800d20a <_svfiprintf_r+0x32>
 800d1f0:	2140      	movs	r1, #64	; 0x40
 800d1f2:	f7fd fef9 	bl	800afe8 <_malloc_r>
 800d1f6:	6028      	str	r0, [r5, #0]
 800d1f8:	6128      	str	r0, [r5, #16]
 800d1fa:	b920      	cbnz	r0, 800d206 <_svfiprintf_r+0x2e>
 800d1fc:	230c      	movs	r3, #12
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	f04f 30ff 	mov.w	r0, #4294967295
 800d204:	e0d1      	b.n	800d3aa <_svfiprintf_r+0x1d2>
 800d206:	2340      	movs	r3, #64	; 0x40
 800d208:	616b      	str	r3, [r5, #20]
 800d20a:	2300      	movs	r3, #0
 800d20c:	9309      	str	r3, [sp, #36]	; 0x24
 800d20e:	2320      	movs	r3, #32
 800d210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d214:	f8cd 800c 	str.w	r8, [sp, #12]
 800d218:	2330      	movs	r3, #48	; 0x30
 800d21a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d3c4 <_svfiprintf_r+0x1ec>
 800d21e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d222:	f04f 0901 	mov.w	r9, #1
 800d226:	4623      	mov	r3, r4
 800d228:	469a      	mov	sl, r3
 800d22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d22e:	b10a      	cbz	r2, 800d234 <_svfiprintf_r+0x5c>
 800d230:	2a25      	cmp	r2, #37	; 0x25
 800d232:	d1f9      	bne.n	800d228 <_svfiprintf_r+0x50>
 800d234:	ebba 0b04 	subs.w	fp, sl, r4
 800d238:	d00b      	beq.n	800d252 <_svfiprintf_r+0x7a>
 800d23a:	465b      	mov	r3, fp
 800d23c:	4622      	mov	r2, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	4638      	mov	r0, r7
 800d242:	f7ff ff6d 	bl	800d120 <__ssputs_r>
 800d246:	3001      	adds	r0, #1
 800d248:	f000 80aa 	beq.w	800d3a0 <_svfiprintf_r+0x1c8>
 800d24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d24e:	445a      	add	r2, fp
 800d250:	9209      	str	r2, [sp, #36]	; 0x24
 800d252:	f89a 3000 	ldrb.w	r3, [sl]
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 80a2 	beq.w	800d3a0 <_svfiprintf_r+0x1c8>
 800d25c:	2300      	movs	r3, #0
 800d25e:	f04f 32ff 	mov.w	r2, #4294967295
 800d262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d266:	f10a 0a01 	add.w	sl, sl, #1
 800d26a:	9304      	str	r3, [sp, #16]
 800d26c:	9307      	str	r3, [sp, #28]
 800d26e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d272:	931a      	str	r3, [sp, #104]	; 0x68
 800d274:	4654      	mov	r4, sl
 800d276:	2205      	movs	r2, #5
 800d278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d27c:	4851      	ldr	r0, [pc, #324]	; (800d3c4 <_svfiprintf_r+0x1ec>)
 800d27e:	f7f2 ffc7 	bl	8000210 <memchr>
 800d282:	9a04      	ldr	r2, [sp, #16]
 800d284:	b9d8      	cbnz	r0, 800d2be <_svfiprintf_r+0xe6>
 800d286:	06d0      	lsls	r0, r2, #27
 800d288:	bf44      	itt	mi
 800d28a:	2320      	movmi	r3, #32
 800d28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d290:	0711      	lsls	r1, r2, #28
 800d292:	bf44      	itt	mi
 800d294:	232b      	movmi	r3, #43	; 0x2b
 800d296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d29a:	f89a 3000 	ldrb.w	r3, [sl]
 800d29e:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a0:	d015      	beq.n	800d2ce <_svfiprintf_r+0xf6>
 800d2a2:	9a07      	ldr	r2, [sp, #28]
 800d2a4:	4654      	mov	r4, sl
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	f04f 0c0a 	mov.w	ip, #10
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2b2:	3b30      	subs	r3, #48	; 0x30
 800d2b4:	2b09      	cmp	r3, #9
 800d2b6:	d94e      	bls.n	800d356 <_svfiprintf_r+0x17e>
 800d2b8:	b1b0      	cbz	r0, 800d2e8 <_svfiprintf_r+0x110>
 800d2ba:	9207      	str	r2, [sp, #28]
 800d2bc:	e014      	b.n	800d2e8 <_svfiprintf_r+0x110>
 800d2be:	eba0 0308 	sub.w	r3, r0, r8
 800d2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	9304      	str	r3, [sp, #16]
 800d2ca:	46a2      	mov	sl, r4
 800d2cc:	e7d2      	b.n	800d274 <_svfiprintf_r+0x9c>
 800d2ce:	9b03      	ldr	r3, [sp, #12]
 800d2d0:	1d19      	adds	r1, r3, #4
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	9103      	str	r1, [sp, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	bfbb      	ittet	lt
 800d2da:	425b      	neglt	r3, r3
 800d2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e0:	9307      	strge	r3, [sp, #28]
 800d2e2:	9307      	strlt	r3, [sp, #28]
 800d2e4:	bfb8      	it	lt
 800d2e6:	9204      	strlt	r2, [sp, #16]
 800d2e8:	7823      	ldrb	r3, [r4, #0]
 800d2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ec:	d10c      	bne.n	800d308 <_svfiprintf_r+0x130>
 800d2ee:	7863      	ldrb	r3, [r4, #1]
 800d2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f2:	d135      	bne.n	800d360 <_svfiprintf_r+0x188>
 800d2f4:	9b03      	ldr	r3, [sp, #12]
 800d2f6:	1d1a      	adds	r2, r3, #4
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	9203      	str	r2, [sp, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	bfb8      	it	lt
 800d300:	f04f 33ff 	movlt.w	r3, #4294967295
 800d304:	3402      	adds	r4, #2
 800d306:	9305      	str	r3, [sp, #20]
 800d308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3d4 <_svfiprintf_r+0x1fc>
 800d30c:	7821      	ldrb	r1, [r4, #0]
 800d30e:	2203      	movs	r2, #3
 800d310:	4650      	mov	r0, sl
 800d312:	f7f2 ff7d 	bl	8000210 <memchr>
 800d316:	b140      	cbz	r0, 800d32a <_svfiprintf_r+0x152>
 800d318:	2340      	movs	r3, #64	; 0x40
 800d31a:	eba0 000a 	sub.w	r0, r0, sl
 800d31e:	fa03 f000 	lsl.w	r0, r3, r0
 800d322:	9b04      	ldr	r3, [sp, #16]
 800d324:	4303      	orrs	r3, r0
 800d326:	3401      	adds	r4, #1
 800d328:	9304      	str	r3, [sp, #16]
 800d32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32e:	4826      	ldr	r0, [pc, #152]	; (800d3c8 <_svfiprintf_r+0x1f0>)
 800d330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d334:	2206      	movs	r2, #6
 800d336:	f7f2 ff6b 	bl	8000210 <memchr>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d038      	beq.n	800d3b0 <_svfiprintf_r+0x1d8>
 800d33e:	4b23      	ldr	r3, [pc, #140]	; (800d3cc <_svfiprintf_r+0x1f4>)
 800d340:	bb1b      	cbnz	r3, 800d38a <_svfiprintf_r+0x1b2>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	3307      	adds	r3, #7
 800d346:	f023 0307 	bic.w	r3, r3, #7
 800d34a:	3308      	adds	r3, #8
 800d34c:	9303      	str	r3, [sp, #12]
 800d34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d350:	4433      	add	r3, r6
 800d352:	9309      	str	r3, [sp, #36]	; 0x24
 800d354:	e767      	b.n	800d226 <_svfiprintf_r+0x4e>
 800d356:	fb0c 3202 	mla	r2, ip, r2, r3
 800d35a:	460c      	mov	r4, r1
 800d35c:	2001      	movs	r0, #1
 800d35e:	e7a5      	b.n	800d2ac <_svfiprintf_r+0xd4>
 800d360:	2300      	movs	r3, #0
 800d362:	3401      	adds	r4, #1
 800d364:	9305      	str	r3, [sp, #20]
 800d366:	4619      	mov	r1, r3
 800d368:	f04f 0c0a 	mov.w	ip, #10
 800d36c:	4620      	mov	r0, r4
 800d36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d372:	3a30      	subs	r2, #48	; 0x30
 800d374:	2a09      	cmp	r2, #9
 800d376:	d903      	bls.n	800d380 <_svfiprintf_r+0x1a8>
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0c5      	beq.n	800d308 <_svfiprintf_r+0x130>
 800d37c:	9105      	str	r1, [sp, #20]
 800d37e:	e7c3      	b.n	800d308 <_svfiprintf_r+0x130>
 800d380:	fb0c 2101 	mla	r1, ip, r1, r2
 800d384:	4604      	mov	r4, r0
 800d386:	2301      	movs	r3, #1
 800d388:	e7f0      	b.n	800d36c <_svfiprintf_r+0x194>
 800d38a:	ab03      	add	r3, sp, #12
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	462a      	mov	r2, r5
 800d390:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <_svfiprintf_r+0x1f8>)
 800d392:	a904      	add	r1, sp, #16
 800d394:	4638      	mov	r0, r7
 800d396:	f7fd ff3b 	bl	800b210 <_printf_float>
 800d39a:	1c42      	adds	r2, r0, #1
 800d39c:	4606      	mov	r6, r0
 800d39e:	d1d6      	bne.n	800d34e <_svfiprintf_r+0x176>
 800d3a0:	89ab      	ldrh	r3, [r5, #12]
 800d3a2:	065b      	lsls	r3, r3, #25
 800d3a4:	f53f af2c 	bmi.w	800d200 <_svfiprintf_r+0x28>
 800d3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3aa:	b01d      	add	sp, #116	; 0x74
 800d3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b0:	ab03      	add	r3, sp, #12
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	462a      	mov	r2, r5
 800d3b6:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <_svfiprintf_r+0x1f8>)
 800d3b8:	a904      	add	r1, sp, #16
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	f7fe f9cc 	bl	800b758 <_printf_i>
 800d3c0:	e7eb      	b.n	800d39a <_svfiprintf_r+0x1c2>
 800d3c2:	bf00      	nop
 800d3c4:	08010214 	.word	0x08010214
 800d3c8:	0801021e 	.word	0x0801021e
 800d3cc:	0800b211 	.word	0x0800b211
 800d3d0:	0800d121 	.word	0x0800d121
 800d3d4:	0801021a 	.word	0x0801021a

0800d3d8 <_sungetc_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	1c4b      	adds	r3, r1, #1
 800d3dc:	4614      	mov	r4, r2
 800d3de:	d103      	bne.n	800d3e8 <_sungetc_r+0x10>
 800d3e0:	f04f 35ff 	mov.w	r5, #4294967295
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	8993      	ldrh	r3, [r2, #12]
 800d3ea:	f023 0320 	bic.w	r3, r3, #32
 800d3ee:	8193      	strh	r3, [r2, #12]
 800d3f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3f2:	6852      	ldr	r2, [r2, #4]
 800d3f4:	b2cd      	uxtb	r5, r1
 800d3f6:	b18b      	cbz	r3, 800d41c <_sungetc_r+0x44>
 800d3f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	dd08      	ble.n	800d410 <_sungetc_r+0x38>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	1e5a      	subs	r2, r3, #1
 800d402:	6022      	str	r2, [r4, #0]
 800d404:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d408:	6863      	ldr	r3, [r4, #4]
 800d40a:	3301      	adds	r3, #1
 800d40c:	6063      	str	r3, [r4, #4]
 800d40e:	e7e9      	b.n	800d3e4 <_sungetc_r+0xc>
 800d410:	4621      	mov	r1, r4
 800d412:	f000 fbc3 	bl	800db9c <__submore>
 800d416:	2800      	cmp	r0, #0
 800d418:	d0f1      	beq.n	800d3fe <_sungetc_r+0x26>
 800d41a:	e7e1      	b.n	800d3e0 <_sungetc_r+0x8>
 800d41c:	6921      	ldr	r1, [r4, #16]
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	b151      	cbz	r1, 800d438 <_sungetc_r+0x60>
 800d422:	4299      	cmp	r1, r3
 800d424:	d208      	bcs.n	800d438 <_sungetc_r+0x60>
 800d426:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d42a:	42a9      	cmp	r1, r5
 800d42c:	d104      	bne.n	800d438 <_sungetc_r+0x60>
 800d42e:	3b01      	subs	r3, #1
 800d430:	3201      	adds	r2, #1
 800d432:	6023      	str	r3, [r4, #0]
 800d434:	6062      	str	r2, [r4, #4]
 800d436:	e7d5      	b.n	800d3e4 <_sungetc_r+0xc>
 800d438:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d43c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d440:	6363      	str	r3, [r4, #52]	; 0x34
 800d442:	2303      	movs	r3, #3
 800d444:	63a3      	str	r3, [r4, #56]	; 0x38
 800d446:	4623      	mov	r3, r4
 800d448:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	2301      	movs	r3, #1
 800d450:	e7dc      	b.n	800d40c <_sungetc_r+0x34>

0800d452 <__ssrefill_r>:
 800d452:	b510      	push	{r4, lr}
 800d454:	460c      	mov	r4, r1
 800d456:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d458:	b169      	cbz	r1, 800d476 <__ssrefill_r+0x24>
 800d45a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d45e:	4299      	cmp	r1, r3
 800d460:	d001      	beq.n	800d466 <__ssrefill_r+0x14>
 800d462:	f7fd fd55 	bl	800af10 <_free_r>
 800d466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d468:	6063      	str	r3, [r4, #4]
 800d46a:	2000      	movs	r0, #0
 800d46c:	6360      	str	r0, [r4, #52]	; 0x34
 800d46e:	b113      	cbz	r3, 800d476 <__ssrefill_r+0x24>
 800d470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d472:	6023      	str	r3, [r4, #0]
 800d474:	bd10      	pop	{r4, pc}
 800d476:	6923      	ldr	r3, [r4, #16]
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	6063      	str	r3, [r4, #4]
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	f043 0320 	orr.w	r3, r3, #32
 800d484:	81a3      	strh	r3, [r4, #12]
 800d486:	f04f 30ff 	mov.w	r0, #4294967295
 800d48a:	e7f3      	b.n	800d474 <__ssrefill_r+0x22>

0800d48c <__ssvfiscanf_r>:
 800d48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d490:	460c      	mov	r4, r1
 800d492:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d496:	2100      	movs	r1, #0
 800d498:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d49c:	49a6      	ldr	r1, [pc, #664]	; (800d738 <__ssvfiscanf_r+0x2ac>)
 800d49e:	91a0      	str	r1, [sp, #640]	; 0x280
 800d4a0:	f10d 0804 	add.w	r8, sp, #4
 800d4a4:	49a5      	ldr	r1, [pc, #660]	; (800d73c <__ssvfiscanf_r+0x2b0>)
 800d4a6:	4fa6      	ldr	r7, [pc, #664]	; (800d740 <__ssvfiscanf_r+0x2b4>)
 800d4a8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d744 <__ssvfiscanf_r+0x2b8>
 800d4ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	91a1      	str	r1, [sp, #644]	; 0x284
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	7813      	ldrb	r3, [r2, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f000 815a 	beq.w	800d772 <__ssvfiscanf_r+0x2e6>
 800d4be:	5dd9      	ldrb	r1, [r3, r7]
 800d4c0:	f011 0108 	ands.w	r1, r1, #8
 800d4c4:	f102 0501 	add.w	r5, r2, #1
 800d4c8:	d019      	beq.n	800d4fe <__ssvfiscanf_r+0x72>
 800d4ca:	6863      	ldr	r3, [r4, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	dd0f      	ble.n	800d4f0 <__ssvfiscanf_r+0x64>
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	781a      	ldrb	r2, [r3, #0]
 800d4d4:	5cba      	ldrb	r2, [r7, r2]
 800d4d6:	0712      	lsls	r2, r2, #28
 800d4d8:	d401      	bmi.n	800d4de <__ssvfiscanf_r+0x52>
 800d4da:	462a      	mov	r2, r5
 800d4dc:	e7eb      	b.n	800d4b6 <__ssvfiscanf_r+0x2a>
 800d4de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d4e0:	3201      	adds	r2, #1
 800d4e2:	9245      	str	r2, [sp, #276]	; 0x114
 800d4e4:	6862      	ldr	r2, [r4, #4]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	3a01      	subs	r2, #1
 800d4ea:	6062      	str	r2, [r4, #4]
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	e7ec      	b.n	800d4ca <__ssvfiscanf_r+0x3e>
 800d4f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4798      	blx	r3
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d0e9      	beq.n	800d4d0 <__ssvfiscanf_r+0x44>
 800d4fc:	e7ed      	b.n	800d4da <__ssvfiscanf_r+0x4e>
 800d4fe:	2b25      	cmp	r3, #37	; 0x25
 800d500:	d012      	beq.n	800d528 <__ssvfiscanf_r+0x9c>
 800d502:	469a      	mov	sl, r3
 800d504:	6863      	ldr	r3, [r4, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	f340 8091 	ble.w	800d62e <__ssvfiscanf_r+0x1a2>
 800d50c:	6822      	ldr	r2, [r4, #0]
 800d50e:	7813      	ldrb	r3, [r2, #0]
 800d510:	4553      	cmp	r3, sl
 800d512:	f040 812e 	bne.w	800d772 <__ssvfiscanf_r+0x2e6>
 800d516:	6863      	ldr	r3, [r4, #4]
 800d518:	3b01      	subs	r3, #1
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d51e:	3201      	adds	r2, #1
 800d520:	3301      	adds	r3, #1
 800d522:	6022      	str	r2, [r4, #0]
 800d524:	9345      	str	r3, [sp, #276]	; 0x114
 800d526:	e7d8      	b.n	800d4da <__ssvfiscanf_r+0x4e>
 800d528:	9141      	str	r1, [sp, #260]	; 0x104
 800d52a:	9143      	str	r1, [sp, #268]	; 0x10c
 800d52c:	7853      	ldrb	r3, [r2, #1]
 800d52e:	2b2a      	cmp	r3, #42	; 0x2a
 800d530:	bf02      	ittt	eq
 800d532:	2310      	moveq	r3, #16
 800d534:	1c95      	addeq	r5, r2, #2
 800d536:	9341      	streq	r3, [sp, #260]	; 0x104
 800d538:	220a      	movs	r2, #10
 800d53a:	46aa      	mov	sl, r5
 800d53c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d540:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d544:	2b09      	cmp	r3, #9
 800d546:	d91d      	bls.n	800d584 <__ssvfiscanf_r+0xf8>
 800d548:	487e      	ldr	r0, [pc, #504]	; (800d744 <__ssvfiscanf_r+0x2b8>)
 800d54a:	2203      	movs	r2, #3
 800d54c:	f7f2 fe60 	bl	8000210 <memchr>
 800d550:	b140      	cbz	r0, 800d564 <__ssvfiscanf_r+0xd8>
 800d552:	2301      	movs	r3, #1
 800d554:	eba0 0009 	sub.w	r0, r0, r9
 800d558:	fa03 f000 	lsl.w	r0, r3, r0
 800d55c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d55e:	4318      	orrs	r0, r3
 800d560:	9041      	str	r0, [sp, #260]	; 0x104
 800d562:	4655      	mov	r5, sl
 800d564:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d568:	2b78      	cmp	r3, #120	; 0x78
 800d56a:	d806      	bhi.n	800d57a <__ssvfiscanf_r+0xee>
 800d56c:	2b57      	cmp	r3, #87	; 0x57
 800d56e:	d810      	bhi.n	800d592 <__ssvfiscanf_r+0x106>
 800d570:	2b25      	cmp	r3, #37	; 0x25
 800d572:	d0c6      	beq.n	800d502 <__ssvfiscanf_r+0x76>
 800d574:	d856      	bhi.n	800d624 <__ssvfiscanf_r+0x198>
 800d576:	2b00      	cmp	r3, #0
 800d578:	d064      	beq.n	800d644 <__ssvfiscanf_r+0x1b8>
 800d57a:	2303      	movs	r3, #3
 800d57c:	9347      	str	r3, [sp, #284]	; 0x11c
 800d57e:	230a      	movs	r3, #10
 800d580:	9342      	str	r3, [sp, #264]	; 0x108
 800d582:	e071      	b.n	800d668 <__ssvfiscanf_r+0x1dc>
 800d584:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d586:	fb02 1103 	mla	r1, r2, r3, r1
 800d58a:	3930      	subs	r1, #48	; 0x30
 800d58c:	9143      	str	r1, [sp, #268]	; 0x10c
 800d58e:	4655      	mov	r5, sl
 800d590:	e7d3      	b.n	800d53a <__ssvfiscanf_r+0xae>
 800d592:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d596:	2a20      	cmp	r2, #32
 800d598:	d8ef      	bhi.n	800d57a <__ssvfiscanf_r+0xee>
 800d59a:	a101      	add	r1, pc, #4	; (adr r1, 800d5a0 <__ssvfiscanf_r+0x114>)
 800d59c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d5a0:	0800d653 	.word	0x0800d653
 800d5a4:	0800d57b 	.word	0x0800d57b
 800d5a8:	0800d57b 	.word	0x0800d57b
 800d5ac:	0800d6b1 	.word	0x0800d6b1
 800d5b0:	0800d57b 	.word	0x0800d57b
 800d5b4:	0800d57b 	.word	0x0800d57b
 800d5b8:	0800d57b 	.word	0x0800d57b
 800d5bc:	0800d57b 	.word	0x0800d57b
 800d5c0:	0800d57b 	.word	0x0800d57b
 800d5c4:	0800d57b 	.word	0x0800d57b
 800d5c8:	0800d57b 	.word	0x0800d57b
 800d5cc:	0800d6c7 	.word	0x0800d6c7
 800d5d0:	0800d69d 	.word	0x0800d69d
 800d5d4:	0800d62b 	.word	0x0800d62b
 800d5d8:	0800d62b 	.word	0x0800d62b
 800d5dc:	0800d62b 	.word	0x0800d62b
 800d5e0:	0800d57b 	.word	0x0800d57b
 800d5e4:	0800d6a1 	.word	0x0800d6a1
 800d5e8:	0800d57b 	.word	0x0800d57b
 800d5ec:	0800d57b 	.word	0x0800d57b
 800d5f0:	0800d57b 	.word	0x0800d57b
 800d5f4:	0800d57b 	.word	0x0800d57b
 800d5f8:	0800d6d7 	.word	0x0800d6d7
 800d5fc:	0800d6a9 	.word	0x0800d6a9
 800d600:	0800d64b 	.word	0x0800d64b
 800d604:	0800d57b 	.word	0x0800d57b
 800d608:	0800d57b 	.word	0x0800d57b
 800d60c:	0800d6d3 	.word	0x0800d6d3
 800d610:	0800d57b 	.word	0x0800d57b
 800d614:	0800d69d 	.word	0x0800d69d
 800d618:	0800d57b 	.word	0x0800d57b
 800d61c:	0800d57b 	.word	0x0800d57b
 800d620:	0800d653 	.word	0x0800d653
 800d624:	3b45      	subs	r3, #69	; 0x45
 800d626:	2b02      	cmp	r3, #2
 800d628:	d8a7      	bhi.n	800d57a <__ssvfiscanf_r+0xee>
 800d62a:	2305      	movs	r3, #5
 800d62c:	e01b      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d62e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d630:	4621      	mov	r1, r4
 800d632:	4630      	mov	r0, r6
 800d634:	4798      	blx	r3
 800d636:	2800      	cmp	r0, #0
 800d638:	f43f af68 	beq.w	800d50c <__ssvfiscanf_r+0x80>
 800d63c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d63e:	2800      	cmp	r0, #0
 800d640:	f040 808d 	bne.w	800d75e <__ssvfiscanf_r+0x2d2>
 800d644:	f04f 30ff 	mov.w	r0, #4294967295
 800d648:	e08f      	b.n	800d76a <__ssvfiscanf_r+0x2de>
 800d64a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d64c:	f042 0220 	orr.w	r2, r2, #32
 800d650:	9241      	str	r2, [sp, #260]	; 0x104
 800d652:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d658:	9241      	str	r2, [sp, #260]	; 0x104
 800d65a:	2210      	movs	r2, #16
 800d65c:	2b6f      	cmp	r3, #111	; 0x6f
 800d65e:	9242      	str	r2, [sp, #264]	; 0x108
 800d660:	bf34      	ite	cc
 800d662:	2303      	movcc	r3, #3
 800d664:	2304      	movcs	r3, #4
 800d666:	9347      	str	r3, [sp, #284]	; 0x11c
 800d668:	6863      	ldr	r3, [r4, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dd42      	ble.n	800d6f4 <__ssvfiscanf_r+0x268>
 800d66e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d670:	0659      	lsls	r1, r3, #25
 800d672:	d404      	bmi.n	800d67e <__ssvfiscanf_r+0x1f2>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	5cba      	ldrb	r2, [r7, r2]
 800d67a:	0712      	lsls	r2, r2, #28
 800d67c:	d441      	bmi.n	800d702 <__ssvfiscanf_r+0x276>
 800d67e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d680:	2b02      	cmp	r3, #2
 800d682:	dc50      	bgt.n	800d726 <__ssvfiscanf_r+0x29a>
 800d684:	466b      	mov	r3, sp
 800d686:	4622      	mov	r2, r4
 800d688:	a941      	add	r1, sp, #260	; 0x104
 800d68a:	4630      	mov	r0, r6
 800d68c:	f000 f876 	bl	800d77c <_scanf_chars>
 800d690:	2801      	cmp	r0, #1
 800d692:	d06e      	beq.n	800d772 <__ssvfiscanf_r+0x2e6>
 800d694:	2802      	cmp	r0, #2
 800d696:	f47f af20 	bne.w	800d4da <__ssvfiscanf_r+0x4e>
 800d69a:	e7cf      	b.n	800d63c <__ssvfiscanf_r+0x1b0>
 800d69c:	220a      	movs	r2, #10
 800d69e:	e7dd      	b.n	800d65c <__ssvfiscanf_r+0x1d0>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	9342      	str	r3, [sp, #264]	; 0x108
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e7de      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6a8:	2308      	movs	r3, #8
 800d6aa:	9342      	str	r3, [sp, #264]	; 0x108
 800d6ac:	2304      	movs	r3, #4
 800d6ae:	e7da      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	f000 f9c6 	bl	800da44 <__sccl>
 800d6b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6be:	9341      	str	r3, [sp, #260]	; 0x104
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e7cf      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6cc:	9341      	str	r3, [sp, #260]	; 0x104
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e7c9      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	e7c7      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d6d8:	06c3      	lsls	r3, r0, #27
 800d6da:	f53f aefe 	bmi.w	800d4da <__ssvfiscanf_r+0x4e>
 800d6de:	9b00      	ldr	r3, [sp, #0]
 800d6e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d6e2:	1d19      	adds	r1, r3, #4
 800d6e4:	9100      	str	r1, [sp, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f010 0f01 	tst.w	r0, #1
 800d6ec:	bf14      	ite	ne
 800d6ee:	801a      	strhne	r2, [r3, #0]
 800d6f0:	601a      	streq	r2, [r3, #0]
 800d6f2:	e6f2      	b.n	800d4da <__ssvfiscanf_r+0x4e>
 800d6f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4798      	blx	r3
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d0b6      	beq.n	800d66e <__ssvfiscanf_r+0x1e2>
 800d700:	e79c      	b.n	800d63c <__ssvfiscanf_r+0x1b0>
 800d702:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d704:	3201      	adds	r2, #1
 800d706:	9245      	str	r2, [sp, #276]	; 0x114
 800d708:	6862      	ldr	r2, [r4, #4]
 800d70a:	3a01      	subs	r2, #1
 800d70c:	2a00      	cmp	r2, #0
 800d70e:	6062      	str	r2, [r4, #4]
 800d710:	dd02      	ble.n	800d718 <__ssvfiscanf_r+0x28c>
 800d712:	3301      	adds	r3, #1
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	e7ad      	b.n	800d674 <__ssvfiscanf_r+0x1e8>
 800d718:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d71a:	4621      	mov	r1, r4
 800d71c:	4630      	mov	r0, r6
 800d71e:	4798      	blx	r3
 800d720:	2800      	cmp	r0, #0
 800d722:	d0a7      	beq.n	800d674 <__ssvfiscanf_r+0x1e8>
 800d724:	e78a      	b.n	800d63c <__ssvfiscanf_r+0x1b0>
 800d726:	2b04      	cmp	r3, #4
 800d728:	dc0e      	bgt.n	800d748 <__ssvfiscanf_r+0x2bc>
 800d72a:	466b      	mov	r3, sp
 800d72c:	4622      	mov	r2, r4
 800d72e:	a941      	add	r1, sp, #260	; 0x104
 800d730:	4630      	mov	r0, r6
 800d732:	f000 f87d 	bl	800d830 <_scanf_i>
 800d736:	e7ab      	b.n	800d690 <__ssvfiscanf_r+0x204>
 800d738:	0800d3d9 	.word	0x0800d3d9
 800d73c:	0800d453 	.word	0x0800d453
 800d740:	0800ff27 	.word	0x0800ff27
 800d744:	0801021a 	.word	0x0801021a
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <__ssvfiscanf_r+0x2ec>)
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f43f aec5 	beq.w	800d4da <__ssvfiscanf_r+0x4e>
 800d750:	466b      	mov	r3, sp
 800d752:	4622      	mov	r2, r4
 800d754:	a941      	add	r1, sp, #260	; 0x104
 800d756:	4630      	mov	r0, r6
 800d758:	f3af 8000 	nop.w
 800d75c:	e798      	b.n	800d690 <__ssvfiscanf_r+0x204>
 800d75e:	89a3      	ldrh	r3, [r4, #12]
 800d760:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d764:	bf18      	it	ne
 800d766:	f04f 30ff 	movne.w	r0, #4294967295
 800d76a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d772:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d774:	e7f9      	b.n	800d76a <__ssvfiscanf_r+0x2de>
 800d776:	bf00      	nop
 800d778:	00000000 	.word	0x00000000

0800d77c <_scanf_chars>:
 800d77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d780:	4615      	mov	r5, r2
 800d782:	688a      	ldr	r2, [r1, #8]
 800d784:	4680      	mov	r8, r0
 800d786:	460c      	mov	r4, r1
 800d788:	b932      	cbnz	r2, 800d798 <_scanf_chars+0x1c>
 800d78a:	698a      	ldr	r2, [r1, #24]
 800d78c:	2a00      	cmp	r2, #0
 800d78e:	bf0c      	ite	eq
 800d790:	2201      	moveq	r2, #1
 800d792:	f04f 32ff 	movne.w	r2, #4294967295
 800d796:	608a      	str	r2, [r1, #8]
 800d798:	6822      	ldr	r2, [r4, #0]
 800d79a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d82c <_scanf_chars+0xb0>
 800d79e:	06d1      	lsls	r1, r2, #27
 800d7a0:	bf5f      	itttt	pl
 800d7a2:	681a      	ldrpl	r2, [r3, #0]
 800d7a4:	1d11      	addpl	r1, r2, #4
 800d7a6:	6019      	strpl	r1, [r3, #0]
 800d7a8:	6816      	ldrpl	r6, [r2, #0]
 800d7aa:	2700      	movs	r7, #0
 800d7ac:	69a0      	ldr	r0, [r4, #24]
 800d7ae:	b188      	cbz	r0, 800d7d4 <_scanf_chars+0x58>
 800d7b0:	2801      	cmp	r0, #1
 800d7b2:	d107      	bne.n	800d7c4 <_scanf_chars+0x48>
 800d7b4:	682a      	ldr	r2, [r5, #0]
 800d7b6:	7811      	ldrb	r1, [r2, #0]
 800d7b8:	6962      	ldr	r2, [r4, #20]
 800d7ba:	5c52      	ldrb	r2, [r2, r1]
 800d7bc:	b952      	cbnz	r2, 800d7d4 <_scanf_chars+0x58>
 800d7be:	2f00      	cmp	r7, #0
 800d7c0:	d031      	beq.n	800d826 <_scanf_chars+0xaa>
 800d7c2:	e022      	b.n	800d80a <_scanf_chars+0x8e>
 800d7c4:	2802      	cmp	r0, #2
 800d7c6:	d120      	bne.n	800d80a <_scanf_chars+0x8e>
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d7d0:	071b      	lsls	r3, r3, #28
 800d7d2:	d41a      	bmi.n	800d80a <_scanf_chars+0x8e>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	06da      	lsls	r2, r3, #27
 800d7d8:	bf5e      	ittt	pl
 800d7da:	682b      	ldrpl	r3, [r5, #0]
 800d7dc:	781b      	ldrbpl	r3, [r3, #0]
 800d7de:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d7e2:	682a      	ldr	r2, [r5, #0]
 800d7e4:	686b      	ldr	r3, [r5, #4]
 800d7e6:	3201      	adds	r2, #1
 800d7e8:	602a      	str	r2, [r5, #0]
 800d7ea:	68a2      	ldr	r2, [r4, #8]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	3a01      	subs	r2, #1
 800d7f0:	606b      	str	r3, [r5, #4]
 800d7f2:	3701      	adds	r7, #1
 800d7f4:	60a2      	str	r2, [r4, #8]
 800d7f6:	b142      	cbz	r2, 800d80a <_scanf_chars+0x8e>
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	dcd7      	bgt.n	800d7ac <_scanf_chars+0x30>
 800d7fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d800:	4629      	mov	r1, r5
 800d802:	4640      	mov	r0, r8
 800d804:	4798      	blx	r3
 800d806:	2800      	cmp	r0, #0
 800d808:	d0d0      	beq.n	800d7ac <_scanf_chars+0x30>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	f013 0310 	ands.w	r3, r3, #16
 800d810:	d105      	bne.n	800d81e <_scanf_chars+0xa2>
 800d812:	68e2      	ldr	r2, [r4, #12]
 800d814:	3201      	adds	r2, #1
 800d816:	60e2      	str	r2, [r4, #12]
 800d818:	69a2      	ldr	r2, [r4, #24]
 800d81a:	b102      	cbz	r2, 800d81e <_scanf_chars+0xa2>
 800d81c:	7033      	strb	r3, [r6, #0]
 800d81e:	6923      	ldr	r3, [r4, #16]
 800d820:	443b      	add	r3, r7
 800d822:	6123      	str	r3, [r4, #16]
 800d824:	2000      	movs	r0, #0
 800d826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82a:	bf00      	nop
 800d82c:	0800ff27 	.word	0x0800ff27

0800d830 <_scanf_i>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	4698      	mov	r8, r3
 800d836:	4b76      	ldr	r3, [pc, #472]	; (800da10 <_scanf_i+0x1e0>)
 800d838:	460c      	mov	r4, r1
 800d83a:	4682      	mov	sl, r0
 800d83c:	4616      	mov	r6, r2
 800d83e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d842:	b087      	sub	sp, #28
 800d844:	ab03      	add	r3, sp, #12
 800d846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d84a:	4b72      	ldr	r3, [pc, #456]	; (800da14 <_scanf_i+0x1e4>)
 800d84c:	69a1      	ldr	r1, [r4, #24]
 800d84e:	4a72      	ldr	r2, [pc, #456]	; (800da18 <_scanf_i+0x1e8>)
 800d850:	2903      	cmp	r1, #3
 800d852:	bf18      	it	ne
 800d854:	461a      	movne	r2, r3
 800d856:	68a3      	ldr	r3, [r4, #8]
 800d858:	9201      	str	r2, [sp, #4]
 800d85a:	1e5a      	subs	r2, r3, #1
 800d85c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d860:	bf88      	it	hi
 800d862:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d866:	4627      	mov	r7, r4
 800d868:	bf82      	ittt	hi
 800d86a:	eb03 0905 	addhi.w	r9, r3, r5
 800d86e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d872:	60a3      	strhi	r3, [r4, #8]
 800d874:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d878:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d87c:	bf98      	it	ls
 800d87e:	f04f 0900 	movls.w	r9, #0
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	463d      	mov	r5, r7
 800d886:	f04f 0b00 	mov.w	fp, #0
 800d88a:	6831      	ldr	r1, [r6, #0]
 800d88c:	ab03      	add	r3, sp, #12
 800d88e:	7809      	ldrb	r1, [r1, #0]
 800d890:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d894:	2202      	movs	r2, #2
 800d896:	f7f2 fcbb 	bl	8000210 <memchr>
 800d89a:	b328      	cbz	r0, 800d8e8 <_scanf_i+0xb8>
 800d89c:	f1bb 0f01 	cmp.w	fp, #1
 800d8a0:	d159      	bne.n	800d956 <_scanf_i+0x126>
 800d8a2:	6862      	ldr	r2, [r4, #4]
 800d8a4:	b92a      	cbnz	r2, 800d8b2 <_scanf_i+0x82>
 800d8a6:	6822      	ldr	r2, [r4, #0]
 800d8a8:	2308      	movs	r3, #8
 800d8aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8ae:	6063      	str	r3, [r4, #4]
 800d8b0:	6022      	str	r2, [r4, #0]
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d8b8:	6022      	str	r2, [r4, #0]
 800d8ba:	68a2      	ldr	r2, [r4, #8]
 800d8bc:	1e51      	subs	r1, r2, #1
 800d8be:	60a1      	str	r1, [r4, #8]
 800d8c0:	b192      	cbz	r2, 800d8e8 <_scanf_i+0xb8>
 800d8c2:	6832      	ldr	r2, [r6, #0]
 800d8c4:	1c51      	adds	r1, r2, #1
 800d8c6:	6031      	str	r1, [r6, #0]
 800d8c8:	7812      	ldrb	r2, [r2, #0]
 800d8ca:	f805 2b01 	strb.w	r2, [r5], #1
 800d8ce:	6872      	ldr	r2, [r6, #4]
 800d8d0:	3a01      	subs	r2, #1
 800d8d2:	2a00      	cmp	r2, #0
 800d8d4:	6072      	str	r2, [r6, #4]
 800d8d6:	dc07      	bgt.n	800d8e8 <_scanf_i+0xb8>
 800d8d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4650      	mov	r0, sl
 800d8e0:	4790      	blx	r2
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f040 8085 	bne.w	800d9f2 <_scanf_i+0x1c2>
 800d8e8:	f10b 0b01 	add.w	fp, fp, #1
 800d8ec:	f1bb 0f03 	cmp.w	fp, #3
 800d8f0:	d1cb      	bne.n	800d88a <_scanf_i+0x5a>
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	b90b      	cbnz	r3, 800d8fa <_scanf_i+0xca>
 800d8f6:	230a      	movs	r3, #10
 800d8f8:	6063      	str	r3, [r4, #4]
 800d8fa:	6863      	ldr	r3, [r4, #4]
 800d8fc:	4947      	ldr	r1, [pc, #284]	; (800da1c <_scanf_i+0x1ec>)
 800d8fe:	6960      	ldr	r0, [r4, #20]
 800d900:	1ac9      	subs	r1, r1, r3
 800d902:	f000 f89f 	bl	800da44 <__sccl>
 800d906:	f04f 0b00 	mov.w	fp, #0
 800d90a:	68a3      	ldr	r3, [r4, #8]
 800d90c:	6822      	ldr	r2, [r4, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d03d      	beq.n	800d98e <_scanf_i+0x15e>
 800d912:	6831      	ldr	r1, [r6, #0]
 800d914:	6960      	ldr	r0, [r4, #20]
 800d916:	f891 c000 	ldrb.w	ip, [r1]
 800d91a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d91e:	2800      	cmp	r0, #0
 800d920:	d035      	beq.n	800d98e <_scanf_i+0x15e>
 800d922:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d926:	d124      	bne.n	800d972 <_scanf_i+0x142>
 800d928:	0510      	lsls	r0, r2, #20
 800d92a:	d522      	bpl.n	800d972 <_scanf_i+0x142>
 800d92c:	f10b 0b01 	add.w	fp, fp, #1
 800d930:	f1b9 0f00 	cmp.w	r9, #0
 800d934:	d003      	beq.n	800d93e <_scanf_i+0x10e>
 800d936:	3301      	adds	r3, #1
 800d938:	f109 39ff 	add.w	r9, r9, #4294967295
 800d93c:	60a3      	str	r3, [r4, #8]
 800d93e:	6873      	ldr	r3, [r6, #4]
 800d940:	3b01      	subs	r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	6073      	str	r3, [r6, #4]
 800d946:	dd1b      	ble.n	800d980 <_scanf_i+0x150>
 800d948:	6833      	ldr	r3, [r6, #0]
 800d94a:	3301      	adds	r3, #1
 800d94c:	6033      	str	r3, [r6, #0]
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	3b01      	subs	r3, #1
 800d952:	60a3      	str	r3, [r4, #8]
 800d954:	e7d9      	b.n	800d90a <_scanf_i+0xda>
 800d956:	f1bb 0f02 	cmp.w	fp, #2
 800d95a:	d1ae      	bne.n	800d8ba <_scanf_i+0x8a>
 800d95c:	6822      	ldr	r2, [r4, #0]
 800d95e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d962:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d966:	d1bf      	bne.n	800d8e8 <_scanf_i+0xb8>
 800d968:	2310      	movs	r3, #16
 800d96a:	6063      	str	r3, [r4, #4]
 800d96c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d970:	e7a2      	b.n	800d8b8 <_scanf_i+0x88>
 800d972:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d976:	6022      	str	r2, [r4, #0]
 800d978:	780b      	ldrb	r3, [r1, #0]
 800d97a:	f805 3b01 	strb.w	r3, [r5], #1
 800d97e:	e7de      	b.n	800d93e <_scanf_i+0x10e>
 800d980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d984:	4631      	mov	r1, r6
 800d986:	4650      	mov	r0, sl
 800d988:	4798      	blx	r3
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d0df      	beq.n	800d94e <_scanf_i+0x11e>
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	05db      	lsls	r3, r3, #23
 800d992:	d50d      	bpl.n	800d9b0 <_scanf_i+0x180>
 800d994:	42bd      	cmp	r5, r7
 800d996:	d909      	bls.n	800d9ac <_scanf_i+0x17c>
 800d998:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9a0:	4632      	mov	r2, r6
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	4798      	blx	r3
 800d9a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800d9aa:	464d      	mov	r5, r9
 800d9ac:	42bd      	cmp	r5, r7
 800d9ae:	d02d      	beq.n	800da0c <_scanf_i+0x1dc>
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	f012 0210 	ands.w	r2, r2, #16
 800d9b6:	d113      	bne.n	800d9e0 <_scanf_i+0x1b0>
 800d9b8:	702a      	strb	r2, [r5, #0]
 800d9ba:	6863      	ldr	r3, [r4, #4]
 800d9bc:	9e01      	ldr	r6, [sp, #4]
 800d9be:	4639      	mov	r1, r7
 800d9c0:	4650      	mov	r0, sl
 800d9c2:	47b0      	blx	r6
 800d9c4:	6821      	ldr	r1, [r4, #0]
 800d9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ca:	f011 0f20 	tst.w	r1, #32
 800d9ce:	d013      	beq.n	800d9f8 <_scanf_i+0x1c8>
 800d9d0:	1d1a      	adds	r2, r3, #4
 800d9d2:	f8c8 2000 	str.w	r2, [r8]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6018      	str	r0, [r3, #0]
 800d9da:	68e3      	ldr	r3, [r4, #12]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	60e3      	str	r3, [r4, #12]
 800d9e0:	1bed      	subs	r5, r5, r7
 800d9e2:	44ab      	add	fp, r5
 800d9e4:	6925      	ldr	r5, [r4, #16]
 800d9e6:	445d      	add	r5, fp
 800d9e8:	6125      	str	r5, [r4, #16]
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	b007      	add	sp, #28
 800d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f2:	f04f 0b00 	mov.w	fp, #0
 800d9f6:	e7ca      	b.n	800d98e <_scanf_i+0x15e>
 800d9f8:	1d1a      	adds	r2, r3, #4
 800d9fa:	f8c8 2000 	str.w	r2, [r8]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f011 0f01 	tst.w	r1, #1
 800da04:	bf14      	ite	ne
 800da06:	8018      	strhne	r0, [r3, #0]
 800da08:	6018      	streq	r0, [r3, #0]
 800da0a:	e7e6      	b.n	800d9da <_scanf_i+0x1aa>
 800da0c:	2001      	movs	r0, #1
 800da0e:	e7ed      	b.n	800d9ec <_scanf_i+0x1bc>
 800da10:	0800f49c 	.word	0x0800f49c
 800da14:	0800db99 	.word	0x0800db99
 800da18:	0800bc3d 	.word	0x0800bc3d
 800da1c:	0801023e 	.word	0x0801023e

0800da20 <_read_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4d07      	ldr	r5, [pc, #28]	; (800da40 <_read_r+0x20>)
 800da24:	4604      	mov	r4, r0
 800da26:	4608      	mov	r0, r1
 800da28:	4611      	mov	r1, r2
 800da2a:	2200      	movs	r2, #0
 800da2c:	602a      	str	r2, [r5, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	f7f6 faa8 	bl	8003f84 <_read>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d102      	bne.n	800da3e <_read_r+0x1e>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	b103      	cbz	r3, 800da3e <_read_r+0x1e>
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	bd38      	pop	{r3, r4, r5, pc}
 800da40:	20000bc8 	.word	0x20000bc8

0800da44 <__sccl>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	780b      	ldrb	r3, [r1, #0]
 800da48:	4604      	mov	r4, r0
 800da4a:	2b5e      	cmp	r3, #94	; 0x5e
 800da4c:	bf0b      	itete	eq
 800da4e:	784b      	ldrbeq	r3, [r1, #1]
 800da50:	1c48      	addne	r0, r1, #1
 800da52:	1c88      	addeq	r0, r1, #2
 800da54:	2200      	movne	r2, #0
 800da56:	bf08      	it	eq
 800da58:	2201      	moveq	r2, #1
 800da5a:	1e61      	subs	r1, r4, #1
 800da5c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800da60:	f801 2f01 	strb.w	r2, [r1, #1]!
 800da64:	42a9      	cmp	r1, r5
 800da66:	d1fb      	bne.n	800da60 <__sccl+0x1c>
 800da68:	b90b      	cbnz	r3, 800da6e <__sccl+0x2a>
 800da6a:	3801      	subs	r0, #1
 800da6c:	bd70      	pop	{r4, r5, r6, pc}
 800da6e:	f082 0201 	eor.w	r2, r2, #1
 800da72:	54e2      	strb	r2, [r4, r3]
 800da74:	4605      	mov	r5, r0
 800da76:	4628      	mov	r0, r5
 800da78:	f810 1b01 	ldrb.w	r1, [r0], #1
 800da7c:	292d      	cmp	r1, #45	; 0x2d
 800da7e:	d006      	beq.n	800da8e <__sccl+0x4a>
 800da80:	295d      	cmp	r1, #93	; 0x5d
 800da82:	d0f3      	beq.n	800da6c <__sccl+0x28>
 800da84:	b909      	cbnz	r1, 800da8a <__sccl+0x46>
 800da86:	4628      	mov	r0, r5
 800da88:	e7f0      	b.n	800da6c <__sccl+0x28>
 800da8a:	460b      	mov	r3, r1
 800da8c:	e7f1      	b.n	800da72 <__sccl+0x2e>
 800da8e:	786e      	ldrb	r6, [r5, #1]
 800da90:	2e5d      	cmp	r6, #93	; 0x5d
 800da92:	d0fa      	beq.n	800da8a <__sccl+0x46>
 800da94:	42b3      	cmp	r3, r6
 800da96:	dcf8      	bgt.n	800da8a <__sccl+0x46>
 800da98:	3502      	adds	r5, #2
 800da9a:	4619      	mov	r1, r3
 800da9c:	3101      	adds	r1, #1
 800da9e:	428e      	cmp	r6, r1
 800daa0:	5462      	strb	r2, [r4, r1]
 800daa2:	dcfb      	bgt.n	800da9c <__sccl+0x58>
 800daa4:	1af1      	subs	r1, r6, r3
 800daa6:	3901      	subs	r1, #1
 800daa8:	1c58      	adds	r0, r3, #1
 800daaa:	42b3      	cmp	r3, r6
 800daac:	bfa8      	it	ge
 800daae:	2100      	movge	r1, #0
 800dab0:	1843      	adds	r3, r0, r1
 800dab2:	e7e0      	b.n	800da76 <__sccl+0x32>

0800dab4 <_strtoul_l.constprop.0>:
 800dab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dab8:	4f36      	ldr	r7, [pc, #216]	; (800db94 <_strtoul_l.constprop.0+0xe0>)
 800daba:	4686      	mov	lr, r0
 800dabc:	460d      	mov	r5, r1
 800dabe:	4628      	mov	r0, r5
 800dac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dac4:	5de6      	ldrb	r6, [r4, r7]
 800dac6:	f016 0608 	ands.w	r6, r6, #8
 800daca:	d1f8      	bne.n	800dabe <_strtoul_l.constprop.0+0xa>
 800dacc:	2c2d      	cmp	r4, #45	; 0x2d
 800dace:	d12f      	bne.n	800db30 <_strtoul_l.constprop.0+0x7c>
 800dad0:	782c      	ldrb	r4, [r5, #0]
 800dad2:	2601      	movs	r6, #1
 800dad4:	1c85      	adds	r5, r0, #2
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d057      	beq.n	800db8a <_strtoul_l.constprop.0+0xd6>
 800dada:	2b10      	cmp	r3, #16
 800dadc:	d109      	bne.n	800daf2 <_strtoul_l.constprop.0+0x3e>
 800dade:	2c30      	cmp	r4, #48	; 0x30
 800dae0:	d107      	bne.n	800daf2 <_strtoul_l.constprop.0+0x3e>
 800dae2:	7828      	ldrb	r0, [r5, #0]
 800dae4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dae8:	2858      	cmp	r0, #88	; 0x58
 800daea:	d149      	bne.n	800db80 <_strtoul_l.constprop.0+0xcc>
 800daec:	786c      	ldrb	r4, [r5, #1]
 800daee:	2310      	movs	r3, #16
 800daf0:	3502      	adds	r5, #2
 800daf2:	f04f 38ff 	mov.w	r8, #4294967295
 800daf6:	2700      	movs	r7, #0
 800daf8:	fbb8 f8f3 	udiv	r8, r8, r3
 800dafc:	fb03 f908 	mul.w	r9, r3, r8
 800db00:	ea6f 0909 	mvn.w	r9, r9
 800db04:	4638      	mov	r0, r7
 800db06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800db0a:	f1bc 0f09 	cmp.w	ip, #9
 800db0e:	d814      	bhi.n	800db3a <_strtoul_l.constprop.0+0x86>
 800db10:	4664      	mov	r4, ip
 800db12:	42a3      	cmp	r3, r4
 800db14:	dd22      	ble.n	800db5c <_strtoul_l.constprop.0+0xa8>
 800db16:	2f00      	cmp	r7, #0
 800db18:	db1d      	blt.n	800db56 <_strtoul_l.constprop.0+0xa2>
 800db1a:	4580      	cmp	r8, r0
 800db1c:	d31b      	bcc.n	800db56 <_strtoul_l.constprop.0+0xa2>
 800db1e:	d101      	bne.n	800db24 <_strtoul_l.constprop.0+0x70>
 800db20:	45a1      	cmp	r9, r4
 800db22:	db18      	blt.n	800db56 <_strtoul_l.constprop.0+0xa2>
 800db24:	fb00 4003 	mla	r0, r0, r3, r4
 800db28:	2701      	movs	r7, #1
 800db2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db2e:	e7ea      	b.n	800db06 <_strtoul_l.constprop.0+0x52>
 800db30:	2c2b      	cmp	r4, #43	; 0x2b
 800db32:	bf04      	itt	eq
 800db34:	782c      	ldrbeq	r4, [r5, #0]
 800db36:	1c85      	addeq	r5, r0, #2
 800db38:	e7cd      	b.n	800dad6 <_strtoul_l.constprop.0+0x22>
 800db3a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800db3e:	f1bc 0f19 	cmp.w	ip, #25
 800db42:	d801      	bhi.n	800db48 <_strtoul_l.constprop.0+0x94>
 800db44:	3c37      	subs	r4, #55	; 0x37
 800db46:	e7e4      	b.n	800db12 <_strtoul_l.constprop.0+0x5e>
 800db48:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800db4c:	f1bc 0f19 	cmp.w	ip, #25
 800db50:	d804      	bhi.n	800db5c <_strtoul_l.constprop.0+0xa8>
 800db52:	3c57      	subs	r4, #87	; 0x57
 800db54:	e7dd      	b.n	800db12 <_strtoul_l.constprop.0+0x5e>
 800db56:	f04f 37ff 	mov.w	r7, #4294967295
 800db5a:	e7e6      	b.n	800db2a <_strtoul_l.constprop.0+0x76>
 800db5c:	2f00      	cmp	r7, #0
 800db5e:	da07      	bge.n	800db70 <_strtoul_l.constprop.0+0xbc>
 800db60:	2322      	movs	r3, #34	; 0x22
 800db62:	f8ce 3000 	str.w	r3, [lr]
 800db66:	f04f 30ff 	mov.w	r0, #4294967295
 800db6a:	b932      	cbnz	r2, 800db7a <_strtoul_l.constprop.0+0xc6>
 800db6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db70:	b106      	cbz	r6, 800db74 <_strtoul_l.constprop.0+0xc0>
 800db72:	4240      	negs	r0, r0
 800db74:	2a00      	cmp	r2, #0
 800db76:	d0f9      	beq.n	800db6c <_strtoul_l.constprop.0+0xb8>
 800db78:	b107      	cbz	r7, 800db7c <_strtoul_l.constprop.0+0xc8>
 800db7a:	1e69      	subs	r1, r5, #1
 800db7c:	6011      	str	r1, [r2, #0]
 800db7e:	e7f5      	b.n	800db6c <_strtoul_l.constprop.0+0xb8>
 800db80:	2430      	movs	r4, #48	; 0x30
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1b5      	bne.n	800daf2 <_strtoul_l.constprop.0+0x3e>
 800db86:	2308      	movs	r3, #8
 800db88:	e7b3      	b.n	800daf2 <_strtoul_l.constprop.0+0x3e>
 800db8a:	2c30      	cmp	r4, #48	; 0x30
 800db8c:	d0a9      	beq.n	800dae2 <_strtoul_l.constprop.0+0x2e>
 800db8e:	230a      	movs	r3, #10
 800db90:	e7af      	b.n	800daf2 <_strtoul_l.constprop.0+0x3e>
 800db92:	bf00      	nop
 800db94:	0800ff27 	.word	0x0800ff27

0800db98 <_strtoul_r>:
 800db98:	f7ff bf8c 	b.w	800dab4 <_strtoul_l.constprop.0>

0800db9c <__submore>:
 800db9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba0:	460c      	mov	r4, r1
 800dba2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dba8:	4299      	cmp	r1, r3
 800dbaa:	d11d      	bne.n	800dbe8 <__submore+0x4c>
 800dbac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dbb0:	f7fd fa1a 	bl	800afe8 <_malloc_r>
 800dbb4:	b918      	cbnz	r0, 800dbbe <__submore+0x22>
 800dbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbc2:	63a3      	str	r3, [r4, #56]	; 0x38
 800dbc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dbc8:	6360      	str	r0, [r4, #52]	; 0x34
 800dbca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dbce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dbd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dbd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dbda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dbde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dbe2:	6020      	str	r0, [r4, #0]
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e7e8      	b.n	800dbba <__submore+0x1e>
 800dbe8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dbea:	0077      	lsls	r7, r6, #1
 800dbec:	463a      	mov	r2, r7
 800dbee:	f000 fa25 	bl	800e03c <_realloc_r>
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	d0de      	beq.n	800dbb6 <__submore+0x1a>
 800dbf8:	eb00 0806 	add.w	r8, r0, r6
 800dbfc:	4601      	mov	r1, r0
 800dbfe:	4632      	mov	r2, r6
 800dc00:	4640      	mov	r0, r8
 800dc02:	f7fe fed9 	bl	800c9b8 <memcpy>
 800dc06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dc0a:	f8c4 8000 	str.w	r8, [r4]
 800dc0e:	e7e9      	b.n	800dbe4 <__submore+0x48>

0800dc10 <__assert_func>:
 800dc10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc12:	4614      	mov	r4, r2
 800dc14:	461a      	mov	r2, r3
 800dc16:	4b09      	ldr	r3, [pc, #36]	; (800dc3c <__assert_func+0x2c>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	68d8      	ldr	r0, [r3, #12]
 800dc1e:	b14c      	cbz	r4, 800dc34 <__assert_func+0x24>
 800dc20:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <__assert_func+0x30>)
 800dc22:	9100      	str	r1, [sp, #0]
 800dc24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc28:	4906      	ldr	r1, [pc, #24]	; (800dc44 <__assert_func+0x34>)
 800dc2a:	462b      	mov	r3, r5
 800dc2c:	f000 f9a6 	bl	800df7c <fiprintf>
 800dc30:	f000 fc5a 	bl	800e4e8 <abort>
 800dc34:	4b04      	ldr	r3, [pc, #16]	; (800dc48 <__assert_func+0x38>)
 800dc36:	461c      	mov	r4, r3
 800dc38:	e7f3      	b.n	800dc22 <__assert_func+0x12>
 800dc3a:	bf00      	nop
 800dc3c:	200002f0 	.word	0x200002f0
 800dc40:	08010240 	.word	0x08010240
 800dc44:	0801024d 	.word	0x0801024d
 800dc48:	0801027b 	.word	0x0801027b

0800dc4c <__sflush_r>:
 800dc4c:	898a      	ldrh	r2, [r1, #12]
 800dc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc52:	4605      	mov	r5, r0
 800dc54:	0710      	lsls	r0, r2, #28
 800dc56:	460c      	mov	r4, r1
 800dc58:	d458      	bmi.n	800dd0c <__sflush_r+0xc0>
 800dc5a:	684b      	ldr	r3, [r1, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	dc05      	bgt.n	800dc6c <__sflush_r+0x20>
 800dc60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	dc02      	bgt.n	800dc6c <__sflush_r+0x20>
 800dc66:	2000      	movs	r0, #0
 800dc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc6e:	2e00      	cmp	r6, #0
 800dc70:	d0f9      	beq.n	800dc66 <__sflush_r+0x1a>
 800dc72:	2300      	movs	r3, #0
 800dc74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc78:	682f      	ldr	r7, [r5, #0]
 800dc7a:	602b      	str	r3, [r5, #0]
 800dc7c:	d032      	beq.n	800dce4 <__sflush_r+0x98>
 800dc7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	075a      	lsls	r2, r3, #29
 800dc84:	d505      	bpl.n	800dc92 <__sflush_r+0x46>
 800dc86:	6863      	ldr	r3, [r4, #4]
 800dc88:	1ac0      	subs	r0, r0, r3
 800dc8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc8c:	b10b      	cbz	r3, 800dc92 <__sflush_r+0x46>
 800dc8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc90:	1ac0      	subs	r0, r0, r3
 800dc92:	2300      	movs	r3, #0
 800dc94:	4602      	mov	r2, r0
 800dc96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc98:	6a21      	ldr	r1, [r4, #32]
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	47b0      	blx	r6
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	d106      	bne.n	800dcb2 <__sflush_r+0x66>
 800dca4:	6829      	ldr	r1, [r5, #0]
 800dca6:	291d      	cmp	r1, #29
 800dca8:	d82c      	bhi.n	800dd04 <__sflush_r+0xb8>
 800dcaa:	4a2a      	ldr	r2, [pc, #168]	; (800dd54 <__sflush_r+0x108>)
 800dcac:	40ca      	lsrs	r2, r1
 800dcae:	07d6      	lsls	r6, r2, #31
 800dcb0:	d528      	bpl.n	800dd04 <__sflush_r+0xb8>
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	6062      	str	r2, [r4, #4]
 800dcb6:	04d9      	lsls	r1, r3, #19
 800dcb8:	6922      	ldr	r2, [r4, #16]
 800dcba:	6022      	str	r2, [r4, #0]
 800dcbc:	d504      	bpl.n	800dcc8 <__sflush_r+0x7c>
 800dcbe:	1c42      	adds	r2, r0, #1
 800dcc0:	d101      	bne.n	800dcc6 <__sflush_r+0x7a>
 800dcc2:	682b      	ldr	r3, [r5, #0]
 800dcc4:	b903      	cbnz	r3, 800dcc8 <__sflush_r+0x7c>
 800dcc6:	6560      	str	r0, [r4, #84]	; 0x54
 800dcc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcca:	602f      	str	r7, [r5, #0]
 800dccc:	2900      	cmp	r1, #0
 800dcce:	d0ca      	beq.n	800dc66 <__sflush_r+0x1a>
 800dcd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcd4:	4299      	cmp	r1, r3
 800dcd6:	d002      	beq.n	800dcde <__sflush_r+0x92>
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f7fd f919 	bl	800af10 <_free_r>
 800dcde:	2000      	movs	r0, #0
 800dce0:	6360      	str	r0, [r4, #52]	; 0x34
 800dce2:	e7c1      	b.n	800dc68 <__sflush_r+0x1c>
 800dce4:	6a21      	ldr	r1, [r4, #32]
 800dce6:	2301      	movs	r3, #1
 800dce8:	4628      	mov	r0, r5
 800dcea:	47b0      	blx	r6
 800dcec:	1c41      	adds	r1, r0, #1
 800dcee:	d1c7      	bne.n	800dc80 <__sflush_r+0x34>
 800dcf0:	682b      	ldr	r3, [r5, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d0c4      	beq.n	800dc80 <__sflush_r+0x34>
 800dcf6:	2b1d      	cmp	r3, #29
 800dcf8:	d001      	beq.n	800dcfe <__sflush_r+0xb2>
 800dcfa:	2b16      	cmp	r3, #22
 800dcfc:	d101      	bne.n	800dd02 <__sflush_r+0xb6>
 800dcfe:	602f      	str	r7, [r5, #0]
 800dd00:	e7b1      	b.n	800dc66 <__sflush_r+0x1a>
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd08:	81a3      	strh	r3, [r4, #12]
 800dd0a:	e7ad      	b.n	800dc68 <__sflush_r+0x1c>
 800dd0c:	690f      	ldr	r7, [r1, #16]
 800dd0e:	2f00      	cmp	r7, #0
 800dd10:	d0a9      	beq.n	800dc66 <__sflush_r+0x1a>
 800dd12:	0793      	lsls	r3, r2, #30
 800dd14:	680e      	ldr	r6, [r1, #0]
 800dd16:	bf08      	it	eq
 800dd18:	694b      	ldreq	r3, [r1, #20]
 800dd1a:	600f      	str	r7, [r1, #0]
 800dd1c:	bf18      	it	ne
 800dd1e:	2300      	movne	r3, #0
 800dd20:	eba6 0807 	sub.w	r8, r6, r7
 800dd24:	608b      	str	r3, [r1, #8]
 800dd26:	f1b8 0f00 	cmp.w	r8, #0
 800dd2a:	dd9c      	ble.n	800dc66 <__sflush_r+0x1a>
 800dd2c:	6a21      	ldr	r1, [r4, #32]
 800dd2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd30:	4643      	mov	r3, r8
 800dd32:	463a      	mov	r2, r7
 800dd34:	4628      	mov	r0, r5
 800dd36:	47b0      	blx	r6
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	dc06      	bgt.n	800dd4a <__sflush_r+0xfe>
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd42:	81a3      	strh	r3, [r4, #12]
 800dd44:	f04f 30ff 	mov.w	r0, #4294967295
 800dd48:	e78e      	b.n	800dc68 <__sflush_r+0x1c>
 800dd4a:	4407      	add	r7, r0
 800dd4c:	eba8 0800 	sub.w	r8, r8, r0
 800dd50:	e7e9      	b.n	800dd26 <__sflush_r+0xda>
 800dd52:	bf00      	nop
 800dd54:	20400001 	.word	0x20400001

0800dd58 <_fflush_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	690b      	ldr	r3, [r1, #16]
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	460c      	mov	r4, r1
 800dd60:	b913      	cbnz	r3, 800dd68 <_fflush_r+0x10>
 800dd62:	2500      	movs	r5, #0
 800dd64:	4628      	mov	r0, r5
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	b118      	cbz	r0, 800dd72 <_fflush_r+0x1a>
 800dd6a:	6983      	ldr	r3, [r0, #24]
 800dd6c:	b90b      	cbnz	r3, 800dd72 <_fflush_r+0x1a>
 800dd6e:	f000 f887 	bl	800de80 <__sinit>
 800dd72:	4b14      	ldr	r3, [pc, #80]	; (800ddc4 <_fflush_r+0x6c>)
 800dd74:	429c      	cmp	r4, r3
 800dd76:	d11b      	bne.n	800ddb0 <_fflush_r+0x58>
 800dd78:	686c      	ldr	r4, [r5, #4]
 800dd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d0ef      	beq.n	800dd62 <_fflush_r+0xa>
 800dd82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd84:	07d0      	lsls	r0, r2, #31
 800dd86:	d404      	bmi.n	800dd92 <_fflush_r+0x3a>
 800dd88:	0599      	lsls	r1, r3, #22
 800dd8a:	d402      	bmi.n	800dd92 <_fflush_r+0x3a>
 800dd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd8e:	f000 f927 	bl	800dfe0 <__retarget_lock_acquire_recursive>
 800dd92:	4628      	mov	r0, r5
 800dd94:	4621      	mov	r1, r4
 800dd96:	f7ff ff59 	bl	800dc4c <__sflush_r>
 800dd9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd9c:	07da      	lsls	r2, r3, #31
 800dd9e:	4605      	mov	r5, r0
 800dda0:	d4e0      	bmi.n	800dd64 <_fflush_r+0xc>
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	059b      	lsls	r3, r3, #22
 800dda6:	d4dd      	bmi.n	800dd64 <_fflush_r+0xc>
 800dda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddaa:	f000 f91a 	bl	800dfe2 <__retarget_lock_release_recursive>
 800ddae:	e7d9      	b.n	800dd64 <_fflush_r+0xc>
 800ddb0:	4b05      	ldr	r3, [pc, #20]	; (800ddc8 <_fflush_r+0x70>)
 800ddb2:	429c      	cmp	r4, r3
 800ddb4:	d101      	bne.n	800ddba <_fflush_r+0x62>
 800ddb6:	68ac      	ldr	r4, [r5, #8]
 800ddb8:	e7df      	b.n	800dd7a <_fflush_r+0x22>
 800ddba:	4b04      	ldr	r3, [pc, #16]	; (800ddcc <_fflush_r+0x74>)
 800ddbc:	429c      	cmp	r4, r3
 800ddbe:	bf08      	it	eq
 800ddc0:	68ec      	ldreq	r4, [r5, #12]
 800ddc2:	e7da      	b.n	800dd7a <_fflush_r+0x22>
 800ddc4:	0801029c 	.word	0x0801029c
 800ddc8:	080102bc 	.word	0x080102bc
 800ddcc:	0801027c 	.word	0x0801027c

0800ddd0 <std>:
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	b510      	push	{r4, lr}
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	e9c0 3300 	strd	r3, r3, [r0]
 800ddda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddde:	6083      	str	r3, [r0, #8]
 800dde0:	8181      	strh	r1, [r0, #12]
 800dde2:	6643      	str	r3, [r0, #100]	; 0x64
 800dde4:	81c2      	strh	r2, [r0, #14]
 800dde6:	6183      	str	r3, [r0, #24]
 800dde8:	4619      	mov	r1, r3
 800ddea:	2208      	movs	r2, #8
 800ddec:	305c      	adds	r0, #92	; 0x5c
 800ddee:	f7fd f887 	bl	800af00 <memset>
 800ddf2:	4b05      	ldr	r3, [pc, #20]	; (800de08 <std+0x38>)
 800ddf4:	6263      	str	r3, [r4, #36]	; 0x24
 800ddf6:	4b05      	ldr	r3, [pc, #20]	; (800de0c <std+0x3c>)
 800ddf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddfa:	4b05      	ldr	r3, [pc, #20]	; (800de10 <std+0x40>)
 800ddfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddfe:	4b05      	ldr	r3, [pc, #20]	; (800de14 <std+0x44>)
 800de00:	6224      	str	r4, [r4, #32]
 800de02:	6323      	str	r3, [r4, #48]	; 0x30
 800de04:	bd10      	pop	{r4, pc}
 800de06:	bf00      	nop
 800de08:	0800ba5d 	.word	0x0800ba5d
 800de0c:	0800ba83 	.word	0x0800ba83
 800de10:	0800babb 	.word	0x0800babb
 800de14:	0800badf 	.word	0x0800badf

0800de18 <_cleanup_r>:
 800de18:	4901      	ldr	r1, [pc, #4]	; (800de20 <_cleanup_r+0x8>)
 800de1a:	f000 b8c1 	b.w	800dfa0 <_fwalk_reent>
 800de1e:	bf00      	nop
 800de20:	0800dd59 	.word	0x0800dd59

0800de24 <__sfmoreglue>:
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	2268      	movs	r2, #104	; 0x68
 800de28:	1e4d      	subs	r5, r1, #1
 800de2a:	4355      	muls	r5, r2
 800de2c:	460e      	mov	r6, r1
 800de2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de32:	f7fd f8d9 	bl	800afe8 <_malloc_r>
 800de36:	4604      	mov	r4, r0
 800de38:	b140      	cbz	r0, 800de4c <__sfmoreglue+0x28>
 800de3a:	2100      	movs	r1, #0
 800de3c:	e9c0 1600 	strd	r1, r6, [r0]
 800de40:	300c      	adds	r0, #12
 800de42:	60a0      	str	r0, [r4, #8]
 800de44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de48:	f7fd f85a 	bl	800af00 <memset>
 800de4c:	4620      	mov	r0, r4
 800de4e:	bd70      	pop	{r4, r5, r6, pc}

0800de50 <__sfp_lock_acquire>:
 800de50:	4801      	ldr	r0, [pc, #4]	; (800de58 <__sfp_lock_acquire+0x8>)
 800de52:	f000 b8c5 	b.w	800dfe0 <__retarget_lock_acquire_recursive>
 800de56:	bf00      	nop
 800de58:	20000bcd 	.word	0x20000bcd

0800de5c <__sfp_lock_release>:
 800de5c:	4801      	ldr	r0, [pc, #4]	; (800de64 <__sfp_lock_release+0x8>)
 800de5e:	f000 b8c0 	b.w	800dfe2 <__retarget_lock_release_recursive>
 800de62:	bf00      	nop
 800de64:	20000bcd 	.word	0x20000bcd

0800de68 <__sinit_lock_acquire>:
 800de68:	4801      	ldr	r0, [pc, #4]	; (800de70 <__sinit_lock_acquire+0x8>)
 800de6a:	f000 b8b9 	b.w	800dfe0 <__retarget_lock_acquire_recursive>
 800de6e:	bf00      	nop
 800de70:	20000bce 	.word	0x20000bce

0800de74 <__sinit_lock_release>:
 800de74:	4801      	ldr	r0, [pc, #4]	; (800de7c <__sinit_lock_release+0x8>)
 800de76:	f000 b8b4 	b.w	800dfe2 <__retarget_lock_release_recursive>
 800de7a:	bf00      	nop
 800de7c:	20000bce 	.word	0x20000bce

0800de80 <__sinit>:
 800de80:	b510      	push	{r4, lr}
 800de82:	4604      	mov	r4, r0
 800de84:	f7ff fff0 	bl	800de68 <__sinit_lock_acquire>
 800de88:	69a3      	ldr	r3, [r4, #24]
 800de8a:	b11b      	cbz	r3, 800de94 <__sinit+0x14>
 800de8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de90:	f7ff bff0 	b.w	800de74 <__sinit_lock_release>
 800de94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de98:	6523      	str	r3, [r4, #80]	; 0x50
 800de9a:	4b13      	ldr	r3, [pc, #76]	; (800dee8 <__sinit+0x68>)
 800de9c:	4a13      	ldr	r2, [pc, #76]	; (800deec <__sinit+0x6c>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	62a2      	str	r2, [r4, #40]	; 0x28
 800dea2:	42a3      	cmp	r3, r4
 800dea4:	bf04      	itt	eq
 800dea6:	2301      	moveq	r3, #1
 800dea8:	61a3      	streq	r3, [r4, #24]
 800deaa:	4620      	mov	r0, r4
 800deac:	f000 f820 	bl	800def0 <__sfp>
 800deb0:	6060      	str	r0, [r4, #4]
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 f81c 	bl	800def0 <__sfp>
 800deb8:	60a0      	str	r0, [r4, #8]
 800deba:	4620      	mov	r0, r4
 800debc:	f000 f818 	bl	800def0 <__sfp>
 800dec0:	2200      	movs	r2, #0
 800dec2:	60e0      	str	r0, [r4, #12]
 800dec4:	2104      	movs	r1, #4
 800dec6:	6860      	ldr	r0, [r4, #4]
 800dec8:	f7ff ff82 	bl	800ddd0 <std>
 800decc:	68a0      	ldr	r0, [r4, #8]
 800dece:	2201      	movs	r2, #1
 800ded0:	2109      	movs	r1, #9
 800ded2:	f7ff ff7d 	bl	800ddd0 <std>
 800ded6:	68e0      	ldr	r0, [r4, #12]
 800ded8:	2202      	movs	r2, #2
 800deda:	2112      	movs	r1, #18
 800dedc:	f7ff ff78 	bl	800ddd0 <std>
 800dee0:	2301      	movs	r3, #1
 800dee2:	61a3      	str	r3, [r4, #24]
 800dee4:	e7d2      	b.n	800de8c <__sinit+0xc>
 800dee6:	bf00      	nop
 800dee8:	0800fef0 	.word	0x0800fef0
 800deec:	0800de19 	.word	0x0800de19

0800def0 <__sfp>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	4607      	mov	r7, r0
 800def4:	f7ff ffac 	bl	800de50 <__sfp_lock_acquire>
 800def8:	4b1e      	ldr	r3, [pc, #120]	; (800df74 <__sfp+0x84>)
 800defa:	681e      	ldr	r6, [r3, #0]
 800defc:	69b3      	ldr	r3, [r6, #24]
 800defe:	b913      	cbnz	r3, 800df06 <__sfp+0x16>
 800df00:	4630      	mov	r0, r6
 800df02:	f7ff ffbd 	bl	800de80 <__sinit>
 800df06:	3648      	adds	r6, #72	; 0x48
 800df08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df0c:	3b01      	subs	r3, #1
 800df0e:	d503      	bpl.n	800df18 <__sfp+0x28>
 800df10:	6833      	ldr	r3, [r6, #0]
 800df12:	b30b      	cbz	r3, 800df58 <__sfp+0x68>
 800df14:	6836      	ldr	r6, [r6, #0]
 800df16:	e7f7      	b.n	800df08 <__sfp+0x18>
 800df18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df1c:	b9d5      	cbnz	r5, 800df54 <__sfp+0x64>
 800df1e:	4b16      	ldr	r3, [pc, #88]	; (800df78 <__sfp+0x88>)
 800df20:	60e3      	str	r3, [r4, #12]
 800df22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df26:	6665      	str	r5, [r4, #100]	; 0x64
 800df28:	f000 f859 	bl	800dfde <__retarget_lock_init_recursive>
 800df2c:	f7ff ff96 	bl	800de5c <__sfp_lock_release>
 800df30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df38:	6025      	str	r5, [r4, #0]
 800df3a:	61a5      	str	r5, [r4, #24]
 800df3c:	2208      	movs	r2, #8
 800df3e:	4629      	mov	r1, r5
 800df40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df44:	f7fc ffdc 	bl	800af00 <memset>
 800df48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df50:	4620      	mov	r0, r4
 800df52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df54:	3468      	adds	r4, #104	; 0x68
 800df56:	e7d9      	b.n	800df0c <__sfp+0x1c>
 800df58:	2104      	movs	r1, #4
 800df5a:	4638      	mov	r0, r7
 800df5c:	f7ff ff62 	bl	800de24 <__sfmoreglue>
 800df60:	4604      	mov	r4, r0
 800df62:	6030      	str	r0, [r6, #0]
 800df64:	2800      	cmp	r0, #0
 800df66:	d1d5      	bne.n	800df14 <__sfp+0x24>
 800df68:	f7ff ff78 	bl	800de5c <__sfp_lock_release>
 800df6c:	230c      	movs	r3, #12
 800df6e:	603b      	str	r3, [r7, #0]
 800df70:	e7ee      	b.n	800df50 <__sfp+0x60>
 800df72:	bf00      	nop
 800df74:	0800fef0 	.word	0x0800fef0
 800df78:	ffff0001 	.word	0xffff0001

0800df7c <fiprintf>:
 800df7c:	b40e      	push	{r1, r2, r3}
 800df7e:	b503      	push	{r0, r1, lr}
 800df80:	4601      	mov	r1, r0
 800df82:	ab03      	add	r3, sp, #12
 800df84:	4805      	ldr	r0, [pc, #20]	; (800df9c <fiprintf+0x20>)
 800df86:	f853 2b04 	ldr.w	r2, [r3], #4
 800df8a:	6800      	ldr	r0, [r0, #0]
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	f000 f8ad 	bl	800e0ec <_vfiprintf_r>
 800df92:	b002      	add	sp, #8
 800df94:	f85d eb04 	ldr.w	lr, [sp], #4
 800df98:	b003      	add	sp, #12
 800df9a:	4770      	bx	lr
 800df9c:	200002f0 	.word	0x200002f0

0800dfa0 <_fwalk_reent>:
 800dfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	4688      	mov	r8, r1
 800dfa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dfac:	2700      	movs	r7, #0
 800dfae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfb2:	f1b9 0901 	subs.w	r9, r9, #1
 800dfb6:	d505      	bpl.n	800dfc4 <_fwalk_reent+0x24>
 800dfb8:	6824      	ldr	r4, [r4, #0]
 800dfba:	2c00      	cmp	r4, #0
 800dfbc:	d1f7      	bne.n	800dfae <_fwalk_reent+0xe>
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfc4:	89ab      	ldrh	r3, [r5, #12]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d907      	bls.n	800dfda <_fwalk_reent+0x3a>
 800dfca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	d003      	beq.n	800dfda <_fwalk_reent+0x3a>
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	47c0      	blx	r8
 800dfd8:	4307      	orrs	r7, r0
 800dfda:	3568      	adds	r5, #104	; 0x68
 800dfdc:	e7e9      	b.n	800dfb2 <_fwalk_reent+0x12>

0800dfde <__retarget_lock_init_recursive>:
 800dfde:	4770      	bx	lr

0800dfe0 <__retarget_lock_acquire_recursive>:
 800dfe0:	4770      	bx	lr

0800dfe2 <__retarget_lock_release_recursive>:
 800dfe2:	4770      	bx	lr

0800dfe4 <__ascii_mbtowc>:
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	b901      	cbnz	r1, 800dfea <__ascii_mbtowc+0x6>
 800dfe8:	a901      	add	r1, sp, #4
 800dfea:	b142      	cbz	r2, 800dffe <__ascii_mbtowc+0x1a>
 800dfec:	b14b      	cbz	r3, 800e002 <__ascii_mbtowc+0x1e>
 800dfee:	7813      	ldrb	r3, [r2, #0]
 800dff0:	600b      	str	r3, [r1, #0]
 800dff2:	7812      	ldrb	r2, [r2, #0]
 800dff4:	1e10      	subs	r0, r2, #0
 800dff6:	bf18      	it	ne
 800dff8:	2001      	movne	r0, #1
 800dffa:	b002      	add	sp, #8
 800dffc:	4770      	bx	lr
 800dffe:	4610      	mov	r0, r2
 800e000:	e7fb      	b.n	800dffa <__ascii_mbtowc+0x16>
 800e002:	f06f 0001 	mvn.w	r0, #1
 800e006:	e7f8      	b.n	800dffa <__ascii_mbtowc+0x16>

0800e008 <memmove>:
 800e008:	4288      	cmp	r0, r1
 800e00a:	b510      	push	{r4, lr}
 800e00c:	eb01 0402 	add.w	r4, r1, r2
 800e010:	d902      	bls.n	800e018 <memmove+0x10>
 800e012:	4284      	cmp	r4, r0
 800e014:	4623      	mov	r3, r4
 800e016:	d807      	bhi.n	800e028 <memmove+0x20>
 800e018:	1e43      	subs	r3, r0, #1
 800e01a:	42a1      	cmp	r1, r4
 800e01c:	d008      	beq.n	800e030 <memmove+0x28>
 800e01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e022:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e026:	e7f8      	b.n	800e01a <memmove+0x12>
 800e028:	4402      	add	r2, r0
 800e02a:	4601      	mov	r1, r0
 800e02c:	428a      	cmp	r2, r1
 800e02e:	d100      	bne.n	800e032 <memmove+0x2a>
 800e030:	bd10      	pop	{r4, pc}
 800e032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e03a:	e7f7      	b.n	800e02c <memmove+0x24>

0800e03c <_realloc_r>:
 800e03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e040:	4680      	mov	r8, r0
 800e042:	4614      	mov	r4, r2
 800e044:	460e      	mov	r6, r1
 800e046:	b921      	cbnz	r1, 800e052 <_realloc_r+0x16>
 800e048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e04c:	4611      	mov	r1, r2
 800e04e:	f7fc bfcb 	b.w	800afe8 <_malloc_r>
 800e052:	b92a      	cbnz	r2, 800e060 <_realloc_r+0x24>
 800e054:	f7fc ff5c 	bl	800af10 <_free_r>
 800e058:	4625      	mov	r5, r4
 800e05a:	4628      	mov	r0, r5
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e060:	f000 faae 	bl	800e5c0 <_malloc_usable_size_r>
 800e064:	4284      	cmp	r4, r0
 800e066:	4607      	mov	r7, r0
 800e068:	d802      	bhi.n	800e070 <_realloc_r+0x34>
 800e06a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e06e:	d812      	bhi.n	800e096 <_realloc_r+0x5a>
 800e070:	4621      	mov	r1, r4
 800e072:	4640      	mov	r0, r8
 800e074:	f7fc ffb8 	bl	800afe8 <_malloc_r>
 800e078:	4605      	mov	r5, r0
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d0ed      	beq.n	800e05a <_realloc_r+0x1e>
 800e07e:	42bc      	cmp	r4, r7
 800e080:	4622      	mov	r2, r4
 800e082:	4631      	mov	r1, r6
 800e084:	bf28      	it	cs
 800e086:	463a      	movcs	r2, r7
 800e088:	f7fe fc96 	bl	800c9b8 <memcpy>
 800e08c:	4631      	mov	r1, r6
 800e08e:	4640      	mov	r0, r8
 800e090:	f7fc ff3e 	bl	800af10 <_free_r>
 800e094:	e7e1      	b.n	800e05a <_realloc_r+0x1e>
 800e096:	4635      	mov	r5, r6
 800e098:	e7df      	b.n	800e05a <_realloc_r+0x1e>

0800e09a <__sfputc_r>:
 800e09a:	6893      	ldr	r3, [r2, #8]
 800e09c:	3b01      	subs	r3, #1
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	b410      	push	{r4}
 800e0a2:	6093      	str	r3, [r2, #8]
 800e0a4:	da08      	bge.n	800e0b8 <__sfputc_r+0x1e>
 800e0a6:	6994      	ldr	r4, [r2, #24]
 800e0a8:	42a3      	cmp	r3, r4
 800e0aa:	db01      	blt.n	800e0b0 <__sfputc_r+0x16>
 800e0ac:	290a      	cmp	r1, #10
 800e0ae:	d103      	bne.n	800e0b8 <__sfputc_r+0x1e>
 800e0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0b4:	f000 b94a 	b.w	800e34c <__swbuf_r>
 800e0b8:	6813      	ldr	r3, [r2, #0]
 800e0ba:	1c58      	adds	r0, r3, #1
 800e0bc:	6010      	str	r0, [r2, #0]
 800e0be:	7019      	strb	r1, [r3, #0]
 800e0c0:	4608      	mov	r0, r1
 800e0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <__sfputs_r>:
 800e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	460f      	mov	r7, r1
 800e0ce:	4614      	mov	r4, r2
 800e0d0:	18d5      	adds	r5, r2, r3
 800e0d2:	42ac      	cmp	r4, r5
 800e0d4:	d101      	bne.n	800e0da <__sfputs_r+0x12>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	e007      	b.n	800e0ea <__sfputs_r+0x22>
 800e0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0de:	463a      	mov	r2, r7
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	f7ff ffda 	bl	800e09a <__sfputc_r>
 800e0e6:	1c43      	adds	r3, r0, #1
 800e0e8:	d1f3      	bne.n	800e0d2 <__sfputs_r+0xa>
 800e0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0ec <_vfiprintf_r>:
 800e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f0:	460d      	mov	r5, r1
 800e0f2:	b09d      	sub	sp, #116	; 0x74
 800e0f4:	4614      	mov	r4, r2
 800e0f6:	4698      	mov	r8, r3
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	b118      	cbz	r0, 800e104 <_vfiprintf_r+0x18>
 800e0fc:	6983      	ldr	r3, [r0, #24]
 800e0fe:	b90b      	cbnz	r3, 800e104 <_vfiprintf_r+0x18>
 800e100:	f7ff febe 	bl	800de80 <__sinit>
 800e104:	4b89      	ldr	r3, [pc, #548]	; (800e32c <_vfiprintf_r+0x240>)
 800e106:	429d      	cmp	r5, r3
 800e108:	d11b      	bne.n	800e142 <_vfiprintf_r+0x56>
 800e10a:	6875      	ldr	r5, [r6, #4]
 800e10c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e10e:	07d9      	lsls	r1, r3, #31
 800e110:	d405      	bmi.n	800e11e <_vfiprintf_r+0x32>
 800e112:	89ab      	ldrh	r3, [r5, #12]
 800e114:	059a      	lsls	r2, r3, #22
 800e116:	d402      	bmi.n	800e11e <_vfiprintf_r+0x32>
 800e118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e11a:	f7ff ff61 	bl	800dfe0 <__retarget_lock_acquire_recursive>
 800e11e:	89ab      	ldrh	r3, [r5, #12]
 800e120:	071b      	lsls	r3, r3, #28
 800e122:	d501      	bpl.n	800e128 <_vfiprintf_r+0x3c>
 800e124:	692b      	ldr	r3, [r5, #16]
 800e126:	b9eb      	cbnz	r3, 800e164 <_vfiprintf_r+0x78>
 800e128:	4629      	mov	r1, r5
 800e12a:	4630      	mov	r0, r6
 800e12c:	f000 f96e 	bl	800e40c <__swsetup_r>
 800e130:	b1c0      	cbz	r0, 800e164 <_vfiprintf_r+0x78>
 800e132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e134:	07dc      	lsls	r4, r3, #31
 800e136:	d50e      	bpl.n	800e156 <_vfiprintf_r+0x6a>
 800e138:	f04f 30ff 	mov.w	r0, #4294967295
 800e13c:	b01d      	add	sp, #116	; 0x74
 800e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e142:	4b7b      	ldr	r3, [pc, #492]	; (800e330 <_vfiprintf_r+0x244>)
 800e144:	429d      	cmp	r5, r3
 800e146:	d101      	bne.n	800e14c <_vfiprintf_r+0x60>
 800e148:	68b5      	ldr	r5, [r6, #8]
 800e14a:	e7df      	b.n	800e10c <_vfiprintf_r+0x20>
 800e14c:	4b79      	ldr	r3, [pc, #484]	; (800e334 <_vfiprintf_r+0x248>)
 800e14e:	429d      	cmp	r5, r3
 800e150:	bf08      	it	eq
 800e152:	68f5      	ldreq	r5, [r6, #12]
 800e154:	e7da      	b.n	800e10c <_vfiprintf_r+0x20>
 800e156:	89ab      	ldrh	r3, [r5, #12]
 800e158:	0598      	lsls	r0, r3, #22
 800e15a:	d4ed      	bmi.n	800e138 <_vfiprintf_r+0x4c>
 800e15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e15e:	f7ff ff40 	bl	800dfe2 <__retarget_lock_release_recursive>
 800e162:	e7e9      	b.n	800e138 <_vfiprintf_r+0x4c>
 800e164:	2300      	movs	r3, #0
 800e166:	9309      	str	r3, [sp, #36]	; 0x24
 800e168:	2320      	movs	r3, #32
 800e16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e172:	2330      	movs	r3, #48	; 0x30
 800e174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e338 <_vfiprintf_r+0x24c>
 800e178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e17c:	f04f 0901 	mov.w	r9, #1
 800e180:	4623      	mov	r3, r4
 800e182:	469a      	mov	sl, r3
 800e184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e188:	b10a      	cbz	r2, 800e18e <_vfiprintf_r+0xa2>
 800e18a:	2a25      	cmp	r2, #37	; 0x25
 800e18c:	d1f9      	bne.n	800e182 <_vfiprintf_r+0x96>
 800e18e:	ebba 0b04 	subs.w	fp, sl, r4
 800e192:	d00b      	beq.n	800e1ac <_vfiprintf_r+0xc0>
 800e194:	465b      	mov	r3, fp
 800e196:	4622      	mov	r2, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	4630      	mov	r0, r6
 800e19c:	f7ff ff94 	bl	800e0c8 <__sfputs_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f000 80aa 	beq.w	800e2fa <_vfiprintf_r+0x20e>
 800e1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a8:	445a      	add	r2, fp
 800e1aa:	9209      	str	r2, [sp, #36]	; 0x24
 800e1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 80a2 	beq.w	800e2fa <_vfiprintf_r+0x20e>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c0:	f10a 0a01 	add.w	sl, sl, #1
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	9307      	str	r3, [sp, #28]
 800e1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1cc:	931a      	str	r3, [sp, #104]	; 0x68
 800e1ce:	4654      	mov	r4, sl
 800e1d0:	2205      	movs	r2, #5
 800e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d6:	4858      	ldr	r0, [pc, #352]	; (800e338 <_vfiprintf_r+0x24c>)
 800e1d8:	f7f2 f81a 	bl	8000210 <memchr>
 800e1dc:	9a04      	ldr	r2, [sp, #16]
 800e1de:	b9d8      	cbnz	r0, 800e218 <_vfiprintf_r+0x12c>
 800e1e0:	06d1      	lsls	r1, r2, #27
 800e1e2:	bf44      	itt	mi
 800e1e4:	2320      	movmi	r3, #32
 800e1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1ea:	0713      	lsls	r3, r2, #28
 800e1ec:	bf44      	itt	mi
 800e1ee:	232b      	movmi	r3, #43	; 0x2b
 800e1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fa:	d015      	beq.n	800e228 <_vfiprintf_r+0x13c>
 800e1fc:	9a07      	ldr	r2, [sp, #28]
 800e1fe:	4654      	mov	r4, sl
 800e200:	2000      	movs	r0, #0
 800e202:	f04f 0c0a 	mov.w	ip, #10
 800e206:	4621      	mov	r1, r4
 800e208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e20c:	3b30      	subs	r3, #48	; 0x30
 800e20e:	2b09      	cmp	r3, #9
 800e210:	d94e      	bls.n	800e2b0 <_vfiprintf_r+0x1c4>
 800e212:	b1b0      	cbz	r0, 800e242 <_vfiprintf_r+0x156>
 800e214:	9207      	str	r2, [sp, #28]
 800e216:	e014      	b.n	800e242 <_vfiprintf_r+0x156>
 800e218:	eba0 0308 	sub.w	r3, r0, r8
 800e21c:	fa09 f303 	lsl.w	r3, r9, r3
 800e220:	4313      	orrs	r3, r2
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	46a2      	mov	sl, r4
 800e226:	e7d2      	b.n	800e1ce <_vfiprintf_r+0xe2>
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	1d19      	adds	r1, r3, #4
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	9103      	str	r1, [sp, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	bfbb      	ittet	lt
 800e234:	425b      	neglt	r3, r3
 800e236:	f042 0202 	orrlt.w	r2, r2, #2
 800e23a:	9307      	strge	r3, [sp, #28]
 800e23c:	9307      	strlt	r3, [sp, #28]
 800e23e:	bfb8      	it	lt
 800e240:	9204      	strlt	r2, [sp, #16]
 800e242:	7823      	ldrb	r3, [r4, #0]
 800e244:	2b2e      	cmp	r3, #46	; 0x2e
 800e246:	d10c      	bne.n	800e262 <_vfiprintf_r+0x176>
 800e248:	7863      	ldrb	r3, [r4, #1]
 800e24a:	2b2a      	cmp	r3, #42	; 0x2a
 800e24c:	d135      	bne.n	800e2ba <_vfiprintf_r+0x1ce>
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	1d1a      	adds	r2, r3, #4
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	9203      	str	r2, [sp, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	bfb8      	it	lt
 800e25a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e25e:	3402      	adds	r4, #2
 800e260:	9305      	str	r3, [sp, #20]
 800e262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e348 <_vfiprintf_r+0x25c>
 800e266:	7821      	ldrb	r1, [r4, #0]
 800e268:	2203      	movs	r2, #3
 800e26a:	4650      	mov	r0, sl
 800e26c:	f7f1 ffd0 	bl	8000210 <memchr>
 800e270:	b140      	cbz	r0, 800e284 <_vfiprintf_r+0x198>
 800e272:	2340      	movs	r3, #64	; 0x40
 800e274:	eba0 000a 	sub.w	r0, r0, sl
 800e278:	fa03 f000 	lsl.w	r0, r3, r0
 800e27c:	9b04      	ldr	r3, [sp, #16]
 800e27e:	4303      	orrs	r3, r0
 800e280:	3401      	adds	r4, #1
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e288:	482c      	ldr	r0, [pc, #176]	; (800e33c <_vfiprintf_r+0x250>)
 800e28a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e28e:	2206      	movs	r2, #6
 800e290:	f7f1 ffbe 	bl	8000210 <memchr>
 800e294:	2800      	cmp	r0, #0
 800e296:	d03f      	beq.n	800e318 <_vfiprintf_r+0x22c>
 800e298:	4b29      	ldr	r3, [pc, #164]	; (800e340 <_vfiprintf_r+0x254>)
 800e29a:	bb1b      	cbnz	r3, 800e2e4 <_vfiprintf_r+0x1f8>
 800e29c:	9b03      	ldr	r3, [sp, #12]
 800e29e:	3307      	adds	r3, #7
 800e2a0:	f023 0307 	bic.w	r3, r3, #7
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	9303      	str	r3, [sp, #12]
 800e2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2aa:	443b      	add	r3, r7
 800e2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ae:	e767      	b.n	800e180 <_vfiprintf_r+0x94>
 800e2b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b4:	460c      	mov	r4, r1
 800e2b6:	2001      	movs	r0, #1
 800e2b8:	e7a5      	b.n	800e206 <_vfiprintf_r+0x11a>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	3401      	adds	r4, #1
 800e2be:	9305      	str	r3, [sp, #20]
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	f04f 0c0a 	mov.w	ip, #10
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2cc:	3a30      	subs	r2, #48	; 0x30
 800e2ce:	2a09      	cmp	r2, #9
 800e2d0:	d903      	bls.n	800e2da <_vfiprintf_r+0x1ee>
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d0c5      	beq.n	800e262 <_vfiprintf_r+0x176>
 800e2d6:	9105      	str	r1, [sp, #20]
 800e2d8:	e7c3      	b.n	800e262 <_vfiprintf_r+0x176>
 800e2da:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2de:	4604      	mov	r4, r0
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e7f0      	b.n	800e2c6 <_vfiprintf_r+0x1da>
 800e2e4:	ab03      	add	r3, sp, #12
 800e2e6:	9300      	str	r3, [sp, #0]
 800e2e8:	462a      	mov	r2, r5
 800e2ea:	4b16      	ldr	r3, [pc, #88]	; (800e344 <_vfiprintf_r+0x258>)
 800e2ec:	a904      	add	r1, sp, #16
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	f7fc ff8e 	bl	800b210 <_printf_float>
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	1c78      	adds	r0, r7, #1
 800e2f8:	d1d6      	bne.n	800e2a8 <_vfiprintf_r+0x1bc>
 800e2fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2fc:	07d9      	lsls	r1, r3, #31
 800e2fe:	d405      	bmi.n	800e30c <_vfiprintf_r+0x220>
 800e300:	89ab      	ldrh	r3, [r5, #12]
 800e302:	059a      	lsls	r2, r3, #22
 800e304:	d402      	bmi.n	800e30c <_vfiprintf_r+0x220>
 800e306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e308:	f7ff fe6b 	bl	800dfe2 <__retarget_lock_release_recursive>
 800e30c:	89ab      	ldrh	r3, [r5, #12]
 800e30e:	065b      	lsls	r3, r3, #25
 800e310:	f53f af12 	bmi.w	800e138 <_vfiprintf_r+0x4c>
 800e314:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e316:	e711      	b.n	800e13c <_vfiprintf_r+0x50>
 800e318:	ab03      	add	r3, sp, #12
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	462a      	mov	r2, r5
 800e31e:	4b09      	ldr	r3, [pc, #36]	; (800e344 <_vfiprintf_r+0x258>)
 800e320:	a904      	add	r1, sp, #16
 800e322:	4630      	mov	r0, r6
 800e324:	f7fd fa18 	bl	800b758 <_printf_i>
 800e328:	e7e4      	b.n	800e2f4 <_vfiprintf_r+0x208>
 800e32a:	bf00      	nop
 800e32c:	0801029c 	.word	0x0801029c
 800e330:	080102bc 	.word	0x080102bc
 800e334:	0801027c 	.word	0x0801027c
 800e338:	08010214 	.word	0x08010214
 800e33c:	0801021e 	.word	0x0801021e
 800e340:	0800b211 	.word	0x0800b211
 800e344:	0800e0c9 	.word	0x0800e0c9
 800e348:	0801021a 	.word	0x0801021a

0800e34c <__swbuf_r>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	460e      	mov	r6, r1
 800e350:	4614      	mov	r4, r2
 800e352:	4605      	mov	r5, r0
 800e354:	b118      	cbz	r0, 800e35e <__swbuf_r+0x12>
 800e356:	6983      	ldr	r3, [r0, #24]
 800e358:	b90b      	cbnz	r3, 800e35e <__swbuf_r+0x12>
 800e35a:	f7ff fd91 	bl	800de80 <__sinit>
 800e35e:	4b21      	ldr	r3, [pc, #132]	; (800e3e4 <__swbuf_r+0x98>)
 800e360:	429c      	cmp	r4, r3
 800e362:	d12b      	bne.n	800e3bc <__swbuf_r+0x70>
 800e364:	686c      	ldr	r4, [r5, #4]
 800e366:	69a3      	ldr	r3, [r4, #24]
 800e368:	60a3      	str	r3, [r4, #8]
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	071a      	lsls	r2, r3, #28
 800e36e:	d52f      	bpl.n	800e3d0 <__swbuf_r+0x84>
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	b36b      	cbz	r3, 800e3d0 <__swbuf_r+0x84>
 800e374:	6923      	ldr	r3, [r4, #16]
 800e376:	6820      	ldr	r0, [r4, #0]
 800e378:	1ac0      	subs	r0, r0, r3
 800e37a:	6963      	ldr	r3, [r4, #20]
 800e37c:	b2f6      	uxtb	r6, r6
 800e37e:	4283      	cmp	r3, r0
 800e380:	4637      	mov	r7, r6
 800e382:	dc04      	bgt.n	800e38e <__swbuf_r+0x42>
 800e384:	4621      	mov	r1, r4
 800e386:	4628      	mov	r0, r5
 800e388:	f7ff fce6 	bl	800dd58 <_fflush_r>
 800e38c:	bb30      	cbnz	r0, 800e3dc <__swbuf_r+0x90>
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	3b01      	subs	r3, #1
 800e392:	60a3      	str	r3, [r4, #8]
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	6022      	str	r2, [r4, #0]
 800e39a:	701e      	strb	r6, [r3, #0]
 800e39c:	6963      	ldr	r3, [r4, #20]
 800e39e:	3001      	adds	r0, #1
 800e3a0:	4283      	cmp	r3, r0
 800e3a2:	d004      	beq.n	800e3ae <__swbuf_r+0x62>
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	07db      	lsls	r3, r3, #31
 800e3a8:	d506      	bpl.n	800e3b8 <__swbuf_r+0x6c>
 800e3aa:	2e0a      	cmp	r6, #10
 800e3ac:	d104      	bne.n	800e3b8 <__swbuf_r+0x6c>
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f7ff fcd1 	bl	800dd58 <_fflush_r>
 800e3b6:	b988      	cbnz	r0, 800e3dc <__swbuf_r+0x90>
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3bc:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <__swbuf_r+0x9c>)
 800e3be:	429c      	cmp	r4, r3
 800e3c0:	d101      	bne.n	800e3c6 <__swbuf_r+0x7a>
 800e3c2:	68ac      	ldr	r4, [r5, #8]
 800e3c4:	e7cf      	b.n	800e366 <__swbuf_r+0x1a>
 800e3c6:	4b09      	ldr	r3, [pc, #36]	; (800e3ec <__swbuf_r+0xa0>)
 800e3c8:	429c      	cmp	r4, r3
 800e3ca:	bf08      	it	eq
 800e3cc:	68ec      	ldreq	r4, [r5, #12]
 800e3ce:	e7ca      	b.n	800e366 <__swbuf_r+0x1a>
 800e3d0:	4621      	mov	r1, r4
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f000 f81a 	bl	800e40c <__swsetup_r>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d0cb      	beq.n	800e374 <__swbuf_r+0x28>
 800e3dc:	f04f 37ff 	mov.w	r7, #4294967295
 800e3e0:	e7ea      	b.n	800e3b8 <__swbuf_r+0x6c>
 800e3e2:	bf00      	nop
 800e3e4:	0801029c 	.word	0x0801029c
 800e3e8:	080102bc 	.word	0x080102bc
 800e3ec:	0801027c 	.word	0x0801027c

0800e3f0 <__ascii_wctomb>:
 800e3f0:	b149      	cbz	r1, 800e406 <__ascii_wctomb+0x16>
 800e3f2:	2aff      	cmp	r2, #255	; 0xff
 800e3f4:	bf85      	ittet	hi
 800e3f6:	238a      	movhi	r3, #138	; 0x8a
 800e3f8:	6003      	strhi	r3, [r0, #0]
 800e3fa:	700a      	strbls	r2, [r1, #0]
 800e3fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800e400:	bf98      	it	ls
 800e402:	2001      	movls	r0, #1
 800e404:	4770      	bx	lr
 800e406:	4608      	mov	r0, r1
 800e408:	4770      	bx	lr
	...

0800e40c <__swsetup_r>:
 800e40c:	4b32      	ldr	r3, [pc, #200]	; (800e4d8 <__swsetup_r+0xcc>)
 800e40e:	b570      	push	{r4, r5, r6, lr}
 800e410:	681d      	ldr	r5, [r3, #0]
 800e412:	4606      	mov	r6, r0
 800e414:	460c      	mov	r4, r1
 800e416:	b125      	cbz	r5, 800e422 <__swsetup_r+0x16>
 800e418:	69ab      	ldr	r3, [r5, #24]
 800e41a:	b913      	cbnz	r3, 800e422 <__swsetup_r+0x16>
 800e41c:	4628      	mov	r0, r5
 800e41e:	f7ff fd2f 	bl	800de80 <__sinit>
 800e422:	4b2e      	ldr	r3, [pc, #184]	; (800e4dc <__swsetup_r+0xd0>)
 800e424:	429c      	cmp	r4, r3
 800e426:	d10f      	bne.n	800e448 <__swsetup_r+0x3c>
 800e428:	686c      	ldr	r4, [r5, #4]
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e430:	0719      	lsls	r1, r3, #28
 800e432:	d42c      	bmi.n	800e48e <__swsetup_r+0x82>
 800e434:	06dd      	lsls	r5, r3, #27
 800e436:	d411      	bmi.n	800e45c <__swsetup_r+0x50>
 800e438:	2309      	movs	r3, #9
 800e43a:	6033      	str	r3, [r6, #0]
 800e43c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	f04f 30ff 	mov.w	r0, #4294967295
 800e446:	e03e      	b.n	800e4c6 <__swsetup_r+0xba>
 800e448:	4b25      	ldr	r3, [pc, #148]	; (800e4e0 <__swsetup_r+0xd4>)
 800e44a:	429c      	cmp	r4, r3
 800e44c:	d101      	bne.n	800e452 <__swsetup_r+0x46>
 800e44e:	68ac      	ldr	r4, [r5, #8]
 800e450:	e7eb      	b.n	800e42a <__swsetup_r+0x1e>
 800e452:	4b24      	ldr	r3, [pc, #144]	; (800e4e4 <__swsetup_r+0xd8>)
 800e454:	429c      	cmp	r4, r3
 800e456:	bf08      	it	eq
 800e458:	68ec      	ldreq	r4, [r5, #12]
 800e45a:	e7e6      	b.n	800e42a <__swsetup_r+0x1e>
 800e45c:	0758      	lsls	r0, r3, #29
 800e45e:	d512      	bpl.n	800e486 <__swsetup_r+0x7a>
 800e460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e462:	b141      	cbz	r1, 800e476 <__swsetup_r+0x6a>
 800e464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e468:	4299      	cmp	r1, r3
 800e46a:	d002      	beq.n	800e472 <__swsetup_r+0x66>
 800e46c:	4630      	mov	r0, r6
 800e46e:	f7fc fd4f 	bl	800af10 <_free_r>
 800e472:	2300      	movs	r3, #0
 800e474:	6363      	str	r3, [r4, #52]	; 0x34
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e47c:	81a3      	strh	r3, [r4, #12]
 800e47e:	2300      	movs	r3, #0
 800e480:	6063      	str	r3, [r4, #4]
 800e482:	6923      	ldr	r3, [r4, #16]
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	f043 0308 	orr.w	r3, r3, #8
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	6923      	ldr	r3, [r4, #16]
 800e490:	b94b      	cbnz	r3, 800e4a6 <__swsetup_r+0x9a>
 800e492:	89a3      	ldrh	r3, [r4, #12]
 800e494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e49c:	d003      	beq.n	800e4a6 <__swsetup_r+0x9a>
 800e49e:	4621      	mov	r1, r4
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f000 f84d 	bl	800e540 <__smakebuf_r>
 800e4a6:	89a0      	ldrh	r0, [r4, #12]
 800e4a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4ac:	f010 0301 	ands.w	r3, r0, #1
 800e4b0:	d00a      	beq.n	800e4c8 <__swsetup_r+0xbc>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	60a3      	str	r3, [r4, #8]
 800e4b6:	6963      	ldr	r3, [r4, #20]
 800e4b8:	425b      	negs	r3, r3
 800e4ba:	61a3      	str	r3, [r4, #24]
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	b943      	cbnz	r3, 800e4d2 <__swsetup_r+0xc6>
 800e4c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4c4:	d1ba      	bne.n	800e43c <__swsetup_r+0x30>
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	0781      	lsls	r1, r0, #30
 800e4ca:	bf58      	it	pl
 800e4cc:	6963      	ldrpl	r3, [r4, #20]
 800e4ce:	60a3      	str	r3, [r4, #8]
 800e4d0:	e7f4      	b.n	800e4bc <__swsetup_r+0xb0>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e7f7      	b.n	800e4c6 <__swsetup_r+0xba>
 800e4d6:	bf00      	nop
 800e4d8:	200002f0 	.word	0x200002f0
 800e4dc:	0801029c 	.word	0x0801029c
 800e4e0:	080102bc 	.word	0x080102bc
 800e4e4:	0801027c 	.word	0x0801027c

0800e4e8 <abort>:
 800e4e8:	b508      	push	{r3, lr}
 800e4ea:	2006      	movs	r0, #6
 800e4ec:	f000 f898 	bl	800e620 <raise>
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	f7f5 fd3d 	bl	8003f70 <_exit>

0800e4f6 <__swhatbuf_r>:
 800e4f6:	b570      	push	{r4, r5, r6, lr}
 800e4f8:	460e      	mov	r6, r1
 800e4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4fe:	2900      	cmp	r1, #0
 800e500:	b096      	sub	sp, #88	; 0x58
 800e502:	4614      	mov	r4, r2
 800e504:	461d      	mov	r5, r3
 800e506:	da08      	bge.n	800e51a <__swhatbuf_r+0x24>
 800e508:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	602a      	str	r2, [r5, #0]
 800e510:	061a      	lsls	r2, r3, #24
 800e512:	d410      	bmi.n	800e536 <__swhatbuf_r+0x40>
 800e514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e518:	e00e      	b.n	800e538 <__swhatbuf_r+0x42>
 800e51a:	466a      	mov	r2, sp
 800e51c:	f000 f89c 	bl	800e658 <_fstat_r>
 800e520:	2800      	cmp	r0, #0
 800e522:	dbf1      	blt.n	800e508 <__swhatbuf_r+0x12>
 800e524:	9a01      	ldr	r2, [sp, #4]
 800e526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e52a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e52e:	425a      	negs	r2, r3
 800e530:	415a      	adcs	r2, r3
 800e532:	602a      	str	r2, [r5, #0]
 800e534:	e7ee      	b.n	800e514 <__swhatbuf_r+0x1e>
 800e536:	2340      	movs	r3, #64	; 0x40
 800e538:	2000      	movs	r0, #0
 800e53a:	6023      	str	r3, [r4, #0]
 800e53c:	b016      	add	sp, #88	; 0x58
 800e53e:	bd70      	pop	{r4, r5, r6, pc}

0800e540 <__smakebuf_r>:
 800e540:	898b      	ldrh	r3, [r1, #12]
 800e542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e544:	079d      	lsls	r5, r3, #30
 800e546:	4606      	mov	r6, r0
 800e548:	460c      	mov	r4, r1
 800e54a:	d507      	bpl.n	800e55c <__smakebuf_r+0x1c>
 800e54c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	6123      	str	r3, [r4, #16]
 800e554:	2301      	movs	r3, #1
 800e556:	6163      	str	r3, [r4, #20]
 800e558:	b002      	add	sp, #8
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	ab01      	add	r3, sp, #4
 800e55e:	466a      	mov	r2, sp
 800e560:	f7ff ffc9 	bl	800e4f6 <__swhatbuf_r>
 800e564:	9900      	ldr	r1, [sp, #0]
 800e566:	4605      	mov	r5, r0
 800e568:	4630      	mov	r0, r6
 800e56a:	f7fc fd3d 	bl	800afe8 <_malloc_r>
 800e56e:	b948      	cbnz	r0, 800e584 <__smakebuf_r+0x44>
 800e570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e574:	059a      	lsls	r2, r3, #22
 800e576:	d4ef      	bmi.n	800e558 <__smakebuf_r+0x18>
 800e578:	f023 0303 	bic.w	r3, r3, #3
 800e57c:	f043 0302 	orr.w	r3, r3, #2
 800e580:	81a3      	strh	r3, [r4, #12]
 800e582:	e7e3      	b.n	800e54c <__smakebuf_r+0xc>
 800e584:	4b0d      	ldr	r3, [pc, #52]	; (800e5bc <__smakebuf_r+0x7c>)
 800e586:	62b3      	str	r3, [r6, #40]	; 0x28
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	6020      	str	r0, [r4, #0]
 800e58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e590:	81a3      	strh	r3, [r4, #12]
 800e592:	9b00      	ldr	r3, [sp, #0]
 800e594:	6163      	str	r3, [r4, #20]
 800e596:	9b01      	ldr	r3, [sp, #4]
 800e598:	6120      	str	r0, [r4, #16]
 800e59a:	b15b      	cbz	r3, 800e5b4 <__smakebuf_r+0x74>
 800e59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f000 f86b 	bl	800e67c <_isatty_r>
 800e5a6:	b128      	cbz	r0, 800e5b4 <__smakebuf_r+0x74>
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	f023 0303 	bic.w	r3, r3, #3
 800e5ae:	f043 0301 	orr.w	r3, r3, #1
 800e5b2:	81a3      	strh	r3, [r4, #12]
 800e5b4:	89a0      	ldrh	r0, [r4, #12]
 800e5b6:	4305      	orrs	r5, r0
 800e5b8:	81a5      	strh	r5, [r4, #12]
 800e5ba:	e7cd      	b.n	800e558 <__smakebuf_r+0x18>
 800e5bc:	0800de19 	.word	0x0800de19

0800e5c0 <_malloc_usable_size_r>:
 800e5c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5c4:	1f18      	subs	r0, r3, #4
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bfbc      	itt	lt
 800e5ca:	580b      	ldrlt	r3, [r1, r0]
 800e5cc:	18c0      	addlt	r0, r0, r3
 800e5ce:	4770      	bx	lr

0800e5d0 <_raise_r>:
 800e5d0:	291f      	cmp	r1, #31
 800e5d2:	b538      	push	{r3, r4, r5, lr}
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	460d      	mov	r5, r1
 800e5d8:	d904      	bls.n	800e5e4 <_raise_r+0x14>
 800e5da:	2316      	movs	r3, #22
 800e5dc:	6003      	str	r3, [r0, #0]
 800e5de:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}
 800e5e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5e6:	b112      	cbz	r2, 800e5ee <_raise_r+0x1e>
 800e5e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5ec:	b94b      	cbnz	r3, 800e602 <_raise_r+0x32>
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f000 f830 	bl	800e654 <_getpid_r>
 800e5f4:	462a      	mov	r2, r5
 800e5f6:	4601      	mov	r1, r0
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5fe:	f000 b817 	b.w	800e630 <_kill_r>
 800e602:	2b01      	cmp	r3, #1
 800e604:	d00a      	beq.n	800e61c <_raise_r+0x4c>
 800e606:	1c59      	adds	r1, r3, #1
 800e608:	d103      	bne.n	800e612 <_raise_r+0x42>
 800e60a:	2316      	movs	r3, #22
 800e60c:	6003      	str	r3, [r0, #0]
 800e60e:	2001      	movs	r0, #1
 800e610:	e7e7      	b.n	800e5e2 <_raise_r+0x12>
 800e612:	2400      	movs	r4, #0
 800e614:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e618:	4628      	mov	r0, r5
 800e61a:	4798      	blx	r3
 800e61c:	2000      	movs	r0, #0
 800e61e:	e7e0      	b.n	800e5e2 <_raise_r+0x12>

0800e620 <raise>:
 800e620:	4b02      	ldr	r3, [pc, #8]	; (800e62c <raise+0xc>)
 800e622:	4601      	mov	r1, r0
 800e624:	6818      	ldr	r0, [r3, #0]
 800e626:	f7ff bfd3 	b.w	800e5d0 <_raise_r>
 800e62a:	bf00      	nop
 800e62c:	200002f0 	.word	0x200002f0

0800e630 <_kill_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	4d07      	ldr	r5, [pc, #28]	; (800e650 <_kill_r+0x20>)
 800e634:	2300      	movs	r3, #0
 800e636:	4604      	mov	r4, r0
 800e638:	4608      	mov	r0, r1
 800e63a:	4611      	mov	r1, r2
 800e63c:	602b      	str	r3, [r5, #0]
 800e63e:	f7f5 fc87 	bl	8003f50 <_kill>
 800e642:	1c43      	adds	r3, r0, #1
 800e644:	d102      	bne.n	800e64c <_kill_r+0x1c>
 800e646:	682b      	ldr	r3, [r5, #0]
 800e648:	b103      	cbz	r3, 800e64c <_kill_r+0x1c>
 800e64a:	6023      	str	r3, [r4, #0]
 800e64c:	bd38      	pop	{r3, r4, r5, pc}
 800e64e:	bf00      	nop
 800e650:	20000bc8 	.word	0x20000bc8

0800e654 <_getpid_r>:
 800e654:	f7f5 bc74 	b.w	8003f40 <_getpid>

0800e658 <_fstat_r>:
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4d07      	ldr	r5, [pc, #28]	; (800e678 <_fstat_r+0x20>)
 800e65c:	2300      	movs	r3, #0
 800e65e:	4604      	mov	r4, r0
 800e660:	4608      	mov	r0, r1
 800e662:	4611      	mov	r1, r2
 800e664:	602b      	str	r3, [r5, #0]
 800e666:	f7f5 fcd2 	bl	800400e <_fstat>
 800e66a:	1c43      	adds	r3, r0, #1
 800e66c:	d102      	bne.n	800e674 <_fstat_r+0x1c>
 800e66e:	682b      	ldr	r3, [r5, #0]
 800e670:	b103      	cbz	r3, 800e674 <_fstat_r+0x1c>
 800e672:	6023      	str	r3, [r4, #0]
 800e674:	bd38      	pop	{r3, r4, r5, pc}
 800e676:	bf00      	nop
 800e678:	20000bc8 	.word	0x20000bc8

0800e67c <_isatty_r>:
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4d06      	ldr	r5, [pc, #24]	; (800e698 <_isatty_r+0x1c>)
 800e680:	2300      	movs	r3, #0
 800e682:	4604      	mov	r4, r0
 800e684:	4608      	mov	r0, r1
 800e686:	602b      	str	r3, [r5, #0]
 800e688:	f7f5 fcd1 	bl	800402e <_isatty>
 800e68c:	1c43      	adds	r3, r0, #1
 800e68e:	d102      	bne.n	800e696 <_isatty_r+0x1a>
 800e690:	682b      	ldr	r3, [r5, #0]
 800e692:	b103      	cbz	r3, 800e696 <_isatty_r+0x1a>
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	20000bc8 	.word	0x20000bc8
 800e69c:	00000000 	.word	0x00000000

0800e6a0 <atan>:
 800e6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	ec55 4b10 	vmov	r4, r5, d0
 800e6a8:	4bc3      	ldr	r3, [pc, #780]	; (800e9b8 <atan+0x318>)
 800e6aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e6ae:	429e      	cmp	r6, r3
 800e6b0:	46ab      	mov	fp, r5
 800e6b2:	dd18      	ble.n	800e6e6 <atan+0x46>
 800e6b4:	4bc1      	ldr	r3, [pc, #772]	; (800e9bc <atan+0x31c>)
 800e6b6:	429e      	cmp	r6, r3
 800e6b8:	dc01      	bgt.n	800e6be <atan+0x1e>
 800e6ba:	d109      	bne.n	800e6d0 <atan+0x30>
 800e6bc:	b144      	cbz	r4, 800e6d0 <atan+0x30>
 800e6be:	4622      	mov	r2, r4
 800e6c0:	462b      	mov	r3, r5
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	f7f1 fdf9 	bl	80002bc <__adddf3>
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	e006      	b.n	800e6de <atan+0x3e>
 800e6d0:	f1bb 0f00 	cmp.w	fp, #0
 800e6d4:	f300 8131 	bgt.w	800e93a <atan+0x29a>
 800e6d8:	a59b      	add	r5, pc, #620	; (adr r5, 800e948 <atan+0x2a8>)
 800e6da:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e6de:	ec45 4b10 	vmov	d0, r4, r5
 800e6e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e6:	4bb6      	ldr	r3, [pc, #728]	; (800e9c0 <atan+0x320>)
 800e6e8:	429e      	cmp	r6, r3
 800e6ea:	dc14      	bgt.n	800e716 <atan+0x76>
 800e6ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e6f0:	429e      	cmp	r6, r3
 800e6f2:	dc0d      	bgt.n	800e710 <atan+0x70>
 800e6f4:	a396      	add	r3, pc, #600	; (adr r3, 800e950 <atan+0x2b0>)
 800e6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fa:	ee10 0a10 	vmov	r0, s0
 800e6fe:	4629      	mov	r1, r5
 800e700:	f7f1 fddc 	bl	80002bc <__adddf3>
 800e704:	4baf      	ldr	r3, [pc, #700]	; (800e9c4 <atan+0x324>)
 800e706:	2200      	movs	r2, #0
 800e708:	f7f2 fa1e 	bl	8000b48 <__aeabi_dcmpgt>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d1e6      	bne.n	800e6de <atan+0x3e>
 800e710:	f04f 3aff 	mov.w	sl, #4294967295
 800e714:	e02b      	b.n	800e76e <atan+0xce>
 800e716:	f000 f963 	bl	800e9e0 <fabs>
 800e71a:	4bab      	ldr	r3, [pc, #684]	; (800e9c8 <atan+0x328>)
 800e71c:	429e      	cmp	r6, r3
 800e71e:	ec55 4b10 	vmov	r4, r5, d0
 800e722:	f300 80bf 	bgt.w	800e8a4 <atan+0x204>
 800e726:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e72a:	429e      	cmp	r6, r3
 800e72c:	f300 80a0 	bgt.w	800e870 <atan+0x1d0>
 800e730:	ee10 2a10 	vmov	r2, s0
 800e734:	ee10 0a10 	vmov	r0, s0
 800e738:	462b      	mov	r3, r5
 800e73a:	4629      	mov	r1, r5
 800e73c:	f7f1 fdbe 	bl	80002bc <__adddf3>
 800e740:	4ba0      	ldr	r3, [pc, #640]	; (800e9c4 <atan+0x324>)
 800e742:	2200      	movs	r2, #0
 800e744:	f7f1 fdb8 	bl	80002b8 <__aeabi_dsub>
 800e748:	2200      	movs	r2, #0
 800e74a:	4606      	mov	r6, r0
 800e74c:	460f      	mov	r7, r1
 800e74e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e752:	4620      	mov	r0, r4
 800e754:	4629      	mov	r1, r5
 800e756:	f7f1 fdb1 	bl	80002bc <__adddf3>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f2 f88b 	bl	800087c <__aeabi_ddiv>
 800e766:	f04f 0a00 	mov.w	sl, #0
 800e76a:	4604      	mov	r4, r0
 800e76c:	460d      	mov	r5, r1
 800e76e:	4622      	mov	r2, r4
 800e770:	462b      	mov	r3, r5
 800e772:	4620      	mov	r0, r4
 800e774:	4629      	mov	r1, r5
 800e776:	f7f1 ff57 	bl	8000628 <__aeabi_dmul>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	4680      	mov	r8, r0
 800e780:	4689      	mov	r9, r1
 800e782:	f7f1 ff51 	bl	8000628 <__aeabi_dmul>
 800e786:	a374      	add	r3, pc, #464	; (adr r3, 800e958 <atan+0x2b8>)
 800e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78c:	4606      	mov	r6, r0
 800e78e:	460f      	mov	r7, r1
 800e790:	f7f1 ff4a 	bl	8000628 <__aeabi_dmul>
 800e794:	a372      	add	r3, pc, #456	; (adr r3, 800e960 <atan+0x2c0>)
 800e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79a:	f7f1 fd8f 	bl	80002bc <__adddf3>
 800e79e:	4632      	mov	r2, r6
 800e7a0:	463b      	mov	r3, r7
 800e7a2:	f7f1 ff41 	bl	8000628 <__aeabi_dmul>
 800e7a6:	a370      	add	r3, pc, #448	; (adr r3, 800e968 <atan+0x2c8>)
 800e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ac:	f7f1 fd86 	bl	80002bc <__adddf3>
 800e7b0:	4632      	mov	r2, r6
 800e7b2:	463b      	mov	r3, r7
 800e7b4:	f7f1 ff38 	bl	8000628 <__aeabi_dmul>
 800e7b8:	a36d      	add	r3, pc, #436	; (adr r3, 800e970 <atan+0x2d0>)
 800e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7be:	f7f1 fd7d 	bl	80002bc <__adddf3>
 800e7c2:	4632      	mov	r2, r6
 800e7c4:	463b      	mov	r3, r7
 800e7c6:	f7f1 ff2f 	bl	8000628 <__aeabi_dmul>
 800e7ca:	a36b      	add	r3, pc, #428	; (adr r3, 800e978 <atan+0x2d8>)
 800e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d0:	f7f1 fd74 	bl	80002bc <__adddf3>
 800e7d4:	4632      	mov	r2, r6
 800e7d6:	463b      	mov	r3, r7
 800e7d8:	f7f1 ff26 	bl	8000628 <__aeabi_dmul>
 800e7dc:	a368      	add	r3, pc, #416	; (adr r3, 800e980 <atan+0x2e0>)
 800e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e2:	f7f1 fd6b 	bl	80002bc <__adddf3>
 800e7e6:	4642      	mov	r2, r8
 800e7e8:	464b      	mov	r3, r9
 800e7ea:	f7f1 ff1d 	bl	8000628 <__aeabi_dmul>
 800e7ee:	a366      	add	r3, pc, #408	; (adr r3, 800e988 <atan+0x2e8>)
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	4680      	mov	r8, r0
 800e7f6:	4689      	mov	r9, r1
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	f7f1 ff14 	bl	8000628 <__aeabi_dmul>
 800e800:	a363      	add	r3, pc, #396	; (adr r3, 800e990 <atan+0x2f0>)
 800e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e806:	f7f1 fd57 	bl	80002b8 <__aeabi_dsub>
 800e80a:	4632      	mov	r2, r6
 800e80c:	463b      	mov	r3, r7
 800e80e:	f7f1 ff0b 	bl	8000628 <__aeabi_dmul>
 800e812:	a361      	add	r3, pc, #388	; (adr r3, 800e998 <atan+0x2f8>)
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	f7f1 fd4e 	bl	80002b8 <__aeabi_dsub>
 800e81c:	4632      	mov	r2, r6
 800e81e:	463b      	mov	r3, r7
 800e820:	f7f1 ff02 	bl	8000628 <__aeabi_dmul>
 800e824:	a35e      	add	r3, pc, #376	; (adr r3, 800e9a0 <atan+0x300>)
 800e826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82a:	f7f1 fd45 	bl	80002b8 <__aeabi_dsub>
 800e82e:	4632      	mov	r2, r6
 800e830:	463b      	mov	r3, r7
 800e832:	f7f1 fef9 	bl	8000628 <__aeabi_dmul>
 800e836:	a35c      	add	r3, pc, #368	; (adr r3, 800e9a8 <atan+0x308>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	f7f1 fd3c 	bl	80002b8 <__aeabi_dsub>
 800e840:	4632      	mov	r2, r6
 800e842:	463b      	mov	r3, r7
 800e844:	f7f1 fef0 	bl	8000628 <__aeabi_dmul>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4640      	mov	r0, r8
 800e84e:	4649      	mov	r1, r9
 800e850:	f7f1 fd34 	bl	80002bc <__adddf3>
 800e854:	4622      	mov	r2, r4
 800e856:	462b      	mov	r3, r5
 800e858:	f7f1 fee6 	bl	8000628 <__aeabi_dmul>
 800e85c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e860:	4602      	mov	r2, r0
 800e862:	460b      	mov	r3, r1
 800e864:	d14b      	bne.n	800e8fe <atan+0x25e>
 800e866:	4620      	mov	r0, r4
 800e868:	4629      	mov	r1, r5
 800e86a:	f7f1 fd25 	bl	80002b8 <__aeabi_dsub>
 800e86e:	e72c      	b.n	800e6ca <atan+0x2a>
 800e870:	ee10 0a10 	vmov	r0, s0
 800e874:	4b53      	ldr	r3, [pc, #332]	; (800e9c4 <atan+0x324>)
 800e876:	2200      	movs	r2, #0
 800e878:	4629      	mov	r1, r5
 800e87a:	f7f1 fd1d 	bl	80002b8 <__aeabi_dsub>
 800e87e:	4b51      	ldr	r3, [pc, #324]	; (800e9c4 <atan+0x324>)
 800e880:	4606      	mov	r6, r0
 800e882:	460f      	mov	r7, r1
 800e884:	2200      	movs	r2, #0
 800e886:	4620      	mov	r0, r4
 800e888:	4629      	mov	r1, r5
 800e88a:	f7f1 fd17 	bl	80002bc <__adddf3>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	4630      	mov	r0, r6
 800e894:	4639      	mov	r1, r7
 800e896:	f7f1 fff1 	bl	800087c <__aeabi_ddiv>
 800e89a:	f04f 0a01 	mov.w	sl, #1
 800e89e:	4604      	mov	r4, r0
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	e764      	b.n	800e76e <atan+0xce>
 800e8a4:	4b49      	ldr	r3, [pc, #292]	; (800e9cc <atan+0x32c>)
 800e8a6:	429e      	cmp	r6, r3
 800e8a8:	da1d      	bge.n	800e8e6 <atan+0x246>
 800e8aa:	ee10 0a10 	vmov	r0, s0
 800e8ae:	4b48      	ldr	r3, [pc, #288]	; (800e9d0 <atan+0x330>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	f7f1 fd00 	bl	80002b8 <__aeabi_dsub>
 800e8b8:	4b45      	ldr	r3, [pc, #276]	; (800e9d0 <atan+0x330>)
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	460f      	mov	r7, r1
 800e8be:	2200      	movs	r2, #0
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	f7f1 feb0 	bl	8000628 <__aeabi_dmul>
 800e8c8:	4b3e      	ldr	r3, [pc, #248]	; (800e9c4 <atan+0x324>)
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f7f1 fcf6 	bl	80002bc <__adddf3>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	4639      	mov	r1, r7
 800e8d8:	f7f1 ffd0 	bl	800087c <__aeabi_ddiv>
 800e8dc:	f04f 0a02 	mov.w	sl, #2
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	e743      	b.n	800e76e <atan+0xce>
 800e8e6:	462b      	mov	r3, r5
 800e8e8:	ee10 2a10 	vmov	r2, s0
 800e8ec:	4939      	ldr	r1, [pc, #228]	; (800e9d4 <atan+0x334>)
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	f7f1 ffc4 	bl	800087c <__aeabi_ddiv>
 800e8f4:	f04f 0a03 	mov.w	sl, #3
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	460d      	mov	r5, r1
 800e8fc:	e737      	b.n	800e76e <atan+0xce>
 800e8fe:	4b36      	ldr	r3, [pc, #216]	; (800e9d8 <atan+0x338>)
 800e900:	4e36      	ldr	r6, [pc, #216]	; (800e9dc <atan+0x33c>)
 800e902:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e906:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e90a:	e9da 2300 	ldrd	r2, r3, [sl]
 800e90e:	f7f1 fcd3 	bl	80002b8 <__aeabi_dsub>
 800e912:	4622      	mov	r2, r4
 800e914:	462b      	mov	r3, r5
 800e916:	f7f1 fccf 	bl	80002b8 <__aeabi_dsub>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e922:	f7f1 fcc9 	bl	80002b8 <__aeabi_dsub>
 800e926:	f1bb 0f00 	cmp.w	fp, #0
 800e92a:	4604      	mov	r4, r0
 800e92c:	460d      	mov	r5, r1
 800e92e:	f6bf aed6 	bge.w	800e6de <atan+0x3e>
 800e932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e936:	461d      	mov	r5, r3
 800e938:	e6d1      	b.n	800e6de <atan+0x3e>
 800e93a:	a51d      	add	r5, pc, #116	; (adr r5, 800e9b0 <atan+0x310>)
 800e93c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e940:	e6cd      	b.n	800e6de <atan+0x3e>
 800e942:	bf00      	nop
 800e944:	f3af 8000 	nop.w
 800e948:	54442d18 	.word	0x54442d18
 800e94c:	bff921fb 	.word	0xbff921fb
 800e950:	8800759c 	.word	0x8800759c
 800e954:	7e37e43c 	.word	0x7e37e43c
 800e958:	e322da11 	.word	0xe322da11
 800e95c:	3f90ad3a 	.word	0x3f90ad3a
 800e960:	24760deb 	.word	0x24760deb
 800e964:	3fa97b4b 	.word	0x3fa97b4b
 800e968:	a0d03d51 	.word	0xa0d03d51
 800e96c:	3fb10d66 	.word	0x3fb10d66
 800e970:	c54c206e 	.word	0xc54c206e
 800e974:	3fb745cd 	.word	0x3fb745cd
 800e978:	920083ff 	.word	0x920083ff
 800e97c:	3fc24924 	.word	0x3fc24924
 800e980:	5555550d 	.word	0x5555550d
 800e984:	3fd55555 	.word	0x3fd55555
 800e988:	2c6a6c2f 	.word	0x2c6a6c2f
 800e98c:	bfa2b444 	.word	0xbfa2b444
 800e990:	52defd9a 	.word	0x52defd9a
 800e994:	3fadde2d 	.word	0x3fadde2d
 800e998:	af749a6d 	.word	0xaf749a6d
 800e99c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e9a0:	fe231671 	.word	0xfe231671
 800e9a4:	3fbc71c6 	.word	0x3fbc71c6
 800e9a8:	9998ebc4 	.word	0x9998ebc4
 800e9ac:	3fc99999 	.word	0x3fc99999
 800e9b0:	54442d18 	.word	0x54442d18
 800e9b4:	3ff921fb 	.word	0x3ff921fb
 800e9b8:	440fffff 	.word	0x440fffff
 800e9bc:	7ff00000 	.word	0x7ff00000
 800e9c0:	3fdbffff 	.word	0x3fdbffff
 800e9c4:	3ff00000 	.word	0x3ff00000
 800e9c8:	3ff2ffff 	.word	0x3ff2ffff
 800e9cc:	40038000 	.word	0x40038000
 800e9d0:	3ff80000 	.word	0x3ff80000
 800e9d4:	bff00000 	.word	0xbff00000
 800e9d8:	08010308 	.word	0x08010308
 800e9dc:	080102e8 	.word	0x080102e8

0800e9e0 <fabs>:
 800e9e0:	ec51 0b10 	vmov	r0, r1, d0
 800e9e4:	ee10 2a10 	vmov	r2, s0
 800e9e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e9ec:	ec43 2b10 	vmov	d0, r2, r3
 800e9f0:	4770      	bx	lr

0800e9f2 <atan2>:
 800e9f2:	f000 b82d 	b.w	800ea50 <__ieee754_atan2>

0800e9f6 <sqrt>:
 800e9f6:	b538      	push	{r3, r4, r5, lr}
 800e9f8:	ed2d 8b02 	vpush	{d8}
 800e9fc:	ec55 4b10 	vmov	r4, r5, d0
 800ea00:	f000 f8f0 	bl	800ebe4 <__ieee754_sqrt>
 800ea04:	4622      	mov	r2, r4
 800ea06:	462b      	mov	r3, r5
 800ea08:	4620      	mov	r0, r4
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	eeb0 8a40 	vmov.f32	s16, s0
 800ea10:	eef0 8a60 	vmov.f32	s17, s1
 800ea14:	f7f2 f8a2 	bl	8000b5c <__aeabi_dcmpun>
 800ea18:	b990      	cbnz	r0, 800ea40 <sqrt+0x4a>
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4620      	mov	r0, r4
 800ea20:	4629      	mov	r1, r5
 800ea22:	f7f2 f873 	bl	8000b0c <__aeabi_dcmplt>
 800ea26:	b158      	cbz	r0, 800ea40 <sqrt+0x4a>
 800ea28:	f7fc fa30 	bl	800ae8c <__errno>
 800ea2c:	2321      	movs	r3, #33	; 0x21
 800ea2e:	6003      	str	r3, [r0, #0]
 800ea30:	2200      	movs	r2, #0
 800ea32:	2300      	movs	r3, #0
 800ea34:	4610      	mov	r0, r2
 800ea36:	4619      	mov	r1, r3
 800ea38:	f7f1 ff20 	bl	800087c <__aeabi_ddiv>
 800ea3c:	ec41 0b18 	vmov	d8, r0, r1
 800ea40:	eeb0 0a48 	vmov.f32	s0, s16
 800ea44:	eef0 0a68 	vmov.f32	s1, s17
 800ea48:	ecbd 8b02 	vpop	{d8}
 800ea4c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea50 <__ieee754_atan2>:
 800ea50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea54:	ec57 6b11 	vmov	r6, r7, d1
 800ea58:	4273      	negs	r3, r6
 800ea5a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ebe0 <__ieee754_atan2+0x190>
 800ea5e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ea62:	4333      	orrs	r3, r6
 800ea64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ea68:	4573      	cmp	r3, lr
 800ea6a:	ec51 0b10 	vmov	r0, r1, d0
 800ea6e:	ee11 8a10 	vmov	r8, s2
 800ea72:	d80a      	bhi.n	800ea8a <__ieee754_atan2+0x3a>
 800ea74:	4244      	negs	r4, r0
 800ea76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ea7a:	4304      	orrs	r4, r0
 800ea7c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ea80:	4574      	cmp	r4, lr
 800ea82:	ee10 9a10 	vmov	r9, s0
 800ea86:	468c      	mov	ip, r1
 800ea88:	d907      	bls.n	800ea9a <__ieee754_atan2+0x4a>
 800ea8a:	4632      	mov	r2, r6
 800ea8c:	463b      	mov	r3, r7
 800ea8e:	f7f1 fc15 	bl	80002bc <__adddf3>
 800ea92:	ec41 0b10 	vmov	d0, r0, r1
 800ea96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea9a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ea9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eaa2:	4334      	orrs	r4, r6
 800eaa4:	d103      	bne.n	800eaae <__ieee754_atan2+0x5e>
 800eaa6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaaa:	f7ff bdf9 	b.w	800e6a0 <atan>
 800eaae:	17bc      	asrs	r4, r7, #30
 800eab0:	f004 0402 	and.w	r4, r4, #2
 800eab4:	ea53 0909 	orrs.w	r9, r3, r9
 800eab8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800eabc:	d107      	bne.n	800eace <__ieee754_atan2+0x7e>
 800eabe:	2c02      	cmp	r4, #2
 800eac0:	d060      	beq.n	800eb84 <__ieee754_atan2+0x134>
 800eac2:	2c03      	cmp	r4, #3
 800eac4:	d1e5      	bne.n	800ea92 <__ieee754_atan2+0x42>
 800eac6:	a142      	add	r1, pc, #264	; (adr r1, 800ebd0 <__ieee754_atan2+0x180>)
 800eac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eacc:	e7e1      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eace:	ea52 0808 	orrs.w	r8, r2, r8
 800ead2:	d106      	bne.n	800eae2 <__ieee754_atan2+0x92>
 800ead4:	f1bc 0f00 	cmp.w	ip, #0
 800ead8:	da5f      	bge.n	800eb9a <__ieee754_atan2+0x14a>
 800eada:	a13f      	add	r1, pc, #252	; (adr r1, 800ebd8 <__ieee754_atan2+0x188>)
 800eadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eae0:	e7d7      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eae2:	4572      	cmp	r2, lr
 800eae4:	d10f      	bne.n	800eb06 <__ieee754_atan2+0xb6>
 800eae6:	4293      	cmp	r3, r2
 800eae8:	f104 34ff 	add.w	r4, r4, #4294967295
 800eaec:	d107      	bne.n	800eafe <__ieee754_atan2+0xae>
 800eaee:	2c02      	cmp	r4, #2
 800eaf0:	d84c      	bhi.n	800eb8c <__ieee754_atan2+0x13c>
 800eaf2:	4b35      	ldr	r3, [pc, #212]	; (800ebc8 <__ieee754_atan2+0x178>)
 800eaf4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800eaf8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800eafc:	e7c9      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eafe:	2c02      	cmp	r4, #2
 800eb00:	d848      	bhi.n	800eb94 <__ieee754_atan2+0x144>
 800eb02:	4b32      	ldr	r3, [pc, #200]	; (800ebcc <__ieee754_atan2+0x17c>)
 800eb04:	e7f6      	b.n	800eaf4 <__ieee754_atan2+0xa4>
 800eb06:	4573      	cmp	r3, lr
 800eb08:	d0e4      	beq.n	800ead4 <__ieee754_atan2+0x84>
 800eb0a:	1a9b      	subs	r3, r3, r2
 800eb0c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800eb10:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb14:	da1e      	bge.n	800eb54 <__ieee754_atan2+0x104>
 800eb16:	2f00      	cmp	r7, #0
 800eb18:	da01      	bge.n	800eb1e <__ieee754_atan2+0xce>
 800eb1a:	323c      	adds	r2, #60	; 0x3c
 800eb1c:	db1e      	blt.n	800eb5c <__ieee754_atan2+0x10c>
 800eb1e:	4632      	mov	r2, r6
 800eb20:	463b      	mov	r3, r7
 800eb22:	f7f1 feab 	bl	800087c <__aeabi_ddiv>
 800eb26:	ec41 0b10 	vmov	d0, r0, r1
 800eb2a:	f7ff ff59 	bl	800e9e0 <fabs>
 800eb2e:	f7ff fdb7 	bl	800e6a0 <atan>
 800eb32:	ec51 0b10 	vmov	r0, r1, d0
 800eb36:	2c01      	cmp	r4, #1
 800eb38:	d013      	beq.n	800eb62 <__ieee754_atan2+0x112>
 800eb3a:	2c02      	cmp	r4, #2
 800eb3c:	d015      	beq.n	800eb6a <__ieee754_atan2+0x11a>
 800eb3e:	2c00      	cmp	r4, #0
 800eb40:	d0a7      	beq.n	800ea92 <__ieee754_atan2+0x42>
 800eb42:	a319      	add	r3, pc, #100	; (adr r3, 800eba8 <__ieee754_atan2+0x158>)
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	f7f1 fbb6 	bl	80002b8 <__aeabi_dsub>
 800eb4c:	a318      	add	r3, pc, #96	; (adr r3, 800ebb0 <__ieee754_atan2+0x160>)
 800eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb52:	e014      	b.n	800eb7e <__ieee754_atan2+0x12e>
 800eb54:	a118      	add	r1, pc, #96	; (adr r1, 800ebb8 <__ieee754_atan2+0x168>)
 800eb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb5a:	e7ec      	b.n	800eb36 <__ieee754_atan2+0xe6>
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	2100      	movs	r1, #0
 800eb60:	e7e9      	b.n	800eb36 <__ieee754_atan2+0xe6>
 800eb62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb66:	4619      	mov	r1, r3
 800eb68:	e793      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eb6a:	a30f      	add	r3, pc, #60	; (adr r3, 800eba8 <__ieee754_atan2+0x158>)
 800eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb70:	f7f1 fba2 	bl	80002b8 <__aeabi_dsub>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	a10d      	add	r1, pc, #52	; (adr r1, 800ebb0 <__ieee754_atan2+0x160>)
 800eb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb7e:	f7f1 fb9b 	bl	80002b8 <__aeabi_dsub>
 800eb82:	e786      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eb84:	a10a      	add	r1, pc, #40	; (adr r1, 800ebb0 <__ieee754_atan2+0x160>)
 800eb86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb8a:	e782      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eb8c:	a10c      	add	r1, pc, #48	; (adr r1, 800ebc0 <__ieee754_atan2+0x170>)
 800eb8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb92:	e77e      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eb94:	2000      	movs	r0, #0
 800eb96:	2100      	movs	r1, #0
 800eb98:	e77b      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eb9a:	a107      	add	r1, pc, #28	; (adr r1, 800ebb8 <__ieee754_atan2+0x168>)
 800eb9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eba0:	e777      	b.n	800ea92 <__ieee754_atan2+0x42>
 800eba2:	bf00      	nop
 800eba4:	f3af 8000 	nop.w
 800eba8:	33145c07 	.word	0x33145c07
 800ebac:	3ca1a626 	.word	0x3ca1a626
 800ebb0:	54442d18 	.word	0x54442d18
 800ebb4:	400921fb 	.word	0x400921fb
 800ebb8:	54442d18 	.word	0x54442d18
 800ebbc:	3ff921fb 	.word	0x3ff921fb
 800ebc0:	54442d18 	.word	0x54442d18
 800ebc4:	3fe921fb 	.word	0x3fe921fb
 800ebc8:	08010328 	.word	0x08010328
 800ebcc:	08010340 	.word	0x08010340
 800ebd0:	54442d18 	.word	0x54442d18
 800ebd4:	c00921fb 	.word	0xc00921fb
 800ebd8:	54442d18 	.word	0x54442d18
 800ebdc:	bff921fb 	.word	0xbff921fb
 800ebe0:	7ff00000 	.word	0x7ff00000

0800ebe4 <__ieee754_sqrt>:
 800ebe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe8:	ec55 4b10 	vmov	r4, r5, d0
 800ebec:	4e55      	ldr	r6, [pc, #340]	; (800ed44 <__ieee754_sqrt+0x160>)
 800ebee:	43ae      	bics	r6, r5
 800ebf0:	ee10 0a10 	vmov	r0, s0
 800ebf4:	ee10 3a10 	vmov	r3, s0
 800ebf8:	462a      	mov	r2, r5
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	d110      	bne.n	800ec20 <__ieee754_sqrt+0x3c>
 800ebfe:	ee10 2a10 	vmov	r2, s0
 800ec02:	462b      	mov	r3, r5
 800ec04:	f7f1 fd10 	bl	8000628 <__aeabi_dmul>
 800ec08:	4602      	mov	r2, r0
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f7f1 fb54 	bl	80002bc <__adddf3>
 800ec14:	4604      	mov	r4, r0
 800ec16:	460d      	mov	r5, r1
 800ec18:	ec45 4b10 	vmov	d0, r4, r5
 800ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec20:	2d00      	cmp	r5, #0
 800ec22:	dc10      	bgt.n	800ec46 <__ieee754_sqrt+0x62>
 800ec24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec28:	4330      	orrs	r0, r6
 800ec2a:	d0f5      	beq.n	800ec18 <__ieee754_sqrt+0x34>
 800ec2c:	b15d      	cbz	r5, 800ec46 <__ieee754_sqrt+0x62>
 800ec2e:	ee10 2a10 	vmov	r2, s0
 800ec32:	462b      	mov	r3, r5
 800ec34:	ee10 0a10 	vmov	r0, s0
 800ec38:	f7f1 fb3e 	bl	80002b8 <__aeabi_dsub>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	f7f1 fe1c 	bl	800087c <__aeabi_ddiv>
 800ec44:	e7e6      	b.n	800ec14 <__ieee754_sqrt+0x30>
 800ec46:	1512      	asrs	r2, r2, #20
 800ec48:	d074      	beq.n	800ed34 <__ieee754_sqrt+0x150>
 800ec4a:	07d4      	lsls	r4, r2, #31
 800ec4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ec50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ec54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ec58:	bf5e      	ittt	pl
 800ec5a:	0fda      	lsrpl	r2, r3, #31
 800ec5c:	005b      	lslpl	r3, r3, #1
 800ec5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ec62:	2400      	movs	r4, #0
 800ec64:	0fda      	lsrs	r2, r3, #31
 800ec66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ec6a:	107f      	asrs	r7, r7, #1
 800ec6c:	005b      	lsls	r3, r3, #1
 800ec6e:	2516      	movs	r5, #22
 800ec70:	4620      	mov	r0, r4
 800ec72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ec76:	1886      	adds	r6, r0, r2
 800ec78:	428e      	cmp	r6, r1
 800ec7a:	bfde      	ittt	le
 800ec7c:	1b89      	suble	r1, r1, r6
 800ec7e:	18b0      	addle	r0, r6, r2
 800ec80:	18a4      	addle	r4, r4, r2
 800ec82:	0049      	lsls	r1, r1, #1
 800ec84:	3d01      	subs	r5, #1
 800ec86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ec8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ec8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec92:	d1f0      	bne.n	800ec76 <__ieee754_sqrt+0x92>
 800ec94:	462a      	mov	r2, r5
 800ec96:	f04f 0e20 	mov.w	lr, #32
 800ec9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ec9e:	4281      	cmp	r1, r0
 800eca0:	eb06 0c05 	add.w	ip, r6, r5
 800eca4:	dc02      	bgt.n	800ecac <__ieee754_sqrt+0xc8>
 800eca6:	d113      	bne.n	800ecd0 <__ieee754_sqrt+0xec>
 800eca8:	459c      	cmp	ip, r3
 800ecaa:	d811      	bhi.n	800ecd0 <__ieee754_sqrt+0xec>
 800ecac:	f1bc 0f00 	cmp.w	ip, #0
 800ecb0:	eb0c 0506 	add.w	r5, ip, r6
 800ecb4:	da43      	bge.n	800ed3e <__ieee754_sqrt+0x15a>
 800ecb6:	2d00      	cmp	r5, #0
 800ecb8:	db41      	blt.n	800ed3e <__ieee754_sqrt+0x15a>
 800ecba:	f100 0801 	add.w	r8, r0, #1
 800ecbe:	1a09      	subs	r1, r1, r0
 800ecc0:	459c      	cmp	ip, r3
 800ecc2:	bf88      	it	hi
 800ecc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ecc8:	eba3 030c 	sub.w	r3, r3, ip
 800eccc:	4432      	add	r2, r6
 800ecce:	4640      	mov	r0, r8
 800ecd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ecd4:	f1be 0e01 	subs.w	lr, lr, #1
 800ecd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ecdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ece0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ece4:	d1db      	bne.n	800ec9e <__ieee754_sqrt+0xba>
 800ece6:	430b      	orrs	r3, r1
 800ece8:	d006      	beq.n	800ecf8 <__ieee754_sqrt+0x114>
 800ecea:	1c50      	adds	r0, r2, #1
 800ecec:	bf13      	iteet	ne
 800ecee:	3201      	addne	r2, #1
 800ecf0:	3401      	addeq	r4, #1
 800ecf2:	4672      	moveq	r2, lr
 800ecf4:	f022 0201 	bicne.w	r2, r2, #1
 800ecf8:	1063      	asrs	r3, r4, #1
 800ecfa:	0852      	lsrs	r2, r2, #1
 800ecfc:	07e1      	lsls	r1, r4, #31
 800ecfe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ed02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ed06:	bf48      	it	mi
 800ed08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ed0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ed10:	4614      	mov	r4, r2
 800ed12:	e781      	b.n	800ec18 <__ieee754_sqrt+0x34>
 800ed14:	0ad9      	lsrs	r1, r3, #11
 800ed16:	3815      	subs	r0, #21
 800ed18:	055b      	lsls	r3, r3, #21
 800ed1a:	2900      	cmp	r1, #0
 800ed1c:	d0fa      	beq.n	800ed14 <__ieee754_sqrt+0x130>
 800ed1e:	02cd      	lsls	r5, r1, #11
 800ed20:	d50a      	bpl.n	800ed38 <__ieee754_sqrt+0x154>
 800ed22:	f1c2 0420 	rsb	r4, r2, #32
 800ed26:	fa23 f404 	lsr.w	r4, r3, r4
 800ed2a:	1e55      	subs	r5, r2, #1
 800ed2c:	4093      	lsls	r3, r2
 800ed2e:	4321      	orrs	r1, r4
 800ed30:	1b42      	subs	r2, r0, r5
 800ed32:	e78a      	b.n	800ec4a <__ieee754_sqrt+0x66>
 800ed34:	4610      	mov	r0, r2
 800ed36:	e7f0      	b.n	800ed1a <__ieee754_sqrt+0x136>
 800ed38:	0049      	lsls	r1, r1, #1
 800ed3a:	3201      	adds	r2, #1
 800ed3c:	e7ef      	b.n	800ed1e <__ieee754_sqrt+0x13a>
 800ed3e:	4680      	mov	r8, r0
 800ed40:	e7bd      	b.n	800ecbe <__ieee754_sqrt+0xda>
 800ed42:	bf00      	nop
 800ed44:	7ff00000 	.word	0x7ff00000

0800ed48 <_init>:
 800ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4a:	bf00      	nop
 800ed4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed4e:	bc08      	pop	{r3}
 800ed50:	469e      	mov	lr, r3
 800ed52:	4770      	bx	lr

0800ed54 <_fini>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	bf00      	nop
 800ed58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5a:	bc08      	pop	{r3}
 800ed5c:	469e      	mov	lr, r3
 800ed5e:	4770      	bx	lr
