
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  0800cd48  0800cd48  0001cd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c0  0800d9c0  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9c8  0800d9c8  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9c8  0800d9c8  0001d9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9cc  0800d9cc  0001d9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800d9d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000274  0800dc44  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800dc44  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ef6  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f20  00000000  00000000  0003a19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b813  00000000  00000000  00040b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef43  00000000  00000000  0005c343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b2c0  00000000  00000000  0007b286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116546  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070f8  00000000  00000000  00116598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000274 	.word	0x20000274
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd30 	.word	0x0800cd30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000278 	.word	0x20000278
 80001dc:	0800cd30 	.word	0x0800cd30

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f007 ffeb 	bl	8008ee8 <memset>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7992      	ldrb	r2, [r2, #6]
 8000f2e:	4413      	add	r3, r2
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f000 f89a 	bl	80010b8 <cBuffer_Length>
 8000f84:	4603      	mov	r3, r0
 8000f86:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e012      	b.n	8000fb4 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 8000f8e:	f107 0212 	add.w	r2, r7, #18
 8000f92:	f107 0311 	add.w	r3, r7, #17
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f863 	bl	8001064 <cBuffer_Peek>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	2b0d      	cmp	r3, #13
 8000fa6:	d102      	bne.n	8000fae <cBuffer_GetString+0x4e>
		{
			found = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75bb      	strb	r3, [r7, #22]
			break;
 8000fac:	e006      	b.n	8000fbc <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3e8      	bcc.n	8000f8e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	7cba      	ldrb	r2, [r7, #18]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f88d 	bl	80010ea <cBuffer_LengthCustom>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 8000fd8:	f107 0313 	add.w	r3, r7, #19
 8000fdc:	4619      	mov	r1, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f817 	bl	8001012 <cBuffer_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 8000fe8:	7cfa      	ldrb	r2, [r7, #19]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			string++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 8000ff4:	7cfb      	ldrb	r3, [r7, #19]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d1ed      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ea      	bne.n	8000fd8 <cBuffer_GetString+0x78>
 8001002:	e001      	b.n	8001008 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 8001004:	2303      	movs	r3, #3
 8001006:	757b      	strb	r3, [r7, #21]


	return err;
 8001008:	7d7b      	ldrb	r3, [r7, #21]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f84b 	bl	80010b8 <cBuffer_Length>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001028:	2302      	movs	r3, #2
 800102a:	e017      	b.n	800105c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7952      	ldrb	r2, [r2, #5]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f821 	bl	80010b8 <cBuffer_Length>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800107c:	2302      	movs	r3, #2
 800107e:	e017      	b.n	80010b0 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	b2db      	uxtb	r3, r3

}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	b25b      	sxtb	r3, r3
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800112a:	2120      	movs	r1, #32
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f008 fcce 	bl	8009ace <strchr>
 8001132:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <ConsoleCommandMatch+0x32>
	{
			r =  strcmp(name,buffer) == 0;
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f84f 	bl	80001e0 <strcmp>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e00f      	b.n	8001172 <ConsoleCommandMatch+0x52>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff f84e 	bl	80001f4 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f008 fcca 	bl	8009af8 <strncmp>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60fb      	str	r3, [r7, #12]
	}

	return r;
 8001172:	68fb      	ldr	r3, [r7, #12]

}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001182:	f000 fd11 	bl	8001ba8 <ConsoleIoInit>
	ConsoleIoSendString("Dodec Timer - A Thousand Projects");
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <ConsoleInit+0x44>)
 8001188:	f000 fd46 	bl	8001c18 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <ConsoleInit+0x48>)
 800118e:	f000 fd43 	bl	8001c18 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <ConsoleInit+0x4c>)
 8001194:	f000 fd40 	bl	8001c18 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e007      	b.n	80011ae <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <ConsoleInit+0x50>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b63      	cmp	r3, #99	; 0x63
 80011b2:	d9f4      	bls.n	800119e <ConsoleInit+0x22>
	}

}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800cd48 	.word	0x0800cd48
 80011c4:	0800cd6c 	.word	0x0800cd6c
 80011c8:	0800cd70 	.word	0x0800cd70
 80011cc:	20000290 	.word	0x20000290

080011d0 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <ConsolePrintPrompt+0x14>)
 80011d6:	f000 fd1f 	bl	8001c18 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <ConsolePrintPrompt+0x18>)
 80011dc:	f000 fd1c 	bl	8001c18 <ConsoleIoSendString>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800cd6c 	.word	0x0800cd6c
 80011e8:	0800cd70 	.word	0x0800cd70

080011ec <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 80011f2:	4843      	ldr	r0, [pc, #268]	; (8001300 <ConsoleProcess+0x114>)
 80011f4:	f000 fcf0 	bl	8001bd8 <ConsoleIoReceive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d07a      	beq.n	80012f8 <ConsoleProcess+0x10c>
 8001202:	2b03      	cmp	r3, #3
 8001204:	dc79      	bgt.n	80012fa <ConsoleProcess+0x10e>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <ConsoleProcess+0x28>
 800120a:	2b00      	cmp	r3, #0
 800120c:	db75      	blt.n	80012fa <ConsoleProcess+0x10e>
 800120e:	3b01      	subs	r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	e072      	b.n	80012fa <ConsoleProcess+0x10e>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <ConsoleProcess+0x114>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 800121c:	4839      	ldr	r0, [pc, #228]	; (8001304 <ConsoleProcess+0x118>)
 800121e:	f000 fcfb 	bl	8001c18 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001222:	4839      	ldr	r0, [pc, #228]	; (8001308 <ConsoleProcess+0x11c>)
 8001224:	f000 fcf8 	bl	8001c18 <ConsoleIoSendString>
				return;
 8001228:	e067      	b.n	80012fa <ConsoleProcess+0x10e>
			}
			commandTable = ConsoleCommandsGetTable();
 800122a:	f000 fc95 	bl	8001b58 <ConsoleCommandsGetTable>
 800122e:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800123a:	e03d      	b.n	80012b8 <ConsoleProcess+0xcc>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	492c      	ldr	r1, [pc, #176]	; (8001300 <ConsoleProcess+0x114>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff65 	bl	8001120 <ConsoleCommandMatch>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d02a      	beq.n	80012b2 <ConsoleProcess+0xc6>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4824      	ldr	r0, [pc, #144]	; (8001300 <ConsoleProcess+0x114>)
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d017      	beq.n	80012ac <ConsoleProcess+0xc0>
					{
						ConsoleIoSendString("Error: ");
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <ConsoleProcess+0x120>)
 800127e:	f000 fccb 	bl	8001c18 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <ConsoleProcess+0x114>)
 8001284:	f000 fcc8 	bl	8001c18 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <ConsoleProcess+0x124>)
 800128a:	f000 fcc5 	bl	8001c18 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	461a      	mov	r2, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	3308      	adds	r3, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fcb9 	bl	8001c18 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <ConsoleProcess+0x118>)
 80012a8:	f000 fcb6 	bl	8001c18 <ConsoleIoSendString>
					}
					found = cmdIndex;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	e002      	b.n	80012b8 <ConsoleProcess+0xcc>
				}
				else
				{
					cmdIndex++;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <ConsoleProcess+0xea>
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d0b2      	beq.n	800123c <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d105      	bne.n	80012ea <ConsoleProcess+0xfe>
			{
				ConsoleIoSendString("Command not found: ");
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <ConsoleProcess+0x128>)
 80012e0:	f000 fc9a 	bl	8001c18 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <ConsoleProcess+0x114>)
 80012e6:	f000 fc97 	bl	8001c18 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <ConsoleProcess+0x118>)
 80012ec:	f000 fc94 	bl	8001c18 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <ConsoleProcess+0x11c>)
 80012f2:	f000 fc91 	bl	8001c18 <ConsoleIoSendString>

			break;
 80012f6:	e000      	b.n	80012fa <ConsoleProcess+0x10e>
		case CONSOLE_BUFFER_FULL:

		break;
 80012f8:	bf00      	nop
	}

}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000290 	.word	0x20000290
 8001304:	0800cd6c 	.word	0x0800cd6c
 8001308:	0800cd70 	.word	0x0800cd70
 800130c:	0800cd74 	.word	0x0800cd74
 8001310:	0800cd7c 	.word	0x0800cd7c
 8001314:	0800cd84 	.word	0x0800cd84

08001318 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	460b      	mov	r3, r1
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001332:	e00b      	b.n	800134c <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b20      	cmp	r3, #32
 800133e:	d102      	bne.n	8001346 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	3301      	adds	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	429a      	cmp	r2, r3
 8001352:	d002      	beq.n	800135a <ConsoleParamFindN+0x42>
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b63      	cmp	r3, #99	; 0x63
 8001358:	d9ec      	bls.n	8001334 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d102      	bne.n	8001366 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001360:	2310      	movs	r3, #16
 8001362:	75fb      	strb	r3, [r7, #23]
 8001364:	e002      	b.n	800136c <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	601a      	str	r2, [r3, #0]
	}
	return result;
 800136c:	7dfb      	ldrb	r3, [r7, #23]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b08a      	sub	sp, #40	; 0x28
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	460b      	mov	r3, r1
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800138c:	f107 021c 	add.w	r2, r7, #28
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	4619      	mov	r1, r3
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff ffbf 	bl	8001318 <ConsoleParamFindN>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	4413      	add	r3, r2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 80013b4:	e011      	b.n	80013da <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80013b6:	f107 0214 	add.w	r2, r7, #20
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	4413      	add	r3, r2
 80013be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013c2:	701a      	strb	r2, [r3, #0]
		i++;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	4413      	add	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 80013da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 80013e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d002      	beq.n	80013f0 <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d9e2      	bls.n	80013b6 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d102      	bne.n	80013fc <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 80013f6:	2310      	movs	r3, #16
 80013f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80013fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11a      	bne.n	800143a <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001404:	f107 0214 	add.w	r2, r7, #20
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f001 f82b 	bl	8002470 <isNumber>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f007 fd21 	bl	8008e6c <atoi>
 800142a:	4603      	mov	r3, r0
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	e002      	b.n	800143a <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8001434:	2310      	movs	r3, #16
 8001436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}


	return result;
 800143a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800143e:	4618      	mov	r0, r3
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fbe2 	bl	8001c18 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fbd5 	bl	8001c18 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <ConsoleSendLine+0x20>)
 8001470:	f000 fbd2 	bl	8001c18 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800cd6c 	.word	0x0800cd6c

08001484 <ConsoleCommandMemTest>:
	{"mem?", &ConsoleCommandMemTest, HELP("Test the SPI memory")},
	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandMemTest(const char buffer[])
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b09b      	sub	sp, #108	; 0x6c
 8001488:	af06      	add	r7, sp, #24
 800148a:	6078      	str	r0, [r7, #4]
	char msg[50];
	uint32_t Temp = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t temp0 = 0, temp1 = 0, temp2 = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	74fb      	strb	r3, [r7, #19]
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t reg = 0x4B;
 80014a0:	234b      	movs	r3, #75	; 0x4b
 80014a2:	74bb      	strb	r3, [r7, #18]
	uint8_t id[8];
	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2110      	movs	r1, #16
 80014a8:	4838      	ldr	r0, [pc, #224]	; (800158c <ConsoleCommandMemTest+0x108>)
 80014aa:	f003 f843 	bl	8004534 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, &reg, &temp0, 1, 100);
 80014ae:	f107 0213 	add.w	r2, r7, #19
 80014b2:	f107 0112 	add.w	r1, r7, #18
 80014b6:	2364      	movs	r3, #100	; 0x64
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	4834      	ldr	r0, [pc, #208]	; (8001590 <ConsoleCommandMemTest+0x10c>)
 80014be:	f005 f8e2 	bl	8006686 <HAL_SPI_TransmitReceive>
	for (uint8_t i = 0; i < 4; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80014c8:	e00e      	b.n	80014e8 <ConsoleCommandMemTest+0x64>
		HAL_SPI_TransmitReceive(&hspi1, &reg, &temp0, 1, 100);
 80014ca:	f107 0213 	add.w	r2, r7, #19
 80014ce:	f107 0112 	add.w	r1, r7, #18
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	482d      	ldr	r0, [pc, #180]	; (8001590 <ConsoleCommandMemTest+0x10c>)
 80014da:	f005 f8d4 	bl	8006686 <HAL_SPI_TransmitReceive>
	for (uint8_t i = 0; i < 4; i++)
 80014de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014e2:	3301      	adds	r3, #1
 80014e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80014e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d9ec      	bls.n	80014ca <ConsoleCommandMemTest+0x46>

	for (uint8_t i = 0; i < 8; i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80014f6:	e011      	b.n	800151c <ConsoleCommandMemTest+0x98>
		HAL_SPI_TransmitReceive(&hspi1, &reg, &id[i], 1, 100);
 80014f8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014fc:	f107 0208 	add.w	r2, r7, #8
 8001500:	441a      	add	r2, r3
 8001502:	f107 0112 	add.w	r1, r7, #18
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	4820      	ldr	r0, [pc, #128]	; (8001590 <ConsoleCommandMemTest+0x10c>)
 800150e:	f005 f8ba 	bl	8006686 <HAL_SPI_TransmitReceive>
	for (uint8_t i = 0; i < 8; i++)
 8001512:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001516:	3301      	adds	r3, #1
 8001518:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800151c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001520:	2b07      	cmp	r3, #7
 8001522:	d9e9      	bls.n	80014f8 <ConsoleCommandMemTest+0x74>


	HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <ConsoleCommandMemTest+0x108>)
 800152a:	f003 f803 	bl	8004534 <HAL_GPIO_WritePin>
	Temp = (temp0 << 16) | (temp1 << 8) | temp2;
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	431a      	orrs	r2, r3
 800153a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800153e:	4313      	orrs	r3, r2
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
	sprintf(msg,"Flash Mem Id \t%#02x %#02x %#02x %#02x %#02x %#02x %#02x %#02x ",id[0],id[1],id[2],id[3],id[4],id[5],id[6],id[7]);
 8001542:	7a3b      	ldrb	r3, [r7, #8]
 8001544:	469c      	mov	ip, r3
 8001546:	7a7b      	ldrb	r3, [r7, #9]
 8001548:	469e      	mov	lr, r3
 800154a:	7abb      	ldrb	r3, [r7, #10]
 800154c:	7afa      	ldrb	r2, [r7, #11]
 800154e:	7b39      	ldrb	r1, [r7, #12]
 8001550:	7b78      	ldrb	r0, [r7, #13]
 8001552:	4604      	mov	r4, r0
 8001554:	7bb8      	ldrb	r0, [r7, #14]
 8001556:	4605      	mov	r5, r0
 8001558:	7bf8      	ldrb	r0, [r7, #15]
 800155a:	4606      	mov	r6, r0
 800155c:	f107 0014 	add.w	r0, r7, #20
 8001560:	9605      	str	r6, [sp, #20]
 8001562:	9504      	str	r5, [sp, #16]
 8001564:	9403      	str	r4, [sp, #12]
 8001566:	9102      	str	r1, [sp, #8]
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4673      	mov	r3, lr
 800156e:	4662      	mov	r2, ip
 8001570:	4908      	ldr	r1, [pc, #32]	; (8001594 <ConsoleCommandMemTest+0x110>)
 8001572:	f008 fa1b 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff70 	bl	8001460 <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3754      	adds	r7, #84	; 0x54
 8001586:	46bd      	mov	sp, r7
 8001588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158a:	bf00      	nop
 800158c:	40020000 	.word	0x40020000
 8001590:	200003bc 	.word	0x200003bc
 8001594:	0800cdf0 	.word	0x0800cdf0

08001598 <ConsoleCommandCPUQuery>:

static eCommandResult_T ConsoleCommandCPUQuery(const char buffer[])
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

	char msg[30];
	register int SP __asm("r13");


	sprintf(msg,"-- CPU Details --");
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4937      	ldr	r1, [pc, #220]	; (8001684 <ConsoleCommandCPUQuery+0xec>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f008 fa00 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff55 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Stack Pointer \t\t%#08x",SP);
 80015b6:	466a      	mov	r2, sp
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4932      	ldr	r1, [pc, #200]	; (8001688 <ConsoleCommandCPUQuery+0xf0>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f008 f9f4 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff49 	bl	8001460 <ConsoleSendLine>

	unsigned int* HP = malloc(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f007 fc7a 	bl	8008ec8 <malloc>
 80015d4:	4603      	mov	r3, r0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	*HP=0xAB;
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	22ab      	movs	r2, #171	; 0xab
 80015dc:	601a      	str	r2, [r3, #0]

	sprintf(msg,"Heap Pointer \t\t%#08x",(unsigned int)HP-1);
 80015de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4929      	ldr	r1, [pc, #164]	; (800168c <ConsoleCommandCPUQuery+0xf4>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 f9df 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff34 	bl	8001460 <ConsoleSendLine>
	free(HP);
 80015f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015fa:	f007 fc6d 	bl	8008ed8 <free>

	sprintf(msg,"Initialised global variable \t\t%#08x",(unsigned int)(&initGlobalVar));
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <ConsoleCommandCPUQuery+0xf8>)
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4923      	ldr	r1, [pc, #140]	; (8001694 <ConsoleCommandCPUQuery+0xfc>)
 8001606:	4618      	mov	r0, r3
 8001608:	f008 f9d0 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff25 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Un-initialised global variable \t\t%#08x",(unsigned int)&uninitGlobalVar);
 8001616:	4a20      	ldr	r2, [pc, #128]	; (8001698 <ConsoleCommandCPUQuery+0x100>)
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	491f      	ldr	r1, [pc, #124]	; (800169c <ConsoleCommandCPUQuery+0x104>)
 800161e:	4618      	mov	r0, r3
 8001620:	f008 f9c4 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff19 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Const variable \t\t%#08x",(unsigned int)&constVar);
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <ConsoleCommandCPUQuery+0x108>)
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	491b      	ldr	r1, [pc, #108]	; (80016a4 <ConsoleCommandCPUQuery+0x10c>)
 8001636:	4618      	mov	r0, r3
 8001638:	f008 f9b8 	bl	80099ac <siprintf>
		ConsoleSendLine(msg);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff0d 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Static variable \t\t%#08x",(unsigned int)&staticVar);
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <ConsoleCommandCPUQuery+0x110>)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4917      	ldr	r1, [pc, #92]	; (80016ac <ConsoleCommandCPUQuery+0x114>)
 800164e:	4618      	mov	r0, r3
 8001650:	f008 f9ac 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff01 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Function variable \t\t%#08x",(unsigned int)&funcVar);
 800165e:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4912      	ldr	r1, [pc, #72]	; (80016b0 <ConsoleCommandCPUQuery+0x118>)
 8001668:	4618      	mov	r0, r3
 800166a:	f008 f99f 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fef4 	bl	8001460 <ConsoleSendLine>

	return CONSOLE_SUCCESS;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	0800ce30 	.word	0x0800ce30
 8001688:	0800ce44 	.word	0x0800ce44
 800168c:	0800ce5c 	.word	0x0800ce5c
 8001690:	20000000 	.word	0x20000000
 8001694:	0800ce74 	.word	0x0800ce74
 8001698:	200002f4 	.word	0x200002f4
 800169c:	0800ce98 	.word	0x0800ce98
 80016a0:	0800d190 	.word	0x0800d190
 80016a4:	0800cec0 	.word	0x0800cec0
 80016a8:	200002f5 	.word	0x200002f5
 80016ac:	0800ced8 	.word	0x0800ced8
 80016b0:	0800cef0 	.word	0x0800cef0

080016b4 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	461a      	mov	r2, r3
 80016c2:	2101      	movs	r1, #1
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fe27 	bl	8001318 <ConsoleParamFindN>
 80016ca:	4603      	mov	r3, r0
 80016cc:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 80016d4:	2310      	movs	r3, #16
 80016d6:	e049      	b.n	800176c <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	18d0      	adds	r0, r2, r3
 80016de:	f107 0114 	add.w	r1, r7, #20
 80016e2:	f107 0218 	add.w	r2, r7, #24
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	460b      	mov	r3, r1
 80016ee:	4921      	ldr	r1, [pc, #132]	; (8001774 <ConsoleCommandDateSet+0xc0>)
 80016f0:	f008 f97c 	bl	80099ec <siscanf>

	if (!IS_RTC_DATE(day) )
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <ConsoleCommandDateSet+0x4c>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b1f      	cmp	r3, #31
 80016fe:	d904      	bls.n	800170a <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8001700:	481d      	ldr	r0, [pc, #116]	; (8001778 <ConsoleCommandDateSet+0xc4>)
 8001702:	f7ff fead 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001706:	2310      	movs	r3, #16
 8001708:	e030      	b.n	800176c <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <ConsoleCommandDateSet+0x62>
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d904      	bls.n	8001720 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001716:	4819      	ldr	r0, [pc, #100]	; (800177c <ConsoleCommandDateSet+0xc8>)
 8001718:	f7ff fea2 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 800171c:	2310      	movs	r3, #16
 800171e:	e025      	b.n	800176c <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b63      	cmp	r3, #99	; 0x63
 8001724:	d904      	bls.n	8001730 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001726:	4816      	ldr	r0, [pc, #88]	; (8001780 <ConsoleCommandDateSet+0xcc>)
 8001728:	f7ff fe9a 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 800172c:	2310      	movs	r3, #16
 800172e:	e01d      	b.n	800176c <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001742:	2307      	movs	r3, #7
 8001744:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <ConsoleCommandDateSet+0xd0>)
 8001750:	f004 fd80 	bl	8006254 <HAL_RTC_SetDate>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 800175a:	480b      	ldr	r0, [pc, #44]	; (8001788 <ConsoleCommandDateSet+0xd4>)
 800175c:	f7ff fe80 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001760:	2310      	movs	r3, #16
 8001762:	e003      	b.n	800176c <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <ConsoleCommandDateSet+0xd8>)
 8001766:	f7ff fe7b 	bl	8001460 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 800176a:	2300      	movs	r3, #0
	}
}
 800176c:	4618      	mov	r0, r3
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0800cf0c 	.word	0x0800cf0c
 8001778:	0800cf18 	.word	0x0800cf18
 800177c:	0800cf3c 	.word	0x0800cf3c
 8001780:	0800cf60 	.word	0x0800cf60
 8001784:	2000039c 	.word	0x2000039c
 8001788:	0800cf84 	.word	0x0800cf84
 800178c:	0800cfa8 	.word	0x0800cfa8

08001790 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af02      	add	r7, sp, #8
 8001796:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	461a      	mov	r2, r3
 800179e:	2101      	movs	r1, #1
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fdb9 	bl	8001318 <ConsoleParamFindN>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 80017ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 80017b4:	2310      	movs	r3, #16
 80017b6:	e041      	b.n	800183c <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	18d0      	adds	r0, r2, r3
 80017be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80017c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80017c6:	f107 0320 	add.w	r3, r7, #32
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	460b      	mov	r3, r1
 80017ce:	491d      	ldr	r1, [pc, #116]	; (8001844 <ConsoleCommandTimeSet+0xb4>)
 80017d0:	f008 f90c 	bl	80099ec <siscanf>

	if (!IS_RTC_MINUTES(min) )
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	2b3b      	cmp	r3, #59	; 0x3b
 80017d8:	d904      	bls.n	80017e4 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 80017da:	481b      	ldr	r0, [pc, #108]	; (8001848 <ConsoleCommandTimeSet+0xb8>)
 80017dc:	f7ff fe40 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80017e0:	2310      	movs	r3, #16
 80017e2:	e02b      	b.n	800183c <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2b3b      	cmp	r3, #59	; 0x3b
 80017e8:	d904      	bls.n	80017f4 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 80017ea:	4818      	ldr	r0, [pc, #96]	; (800184c <ConsoleCommandTimeSet+0xbc>)
 80017ec:	f7ff fe38 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 80017f0:	2310      	movs	r3, #16
 80017f2:	e023      	b.n	800183c <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	2b17      	cmp	r3, #23
 80017f8:	d904      	bls.n	8001804 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 80017fa:	4815      	ldr	r0, [pc, #84]	; (8001850 <ConsoleCommandTimeSet+0xc0>)
 80017fc:	f7ff fe30 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001800:	2310      	movs	r3, #16
 8001802:	e01b      	b.n	800183c <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	b2db      	uxtb	r3, r3
 8001808:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	b2db      	uxtb	r3, r3
 800180e:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <ConsoleCommandTimeSet+0xc4>)
 8001820:	f004 fc20 	bl	8006064 <HAL_RTC_SetTime>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <ConsoleCommandTimeSet+0xc8>)
 800182c:	f7ff fe18 	bl	8001460 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001830:	2310      	movs	r3, #16
 8001832:	e003      	b.n	800183c <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <ConsoleCommandTimeSet+0xcc>)
 8001836:	f7ff fe13 	bl	8001460 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 800183a:	2300      	movs	r3, #0
	}
}
 800183c:	4618      	mov	r0, r3
 800183e:	3730      	adds	r7, #48	; 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800cfb4 	.word	0x0800cfb4
 8001848:	0800cfc0 	.word	0x0800cfc0
 800184c:	0800cfe4 	.word	0x0800cfe4
 8001850:	0800d00c 	.word	0x0800d00c
 8001854:	2000039c 	.word	0x2000039c
 8001858:	0800d030 	.word	0x0800d030
 800185c:	0800d054 	.word	0x0800d054

08001860 <ConsoleCommandLedToggle>:


static eCommandResult_T ConsoleCommandLedToggle(const char buffer[])
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
	int16_t parameterInt;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	461a      	mov	r2, r3
 800186e:	2101      	movs	r1, #1
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fd82 	bl	800137a <ConsoleReceiveParamInt16>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	if (result == COMMAND_PARAMETER_ERROR)
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d101      	bne.n	8001884 <ConsoleCommandLedToggle+0x24>
			return result;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	e011      	b.n	80018a8 <ConsoleCommandLedToggle+0x48>
	if (0 == parameterInt )
 8001884:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d106      	bne.n	800189a <ConsoleCommandLedToggle+0x3a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <ConsoleCommandLedToggle+0x50>)
 8001894:	f002 fe4e 	bl	8004534 <HAL_GPIO_WritePin>
 8001898:	e005      	b.n	80018a6 <ConsoleCommandLedToggle+0x46>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <ConsoleCommandLedToggle+0x50>)
 80018a2:	f002 fe47 	bl	8004534 <HAL_GPIO_WritePin>

	return COMMAND_SUCCESS;
 80018a6:	2300      	movs	r3, #0

}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40020800 	.word	0x40020800

080018b4 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	; 0x40
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 80018bc:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fdf2 	bl	80024aa <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 80018c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fdfa 	bl	80024c4 <lc709203_getCellTemp>
	lc709203_getId(&version);
 80018d0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fe02 	bl	80024de <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4922      	ldr	r1, [pc, #136]	; (8001968 <ConsoleCommandLipoQuery+0xb4>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f008 f863 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fdb8 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 80018f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018f2:	461a      	mov	r2, r3
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	491c      	ldr	r1, [pc, #112]	; (800196c <ConsoleCommandLipoQuery+0xb8>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f008 f856 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fdab 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 800190a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe11 	bl	8000534 <__aeabi_ui2d>
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <ConsoleCommandLipoQuery+0xbc>)
 8001918:	f7fe ffb0 	bl	800087c <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	f107 0008 	add.w	r0, r7, #8
 8001924:	4913      	ldr	r1, [pc, #76]	; (8001974 <ConsoleCommandLipoQuery+0xc0>)
 8001926:	f008 f841 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fd96 	bl	8001460 <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8001934:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fdfc 	bl	8000534 <__aeabi_ui2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <ConsoleCommandLipoQuery+0xc4>)
 8001942:	f7fe ff9b 	bl	800087c <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	f107 0008 	add.w	r0, r7, #8
 800194e:	490b      	ldr	r1, [pc, #44]	; (800197c <ConsoleCommandLipoQuery+0xc8>)
 8001950:	f008 f82c 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fd81 	bl	8001460 <ConsoleSendLine>



	return COMMAND_SUCCESS;
 800195e:	2300      	movs	r3, #0

}
 8001960:	4618      	mov	r0, r3
 8001962:	3740      	adds	r7, #64	; 0x40
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	0800d060 	.word	0x0800d060
 800196c:	0800d078 	.word	0x0800d078
 8001970:	408f4000 	.word	0x408f4000
 8001974:	0800d08c 	.word	0x0800d08c
 8001978:	40590000 	.word	0x40590000
 800197c:	0800d0a4 	.word	0x0800d0a4

08001980 <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b0a9      	sub	sp, #164	; 0xa4
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]

	MPU6050_t data;
	char msg[50];
	MPU6050_Read_All(&I2C_MPU6050, &data);
 8001988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198c:	4619      	mov	r1, r3
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <ConsoleCommandAccelQuery+0x44>)
 8001990:	f000 f9b2 	bl	8001cf8 <MPU6050_Read_All>

	sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 8001994:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001998:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800199c:	f107 040c 	add.w	r4, r7, #12
 80019a0:	e9cd 2300 	strd	r2, r3, [sp]
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <ConsoleCommandAccelQuery+0x48>)
 80019aa:	4620      	mov	r0, r4
 80019ac:	f007 fffe 	bl	80099ac <siprintf>
	ConsoleSendLine(msg);
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd53 	bl	8001460 <ConsoleSendLine>


	return COMMAND_SUCCESS;
 80019ba:	2300      	movs	r3, #0

}
 80019bc:	4618      	mov	r0, r3
 80019be:	379c      	adds	r7, #156	; 0x9c
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	20000348 	.word	0x20000348
 80019c8:	0800d0b8 	.word	0x0800d0b8

080019cc <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b092      	sub	sp, #72	; 0x48
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	6078      	str	r0, [r7, #4]
	char time[30];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	2200      	movs	r2, #0
 80019da:	4619      	mov	r1, r3
 80019dc:	480f      	ldr	r0, [pc, #60]	; (8001a1c <ConsoleCommandTimeQuery+0x50>)
 80019de:	f004 fbdb 	bl	8006198 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	2200      	movs	r2, #0
 80019e8:	4619      	mov	r1, r3
 80019ea:	480c      	ldr	r0, [pc, #48]	; (8001a1c <ConsoleCommandTimeQuery+0x50>)
 80019ec:	f004 fcb6 	bl	800635c <HAL_RTC_GetDate>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80019f0:	7b3b      	ldrb	r3, [r7, #12]
 80019f2:	461a      	mov	r2, r3
 80019f4:	7b7b      	ldrb	r3, [r7, #13]
 80019f6:	4619      	mov	r1, r3
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	f107 0020 	add.w	r0, r7, #32
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	460b      	mov	r3, r1
 8001a02:	4907      	ldr	r1, [pc, #28]	; (8001a20 <ConsoleCommandTimeQuery+0x54>)
 8001a04:	f007 ffd2 	bl	80099ac <siprintf>
	ConsoleSendString(time);
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd1a 	bl	8001446 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3740      	adds	r7, #64	; 0x40
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000039c 	.word	0x2000039c
 8001a20:	0800d0d8 	.word	0x0800d0d8

08001a24 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]
	char date[30];
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2200      	movs	r2, #0
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <ConsoleCommandDateQuery+0x44>)
 8001a36:	f004 fc91 	bl	800635c <HAL_RTC_GetDate>
	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	7b7b      	ldrb	r3, [r7, #13]
 8001a40:	4619      	mov	r1, r3
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f107 0010 	add.w	r0, r7, #16
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <ConsoleCommandDateQuery+0x48>)
 8001a4e:	f007 ffad 	bl	80099ac <siprintf>
	ConsoleSendString(date);
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fcf5 	bl	8001446 <ConsoleSendString>
	return COMMAND_SUCCESS;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3730      	adds	r7, #48	; 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000039c 	.word	0x2000039c
 8001a6c:	0800d0f0 	.word	0x0800d0f0

08001a70 <ConsoleCommandLedQuery>:


static eCommandResult_T ConsoleCommandLedQuery(const char buffer[])
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==0)
 8001a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <ConsoleCommandLedQuery+0x38>)
 8001a7e:	f002 fd41 	bl	8004504 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <ConsoleCommandLedQuery+0x20>
			ConsoleIoSendString("LED is ON ");
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <ConsoleCommandLedQuery+0x3c>)
 8001a8a:	f000 f8c5 	bl	8001c18 <ConsoleIoSendString>
 8001a8e:	e002      	b.n	8001a96 <ConsoleCommandLedQuery+0x26>
	else
		ConsoleIoSendString("LED is OFF ");
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <ConsoleCommandLedQuery+0x40>)
 8001a92:	f000 f8c1 	bl	8001c18 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001a96:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <ConsoleCommandLedQuery+0x44>)
 8001a98:	f000 f8be 	bl	8001c18 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	0800d108 	.word	0x0800d108
 8001ab0:	0800d114 	.word	0x0800d114
 8001ab4:	0800d120 	.word	0x0800d120

08001ab8 <ConsoleCommandHelp>:



static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8001ac4:	230d      	movs	r3, #13
 8001ac6:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e01e      	b.n	8001b0c <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8001ace:	4914      	ldr	r1, [pc, #80]	; (8001b20 <ConsoleCommandHelp+0x68>)
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f89a 	bl	8001c18 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8001ae4:	480f      	ldr	r0, [pc, #60]	; (8001b24 <ConsoleCommandHelp+0x6c>)
 8001ae6:	f000 f897 	bl	8001c18 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	3308      	adds	r3, #8
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <ConsoleCommandHelp+0x68>)
 8001af8:	4413      	add	r3, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f88c 	bl	8001c18 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8001b00:	4809      	ldr	r0, [pc, #36]	; (8001b28 <ConsoleCommandHelp+0x70>)
 8001b02:	f000 f889 	bl	8001c18 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3db      	bcc.n	8001ace <ConsoleCommandHelp+0x16>
	}
	return result;
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	0800d194 	.word	0x0800d194
 8001b24:	0800d124 	.word	0x0800d124
 8001b28:	0800d120 	.word	0x0800d120

08001b2c <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <ConsoleCommandVer+0x24>)
 8001b3a:	f000 f86d 	bl	8001c18 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <ConsoleCommandVer+0x28>)
 8001b40:	f000 f86a 	bl	8001c18 <ConsoleIoSendString>
	return result;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	0800d128 	.word	0x0800d128
 8001b54:	0800d120 	.word	0x0800d120

08001b58 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <ConsoleCommandsGetTable+0x10>)
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	0800d194 	.word	0x0800d194

08001b6c <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	4909      	ldr	r1, [pc, #36]	; (8001b9c <HAL_UART_RxCpltCallback+0x30>)
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_UART_RxCpltCallback+0x34>)
 8001b7a:	f006 f9de 	bl	8007f3a <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_UART_RxCpltCallback+0x30>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b0a      	cmp	r3, #10
 8001b84:	d005      	beq.n	8001b92 <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_UART_RxCpltCallback+0x30>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_UART_RxCpltCallback+0x38>)
 8001b8e:	f7ff f9c4 	bl	8000f1a <cBuffer_Write>

    }
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000340 	.word	0x20000340
 8001ba0:	200004c0 	.word	0x200004c0
 8001ba4:	20000338 	.word	0x20000338

08001ba8 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	4906      	ldr	r1, [pc, #24]	; (8001bc8 <ConsoleIoInit+0x20>)
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <ConsoleIoInit+0x24>)
 8001bb2:	f7ff f993 	bl	8000edc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4905      	ldr	r1, [pc, #20]	; (8001bd0 <ConsoleIoInit+0x28>)
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <ConsoleIoInit+0x2c>)
 8001bbc:	f006 f9bd 	bl	8007f3a <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002f8 	.word	0x200002f8
 8001bcc:	20000338 	.word	0x20000338
 8001bd0:	20000340 	.word	0x20000340
 8001bd4:	200004c0 	.word	0x200004c0

08001bd8 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 8001be0:	f107 030f 	add.w	r3, r7, #15
 8001be4:	220d      	movs	r2, #13
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <ConsoleIoReceive+0x3c>)
 8001bea:	f7ff f9b9 	bl	8000f60 <cBuffer_GetString>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fbf6 	bl	80023f2 <manageBackSpace>
		return CONSOLE_SUCCESS;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 8001c0a:	2302      	movs	r3, #2

}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000338 	.word	0x20000338

08001c18 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7fe fae7 	bl	80001f4 <strlen>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	2364      	movs	r3, #100	; 0x64
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <ConsoleIoSendString+0x28>)
 8001c30:	f006 f8f1 	bl	8007e16 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200004c0 	.word	0x200004c0

08001c44 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af04      	add	r7, sp, #16
 8001c4a:	6078      	str	r0, [r7, #4]

    // check device ID WHO_AM_I



    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001c4c:	2364      	movs	r3, #100	; 0x64
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	f107 030f 	add.w	r3, r7, #15
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2275      	movs	r2, #117	; 0x75
 8001c5e:	21d0      	movs	r1, #208	; 0xd0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f002 febf 	bl	80049e4 <HAL_I2C_Mem_Read>

    if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b72      	cmp	r3, #114	; 0x72
 8001c6a:	d13d      	bne.n	8001ce8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f107 030e 	add.w	r3, r7, #14
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	226b      	movs	r2, #107	; 0x6b
 8001c82:	21d0      	movs	r1, #208	; 0xd0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f002 fdb3 	bl	80047f0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	f107 030e 	add.w	r3, r7, #14
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2219      	movs	r2, #25
 8001ca0:	21d0      	movs	r1, #208	; 0xd0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f002 fda4 	bl	80047f0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001cac:	2364      	movs	r3, #100	; 0x64
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	f107 030e 	add.w	r3, r7, #14
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	221c      	movs	r2, #28
 8001cbe:	21d0      	movs	r1, #208	; 0xd0
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f002 fd95 	bl	80047f0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001cca:	2364      	movs	r3, #100	; 0x64
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	f107 030e 	add.w	r3, r7, #14
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	221b      	movs	r2, #27
 8001cdc:	21d0      	movs	r1, #208	; 0xd0
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f002 fd86 	bl	80047f0 <HAL_I2C_Mem_Write>
        return 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <MPU6050_Init+0xa6>
    }
    return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	0000      	movs	r0, r0
 8001cf4:	0000      	movs	r0, r0
	...

08001cf8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cfc:	b094      	sub	sp, #80	; 0x50
 8001cfe:	af04      	add	r7, sp, #16
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001d04:	2364      	movs	r3, #100	; 0x64
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	230e      	movs	r3, #14
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	223b      	movs	r2, #59	; 0x3b
 8001d16:	21d0      	movs	r1, #208	; 0xd0
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f002 fe63 	bl	80049e4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001d1e:	7a3b      	ldrb	r3, [r7, #8]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	7a7b      	ldrb	r3, [r7, #9]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001d30:	7abb      	ldrb	r3, [r7, #10]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001d42:	7b3b      	ldrb	r3, [r7, #12]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001d62:	7c3b      	ldrb	r3, [r7, #16]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	7c7b      	ldrb	r3, [r7, #17]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001d74:	7cbb      	ldrb	r3, [r7, #18]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001d86:	7d3b      	ldrb	r3, [r7, #20]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	7d7b      	ldrb	r3, [r7, #21]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbd8 	bl	8000554 <__aeabi_i2d>
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	4bb5      	ldr	r3, [pc, #724]	; (8002080 <MPU6050_Read_All+0x388>)
 8001daa:	f7fe fd67 	bl	800087c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fbc8 	bl	8000554 <__aeabi_i2d>
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4bad      	ldr	r3, [pc, #692]	; (8002080 <MPU6050_Read_All+0x388>)
 8001dca:	f7fe fd57 	bl	800087c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	6839      	ldr	r1, [r7, #0]
 8001dd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fbb8 	bl	8000554 <__aeabi_i2d>
 8001de4:	a39e      	add	r3, pc, #632	; (adr r3, 8002060 <MPU6050_Read_All+0x368>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fd47 	bl	800087c <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	6839      	ldr	r1, [r7, #0]
 8001df4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    // Callibrate
       //DataStruct->Ax += CAL_X;
      // DataStruct->Ay += CAL_Y;
       //DataStruct->Az += CAL_Y;

    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dfe:	a39a      	add	r3, pc, #616	; (adr r3, 8002068 <MPU6050_Read_All+0x370>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fe82 	bl	8000b0c <__aeabi_dcmplt>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <MPU6050_Read_All+0x124>
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e22:	a391      	add	r3, pc, #580	; (adr r3, 8002068 <MPU6050_Read_All+0x370>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fe70 	bl	8000b0c <__aeabi_dcmplt>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <MPU6050_Read_All+0x148>
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e46:	a388      	add	r3, pc, #544	; (adr r3, 8002068 <MPU6050_Read_All+0x370>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fe5e 	bl	8000b0c <__aeabi_dcmplt>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <MPU6050_Read_All+0x16c>
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001e64:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e70:	eddf 6a84 	vldr	s13, [pc, #528]	; 8002084 <MPU6050_Read_All+0x38c>
 8001e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e78:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002088 <MPU6050_Read_All+0x390>
 8001e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb61 	bl	8000554 <__aeabi_i2d>
 8001e92:	a377      	add	r3, pc, #476	; (adr r3, 8002070 <MPU6050_Read_All+0x378>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f7fe fcf0 	bl	800087c <__aeabi_ddiv>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	6839      	ldr	r1, [r7, #0]
 8001ea2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb51 	bl	8000554 <__aeabi_i2d>
 8001eb2:	a36f      	add	r3, pc, #444	; (adr r3, 8002070 <MPU6050_Read_All+0x378>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fce0 	bl	800087c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	6839      	ldr	r1, [r7, #0]
 8001ec2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb41 	bl	8000554 <__aeabi_i2d>
 8001ed2:	a367      	add	r3, pc, #412	; (adr r3, 8002070 <MPU6050_Read_All+0x378>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fcd0 	bl	800087c <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001ee6:	f001 fc45 	bl	8003774 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <MPU6050_Read_All+0x394>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb1e 	bl	8000534 <__aeabi_ui2d>
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b64      	ldr	r3, [pc, #400]	; (8002090 <MPU6050_Read_All+0x398>)
 8001efe:	f7fe fcbd 	bl	800087c <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001f0a:	f001 fc33 	bl	8003774 <HAL_GetTick>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a5e      	ldr	r2, [pc, #376]	; (800208c <MPU6050_Read_All+0x394>)
 8001f12:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f22:	fb03 f202 	mul.w	r2, r3, r2
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb0a 	bl	8000554 <__aeabi_i2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	ec43 2b10 	vmov	d0, r2, r3
 8001f48:	f00a fd49 	bl	800c9de <sqrt>
 8001f4c:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5c:	f7fe fdcc 	bl	8000af8 <__aeabi_dcmpeq>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d11f      	bne.n	8001fa6 <MPU6050_Read_All+0x2ae>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe faf1 	bl	8000554 <__aeabi_i2d>
 8001f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f76:	f7fe fc81 	bl	800087c <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	ec43 2b17 	vmov	d7, r2, r3
 8001f82:	eeb0 0a47 	vmov.f32	s0, s14
 8001f86:	eef0 0a67 	vmov.f32	s1, s15
 8001f8a:	f00a fb7d 	bl	800c688 <atan>
 8001f8e:	ec51 0b10 	vmov	r0, r1, d0
 8001f92:	a339      	add	r3, pc, #228	; (adr r3, 8002078 <MPU6050_Read_All+0x380>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fb46 	bl	8000628 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001fa4:	e005      	b.n	8001fb2 <MPU6050_Read_All+0x2ba>
    } else {
        roll = 0.0;
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb8:	425b      	negs	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe faca 	bl	8000554 <__aeabi_i2d>
 8001fc0:	4682      	mov	sl, r0
 8001fc2:	468b      	mov	fp, r1
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fac2 	bl	8000554 <__aeabi_i2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	ec43 2b11 	vmov	d1, r2, r3
 8001fd8:	ec4b ab10 	vmov	d0, sl, fp
 8001fdc:	f00a fcfd 	bl	800c9da <atan2>
 8001fe0:	ec51 0b10 	vmov	r0, r1, d0
 8001fe4:	a324      	add	r3, pc, #144	; (adr r3, 8002078 <MPU6050_Read_All+0x380>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fb1d 	bl	8000628 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MPU6050_Read_All+0x39c>)
 8001ffc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002000:	f7fe fd84 	bl	8000b0c <__aeabi_dcmplt>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <MPU6050_Read_All+0x328>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <MPU6050_Read_All+0x3a0>)
 8002016:	f7fe fd97 	bl	8000b48 <__aeabi_dcmpgt>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d114      	bne.n	800204a <MPU6050_Read_All+0x352>
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <MPU6050_Read_All+0x3a0>)
 8002026:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800202a:	f7fe fd8d 	bl	8000b48 <__aeabi_dcmpgt>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d035      	beq.n	80020a0 <MPU6050_Read_All+0x3a8>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MPU6050_Read_All+0x39c>)
 8002040:	f7fe fd64 	bl	8000b0c <__aeabi_dcmplt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02a      	beq.n	80020a0 <MPU6050_Read_All+0x3a8>
        KalmanY.angle = pitch;
 800204a:	4914      	ldr	r1, [pc, #80]	; (800209c <MPU6050_Read_All+0x3a4>)
 800204c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002050:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800205e:	e034      	b.n	80020ca <MPU6050_Read_All+0x3d2>
 8002060:	00000000 	.word	0x00000000
 8002064:	40cc2900 	.word	0x40cc2900
 8002068:	70a3d70a 	.word	0x70a3d70a
 800206c:	3fb70a3d 	.word	0x3fb70a3d
 8002070:	00000000 	.word	0x00000000
 8002074:	40606000 	.word	0x40606000
 8002078:	1a63c1f8 	.word	0x1a63c1f8
 800207c:	404ca5dc 	.word	0x404ca5dc
 8002080:	40d00000 	.word	0x40d00000
 8002084:	43aa0000 	.word	0x43aa0000
 8002088:	42121eb8 	.word	0x42121eb8
 800208c:	20000344 	.word	0x20000344
 8002090:	408f4000 	.word	0x408f4000
 8002094:	c0568000 	.word	0xc0568000
 8002098:	40568000 	.word	0x40568000
 800209c:	20000050 	.word	0x20000050
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80020a6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80020aa:	eeb0 1a47 	vmov.f32	s2, s14
 80020ae:	eef0 1a67 	vmov.f32	s3, s15
 80020b2:	ed97 0b06 	vldr	d0, [r7, #24]
 80020b6:	481e      	ldr	r0, [pc, #120]	; (8002130 <MPU6050_Read_All+0x438>)
 80020b8:	f000 f840 	bl	800213c <Kalman_getAngle>
 80020bc:	eeb0 7a40 	vmov.f32	s14, s0
 80020c0:	eef0 7a60 	vmov.f32	s15, s1
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80020d0:	4690      	mov	r8, r2
 80020d2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MPU6050_Read_All+0x43c>)
 80020dc:	4640      	mov	r0, r8
 80020de:	4649      	mov	r1, r9
 80020e0:	f7fe fd32 	bl	8000b48 <__aeabi_dcmpgt>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <MPU6050_Read_All+0x404>
        DataStruct->Gx = -DataStruct->Gx;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020f0:	4614      	mov	r4, r2
 80020f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002102:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002106:	eeb0 1a47 	vmov.f32	s2, s14
 800210a:	eef0 1a67 	vmov.f32	s3, s15
 800210e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002112:	4809      	ldr	r0, [pc, #36]	; (8002138 <MPU6050_Read_All+0x440>)
 8002114:	f000 f812 	bl	800213c <Kalman_getAngle>
 8002118:	eeb0 7a40 	vmov.f32	s14, s0
 800211c:	eef0 7a60 	vmov.f32	s15, s1
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002126:	bf00      	nop
 8002128:	3740      	adds	r7, #64	; 0x40
 800212a:	46bd      	mov	sp, r7
 800212c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002130:	20000050 	.word	0x20000050
 8002134:	40568000 	.word	0x40568000
 8002138:	20000008 	.word	0x20000008

0800213c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b096      	sub	sp, #88	; 0x58
 8002140:	af00      	add	r7, sp, #0
 8002142:	61f8      	str	r0, [r7, #28]
 8002144:	ed87 0b04 	vstr	d0, [r7, #16]
 8002148:	ed87 1b02 	vstr	d1, [r7, #8]
 800214c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800215a:	f7fe f8ad 	bl	80002b8 <__aeabi_dsub>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800216c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002174:	f7fe fa58 	bl	8000628 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4620      	mov	r0, r4
 800217e:	4629      	mov	r1, r5
 8002180:	f7fe f89c 	bl	80002bc <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	69f9      	ldr	r1, [r7, #28]
 800218a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800219a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800219e:	f7fe fa43 	bl	8000628 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021b0:	f7fe f882 	bl	80002b8 <__aeabi_dsub>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80021c2:	f7fe f879 	bl	80002b8 <__aeabi_dsub>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe f872 	bl	80002bc <__adddf3>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021e4:	f7fe fa20 	bl	8000628 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe f864 	bl	80002bc <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	69f9      	ldr	r1, [r7, #28]
 80021fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800220a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800220e:	f7fe fa0b 	bl	8000628 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f84d 	bl	80002b8 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	69f9      	ldr	r1, [r7, #28]
 8002224:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002238:	f7fe f9f6 	bl	8000628 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fe f838 	bl	80002b8 <__aeabi_dsub>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	69f9      	ldr	r1, [r7, #28]
 800224e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800225e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002262:	f7fe f9e1 	bl	8000628 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4620      	mov	r0, r4
 800226c:	4629      	mov	r1, r5
 800226e:	f7fe f825 	bl	80002bc <__adddf3>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	69f9      	ldr	r1, [r7, #28]
 8002278:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002288:	f7fe f818 	bl	80002bc <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800229a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800229e:	f7fe faed 	bl	800087c <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022b4:	f7fe fae2 	bl	800087c <__aeabi_ddiv>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ca:	f7fd fff5 	bl	80002b8 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80022dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022e4:	f7fe f9a0 	bl	8000628 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4620      	mov	r0, r4
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7fd ffe4 	bl	80002bc <__adddf3>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	69f9      	ldr	r1, [r7, #28]
 80022fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800230c:	f7fe f98c 	bl	8000628 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fd ffd0 	bl	80002bc <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	69f9      	ldr	r1, [r7, #28]
 8002322:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800232c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002336:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002348:	f7fe f96e 	bl	8000628 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ffb0 	bl	80002b8 <__aeabi_dsub>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	69f9      	ldr	r1, [r7, #28]
 800235e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002368:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800236c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002370:	f7fe f95a 	bl	8000628 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fd ff9c 	bl	80002b8 <__aeabi_dsub>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	69f9      	ldr	r1, [r7, #28]
 8002386:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002390:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002398:	f7fe f946 	bl	8000628 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fd ff88 	bl	80002b8 <__aeabi_dsub>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	69f9      	ldr	r1, [r7, #28]
 80023ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80023b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023c0:	f7fe f932 	bl	8000628 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fd ff74 	bl	80002b8 <__aeabi_dsub>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	69f9      	ldr	r1, [r7, #28]
 80023d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023e0:	ec43 2b17 	vmov	d7, r2, r3
};
 80023e4:	eeb0 0a47 	vmov.f32	s0, s14
 80023e8:	eef0 0a67 	vmov.f32	s1, s15
 80023ec:	3758      	adds	r7, #88	; 0x58
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bdb0      	pop	{r4, r5, r7, pc}

080023f2 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 80023fe:	217f      	movs	r1, #127	; 0x7f
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f007 fb64 	bl	8009ace <strchr>
 8002406:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8002408:	e029      	b.n	800245e <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b7f      	cmp	r3, #127	; 0x7f
 8002410:	d106      	bne.n	8002420 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3301      	adds	r3, #1
 8002416:	4619      	mov	r1, r3
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f007 fb65 	bl	8009ae8 <strcpy>
 800241e:	e019      	b.n	8002454 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b7f      	cmp	r3, #127	; 0x7f
 8002426:	d109      	bne.n	800243c <manageBackSpace+0x4a>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d104      	bne.n	800243c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3b01      	subs	r3, #1
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e00b      	b.n	8002454 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b7f      	cmp	r3, #127	; 0x7f
 8002442:	d107      	bne.n	8002454 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3301      	adds	r3, #1
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f007 fb4a 	bl	8009ae8 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 8002454:	217f      	movs	r1, #127	; 0x7f
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f007 fb39 	bl	8009ace <strchr>
 800245c:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1d1      	bne.n	800240a <manageBackSpace+0x18>
		}
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 8002478:	e00c      	b.n	8002494 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b2f      	cmp	r3, #47	; 0x2f
 8002480:	d903      	bls.n	800248a <isNumber+0x1a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b39      	cmp	r3, #57	; 0x39
 8002488:	d901      	bls.n	800248e <isNumber+0x1e>
			return 0;
 800248a:	2300      	movs	r3, #0
 800248c:	e007      	b.n	800249e <isNumber+0x2e>
		string++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3301      	adds	r3, #1
 8002492:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <isNumber+0xa>
	}
	return 1;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	2009      	movs	r0, #9
 80024b6:	f000 f81f 	bl	80024f8 <lc709203_getRegisterValue>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	2008      	movs	r0, #8
 80024d0:	f000 f812 	bl	80024f8 <lc709203_getRegisterValue>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	2011      	movs	r0, #17
 80024ea:	f000 f805 	bl	80024f8 <lc709203_getRegisterValue>
 80024ee:	4603      	mov	r3, r0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af04      	add	r7, sp, #16
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	b29a      	uxth	r2, r3
 8002508:	2364      	movs	r3, #100	; 0x64
 800250a:	9302      	str	r3, [sp, #8]
 800250c:	2302      	movs	r3, #2
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2301      	movs	r3, #1
 8002516:	2116      	movs	r1, #22
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <lc709203_getRegisterValue+0x40>)
 800251a:	f002 fa63 	bl	80049e4 <HAL_I2C_Mem_Read>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 8002528:	2302      	movs	r3, #2
 800252a:	e000      	b.n	800252e <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 800252c:	2301      	movs	r3, #1

}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000348 	.word	0x20000348

0800253c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_DMA_Init+0x3c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <MX_DMA_Init+0x3c>)
 800254c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_DMA_Init+0x3c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	2039      	movs	r0, #57	; 0x39
 8002564:	f001 fa11 	bl	800398a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002568:	2039      	movs	r0, #57	; 0x39
 800256a:	f001 fa2a 	bl	80039c2 <HAL_NVIC_EnableIRQ>

}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800

0800257c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <MX_GPIO_Init+0xe0>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <MX_GPIO_Init+0xe0>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <MX_GPIO_Init+0xe0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <MX_GPIO_Init+0xe0>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a29      	ldr	r2, [pc, #164]	; (800265c <MX_GPIO_Init+0xe0>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <MX_GPIO_Init+0xe0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <MX_GPIO_Init+0xe0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a22      	ldr	r2, [pc, #136]	; (800265c <MX_GPIO_Init+0xe0>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <MX_GPIO_Init+0xe0>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <MX_GPIO_Init+0xe0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a1b      	ldr	r2, [pc, #108]	; (800265c <MX_GPIO_Init+0xe0>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <MX_GPIO_Init+0xe0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002608:	4815      	ldr	r0, [pc, #84]	; (8002660 <MX_GPIO_Init+0xe4>)
 800260a:	f001 ff93 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	2110      	movs	r1, #16
 8002612:	4814      	ldr	r0, [pc, #80]	; (8002664 <MX_GPIO_Init+0xe8>)
 8002614:	f001 ff8e 	bl	8004534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <MX_GPIO_Init+0xe4>)
 8002632:	f001 fde3 	bl	80041fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 8002636:	2310      	movs	r3, #16
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_GPIO_Init+0xe8>)
 800264e:	f001 fdd5 	bl	80041fc <HAL_GPIO_Init>

}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40020800 	.word	0x40020800
 8002664:	40020000 	.word	0x40020000

08002668 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_I2C1_Init+0x50>)
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <MX_I2C1_Init+0x54>)
 8002670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_I2C1_Init+0x50>)
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <MX_I2C1_Init+0x58>)
 8002676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_I2C1_Init+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_I2C1_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_I2C1_Init+0x50>)
 8002686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800268a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <MX_I2C1_Init+0x50>)
 800268e:	2200      	movs	r2, #0
 8002690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_I2C1_Init+0x50>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <MX_I2C1_Init+0x50>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_I2C1_Init+0x50>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026a4:	4804      	ldr	r0, [pc, #16]	; (80026b8 <MX_I2C1_Init+0x50>)
 80026a6:	f001 ff5f 	bl	8004568 <HAL_I2C_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026b0:	f000 f91c 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000348 	.word	0x20000348
 80026bc:	40005400 	.word	0x40005400
 80026c0:	000186a0 	.word	0x000186a0

080026c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_I2C_MspInit+0x84>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d12b      	bne.n	800273e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_I2C_MspInit+0x88>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <HAL_I2C_MspInit+0x88>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_I2C_MspInit+0x88>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002702:	23c0      	movs	r3, #192	; 0xc0
 8002704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002706:	2312      	movs	r3, #18
 8002708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002712:	2304      	movs	r3, #4
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <HAL_I2C_MspInit+0x8c>)
 800271e:	f001 fd6d 	bl	80041fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_I2C_MspInit+0x88>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_I2C_MspInit+0x88>)
 800272c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_I2C_MspInit+0x88>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800273e:	bf00      	nop
 8002740:	3728      	adds	r7, #40	; 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40005400 	.word	0x40005400
 800274c:	40023800 	.word	0x40023800
 8002750:	40020400 	.word	0x40020400

08002754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275a:	f000 ffa5 	bl	80036a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800275e:	f000 f85b 	bl	8002818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002762:	f7ff ff0b 	bl	800257c <MX_GPIO_Init>
  MX_RTC_Init();
 8002766:	f000 f8c7 	bl	80028f8 <MX_RTC_Init>
  MX_DMA_Init();
 800276a:	f7ff fee7 	bl	800253c <MX_DMA_Init>
  MX_I2C1_Init();
 800276e:	f7ff ff7b 	bl	8002668 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002772:	f000 facf 	bl	8002d14 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002776:	f000 fbfb 	bl	8002f70 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800277a:	f000 f90f 	bl	800299c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t angle = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 8002782:	230b      	movs	r3, #11
 8002784:	717b      	strb	r3, [r7, #5]

  ConsoleInit();
 8002786:	f7fe fcf9 	bl	800117c <ConsoleInit>
  ConsoleSendString("Console Initialised\n");
 800278a:	481f      	ldr	r0, [pc, #124]	; (8002808 <main+0xb4>)
 800278c:	f7fe fe5b 	bl	8001446 <ConsoleSendString>
  if (MPU6050_Init(&hi2c1) == 1)
 8002790:	481e      	ldr	r0, [pc, #120]	; (800280c <main+0xb8>)
 8002792:	f7ff fa57 	bl	8001c44 <MPU6050_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b01      	cmp	r3, #1
 800279a:	d103      	bne.n	80027a4 <main+0x50>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 800279c:	481c      	ldr	r0, [pc, #112]	; (8002810 <main+0xbc>)
 800279e:	f7fe fe52 	bl	8001446 <ConsoleSendString>
 80027a2:	e002      	b.n	80027aa <main+0x56>
  }
  else
  {
	  ConsoleSendString("MPU6050 Initialised\n");
 80027a4:	481b      	ldr	r0, [pc, #108]	; (8002814 <main+0xc0>)
 80027a6:	f7fe fe4e 	bl	8001446 <ConsoleSendString>
  }
  ConsolePrintPrompt();
 80027aa:	f7fe fd11 	bl	80011d0 <ConsolePrintPrompt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 80027ae:	f7fe fd1d 	bl	80011ec <ConsoleProcess>


	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80027b2:	2300      	movs	r3, #0
 80027b4:	71bb      	strb	r3, [r7, #6]
 80027b6:	e01b      	b.n	80027f0 <main+0x9c>
	  	  			// Calculate color
	  	  			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 80027b8:	79ba      	ldrb	r2, [r7, #6]
 80027ba:	797b      	ldrb	r3, [r7, #5]
 80027bc:	fb12 f303 	smulbb	r3, r2, r3
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	4413      	add	r3, r2
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	227f      	movs	r2, #127	; 0x7f
 80027ca:	21ff      	movs	r1, #255	; 0xff
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fea5 	bl	800351c <hsl_to_rgb>
 80027d2:	6038      	str	r0, [r7, #0]
	  	  			// Set color
	  	  			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	b2d9      	uxtb	r1, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	79b8      	ldrb	r0, [r7, #6]
 80027e6:	f000 fc7b 	bl	80030e0 <led_set_RGB>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80027ea:	79bb      	ldrb	r3, [r7, #6]
 80027ec:	3301      	adds	r3, #1
 80027ee:	71bb      	strb	r3, [r7, #6]
 80027f0:	79bb      	ldrb	r3, [r7, #6]
 80027f2:	2b0b      	cmp	r3, #11
 80027f4:	d9e0      	bls.n	80027b8 <main+0x64>
	  	  		}
	  	  		// Write to LED
	  	    	++angle;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	3301      	adds	r3, #1
 80027fa:	71fb      	strb	r3, [r7, #7]
	  	  		led_render();
 80027fc:	f000 fcd6 	bl	80031ac <led_render>
	  	  		// Some delay
	  	  		HAL_Delay(10);
 8002800:	200a      	movs	r0, #10
 8002802:	f000 ffc3 	bl	800378c <HAL_Delay>
	  ConsoleProcess();
 8002806:	e7d2      	b.n	80027ae <main+0x5a>
 8002808:	0800d134 	.word	0x0800d134
 800280c:	20000348 	.word	0x20000348
 8002810:	0800d14c 	.word	0x0800d14c
 8002814:	0800d16c 	.word	0x0800d16c

08002818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b094      	sub	sp, #80	; 0x50
 800281c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281e:	f107 0320 	add.w	r3, r7, #32
 8002822:	2230      	movs	r2, #48	; 0x30
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f006 fb5e 	bl	8008ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <SystemClock_Config+0xcc>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <SystemClock_Config+0xcc>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6413      	str	r3, [r2, #64]	; 0x40
 800284c:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <SystemClock_Config+0xcc>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <SystemClock_Config+0xd0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <SystemClock_Config+0xd0>)
 8002862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <SystemClock_Config+0xd0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002874:	2305      	movs	r3, #5
 8002876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800287e:	2301      	movs	r3, #1
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002882:	2302      	movs	r3, #2
 8002884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800288c:	230c      	movs	r3, #12
 800288e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002890:	2360      	movs	r3, #96	; 0x60
 8002892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002894:	2302      	movs	r3, #2
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002898:	2304      	movs	r3, #4
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800289c:	f107 0320 	add.w	r3, r7, #32
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fe21 	bl	80054e8 <HAL_RCC_OscConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028ac:	f000 f81e 	bl	80028ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b0:	230f      	movs	r3, #15
 80028b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b4:	2302      	movs	r3, #2
 80028b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	2103      	movs	r1, #3
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 f883 	bl	80059d8 <HAL_RCC_ClockConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028d8:	f000 f808 	bl	80028ec <Error_Handler>
  }
}
 80028dc:	bf00      	nop
 80028de:	3750      	adds	r7, #80	; 0x50
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000

080028ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <Error_Handler+0x8>
	...

080028f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_RTC_Init+0x44>)
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <MX_RTC_Init+0x48>)
 8002900:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_RTC_Init+0x44>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_RTC_Init+0x44>)
 800290a:	227f      	movs	r2, #127	; 0x7f
 800290c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_RTC_Init+0x44>)
 8002910:	22ff      	movs	r2, #255	; 0xff
 8002912:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_RTC_Init+0x44>)
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_RTC_Init+0x44>)
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_RTC_Init+0x44>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_RTC_Init+0x44>)
 8002928:	f003 fb26 	bl	8005f78 <HAL_RTC_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002932:	f7ff ffdb 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000039c 	.word	0x2000039c
 8002940:	40002800 	.word	0x40002800

08002944 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <HAL_RTC_MspInit+0x50>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002968:	2302      	movs	r3, #2
 800296a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800296c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002970:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fa0e 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002982:	f7ff ffb3 	bl	80028ec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_RTC_MspInit+0x54>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800298c:	bf00      	nop
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40002800 	.word	0x40002800
 8002998:	42470e3c 	.word	0x42470e3c

0800299c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029a2:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <MX_SPI1_Init+0x68>)
 80029a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029e8:	220a      	movs	r2, #10
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ec:	4804      	ldr	r0, [pc, #16]	; (8002a00 <MX_SPI1_Init+0x64>)
 80029ee:	f003 fdc1 	bl	8006574 <HAL_SPI_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029f8:	f7ff ff78 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200003bc 	.word	0x200003bc
 8002a04:	40013000 	.word	0x40013000

08002a08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_SPI_MspInit+0x84>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d12b      	bne.n	8002a82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_SPI_MspInit+0x88>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 8002a62:	23e0      	movs	r3, #224	; 0xe0
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a72:	2305      	movs	r3, #5
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <HAL_SPI_MspInit+0x8c>)
 8002a7e:	f001 fbbd 	bl	80041fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40013000 	.word	0x40013000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_MspInit+0x4c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <HAL_MspInit+0x4c>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aac:	6453      	str	r3, [r2, #68]	; 0x44
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_MspInit+0x4c>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_MspInit+0x4c>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <HAL_MspInit+0x4c>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_MspInit+0x4c>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <NMI_Handler+0x4>

08002aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <HardFault_Handler+0x4>

08002af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <MemManage_Handler+0x4>

08002afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <BusFault_Handler+0x4>

08002b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <UsageFault_Handler+0x4>

08002b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b34:	f000 fe0a 	bl	800374c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <USART1_IRQHandler+0x10>)
 8002b42:	f005 fa2b 	bl	8007f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200004c0 	.word	0x200004c0

08002b50 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA2_Stream1_IRQHandler+0x10>)
 8002b56:	f001 f8e7 	bl	8003d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000460 	.word	0x20000460

08002b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
	return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_kill>:

int _kill(int pid, int sig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b7e:	f006 f979 	bl	8008e74 <__errno>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2216      	movs	r2, #22
 8002b86:	601a      	str	r2, [r3, #0]
	return -1;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_exit>:

void _exit (int status)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ffe7 	bl	8002b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ba6:	e7fe      	b.n	8002ba6 <_exit+0x12>

08002ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e00a      	b.n	8002bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bba:	f3af 8000 	nop.w
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	60ba      	str	r2, [r7, #8]
 8002bc6:	b2ca      	uxtb	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dbf0      	blt.n	8002bba <_read+0x12>
	}

return len;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e009      	b.n	8002c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	60ba      	str	r2, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dbf1      	blt.n	8002bf4 <_write+0x12>
	}
	return len;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_close>:

int _close(int file)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
	return -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c42:	605a      	str	r2, [r3, #4]
	return 0;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_isatty>:

int _isatty(int file)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	return 1;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
	return 0;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <_sbrk+0x5c>)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <_sbrk+0x60>)
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <_sbrk+0x64>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <_sbrk+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d207      	bcs.n	8002cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb4:	f006 f8de 	bl	8008e74 <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20020000 	.word	0x20020000
 8002ce4:	00000400 	.word	0x00000400
 8002ce8:	20000414 	.word	0x20000414
 8002cec:	200005a0 	.word	0x200005a0

08002cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <SystemInit+0x20>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <SystemInit+0x20>)
 8002cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b096      	sub	sp, #88	; 0x58
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	615a      	str	r2, [r3, #20]
 8002d44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	2220      	movs	r2, #32
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f006 f8cb 	bl	8008ee8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d52:	4b3e      	ldr	r3, [pc, #248]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d54:	4a3e      	ldr	r2, [pc, #248]	; (8002e50 <MX_TIM1_Init+0x13c>)
 8002d56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d58:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 8002d64:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d66:	227c      	movs	r2, #124	; 0x7c
 8002d68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d76:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d7c:	4833      	ldr	r0, [pc, #204]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d7e:	f003 feef 	bl	8006b60 <HAL_TIM_Base_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002d88:	f7ff fdb0 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d96:	4619      	mov	r1, r3
 8002d98:	482c      	ldr	r0, [pc, #176]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002d9a:	f004 fac1 	bl	8007320 <HAL_TIM_ConfigClockSource>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002da4:	f7ff fda2 	bl	80028ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002da8:	4828      	ldr	r0, [pc, #160]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002daa:	f003 ff28 	bl	8006bfe <HAL_TIM_PWM_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002db4:	f7ff fd9a 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4821      	ldr	r0, [pc, #132]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002dc8:	f004 ff18 	bl	8007bfc <HAL_TIMEx_MasterConfigSynchronization>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002dd2:	f7ff fd8b 	bl	80028ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dd6:	2360      	movs	r3, #96	; 0x60
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002de2:	2300      	movs	r3, #0
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df6:	2200      	movs	r2, #0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4814      	ldr	r0, [pc, #80]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002dfc:	f004 f9ce 	bl	800719c <HAL_TIM_PWM_ConfigChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002e06:	f7ff fd71 	bl	80028ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4807      	ldr	r0, [pc, #28]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002e2e:	f004 ff53 	bl	8007cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002e38:	f7ff fd58 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e3c:	4803      	ldr	r0, [pc, #12]	; (8002e4c <MX_TIM1_Init+0x138>)
 8002e3e:	f000 f85d 	bl	8002efc <HAL_TIM_MspPostInit>

}
 8002e42:	bf00      	nop
 8002e44:	3758      	adds	r7, #88	; 0x58
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000418 	.word	0x20000418
 8002e50:	40010000 	.word	0x40010000

08002e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a22      	ldr	r2, [pc, #136]	; (8002eec <HAL_TIM_Base_MspInit+0x98>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d13e      	bne.n	8002ee4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_TIM_Base_MspInit+0x9c>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <HAL_TIM_Base_MspInit+0x9c>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6453      	str	r3, [r2, #68]	; 0x44
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_TIM_Base_MspInit+0x9c>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_TIM_Base_MspInit+0xa4>)
 8002e86:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002e8a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002e8e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002e92:	2240      	movs	r2, #64	; 0x40
 8002e94:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eaa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eba:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002ec8:	480a      	ldr	r0, [pc, #40]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002eca:	f000 fd95 	bl	80039f8 <HAL_DMA_Init>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002ed4:	f7ff fd0a 	bl	80028ec <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_TIM_Base_MspInit+0xa0>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	20000460 	.word	0x20000460
 8002ef8:	40026428 	.word	0x40026428

08002efc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_TIM_MspPostInit+0x68>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11e      	bne.n	8002f5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 8002f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_TIM_MspPostInit+0x70>)
 8002f58:	f001 f950 	bl	80041fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020000 	.word	0x40020000

08002f70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <MX_USART1_UART_Init+0x50>)
 8002f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f96:	220c      	movs	r2, #12
 8002f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_USART1_UART_Init+0x4c>)
 8002fa8:	f004 fee8 	bl	8007d7c <HAL_UART_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fb2:	f7ff fc9b 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200004c0 	.word	0x200004c0
 8002fc0:	40011000 	.word	0x40011000

08002fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_UART_MspInit+0x94>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d134      	bne.n	8003050 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_UART_MspInit+0x98>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_UART_MspInit+0x98>)
 8002ff0:	f043 0310 	orr.w	r3, r3, #16
 8002ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff6:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_UART_MspInit+0x98>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_UART_MspInit+0x98>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a14      	ldr	r2, [pc, #80]	; (800305c <HAL_UART_MspInit+0x98>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_UART_MspInit+0x98>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800301e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	2303      	movs	r3, #3
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003030:	2307      	movs	r3, #7
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <HAL_UART_MspInit+0x9c>)
 800303c:	f001 f8de 	bl	80041fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	2025      	movs	r0, #37	; 0x25
 8003046:	f000 fca0 	bl	800398a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800304a:	2025      	movs	r0, #37	; 0x25
 800304c:	f000 fcb9 	bl	80039c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003050:	bf00      	nop
 8003052:	3728      	adds	r7, #40	; 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40011000 	.word	0x40011000
 800305c:	40023800 	.word	0x40023800
 8003060:	40020000 	.word	0x40020000

08003064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800309c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003068:	480d      	ldr	r0, [pc, #52]	; (80030a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800306a:	490e      	ldr	r1, [pc, #56]	; (80030a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003080:	4c0b      	ldr	r4, [pc, #44]	; (80030b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800308e:	f7ff fe2f 	bl	8002cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003092:	f005 fef5 	bl	8008e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003096:	f7ff fb5d 	bl	8002754 <main>
  bx  lr    
 800309a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800309c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a4:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80030a8:	0800d9d0 	.word	0x0800d9d0
  ldr r2, =_sbss
 80030ac:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 80030b0:	200005a0 	.word	0x200005a0

080030b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC_IRQHandler>

080030b6 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	460a      	mov	r2, r1
 80030c0:	71fb      	strb	r3, [r7, #7]
 80030c2:	4613      	mov	r3, r2
 80030c4:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	79ba      	ldrb	r2, [r7, #6]
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	121b      	asrs	r3, r3, #8
 80030d0:	b2db      	uxtb	r3, r3
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	71fb      	strb	r3, [r7, #7]
 80030f2:	4603      	mov	r3, r0
 80030f4:	71bb      	strb	r3, [r7, #6]
 80030f6:	460b      	mov	r3, r1
 80030f8:	717b      	strb	r3, [r7, #5]
 80030fa:	4613      	mov	r3, r2
 80030fc:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 80030fe:	79bb      	ldrb	r3, [r7, #6]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003108:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800310c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003114:	edc7 7a00 	vstr	s15, [r7]
 8003118:	783b      	ldrb	r3, [r7, #0]
 800311a:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 800311c:	797b      	ldrb	r3, [r7, #5]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003126:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800312a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800312e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003132:	edc7 7a00 	vstr	s15, [r7]
 8003136:	783b      	ldrb	r3, [r7, #0]
 8003138:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 800313a:	793b      	ldrb	r3, [r7, #4]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003144:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800314c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003150:	edc7 7a00 	vstr	s15, [r7]
 8003154:	783b      	ldrb	r3, [r7, #0]
 8003156:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8003158:	79fa      	ldrb	r2, [r7, #7]
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	189c      	adds	r4, r3, r2
 8003160:	797b      	ldrb	r3, [r7, #5]
 8003162:	21b0      	movs	r1, #176	; 0xb0
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ffa6 	bl	80030b6 <scale8>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <led_set_RGB+0xc8>)
 8003170:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8003172:	79fa      	ldrb	r2, [r7, #7]
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	3301      	adds	r3, #1
 800317c:	490a      	ldr	r1, [pc, #40]	; (80031a8 <led_set_RGB+0xc8>)
 800317e:	79ba      	ldrb	r2, [r7, #6]
 8003180:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8003182:	79fa      	ldrb	r2, [r7, #7]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	1c9c      	adds	r4, r3, #2
 800318c:	793b      	ldrb	r3, [r7, #4]
 800318e:	21f0      	movs	r1, #240	; 0xf0
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff90 	bl	80030b6 <scale8>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <led_set_RGB+0xc8>)
 800319c:	551a      	strb	r2, [r3, r4]

}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000504 	.word	0x20000504

080031ac <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80031b2:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <led_render+0x148>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <led_render+0x1a>
 80031ba:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <led_render+0x14c>)
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d015      	beq.n	80031f2 <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	71fb      	strb	r3, [r7, #7]
 80031ca:	e007      	b.n	80031dc <led_render+0x30>
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <led_render+0x150>)
 80031d0:	2100      	movs	r1, #0
 80031d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	3301      	adds	r3, #1
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b2f      	cmp	r3, #47	; 0x2f
 80031e0:	d9f4      	bls.n	80031cc <led_render+0x20>
    wr_buf_p = 0;
 80031e2:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <led_render+0x148>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80031e8:	2100      	movs	r1, #0
 80031ea:	4845      	ldr	r0, [pc, #276]	; (8003300 <led_render+0x154>)
 80031ec:	f003 ff10 	bl	8007010 <HAL_TIM_PWM_Stop_DMA>
    return;
 80031f0:	e07c      	b.n	80032ec <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80031f2:	2300      	movs	r3, #0
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	e06d      	b.n	80032d4 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80031f8:	4b42      	ldr	r3, [pc, #264]	; (8003304 <led_render+0x158>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003208:	2b00      	cmp	r3, #0
 800320a:	dd01      	ble.n	8003210 <led_render+0x64>
 800320c:	2150      	movs	r1, #80	; 0x50
 800320e:	e000      	b.n	8003212 <led_render+0x66>
 8003210:	2128      	movs	r1, #40	; 0x28
 8003212:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <led_render+0x150>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800321a:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <led_render+0x158>)
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	461a      	mov	r2, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	dd01      	ble.n	8003232 <led_render+0x86>
 800322e:	2150      	movs	r1, #80	; 0x50
 8003230:	e000      	b.n	8003234 <led_render+0x88>
 8003232:	2128      	movs	r1, #40	; 0x28
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	4a30      	ldr	r2, [pc, #192]	; (80032fc <led_render+0x150>)
 800323a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <led_render+0x158>)
 8003240:	789b      	ldrb	r3, [r3, #2]
 8003242:	461a      	mov	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b00      	cmp	r3, #0
 8003250:	dd01      	ble.n	8003256 <led_render+0xaa>
 8003252:	2150      	movs	r1, #80	; 0x50
 8003254:	e000      	b.n	8003258 <led_render+0xac>
 8003256:	2128      	movs	r1, #40	; 0x28
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	3310      	adds	r3, #16
 800325c:	4a27      	ldr	r2, [pc, #156]	; (80032fc <led_render+0x150>)
 800325e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <led_render+0x158>)
 8003264:	78db      	ldrb	r3, [r3, #3]
 8003266:	461a      	mov	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b00      	cmp	r3, #0
 8003274:	dd01      	ble.n	800327a <led_render+0xce>
 8003276:	2150      	movs	r1, #80	; 0x50
 8003278:	e000      	b.n	800327c <led_render+0xd0>
 800327a:	2128      	movs	r1, #40	; 0x28
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	3318      	adds	r3, #24
 8003280:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <led_render+0x150>)
 8003282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8003286:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <led_render+0x158>)
 8003288:	791b      	ldrb	r3, [r3, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	dd01      	ble.n	800329e <led_render+0xf2>
 800329a:	2150      	movs	r1, #80	; 0x50
 800329c:	e000      	b.n	80032a0 <led_render+0xf4>
 800329e:	2128      	movs	r1, #40	; 0x28
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	3320      	adds	r3, #32
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <led_render+0x150>)
 80032a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <led_render+0x158>)
 80032ac:	795b      	ldrb	r3, [r3, #5]
 80032ae:	461a      	mov	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	dd01      	ble.n	80032c2 <led_render+0x116>
 80032be:	2150      	movs	r1, #80	; 0x50
 80032c0:	e000      	b.n	80032c4 <led_render+0x118>
 80032c2:	2128      	movs	r1, #40	; 0x28
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	3328      	adds	r3, #40	; 0x28
 80032c8:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <led_render+0x150>)
 80032ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b07      	cmp	r3, #7
 80032d8:	d98e      	bls.n	80031f8 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 80032da:	2330      	movs	r3, #48	; 0x30
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <led_render+0x150>)
 80032de:	2100      	movs	r1, #0
 80032e0:	4807      	ldr	r0, [pc, #28]	; (8003300 <led_render+0x154>)
 80032e2:	f003 fce5 	bl	8006cb0 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80032e6:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <led_render+0x148>)
 80032e8:	2202      	movs	r2, #2
 80032ea:	601a      	str	r2, [r3, #0]
}
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000588 	.word	0x20000588
 80032f8:	20000460 	.word	0x20000460
 80032fc:	20000528 	.word	0x20000528
 8003300:	20000418 	.word	0x20000418
 8003304:	20000504 	.word	0x20000504

08003308 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b0b      	cmp	r3, #11
 8003316:	d854      	bhi.n	80033c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e048      	b.n	80033b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	4a35      	ldr	r2, [pc, #212]	; (8003400 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	461a      	mov	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	dd01      	ble.n	8003340 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 800333c:	2150      	movs	r1, #80	; 0x50
 800333e:	e000      	b.n	8003342 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8003340:	2128      	movs	r1, #40	; 0x28
 8003342:	4a30      	ldr	r2, [pc, #192]	; (8003404 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	3301      	adds	r3, #1
 8003356:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	dd01      	ble.n	800336e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 800336a:	2150      	movs	r1, #80	; 0x50
 800336c:	e000      	b.n	8003370 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 800336e:	2128      	movs	r1, #40	; 0x28
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3308      	adds	r3, #8
 8003374:	4a23      	ldr	r2, [pc, #140]	; (8003404 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8003376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	3302      	adds	r3, #2
 8003386:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8003388:	5cd3      	ldrb	r3, [r2, r3]
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b00      	cmp	r3, #0
 8003398:	dd01      	ble.n	800339e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800339a:	2150      	movs	r1, #80	; 0x50
 800339c:	e000      	b.n	80033a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800339e:	2128      	movs	r1, #40	; 0x28
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3310      	adds	r3, #16
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80033a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b07      	cmp	r3, #7
 80033b4:	d9b3      	bls.n	800331e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80033be:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80033c0:	e016      	b.n	80033f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b0d      	cmp	r3, #13
 80033c8:	d812      	bhi.n	80033f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	72fb      	strb	r3, [r7, #11]
 80033ce:	e007      	b.n	80033e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 80033d0:	7afb      	ldrb	r3, [r7, #11]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80033d4:	2100      	movs	r1, #0
 80033d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	3301      	adds	r3, #1
 80033de:	72fb      	strb	r3, [r7, #11]
 80033e0:	7afb      	ldrb	r3, [r7, #11]
 80033e2:	2b17      	cmp	r3, #23
 80033e4:	d9f4      	bls.n	80033d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a03      	ldr	r2, [pc, #12]	; (80033fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	20000588 	.word	0x20000588
 8003400:	20000504 	.word	0x20000504
 8003404:	20000528 	.word	0x20000528

08003408 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8003410:	4b3e      	ldr	r3, [pc, #248]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b0b      	cmp	r3, #11
 8003416:	d855      	bhi.n	80034c4 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e049      	b.n	80034b2 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	4a39      	ldr	r2, [pc, #228]	; (8003510 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	461a      	mov	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	dd01      	ble.n	8003440 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 800343c:	2150      	movs	r1, #80	; 0x50
 800343e:	e000      	b.n	8003442 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8003440:	2128      	movs	r1, #40	; 0x28
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3318      	adds	r3, #24
 8003446:	4a33      	ldr	r2, [pc, #204]	; (8003514 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8003448:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800344c:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	3301      	adds	r3, #1
 8003458:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800345a:	5cd3      	ldrb	r3, [r2, r3]
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	dd01      	ble.n	8003470 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800346c:	2150      	movs	r1, #80	; 0x50
 800346e:	e000      	b.n	8003472 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8003470:	2128      	movs	r1, #40	; 0x28
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3320      	adds	r3, #32
 8003476:	4a27      	ldr	r2, [pc, #156]	; (8003514 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8003478:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	3302      	adds	r3, #2
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	461a      	mov	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	dd01      	ble.n	80034a0 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 800349c:	2150      	movs	r1, #80	; 0x50
 800349e:	e000      	b.n	80034a2 <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 80034a0:	2128      	movs	r1, #40	; 0x28
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3328      	adds	r3, #40	; 0x28
 80034a6:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80034a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3301      	adds	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b07      	cmp	r3, #7
 80034b6:	d9b2      	bls.n	800341e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80034c0:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 80034c2:	e01e      	b.n	8003502 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b0d      	cmp	r3, #13
 80034ca:	d813      	bhi.n	80034f4 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80034cc:	2318      	movs	r3, #24
 80034ce:	72fb      	strb	r3, [r7, #11]
 80034d0:	e007      	b.n	80034e2 <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80034d6:	2100      	movs	r1, #0
 80034d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80034dc:	7afb      	ldrb	r3, [r7, #11]
 80034de:	3301      	adds	r3, #1
 80034e0:	72fb      	strb	r3, [r7, #11]
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	2b2f      	cmp	r3, #47	; 0x2f
 80034e6:	d9f4      	bls.n	80034d2 <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80034f0:	6013      	str	r3, [r2, #0]
}
 80034f2:	e006      	b.n	8003502 <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80034fa:	2100      	movs	r1, #0
 80034fc:	4806      	ldr	r0, [pc, #24]	; (8003518 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80034fe:	f003 fd87 	bl	8007010 <HAL_TIM_PWM_Stop_DMA>
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000588 	.word	0x20000588
 8003510:	20000504 	.word	0x20000504
 8003514:	20000528 	.word	0x20000528
 8003518:	20000418 	.word	0x20000418

0800351c <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
 8003526:	460b      	mov	r3, r1
 8003528:	71bb      	strb	r3, [r7, #6]
 800352a:	4613      	mov	r3, r2
 800352c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800352e:	797b      	ldrb	r3, [r7, #5]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <hsl_to_rgb+0x1c>
 8003534:	2300      	movs	r3, #0
 8003536:	e0b1      	b.n	800369c <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8003538:	797b      	ldrb	r3, [r7, #5]
 800353a:	b29b      	uxth	r3, r3
 800353c:	3301      	adds	r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8003542:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db09      	blt.n	800355e <hsl_to_rgb+0x42>
 800354a:	89bb      	ldrh	r3, [r7, #12]
 800354c:	b29b      	uxth	r3, r3
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	79ba      	ldrb	r2, [r7, #6]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	121b      	asrs	r3, r3, #8
 8003558:	b2db      	uxtb	r3, r3
 800355a:	74fb      	strb	r3, [r7, #19]
 800355c:	e00a      	b.n	8003574 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 800355e:	89bb      	ldrh	r3, [r7, #12]
 8003560:	b29b      	uxth	r3, r3
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003568:	79ba      	ldrb	r2, [r7, #6]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	121b      	asrs	r3, r3, #8
 8003570:	b2db      	uxtb	r3, r3
 8003572:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	0052      	lsls	r2, r2, #1
 800357c:	4413      	add	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	b29b      	uxth	r3, r3
 8003582:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	b29b      	uxth	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 800358c:	7d3b      	ldrb	r3, [r7, #20]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	b29b      	uxth	r3, r3
 8003592:	3301      	adds	r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8003598:	897b      	ldrh	r3, [r7, #10]
 800359a:	b29b      	uxth	r3, r3
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <hsl_to_rgb+0x9c>
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	7cfa      	ldrb	r2, [r7, #19]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	121b      	asrs	r3, r3, #8
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	74bb      	strb	r3, [r7, #18]
 80035b6:	e00a      	b.n	80035ce <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80035c0:	7cfa      	ldrb	r2, [r7, #19]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	121b      	asrs	r3, r3, #8
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	797a      	ldrb	r2, [r7, #5]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d839      	bhi.n	800365e <hsl_to_rgb+0x142>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <hsl_to_rgb+0xd4>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003605 	.word	0x08003605
 80035f4:	08003617 	.word	0x08003617
 80035f8:	08003629 	.word	0x08003629
 80035fc:	0800363b 	.word	0x0800363b
 8003600:	0800364d 	.word	0x0800364d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	75fb      	strb	r3, [r7, #23]
 800360a:	7cbb      	ldrb	r3, [r7, #18]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	75bb      	strb	r3, [r7, #22]
 8003610:	2300      	movs	r3, #0
 8003612:	757b      	strb	r3, [r7, #21]
 8003614:	e02c      	b.n	8003670 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8003616:	7cbb      	ldrb	r3, [r7, #18]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	75fb      	strb	r3, [r7, #23]
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	75bb      	strb	r3, [r7, #22]
 8003622:	2300      	movs	r3, #0
 8003624:	757b      	strb	r3, [r7, #21]
 8003626:	e023      	b.n	8003670 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	75bb      	strb	r3, [r7, #22]
 8003632:	7cbb      	ldrb	r3, [r7, #18]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	757b      	strb	r3, [r7, #21]
 8003638:	e01a      	b.n	8003670 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
 800363e:	7cbb      	ldrb	r3, [r7, #18]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	75bb      	strb	r3, [r7, #22]
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	757b      	strb	r3, [r7, #21]
 800364a:	e011      	b.n	8003670 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800364c:	7cbb      	ldrb	r3, [r7, #18]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	75fb      	strb	r3, [r7, #23]
 8003652:	2300      	movs	r3, #0
 8003654:	75bb      	strb	r3, [r7, #22]
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	757b      	strb	r3, [r7, #21]
 800365c:	e008      	b.n	8003670 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	75fb      	strb	r3, [r7, #23]
 8003664:	2300      	movs	r3, #0
 8003666:	75bb      	strb	r3, [r7, #22]
 8003668:	7cbb      	ldrb	r3, [r7, #18]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	757b      	strb	r3, [r7, #21]
 800366e:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	7c7b      	ldrb	r3, [r7, #17]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4413      	add	r3, r2
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	7dbb      	ldrb	r3, [r7, #22]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	7c7b      	ldrb	r3, [r7, #17]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	440b      	add	r3, r1
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	431a      	orrs	r2, r3
 800368e:	7d7b      	ldrb	r3, [r7, #21]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	4619      	mov	r1, r3
 8003694:	7c7b      	ldrb	r3, [r7, #17]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	440b      	add	r3, r1
 800369a:	4313      	orrs	r3, r2
}
 800369c:	4618      	mov	r0, r3
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_Init+0x40>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_Init+0x40>)
 80036b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_Init+0x40>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_Init+0x40>)
 80036be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_Init+0x40>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d0:	2003      	movs	r0, #3
 80036d2:	f000 f94f 	bl	8003974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036d6:	200f      	movs	r0, #15
 80036d8:	f000 f808 	bl	80036ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036dc:	f7ff f9dc 	bl	8002a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00

080036ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_InitTick+0x54>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_InitTick+0x58>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003702:	fbb3 f3f1 	udiv	r3, r3, r1
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f967 	bl	80039de <HAL_SYSTICK_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e00e      	b.n	8003738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b0f      	cmp	r3, #15
 800371e:	d80a      	bhi.n	8003736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003720:	2200      	movs	r2, #0
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	f000 f92f 	bl	800398a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800372c:	4a06      	ldr	r2, [pc, #24]	; (8003748 <HAL_InitTick+0x5c>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000098 	.word	0x20000098
 8003744:	200000a0 	.word	0x200000a0
 8003748:	2000009c 	.word	0x2000009c

0800374c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_IncTick+0x20>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x24>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4413      	add	r3, r2
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_IncTick+0x24>)
 800375e:	6013      	str	r3, [r2, #0]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	200000a0 	.word	0x200000a0
 8003770:	2000058c 	.word	0x2000058c

08003774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return uwTick;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_GetTick+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	2000058c 	.word	0x2000058c

0800378c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003794:	f7ff ffee 	bl	8003774 <HAL_GetTick>
 8003798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d005      	beq.n	80037b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_Delay+0x44>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037b2:	bf00      	nop
 80037b4:	f7ff ffde 	bl	8003774 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d8f7      	bhi.n	80037b4 <HAL_Delay+0x28>
  {
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200000a0 	.word	0x200000a0

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4907      	ldr	r1, [pc, #28]	; (8003870 <__NVIC_EnableIRQ+0x38>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003940:	d301      	bcc.n	8003946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003942:	2301      	movs	r3, #1
 8003944:	e00f      	b.n	8003966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <SysTick_Config+0x40>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394e:	210f      	movs	r1, #15
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	f7ff ff8e 	bl	8003874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <SysTick_Config+0x40>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <SysTick_Config+0x40>)
 8003960:	2207      	movs	r2, #7
 8003962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	e000e010 	.word	0xe000e010

08003974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff29 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800399c:	f7ff ff3e 	bl	800381c <__NVIC_GetPriorityGrouping>
 80039a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	6978      	ldr	r0, [r7, #20]
 80039a8:	f7ff ff8e 	bl	80038c8 <NVIC_EncodePriority>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff5d 	bl	8003874 <__NVIC_SetPriority>
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	4603      	mov	r3, r0
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff31 	bl	8003838 <__NVIC_EnableIRQ>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ffa2 	bl	8003930 <SysTick_Config>
 80039ec:	4603      	mov	r3, r0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a04:	f7ff feb6 	bl	8003774 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e099      	b.n	8003b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a34:	e00f      	b.n	8003a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a36:	f7ff fe9d 	bl	8003774 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d908      	bls.n	8003a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e078      	b.n	8003b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e8      	bne.n	8003a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <HAL_DMA_Init+0x158>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d107      	bne.n	8003ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d117      	bne.n	8003b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb01 	bl	8004104 <DMA_CheckFifoParam>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b16:	2301      	movs	r3, #1
 8003b18:	e016      	b.n	8003b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fab8 	bl	8004098 <DMA_CalcBaseAndBitshift>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	223f      	movs	r2, #63	; 0x3f
 8003b32:	409a      	lsls	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	f010803f 	.word	0xf010803f

08003b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_DMA_Start_IT+0x26>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e040      	b.n	8003bfc <HAL_DMA_Start_IT+0xa8>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d12f      	bne.n	8003bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fa4a 	bl	800403c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	223f      	movs	r2, #63	; 0x3f
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0216 	orr.w	r2, r2, #22
 8003bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0208 	orr.w	r2, r2, #8
 8003bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e005      	b.n	8003bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c12:	f7ff fdaf 	bl	8003774 <HAL_GetTick>
 8003c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d008      	beq.n	8003c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e052      	b.n	8003cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0216 	bic.w	r2, r2, #22
 8003c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_DMA_Abort+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0208 	bic.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0201 	bic.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c86:	e013      	b.n	8003cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c88:	f7ff fd74 	bl	8003774 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d90c      	bls.n	8003cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e015      	b.n	8003cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e4      	bne.n	8003c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	223f      	movs	r2, #63	; 0x3f
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d004      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e00c      	b.n	8003d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2205      	movs	r2, #5
 8003d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d34:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <HAL_DMA_IRQHandler+0x248>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a8e      	ldr	r2, [pc, #568]	; (8003f74 <HAL_DMA_IRQHandler+0x24c>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d52:	2208      	movs	r2, #8
 8003d54:	409a      	lsls	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01a      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	2208      	movs	r2, #8
 8003d82:	409a      	lsls	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f043 0201 	orr.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	2201      	movs	r2, #1
 8003db8:	409a      	lsls	r2, r3
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	2204      	movs	r2, #4
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d012      	beq.n	8003e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	2204      	movs	r2, #4
 8003dee:	409a      	lsls	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	2210      	movs	r2, #16
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d043      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d03c      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	2210      	movs	r2, #16
 8003e24:	409a      	lsls	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d018      	beq.n	8003e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d108      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d024      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
 8003e56:	e01f      	b.n	8003e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01b      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
 8003e68:	e016      	b.n	8003e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0208 	bic.w	r2, r2, #8
 8003e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 808f 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8087 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d136      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0216 	bic.w	r2, r2, #22
 8003ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_DMA_IRQHandler+0x1da>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0208 	bic.w	r2, r2, #8
 8003f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	223f      	movs	r2, #63	; 0x3f
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d07e      	beq.n	8004034 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
        }
        return;
 8003f3e:	e079      	b.n	8004034 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01d      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10d      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d031      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
 8003f6c:	e02c      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x2a0>
 8003f6e:	bf00      	nop
 8003f70:	20000098 	.word	0x20000098
 8003f74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d023      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
 8003f88:	e01e      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10f      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0210 	bic.w	r2, r2, #16
 8003fa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d032      	beq.n	8004036 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d022      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2205      	movs	r2, #5
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d307      	bcc.n	8004010 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f2      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x2cc>
 800400e:	e000      	b.n	8004012 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004010:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004034:	bf00      	nop
    }
  }
}
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d108      	bne.n	800407c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800407a:	e007      	b.n	800408c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	3b10      	subs	r3, #16
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <DMA_CalcBaseAndBitshift+0x64>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <DMA_CalcBaseAndBitshift+0x68>)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d909      	bls.n	80040da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	; 0x58
 80040d8:	e007      	b.n	80040ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	aaaaaaab 	.word	0xaaaaaaab
 8004100:	0800d554 	.word	0x0800d554

08004104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d11f      	bne.n	800415e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d856      	bhi.n	80041d2 <DMA_CheckFifoParam+0xce>
 8004124:	a201      	add	r2, pc, #4	; (adr r2, 800412c <DMA_CheckFifoParam+0x28>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	0800413d 	.word	0x0800413d
 8004130:	0800414f 	.word	0x0800414f
 8004134:	0800413d 	.word	0x0800413d
 8004138:	080041d3 	.word	0x080041d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d046      	beq.n	80041d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800414c:	e043      	b.n	80041d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004156:	d140      	bne.n	80041da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415c:	e03d      	b.n	80041da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004166:	d121      	bne.n	80041ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d837      	bhi.n	80041de <DMA_CheckFifoParam+0xda>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <DMA_CheckFifoParam+0x70>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004185 	.word	0x08004185
 8004178:	0800418b 	.word	0x0800418b
 800417c:	08004185 	.word	0x08004185
 8004180:	0800419d 	.word	0x0800419d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      break;
 8004188:	e030      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d025      	beq.n	80041e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419a:	e022      	b.n	80041e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041a4:	d11f      	bne.n	80041e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041aa:	e01c      	b.n	80041e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d903      	bls.n	80041ba <DMA_CheckFifoParam+0xb6>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d003      	beq.n	80041c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041b8:	e018      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
      break;
 80041be:	e015      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      break;
 80041d0:	e00b      	b.n	80041ea <DMA_CheckFifoParam+0xe6>
      break;
 80041d2:	bf00      	nop
 80041d4:	e00a      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e008      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041da:	bf00      	nop
 80041dc:	e006      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
 80041e0:	e004      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;   
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041ea:	bf00      	nop
    }
  } 
  
  return status; 
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop

080041fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	e159      	b.n	80044cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004218:	2201      	movs	r2, #1
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	429a      	cmp	r2, r3
 8004232:	f040 8148 	bne.w	80044c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d005      	beq.n	800424e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800424a:	2b02      	cmp	r3, #2
 800424c:	d130      	bne.n	80042b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	2203      	movs	r2, #3
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 0201 	and.w	r2, r3, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d017      	beq.n	80042ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d123      	bne.n	8004340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	08da      	lsrs	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3208      	adds	r2, #8
 8004300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	220f      	movs	r2, #15
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	08da      	lsrs	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3208      	adds	r2, #8
 800433a:	69b9      	ldr	r1, [r7, #24]
 800433c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	2203      	movs	r2, #3
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0203 	and.w	r2, r3, #3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a2 	beq.w	80044c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	4b57      	ldr	r3, [pc, #348]	; (80044e4 <HAL_GPIO_Init+0x2e8>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	4a56      	ldr	r2, [pc, #344]	; (80044e4 <HAL_GPIO_Init+0x2e8>)
 800438c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004390:	6453      	str	r3, [r2, #68]	; 0x44
 8004392:	4b54      	ldr	r3, [pc, #336]	; (80044e4 <HAL_GPIO_Init+0x2e8>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800439e:	4a52      	ldr	r2, [pc, #328]	; (80044e8 <HAL_GPIO_Init+0x2ec>)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	3302      	adds	r3, #2
 80043a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	220f      	movs	r2, #15
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a49      	ldr	r2, [pc, #292]	; (80044ec <HAL_GPIO_Init+0x2f0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d019      	beq.n	80043fe <HAL_GPIO_Init+0x202>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a48      	ldr	r2, [pc, #288]	; (80044f0 <HAL_GPIO_Init+0x2f4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_GPIO_Init+0x1fe>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a47      	ldr	r2, [pc, #284]	; (80044f4 <HAL_GPIO_Init+0x2f8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00d      	beq.n	80043f6 <HAL_GPIO_Init+0x1fa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a46      	ldr	r2, [pc, #280]	; (80044f8 <HAL_GPIO_Init+0x2fc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <HAL_GPIO_Init+0x1f6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a45      	ldr	r2, [pc, #276]	; (80044fc <HAL_GPIO_Init+0x300>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_GPIO_Init+0x1f2>
 80043ea:	2304      	movs	r3, #4
 80043ec:	e008      	b.n	8004400 <HAL_GPIO_Init+0x204>
 80043ee:	2307      	movs	r3, #7
 80043f0:	e006      	b.n	8004400 <HAL_GPIO_Init+0x204>
 80043f2:	2303      	movs	r3, #3
 80043f4:	e004      	b.n	8004400 <HAL_GPIO_Init+0x204>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e002      	b.n	8004400 <HAL_GPIO_Init+0x204>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_GPIO_Init+0x204>
 80043fe:	2300      	movs	r3, #0
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f002 0203 	and.w	r2, r2, #3
 8004406:	0092      	lsls	r2, r2, #2
 8004408:	4093      	lsls	r3, r2
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004410:	4935      	ldr	r1, [pc, #212]	; (80044e8 <HAL_GPIO_Init+0x2ec>)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	3302      	adds	r3, #2
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800441e:	4b38      	ldr	r3, [pc, #224]	; (8004500 <HAL_GPIO_Init+0x304>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004442:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <HAL_GPIO_Init+0x304>)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004448:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_GPIO_Init+0x304>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800446c:	4a24      	ldr	r2, [pc, #144]	; (8004500 <HAL_GPIO_Init+0x304>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004472:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_GPIO_Init+0x304>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	43db      	mvns	r3, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4013      	ands	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004496:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <HAL_GPIO_Init+0x304>)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_GPIO_Init+0x304>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044c0:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <HAL_GPIO_Init+0x304>)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3301      	adds	r3, #1
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b0f      	cmp	r3, #15
 80044d0:	f67f aea2 	bls.w	8004218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3724      	adds	r7, #36	; 0x24
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40013800 	.word	0x40013800
 80044ec:	40020000 	.word	0x40020000
 80044f0:	40020400 	.word	0x40020400
 80044f4:	40020800 	.word	0x40020800
 80044f8:	40020c00 	.word	0x40020c00
 80044fc:	40021000 	.word	0x40021000
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	e001      	b.n	8004526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]
 8004540:	4613      	mov	r3, r2
 8004542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004544:	787b      	ldrb	r3, [r7, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004550:	e003      	b.n	800455a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	041a      	lsls	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	619a      	str	r2, [r3, #24]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e12b      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fe f898 	bl	80026c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045cc:	f001 fbbc 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 80045d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4a81      	ldr	r2, [pc, #516]	; (80047dc <HAL_I2C_Init+0x274>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d807      	bhi.n	80045ec <HAL_I2C_Init+0x84>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a80      	ldr	r2, [pc, #512]	; (80047e0 <HAL_I2C_Init+0x278>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e006      	b.n	80045fa <HAL_I2C_Init+0x92>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a7d      	ldr	r2, [pc, #500]	; (80047e4 <HAL_I2C_Init+0x27c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	bf94      	ite	ls
 80045f4:	2301      	movls	r3, #1
 80045f6:	2300      	movhi	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0e7      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a78      	ldr	r2, [pc, #480]	; (80047e8 <HAL_I2C_Init+0x280>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_I2C_Init+0x274>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <HAL_I2C_Init+0xd4>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3301      	adds	r3, #1
 800463a:	e009      	b.n	8004650 <HAL_I2C_Init+0xe8>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	4a69      	ldr	r2, [pc, #420]	; (80047ec <HAL_I2C_Init+0x284>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	3301      	adds	r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	495c      	ldr	r1, [pc, #368]	; (80047dc <HAL_I2C_Init+0x274>)
 800466c:	428b      	cmp	r3, r1
 800466e:	d819      	bhi.n	80046a4 <HAL_I2C_Init+0x13c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1e59      	subs	r1, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fbb1 f3f3 	udiv	r3, r1, r3
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004684:	400b      	ands	r3, r1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_I2C_Init+0x138>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1e59      	subs	r1, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fbb1 f3f3 	udiv	r3, r1, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469e:	e051      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a0:	2304      	movs	r3, #4
 80046a2:	e04f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d111      	bne.n	80046d0 <HAL_I2C_Init+0x168>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1e58      	subs	r0, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	440b      	add	r3, r1
 80046ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80046be:	3301      	adds	r3, #1
 80046c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e012      	b.n	80046f6 <HAL_I2C_Init+0x18e>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	0099      	lsls	r1, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Init+0x196>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e022      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10e      	bne.n	8004724 <HAL_I2C_Init+0x1bc>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e58      	subs	r0, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	440b      	add	r3, r1
 8004714:	fbb0 f3f3 	udiv	r3, r0, r3
 8004718:	3301      	adds	r3, #1
 800471a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004722:	e00f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1e58      	subs	r0, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	0099      	lsls	r1, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	6809      	ldr	r1, [r1, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6911      	ldr	r1, [r2, #16]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68d2      	ldr	r2, [r2, #12]
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	000186a0 	.word	0x000186a0
 80047e0:	001e847f 	.word	0x001e847f
 80047e4:	003d08ff 	.word	0x003d08ff
 80047e8:	431bde83 	.word	0x431bde83
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800480a:	f7fe ffb3 	bl	8003774 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b20      	cmp	r3, #32
 800481a:	f040 80d9 	bne.w	80049d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2319      	movs	r3, #25
 8004824:	2201      	movs	r2, #1
 8004826:	496d      	ldr	r1, [pc, #436]	; (80049dc <HAL_I2C_Mem_Write+0x1ec>)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fc7f 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004834:	2302      	movs	r3, #2
 8004836:	e0cc      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Mem_Write+0x56>
 8004842:	2302      	movs	r3, #2
 8004844:	e0c5      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d007      	beq.n	800486c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800487a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2221      	movs	r2, #33	; 0x21
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a4d      	ldr	r2, [pc, #308]	; (80049e0 <HAL_I2C_Mem_Write+0x1f0>)
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ae:	88f8      	ldrh	r0, [r7, #6]
 80048b0:	893a      	ldrh	r2, [r7, #8]
 80048b2:	8979      	ldrh	r1, [r7, #10]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4603      	mov	r3, r0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fab6 	bl	8004e30 <I2C_RequestMemoryWrite>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d052      	beq.n	8004970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e081      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fd00 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d107      	bne.n	80048f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06b      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_I2C_Mem_Write+0x180>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d017      	beq.n	8004970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1aa      	bne.n	80048ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fcec 	bl	800535a <I2C_WaitOnBTFFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2b04      	cmp	r3, #4
 800498e:	d107      	bne.n	80049a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e016      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e000      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	00100002 	.word	0x00100002
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08c      	sub	sp, #48	; 0x30
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049fe:	f7fe feb9 	bl	8003774 <HAL_GetTick>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	f040 8208 	bne.w	8004e22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2319      	movs	r3, #25
 8004a18:	2201      	movs	r2, #1
 8004a1a:	497b      	ldr	r1, [pc, #492]	; (8004c08 <HAL_I2C_Mem_Read+0x224>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fb85 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e1fb      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Mem_Read+0x56>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e1f4      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d007      	beq.n	8004a60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2222      	movs	r2, #34	; 0x22
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2240      	movs	r2, #64	; 0x40
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a5b      	ldr	r2, [pc, #364]	; (8004c0c <HAL_I2C_Mem_Read+0x228>)
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aa2:	88f8      	ldrh	r0, [r7, #6]
 8004aa4:	893a      	ldrh	r2, [r7, #8]
 8004aa6:	8979      	ldrh	r1, [r7, #10]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fa52 	bl	8004f5c <I2C_RequestMemoryRead>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e1b0      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d113      	bne.n	8004af2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	623b      	str	r3, [r7, #32]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e184      	b.n	8004dfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d11b      	bne.n	8004b32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e164      	b.n	8004dfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d11b      	bne.n	8004b72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	e144      	b.n	8004dfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b88:	e138      	b.n	8004dfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	f200 80f1 	bhi.w	8004d76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d123      	bne.n	8004be4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fc1b 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e139      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004be2:	e10b      	b.n	8004dfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d14e      	bne.n	8004c8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4906      	ldr	r1, [pc, #24]	; (8004c10 <HAL_I2C_Mem_Read+0x22c>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fa98 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e10e      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
 8004c06:	bf00      	nop
 8004c08:	00100002 	.word	0x00100002
 8004c0c:	ffff0000 	.word	0xffff0000
 8004c10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c88:	e0b8      	b.n	8004dfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	2200      	movs	r2, #0
 8004c92:	4966      	ldr	r1, [pc, #408]	; (8004e2c <HAL_I2C_Mem_Read+0x448>)
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fa49 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0bf      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	2200      	movs	r2, #0
 8004cee:	494f      	ldr	r1, [pc, #316]	; (8004e2c <HAL_I2C_Mem_Read+0x448>)
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fa1b 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e091      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d74:	e042      	b.n	8004dfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fb2e 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e04c      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d118      	bne.n	8004dfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f aec2 	bne.w	8004b8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3728      	adds	r7, #40	; 0x28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	00010004 	.word	0x00010004

08004e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	817b      	strh	r3, [r7, #10]
 8004e42:	460b      	mov	r3, r1
 8004e44:	813b      	strh	r3, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f960 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e80:	d103      	bne.n	8004e8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e05f      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e8e:	897b      	ldrh	r3, [r7, #10]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	492d      	ldr	r1, [pc, #180]	; (8004f58 <I2C_RequestMemoryWrite+0x128>)
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f998 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e04c      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	6a39      	ldr	r1, [r7, #32]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fa02 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d107      	bne.n	8004ef2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e02b      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]
 8004f06:	e021      	b.n	8004f4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f08:	893b      	ldrh	r3, [r7, #8]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	6a39      	ldr	r1, [r7, #32]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f9dc 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d107      	bne.n	8004f3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e005      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f42:	893b      	ldrh	r3, [r7, #8]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	00010002 	.word	0x00010002

08004f5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	813b      	strh	r3, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8c2 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbc:	d103      	bne.n	8004fc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0aa      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fca:	897b      	ldrh	r3, [r7, #10]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	4952      	ldr	r1, [pc, #328]	; (8005128 <I2C_RequestMemoryRead+0x1cc>)
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f8fa 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e097      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	6a39      	ldr	r1, [r7, #32]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f964 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	2b04      	cmp	r3, #4
 800501c:	d107      	bne.n	800502e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e076      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d105      	bne.n	8005044 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005038:	893b      	ldrh	r3, [r7, #8]
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	611a      	str	r2, [r3, #16]
 8005042:	e021      	b.n	8005088 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005044:	893b      	ldrh	r3, [r7, #8]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b29b      	uxth	r3, r3
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005054:	6a39      	ldr	r1, [r7, #32]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f93e 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2b04      	cmp	r3, #4
 8005068:	d107      	bne.n	800507a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005078:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e050      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800507e:	893b      	ldrh	r3, [r7, #8]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	6a39      	ldr	r1, [r7, #32]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f923 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b04      	cmp	r3, #4
 800509e:	d107      	bne.n	80050b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e035      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f82b 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d103      	bne.n	80050f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e013      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050f8:	897b      	ldrh	r3, [r7, #10]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	6a3a      	ldr	r2, [r7, #32]
 800510c:	4906      	ldr	r1, [pc, #24]	; (8005128 <I2C_RequestMemoryRead+0x1cc>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f863 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	00010002 	.word	0x00010002

0800512c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513c:	e025      	b.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d021      	beq.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe fb15 	bl	8003774 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e023      	b.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10d      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	e00c      	b.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d0b6      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e8:	e051      	b.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	d123      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0204 	orr.w	r2, r3, #4
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e046      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d021      	beq.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fe fa93 	bl	8003774 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e020      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d18d      	bne.n	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e4:	e02d      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f8ce 	bl	8005488 <I2C_IsAcknowledgeFailed>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e02d      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d021      	beq.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fe fa39 	bl	8003774 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e007      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d1ca      	bne.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005366:	e02d      	b.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f88d 	bl	8005488 <I2C_IsAcknowledgeFailed>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e02d      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d021      	beq.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fe f9f8 	bl	8003774 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e007      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d1ca      	bne.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e8:	e042      	b.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d119      	bne.n	800542c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0210 	mvn.w	r2, #16
 8005400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e029      	b.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542c:	f7fe f9a2 	bl	8003774 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d116      	bne.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e007      	b.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d1b5      	bne.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549e:	d11b      	bne.n	80054d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e267      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d075      	beq.n	80055f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005506:	4b88      	ldr	r3, [pc, #544]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d00c      	beq.n	800552c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005512:	4b85      	ldr	r3, [pc, #532]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800551a:	2b08      	cmp	r3, #8
 800551c:	d112      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551e:	4b82      	ldr	r3, [pc, #520]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552a:	d10b      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	4b7e      	ldr	r3, [pc, #504]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05b      	beq.n	80055f0 <HAL_RCC_OscConfig+0x108>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d157      	bne.n	80055f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e242      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554c:	d106      	bne.n	800555c <HAL_RCC_OscConfig+0x74>
 800554e:	4b76      	ldr	r3, [pc, #472]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a75      	ldr	r2, [pc, #468]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e01d      	b.n	8005598 <HAL_RCC_OscConfig+0xb0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x98>
 8005566:	4b70      	ldr	r3, [pc, #448]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6f      	ldr	r2, [pc, #444]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800556c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6c      	ldr	r2, [pc, #432]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e00b      	b.n	8005598 <HAL_RCC_OscConfig+0xb0>
 8005580:	4b69      	ldr	r3, [pc, #420]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a68      	ldr	r2, [pc, #416]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a0:	f7fe f8e8 	bl	8003774 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fe f8e4 	bl	8003774 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e207      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	4b5b      	ldr	r3, [pc, #364]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0xc0>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fe f8d4 	bl	8003774 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fe f8d0 	bl	8003774 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e1f3      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e2:	4b51      	ldr	r3, [pc, #324]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0xe8>
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d063      	beq.n	80056c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fe:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560a:	4b47      	ldr	r3, [pc, #284]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005612:	2b08      	cmp	r3, #8
 8005614:	d11c      	bne.n	8005650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005616:	4b44      	ldr	r3, [pc, #272]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d116      	bne.n	8005650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005622:	4b41      	ldr	r3, [pc, #260]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_RCC_OscConfig+0x152>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d001      	beq.n	800563a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e1c7      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4937      	ldr	r1, [pc, #220]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564e:	e03a      	b.n	80056c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d020      	beq.n	800569a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005658:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCC_OscConfig+0x244>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fe f889 	bl	8003774 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005666:	f7fe f885 	bl	8003774 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1a8      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005678:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4925      	ldr	r1, [pc, #148]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005694:	4313      	orrs	r3, r2
 8005696:	600b      	str	r3, [r1, #0]
 8005698:	e015      	b.n	80056c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <HAL_RCC_OscConfig+0x244>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fe f868 	bl	8003774 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a8:	f7fe f864 	bl	8003774 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e187      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d036      	beq.n	8005740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d016      	beq.n	8005708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_RCC_OscConfig+0x248>)
 80056dc:	2201      	movs	r2, #1
 80056de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fe f848 	bl	8003774 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e8:	f7fe f844 	bl	8003774 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e167      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x200>
 8005706:	e01b      	b.n	8005740 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_RCC_OscConfig+0x248>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570e:	f7fe f831 	bl	8003774 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005714:	e00e      	b.n	8005734 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005716:	f7fe f82d 	bl	8003774 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d907      	bls.n	8005734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e150      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
 8005728:	40023800 	.word	0x40023800
 800572c:	42470000 	.word	0x42470000
 8005730:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005734:	4b88      	ldr	r3, [pc, #544]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ea      	bne.n	8005716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8097 	beq.w	800587c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005752:	4b81      	ldr	r3, [pc, #516]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	4b7d      	ldr	r3, [pc, #500]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	4a7c      	ldr	r2, [pc, #496]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576c:	6413      	str	r3, [r2, #64]	; 0x40
 800576e:	4b7a      	ldr	r3, [pc, #488]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577e:	4b77      	ldr	r3, [pc, #476]	; (800595c <HAL_RCC_OscConfig+0x474>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d118      	bne.n	80057bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800578a:	4b74      	ldr	r3, [pc, #464]	; (800595c <HAL_RCC_OscConfig+0x474>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a73      	ldr	r2, [pc, #460]	; (800595c <HAL_RCC_OscConfig+0x474>)
 8005790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005796:	f7fd ffed 	bl	8003774 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579e:	f7fd ffe9 	bl	8003774 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e10c      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b0:	4b6a      	ldr	r3, [pc, #424]	; (800595c <HAL_RCC_OscConfig+0x474>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x2ea>
 80057c4:	4b64      	ldr	r3, [pc, #400]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4a63      	ldr	r2, [pc, #396]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
 80057d0:	e01c      	b.n	800580c <HAL_RCC_OscConfig+0x324>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x30c>
 80057da:	4b5f      	ldr	r3, [pc, #380]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	4a5e      	ldr	r2, [pc, #376]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	6713      	str	r3, [r2, #112]	; 0x70
 80057e6:	4b5c      	ldr	r3, [pc, #368]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a5b      	ldr	r2, [pc, #364]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0x324>
 80057f4:	4b58      	ldr	r3, [pc, #352]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a57      	ldr	r2, [pc, #348]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	4b55      	ldr	r3, [pc, #340]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a54      	ldr	r2, [pc, #336]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005806:	f023 0304 	bic.w	r3, r3, #4
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fd ffae 	bl	8003774 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	e00a      	b.n	8005832 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581c:	f7fd ffaa 	bl	8003774 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	; 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e0cb      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005832:	4b49      	ldr	r3, [pc, #292]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0ee      	beq.n	800581c <HAL_RCC_OscConfig+0x334>
 800583e:	e014      	b.n	800586a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005840:	f7fd ff98 	bl	8003774 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	e00a      	b.n	800585e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005848:	f7fd ff94 	bl	8003774 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e0b5      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800585e:	4b3e      	ldr	r3, [pc, #248]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1ee      	bne.n	8005848 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005870:	4b39      	ldr	r3, [pc, #228]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	4a38      	ldr	r2, [pc, #224]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a1 	beq.w	80059c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005886:	4b34      	ldr	r3, [pc, #208]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b08      	cmp	r3, #8
 8005890:	d05c      	beq.n	800594c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d141      	bne.n	800591e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589a:	4b31      	ldr	r3, [pc, #196]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fd ff68 	bl	8003774 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fd ff64 	bl	8003774 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e087      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ba:	4b27      	ldr	r3, [pc, #156]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	3b01      	subs	r3, #1
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	061b      	lsls	r3, r3, #24
 80058ea:	491b      	ldr	r1, [pc, #108]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd ff3d 	bl	8003774 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fd ff39 	bl	8003774 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e05c      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x416>
 800591c:	e054      	b.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fd ff26 	bl	8003774 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592c:	f7fd ff22 	bl	8003774 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e045      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x444>
 800594a:	e03d      	b.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e038      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000
 8005960:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <HAL_RCC_OscConfig+0x4ec>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d028      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d121      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d11a      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800599a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	3b01      	subs	r3, #1
 80059ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800

080059d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0cc      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059ec:	4b68      	ldr	r3, [pc, #416]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d90c      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b65      	ldr	r3, [pc, #404]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b63      	ldr	r3, [pc, #396]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0b8      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a2c:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a58      	ldr	r2, [pc, #352]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a44:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a52      	ldr	r2, [pc, #328]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a50:	4b50      	ldr	r3, [pc, #320]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	494d      	ldr	r1, [pc, #308]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d044      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a76:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d119      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a96:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e06f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e067      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f023 0203 	bic.w	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4934      	ldr	r1, [pc, #208]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac8:	f7fd fe54 	bl	8003774 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	e00a      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad0:	f7fd fe50 	bl	8003774 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e04f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 020c 	and.w	r2, r3, #12
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d1eb      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af8:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d20c      	bcs.n	8005b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0e:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e032      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4916      	ldr	r1, [pc, #88]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	490e      	ldr	r1, [pc, #56]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b5e:	f000 f821 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	490a      	ldr	r1, [pc, #40]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	5ccb      	ldrb	r3, [r1, r3]
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fdb4 	bl	80036ec <HAL_InitTick>

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40023c00 	.word	0x40023c00
 8005b94:	40023800 	.word	0x40023800
 8005b98:	0800d53c 	.word	0x0800d53c
 8005b9c:	20000098 	.word	0x20000098
 8005ba0:	2000009c 	.word	0x2000009c

08005ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba8:	b090      	sub	sp, #64	; 0x40
 8005baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bbc:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 030c 	and.w	r3, r3, #12
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d00d      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x40>
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	f200 80a1 	bhi.w	8005d10 <HAL_RCC_GetSysClockFreq+0x16c>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d003      	beq.n	8005bde <HAL_RCC_GetSysClockFreq+0x3a>
 8005bd6:	e09b      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bd8:	4b53      	ldr	r3, [pc, #332]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005bdc:	e09b      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bde:	4b53      	ldr	r3, [pc, #332]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005be2:	e098      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be4:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bee:	4b4d      	ldr	r3, [pc, #308]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d028      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bfa:	4b4a      	ldr	r3, [pc, #296]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	099b      	lsrs	r3, r3, #6
 8005c00:	2200      	movs	r2, #0
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	627a      	str	r2, [r7, #36]	; 0x24
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c10:	fb03 f201 	mul.w	r2, r3, r1
 8005c14:	2300      	movs	r3, #0
 8005c16:	fb00 f303 	mul.w	r3, r0, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a43      	ldr	r2, [pc, #268]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c1e:	fba0 1202 	umull	r1, r2, r0, r2
 8005c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c24:	460a      	mov	r2, r1
 8005c26:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2a:	4413      	add	r3, r2
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c30:	2200      	movs	r2, #0
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	61fa      	str	r2, [r7, #28]
 8005c36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c3e:	f7fa ffcb 	bl	8000bd8 <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4613      	mov	r3, r2
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c4a:	e053      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c4c:	4b35      	ldr	r3, [pc, #212]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	2200      	movs	r2, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	617a      	str	r2, [r7, #20]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c5e:	f04f 0b00 	mov.w	fp, #0
 8005c62:	4652      	mov	r2, sl
 8005c64:	465b      	mov	r3, fp
 8005c66:	f04f 0000 	mov.w	r0, #0
 8005c6a:	f04f 0100 	mov.w	r1, #0
 8005c6e:	0159      	lsls	r1, r3, #5
 8005c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c74:	0150      	lsls	r0, r2, #5
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	ebb2 080a 	subs.w	r8, r2, sl
 8005c7e:	eb63 090b 	sbc.w	r9, r3, fp
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c96:	ebb2 0408 	subs.w	r4, r2, r8
 8005c9a:	eb63 0509 	sbc.w	r5, r3, r9
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	00eb      	lsls	r3, r5, #3
 8005ca8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cac:	00e2      	lsls	r2, r4, #3
 8005cae:	4614      	mov	r4, r2
 8005cb0:	461d      	mov	r5, r3
 8005cb2:	eb14 030a 	adds.w	r3, r4, sl
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	eb45 030b 	adc.w	r3, r5, fp
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cca:	4629      	mov	r1, r5
 8005ccc:	028b      	lsls	r3, r1, #10
 8005cce:	4621      	mov	r1, r4
 8005cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	028a      	lsls	r2, r1, #10
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	2200      	movs	r2, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	60fa      	str	r2, [r7, #12]
 8005ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce8:	f7fa ff76 	bl	8000bd8 <__aeabi_uldivmod>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d0e:	e002      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3740      	adds	r7, #64	; 0x40
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00f42400 	.word	0x00f42400
 8005d2c:	017d7840 	.word	0x017d7840

08005d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d34:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000098 	.word	0x20000098

08005d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d4c:	f7ff fff0 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	0a9b      	lsrs	r3, r3, #10
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4903      	ldr	r1, [pc, #12]	; (8005d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d5e:	5ccb      	ldrb	r3, [r1, r3]
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	0800d54c 	.word	0x0800d54c

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d74:	f7ff ffdc 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0b5b      	lsrs	r3, r3, #13
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	0800d54c 	.word	0x0800d54c

08005d98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d038      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005dc0:	4b68      	ldr	r3, [pc, #416]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc6:	f7fd fcd5 	bl	8003774 <HAL_GetTick>
 8005dca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dce:	f7fd fcd1 	bl	8003774 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e0bd      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005de0:	4b61      	ldr	r3, [pc, #388]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f0      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	019b      	lsls	r3, r3, #6
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	071b      	lsls	r3, r3, #28
 8005dfe:	495a      	ldr	r1, [pc, #360]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e06:	4b57      	ldr	r3, [pc, #348]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e0c:	f7fd fcb2 	bl	8003774 <HAL_GetTick>
 8005e10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e14:	f7fd fcae 	bl	8003774 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e09a      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e26:	4b50      	ldr	r3, [pc, #320]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8083 	beq.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	4b48      	ldr	r3, [pc, #288]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	4a47      	ldr	r2, [pc, #284]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005e50:	4b45      	ldr	r3, [pc, #276]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e5c:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a42      	ldr	r2, [pc, #264]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e66:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e68:	f7fd fc84 	bl	8003774 <HAL_GetTick>
 8005e6c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e70:	f7fd fc80 	bl	8003774 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e06c      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e82:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e8e:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e96:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02f      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d028      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eb6:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ebc:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ec2:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ec8:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d114      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fd fc4e 	bl	8003774 <HAL_GetTick>
 8005ed8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005edc:	f7fd fc4a 	bl	8003774 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e034      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef2:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0ee      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f0a:	d10d      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005f0c:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f20:	4911      	ldr	r1, [pc, #68]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]
 8005f26:	e005      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a0e      	ldr	r2, [pc, #56]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f32:	6093      	str	r3, [r2, #8]
 8005f34:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f40:	4909      	ldr	r1, [pc, #36]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	7d1a      	ldrb	r2, [r3, #20]
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005f58:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	42470068 	.word	0x42470068
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	42470e40 	.word	0x42470e40
 8005f74:	424711e0 	.word	0x424711e0

08005f78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e066      	b.n	800605c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7f5b      	ldrb	r3, [r3, #29]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d105      	bne.n	8005fa4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fcd0 	bl	8002944 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	22ca      	movs	r2, #202	; 0xca
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2253      	movs	r2, #83	; 0x53
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa45 	bl	800644a <RTC_EnterInitMode>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d12c      	bne.n	8006024 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fdc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6899      	ldr	r1, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68d2      	ldr	r2, [r2, #12]
 8006004:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6919      	ldr	r1, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	041a      	lsls	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa4c 	bl	80064b8 <RTC_ExitInitMode>
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d113      	bne.n	8006052 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	22ff      	movs	r2, #255	; 0xff
 8006058:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	7f1b      	ldrb	r3, [r3, #28]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_RTC_SetTime+0x1c>
 800607c:	2302      	movs	r3, #2
 800607e:	e087      	b.n	8006190 <HAL_RTC_SetTime+0x12c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2202      	movs	r2, #2
 800608a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d126      	bne.n	80060e0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2200      	movs	r2, #0
 80060a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fa29 	bl	8006502 <RTC_ByteToBcd2>
 80060b0:	4603      	mov	r3, r0
 80060b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fa22 	bl	8006502 <RTC_ByteToBcd2>
 80060be:	4603      	mov	r3, r0
 80060c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	789b      	ldrb	r3, [r3, #2]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fa1a 	bl	8006502 <RTC_ByteToBcd2>
 80060ce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	78db      	ldrb	r3, [r3, #3]
 80060d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e018      	b.n	8006112 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006100:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006106:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	78db      	ldrb	r3, [r3, #3]
 800610c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	22ca      	movs	r2, #202	; 0xca
 8006118:	625a      	str	r2, [r3, #36]	; 0x24
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2253      	movs	r2, #83	; 0x53
 8006120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f991 	bl	800644a <RTC_EnterInitMode>
 8006128:	4603      	mov	r3, r0
 800612a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d120      	bne.n	8006174 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800613c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006140:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006150:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	431a      	orrs	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f9a4 	bl	80064b8 <RTC_ExitInitMode>
 8006170:	4603      	mov	r3, r0
 8006172:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006174:	7cfb      	ldrb	r3, [r7, #19]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	22ff      	movs	r2, #255	; 0xff
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	771a      	strb	r2, [r3, #28]

  return status;
 800618e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006190:	4618      	mov	r0, r3
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd90      	pop	{r4, r7, pc}

08006198 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	0d9b      	lsrs	r3, r3, #22
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d11a      	bne.n	800624a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f98f 	bl	800653c <RTC_Bcd2ToByte>
 800621e:	4603      	mov	r3, r0
 8006220:	461a      	mov	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f986 	bl	800653c <RTC_Bcd2ToByte>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	789b      	ldrb	r3, [r3, #2]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f97d 	bl	800653c <RTC_Bcd2ToByte>
 8006242:	4603      	mov	r3, r0
 8006244:	461a      	mov	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	7f1b      	ldrb	r3, [r3, #28]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_RTC_SetDate+0x1c>
 800626c:	2302      	movs	r3, #2
 800626e:	e071      	b.n	8006354 <HAL_RTC_SetDate+0x100>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2202      	movs	r2, #2
 800627a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10e      	bne.n	80062a0 <HAL_RTC_SetDate+0x4c>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	f023 0310 	bic.w	r3, r3, #16
 8006296:	b2db      	uxtb	r3, r3
 8006298:	330a      	adds	r3, #10
 800629a:	b2da      	uxtb	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d11c      	bne.n	80062e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f929 	bl	8006502 <RTC_ByteToBcd2>
 80062b0:	4603      	mov	r3, r0
 80062b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f922 	bl	8006502 <RTC_ByteToBcd2>
 80062be:	4603      	mov	r3, r0
 80062c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	789b      	ldrb	r3, [r3, #2]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f91a 	bl	8006502 <RTC_ByteToBcd2>
 80062ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e00e      	b.n	80062fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	78db      	ldrb	r3, [r3, #3]
 80062e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062ec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	22ca      	movs	r2, #202	; 0xca
 8006304:	625a      	str	r2, [r3, #36]	; 0x24
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2253      	movs	r2, #83	; 0x53
 800630c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f89b 	bl	800644a <RTC_EnterInitMode>
 8006314:	4603      	mov	r3, r0
 8006316:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006318:	7cfb      	ldrb	r3, [r7, #19]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10c      	bne.n	8006338 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800632c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f8c2 	bl	80064b8 <RTC_ExitInitMode>
 8006334:	4603      	mov	r3, r0
 8006336:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	22ff      	movs	r2, #255	; 0xff
 800634a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	771a      	strb	r2, [r3, #28]

  return status;
 8006352:	7cfb      	ldrb	r3, [r7, #19]
}
 8006354:	4618      	mov	r0, r3
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd90      	pop	{r4, r7, pc}

0800635c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006376:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800637a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	0b5b      	lsrs	r3, r3, #13
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d11a      	bne.n	80063f0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	78db      	ldrb	r3, [r3, #3]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f8bc 	bl	800653c <RTC_Bcd2ToByte>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 f8b3 	bl	800653c <RTC_Bcd2ToByte>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	789b      	ldrb	r3, [r3, #2]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f8aa 	bl	800653c <RTC_Bcd2ToByte>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006414:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006416:	f7fd f9ad 	bl	8003774 <HAL_GetTick>
 800641a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800641c:	e009      	b.n	8006432 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800641e:	f7fd f9a9 	bl	8003774 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642c:	d901      	bls.n	8006432 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e007      	b.n	8006442 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ee      	beq.n	800641e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d122      	bne.n	80064ae <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006476:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006478:	f7fd f97c 	bl	8003774 <HAL_GetTick>
 800647c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800647e:	e00c      	b.n	800649a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006480:	f7fd f978 	bl	8003774 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800648e:	d904      	bls.n	800649a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2204      	movs	r2, #4
 8006494:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <RTC_EnterInitMode+0x64>
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d1e8      	bne.n	8006480 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ff89 	bl	80063fa <HAL_RTC_WaitForSynchro>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2204      	movs	r2, #4
 80064f2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	4603      	mov	r3, r0
 800650a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006510:	e005      	b.n	800651e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	3301      	adds	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	3b0a      	subs	r3, #10
 800651c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	2b09      	cmp	r3, #9
 8006522:	d8f6      	bhi.n	8006512 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	b2da      	uxtb	r2, r3
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	4313      	orrs	r3, r2
 800652e:	b2db      	uxtb	r3, r3
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	091b      	lsrs	r3, r3, #4
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	0092      	lsls	r2, r2, #2
 8006554:	4413      	add	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	b2da      	uxtb	r2, r3
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	4413      	add	r3, r2
 8006566:	b2db      	uxtb	r3, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07b      	b.n	800667e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d108      	bne.n	80065a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006596:	d009      	beq.n	80065ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	61da      	str	r2, [r3, #28]
 800659e:	e005      	b.n	80065ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fc fa1e 	bl	8002a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006630:	ea42 0103 	orr.w	r1, r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	0c1b      	lsrs	r3, r3, #16
 800664a:	f003 0104 	and.w	r1, r3, #4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f003 0210 	and.w	r2, r3, #16
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800666c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b08c      	sub	sp, #48	; 0x30
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006694:	2301      	movs	r3, #1
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_SPI_TransmitReceive+0x26>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e18a      	b.n	80069c2 <HAL_SPI_TransmitReceive+0x33c>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066b4:	f7fd f85e 	bl	8003774 <HAL_GetTick>
 80066b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066ca:	887b      	ldrh	r3, [r7, #2]
 80066cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d00f      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x70>
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066dc:	d107      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d103      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x68>
 80066e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d003      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066ee:	2302      	movs	r3, #2
 80066f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066f4:	e15b      	b.n	80069ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_SPI_TransmitReceive+0x82>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_SPI_TransmitReceive+0x82>
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800670e:	e14e      	b.n	80069ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b04      	cmp	r3, #4
 800671a:	d003      	beq.n	8006724 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2205      	movs	r2, #5
 8006720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	887a      	ldrh	r2, [r7, #2]
 8006734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	887a      	ldrh	r2, [r7, #2]
 800673a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	887a      	ldrh	r2, [r7, #2]
 8006746:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	887a      	ldrh	r2, [r7, #2]
 800674c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d007      	beq.n	8006778 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006776:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006780:	d178      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <HAL_SPI_TransmitReceive+0x10a>
 800678a:	8b7b      	ldrh	r3, [r7, #26]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d166      	bne.n	800685e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	881a      	ldrh	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	1c9a      	adds	r2, r3, #2
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b4:	e053      	b.n	800685e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d11b      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x176>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d016      	beq.n	80067fc <HAL_SPI_TransmitReceive+0x176>
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d113      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	881a      	ldrh	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	1c9a      	adds	r2, r3, #2
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	d119      	bne.n	800683e <HAL_SPI_TransmitReceive+0x1b8>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d014      	beq.n	800683e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	b292      	uxth	r2, r2
 8006820:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	1c9a      	adds	r2, r3, #2
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800683a:	2301      	movs	r3, #1
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800683e:	f7fc ff99 	bl	8003774 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684a:	429a      	cmp	r2, r3
 800684c:	d807      	bhi.n	800685e <HAL_SPI_TransmitReceive+0x1d8>
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d003      	beq.n	800685e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800685c:	e0a7      	b.n	80069ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1a6      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x130>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1a1      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x130>
 8006872:	e07c      	b.n	800696e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x1fc>
 800687c:	8b7b      	ldrh	r3, [r7, #26]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d16b      	bne.n	800695a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	7812      	ldrb	r2, [r2, #0]
 800688e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a8:	e057      	b.n	800695a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d11c      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x26c>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d017      	beq.n	80068f2 <HAL_SPI_TransmitReceive+0x26c>
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d114      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d119      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x2ae>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d014      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006930:	2301      	movs	r3, #1
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006934:	f7fc ff1e 	bl	8003774 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006940:	429a      	cmp	r2, r3
 8006942:	d803      	bhi.n	800694c <HAL_SPI_TransmitReceive+0x2c6>
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d102      	bne.n	8006952 <HAL_SPI_TransmitReceive+0x2cc>
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006958:	e029      	b.n	80069ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800695e:	b29b      	uxth	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1a2      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x224>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d19d      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f8b2 	bl	8006adc <SPI_EndRxTxTransaction>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800698a:	e010      	b.n	80069ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10b      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	e000      	b.n	80069ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069dc:	f7fc feca 	bl	8003774 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069ec:	f7fc fec2 	bl	8003774 <HAL_GetTick>
 80069f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069f2:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	015b      	lsls	r3, r3, #5
 80069f8:	0d1b      	lsrs	r3, r3, #20
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	fb02 f303 	mul.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a02:	e054      	b.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d050      	beq.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a0c:	f7fc feb2 	bl	8003774 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d902      	bls.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d13d      	bne.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3a:	d111      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d004      	beq.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	d107      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a68:	d10f      	bne.n	8006a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e017      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d19b      	bne.n	8006a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000098 	.word	0x20000098

08006adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <SPI_EndRxTxTransaction+0x7c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <SPI_EndRxTxTransaction+0x80>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	0d5b      	lsrs	r3, r3, #21
 8006af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b06:	d112      	bne.n	8006b2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff ff5a 	bl	80069cc <SPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d0f2      	beq.n	8006b2e <SPI_EndRxTxTransaction+0x52>
 8006b48:	e000      	b.n	8006b4c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b4a:	bf00      	nop
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000098 	.word	0x20000098
 8006b5c:	165e9f81 	.word	0x165e9f81

08006b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e041      	b.n	8006bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fc f964 	bl	8002e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 fd60 	bl	8007664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e041      	b.n	8006c94 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d106      	bne.n	8006c2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f839 	bl	8006c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	f000 fd11 	bl	8007664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d109      	bne.n	8006cdc <HAL_TIM_PWM_Start_DMA+0x2c>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e022      	b.n	8006d22 <HAL_TIM_PWM_Start_DMA+0x72>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d109      	bne.n	8006cf6 <HAL_TIM_PWM_Start_DMA+0x46>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	bf0c      	ite	eq
 8006cee:	2301      	moveq	r3, #1
 8006cf0:	2300      	movne	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	e015      	b.n	8006d22 <HAL_TIM_PWM_Start_DMA+0x72>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d109      	bne.n	8006d10 <HAL_TIM_PWM_Start_DMA+0x60>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	bf0c      	ite	eq
 8006d08:	2301      	moveq	r3, #1
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	e008      	b.n	8006d22 <HAL_TIM_PWM_Start_DMA+0x72>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	bf0c      	ite	eq
 8006d1c:	2301      	moveq	r3, #1
 8006d1e:	2300      	movne	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006d26:	2302      	movs	r3, #2
 8006d28:	e15d      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d109      	bne.n	8006d44 <HAL_TIM_PWM_Start_DMA+0x94>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	e022      	b.n	8006d8a <HAL_TIM_PWM_Start_DMA+0xda>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d109      	bne.n	8006d5e <HAL_TIM_PWM_Start_DMA+0xae>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2300      	movne	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	e015      	b.n	8006d8a <HAL_TIM_PWM_Start_DMA+0xda>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d109      	bne.n	8006d78 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	e008      	b.n	8006d8a <HAL_TIM_PWM_Start_DMA+0xda>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d024      	beq.n	8006dd8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_PWM_Start_DMA+0xee>
 8006d94:	887b      	ldrh	r3, [r7, #2]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e123      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_PWM_Start_DMA+0xfe>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dac:	e016      	b.n	8006ddc <HAL_TIM_PWM_Start_DMA+0x12c>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_PWM_Start_DMA+0x10e>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dbc:	e00e      	b.n	8006ddc <HAL_TIM_PWM_Start_DMA+0x12c>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d104      	bne.n	8006dce <HAL_TIM_PWM_Start_DMA+0x11e>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dcc:	e006      	b.n	8006ddc <HAL_TIM_PWM_Start_DMA+0x12c>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd6:	e001      	b.n	8006ddc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e104      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b0c      	cmp	r3, #12
 8006de0:	f200 80ae 	bhi.w	8006f40 <HAL_TIM_PWM_Start_DMA+0x290>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006f41 	.word	0x08006f41
 8006df4:	08006f41 	.word	0x08006f41
 8006df8:	08006f41 	.word	0x08006f41
 8006dfc:	08006e69 	.word	0x08006e69
 8006e00:	08006f41 	.word	0x08006f41
 8006e04:	08006f41 	.word	0x08006f41
 8006e08:	08006f41 	.word	0x08006f41
 8006e0c:	08006eb1 	.word	0x08006eb1
 8006e10:	08006f41 	.word	0x08006f41
 8006e14:	08006f41 	.word	0x08006f41
 8006e18:	08006f41 	.word	0x08006f41
 8006e1c:	08006ef9 	.word	0x08006ef9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	4a72      	ldr	r2, [pc, #456]	; (8006ff0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006e26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	4a71      	ldr	r2, [pc, #452]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	4a70      	ldr	r2, [pc, #448]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006e36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3334      	adds	r3, #52	; 0x34
 8006e44:	461a      	mov	r2, r3
 8006e46:	887b      	ldrh	r3, [r7, #2]
 8006e48:	f7fc fe84 	bl	8003b54 <HAL_DMA_Start_IT>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e0c7      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e64:	60da      	str	r2, [r3, #12]
      break;
 8006e66:	e06e      	b.n	8006f46 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	4a60      	ldr	r2, [pc, #384]	; (8006ff0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	4a5f      	ldr	r2, [pc, #380]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	4a5e      	ldr	r2, [pc, #376]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006e7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3338      	adds	r3, #56	; 0x38
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	887b      	ldrh	r3, [r7, #2]
 8006e90:	f7fc fe60 	bl	8003b54 <HAL_DMA_Start_IT>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e0a3      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eac:	60da      	str	r2, [r3, #12]
      break;
 8006eae:	e04a      	b.n	8006f46 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	4a4e      	ldr	r2, [pc, #312]	; (8006ff0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006eb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4a4d      	ldr	r2, [pc, #308]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	4a4c      	ldr	r2, [pc, #304]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006ec6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	333c      	adds	r3, #60	; 0x3c
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	887b      	ldrh	r3, [r7, #2]
 8006ed8:	f7fc fe3c 	bl	8003b54 <HAL_DMA_Start_IT>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e07f      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef4:	60da      	str	r2, [r3, #12]
      break;
 8006ef6:	e026      	b.n	8006f46 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	4a3c      	ldr	r2, [pc, #240]	; (8006ff0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006efe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	4a3b      	ldr	r2, [pc, #236]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0c:	4a3a      	ldr	r2, [pc, #232]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006f0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3340      	adds	r3, #64	; 0x40
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	f7fc fe18 	bl	8003b54 <HAL_DMA_Start_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e05b      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f3c:	60da      	str	r2, [r3, #12]
      break;
 8006f3e:	e002      	b.n	8006f46 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	75fb      	strb	r3, [r7, #23]
      break;
 8006f44:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d14b      	bne.n	8006fe4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fe2b 	bl	8007bb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d107      	bne.n	8006f74 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d018      	beq.n	8006fb0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f86:	d013      	beq.n	8006fb0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1c      	ldr	r2, [pc, #112]	; (8007000 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1b      	ldr	r2, [pc, #108]	; (8007004 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d009      	beq.n	8006fb0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a18      	ldr	r2, [pc, #96]	; (800700c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d111      	bne.n	8006fd4 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b06      	cmp	r3, #6
 8006fc0:	d010      	beq.n	8006fe4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd2:	e007      	b.n	8006fe4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	08007555 	.word	0x08007555
 8006ff4:	080075fd 	.word	0x080075fd
 8006ff8:	080074c3 	.word	0x080074c3
 8006ffc:	40010000 	.word	0x40010000
 8007000:	40000400 	.word	0x40000400
 8007004:	40000800 	.word	0x40000800
 8007008:	40000c00 	.word	0x40000c00
 800700c:	40014000 	.word	0x40014000

08007010 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b0c      	cmp	r3, #12
 8007022:	d855      	bhi.n	80070d0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	08007061 	.word	0x08007061
 8007030:	080070d1 	.word	0x080070d1
 8007034:	080070d1 	.word	0x080070d1
 8007038:	080070d1 	.word	0x080070d1
 800703c:	0800707d 	.word	0x0800707d
 8007040:	080070d1 	.word	0x080070d1
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070d1 	.word	0x080070d1
 800704c:	08007099 	.word	0x08007099
 8007050:	080070d1 	.word	0x080070d1
 8007054:	080070d1 	.word	0x080070d1
 8007058:	080070d1 	.word	0x080070d1
 800705c:	080070b5 	.word	0x080070b5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800706e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	4618      	mov	r0, r3
 8007076:	f7fc fe35 	bl	8003ce4 <HAL_DMA_Abort_IT>
      break;
 800707a:	e02c      	b.n	80070d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	4618      	mov	r0, r3
 8007092:	f7fc fe27 	bl	8003ce4 <HAL_DMA_Abort_IT>
      break;
 8007096:	e01e      	b.n	80070d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fc fe19 	bl	8003ce4 <HAL_DMA_Abort_IT>
      break;
 80070b2:	e010      	b.n	80070d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fc fe0b 	bl	8003ce4 <HAL_DMA_Abort_IT>
      break;
 80070ce:	e002      	b.n	80070d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
      break;
 80070d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d157      	bne.n	800718c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2200      	movs	r2, #0
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fd63 	bl	8007bb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2a      	ldr	r2, [pc, #168]	; (8007198 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d117      	bne.n	8007124 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6a1a      	ldr	r2, [r3, #32]
 80070fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80070fe:	4013      	ands	r3, r2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10f      	bne.n	8007124 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	f240 4344 	movw	r3, #1092	; 0x444
 800710e:	4013      	ands	r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d107      	bne.n	8007124 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007122:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	f241 1311 	movw	r3, #4369	; 0x1111
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10f      	bne.n	8007154 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f240 4344 	movw	r3, #1092	; 0x444
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d107      	bne.n	8007154 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0201 	bic.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <HAL_TIM_PWM_Stop_DMA+0x154>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007162:	e013      	b.n	800718c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b04      	cmp	r3, #4
 8007168:	d104      	bne.n	8007174 <HAL_TIM_PWM_Stop_DMA+0x164>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007172:	e00b      	b.n	800718c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b08      	cmp	r3, #8
 8007178:	d104      	bne.n	8007184 <HAL_TIM_PWM_Stop_DMA+0x174>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007182:	e003      	b.n	800718c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40010000 	.word	0x40010000

0800719c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e0ae      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b0c      	cmp	r3, #12
 80071c6:	f200 809f 	bhi.w	8007308 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	08007205 	.word	0x08007205
 80071d4:	08007309 	.word	0x08007309
 80071d8:	08007309 	.word	0x08007309
 80071dc:	08007309 	.word	0x08007309
 80071e0:	08007245 	.word	0x08007245
 80071e4:	08007309 	.word	0x08007309
 80071e8:	08007309 	.word	0x08007309
 80071ec:	08007309 	.word	0x08007309
 80071f0:	08007287 	.word	0x08007287
 80071f4:	08007309 	.word	0x08007309
 80071f8:	08007309 	.word	0x08007309
 80071fc:	08007309 	.word	0x08007309
 8007200:	080072c7 	.word	0x080072c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 faaa 	bl	8007764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0208 	orr.w	r2, r2, #8
 800721e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0204 	bic.w	r2, r2, #4
 800722e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	619a      	str	r2, [r3, #24]
      break;
 8007242:	e064      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 faf0 	bl	8007830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800725e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6999      	ldr	r1, [r3, #24]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	619a      	str	r2, [r3, #24]
      break;
 8007284:	e043      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fb3b 	bl	8007908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0208 	orr.w	r2, r2, #8
 80072a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0204 	bic.w	r2, r2, #4
 80072b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69d9      	ldr	r1, [r3, #28]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	61da      	str	r2, [r3, #28]
      break;
 80072c4:	e023      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fb85 	bl	80079dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69d9      	ldr	r1, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	021a      	lsls	r2, r3, #8
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	61da      	str	r2, [r3, #28]
      break;
 8007306:	e002      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
      break;
 800730c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIM_ConfigClockSource+0x1c>
 8007338:	2302      	movs	r3, #2
 800733a:	e0b4      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x186>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800735a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007374:	d03e      	beq.n	80073f4 <HAL_TIM_ConfigClockSource+0xd4>
 8007376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737a:	f200 8087 	bhi.w	800748c <HAL_TIM_ConfigClockSource+0x16c>
 800737e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007382:	f000 8086 	beq.w	8007492 <HAL_TIM_ConfigClockSource+0x172>
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	d87f      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 800738c:	2b70      	cmp	r3, #112	; 0x70
 800738e:	d01a      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0xa6>
 8007390:	2b70      	cmp	r3, #112	; 0x70
 8007392:	d87b      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 8007394:	2b60      	cmp	r3, #96	; 0x60
 8007396:	d050      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x11a>
 8007398:	2b60      	cmp	r3, #96	; 0x60
 800739a:	d877      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 800739c:	2b50      	cmp	r3, #80	; 0x50
 800739e:	d03c      	beq.n	800741a <HAL_TIM_ConfigClockSource+0xfa>
 80073a0:	2b50      	cmp	r3, #80	; 0x50
 80073a2:	d873      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073a4:	2b40      	cmp	r3, #64	; 0x40
 80073a6:	d058      	beq.n	800745a <HAL_TIM_ConfigClockSource+0x13a>
 80073a8:	2b40      	cmp	r3, #64	; 0x40
 80073aa:	d86f      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073ac:	2b30      	cmp	r3, #48	; 0x30
 80073ae:	d064      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073b0:	2b30      	cmp	r3, #48	; 0x30
 80073b2:	d86b      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d060      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d867      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d05c      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d05a      	beq.n	800747a <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	e062      	b.n	800748c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6899      	ldr	r1, [r3, #8]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f000 fbcb 	bl	8007b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	609a      	str	r2, [r3, #8]
      break;
 80073f2:	e04f      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	6899      	ldr	r1, [r3, #8]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f000 fbb4 	bl	8007b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007416:	609a      	str	r2, [r3, #8]
      break;
 8007418:	e03c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6859      	ldr	r1, [r3, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	461a      	mov	r2, r3
 8007428:	f000 fb28 	bl	8007a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2150      	movs	r1, #80	; 0x50
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fb81 	bl	8007b3a <TIM_ITRx_SetConfig>
      break;
 8007438:	e02c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6859      	ldr	r1, [r3, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	461a      	mov	r2, r3
 8007448:	f000 fb47 	bl	8007ada <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2160      	movs	r1, #96	; 0x60
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fb71 	bl	8007b3a <TIM_ITRx_SetConfig>
      break;
 8007458:	e01c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6859      	ldr	r1, [r3, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	461a      	mov	r2, r3
 8007468:	f000 fb08 	bl	8007a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2140      	movs	r1, #64	; 0x40
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fb61 	bl	8007b3a <TIM_ITRx_SetConfig>
      break;
 8007478:	e00c      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f000 fb58 	bl	8007b3a <TIM_ITRx_SetConfig>
      break;
 800748a:	e003      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
      break;
 8007490:	e000      	b.n	8007494 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d107      	bne.n	80074ea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e8:	e02a      	b.n	8007540 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d107      	bne.n	8007504 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2202      	movs	r2, #2
 80074f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007502:	e01d      	b.n	8007540 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d107      	bne.n	800751e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2204      	movs	r2, #4
 8007512:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800751c:	e010      	b.n	8007540 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d107      	bne.n	8007538 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2208      	movs	r2, #8
 800752c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007536:	e003      	b.n	8007540 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff ffb4 	bl	80074ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	771a      	strb	r2, [r3, #28]
}
 800754c:	bf00      	nop
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	429a      	cmp	r2, r3
 800756a:	d10b      	bne.n	8007584 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d136      	bne.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007582:	e031      	b.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	429a      	cmp	r2, r3
 800758c:	d10b      	bne.n	80075a6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2202      	movs	r2, #2
 8007592:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d125      	bne.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075a4:	e020      	b.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d10b      	bne.n	80075c8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2204      	movs	r2, #4
 80075b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d114      	bne.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c6:	e00f      	b.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d10a      	bne.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2208      	movs	r2, #8
 80075d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7fb ff0d 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	771a      	strb	r2, [r3, #28]
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d103      	bne.n	800761c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	771a      	strb	r2, [r3, #28]
 800761a:	e019      	b.n	8007650 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d103      	bne.n	800762e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2202      	movs	r2, #2
 800762a:	771a      	strb	r2, [r3, #28]
 800762c:	e010      	b.n	8007650 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d103      	bne.n	8007640 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2204      	movs	r2, #4
 800763c:	771a      	strb	r2, [r3, #28]
 800763e:	e007      	b.n	8007650 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	429a      	cmp	r2, r3
 8007648:	d102      	bne.n	8007650 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2208      	movs	r2, #8
 800764e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7fb fe59 	bl	8003308 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	771a      	strb	r2, [r3, #28]
}
 800765c:	bf00      	nop
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a34      	ldr	r2, [pc, #208]	; (8007748 <TIM_Base_SetConfig+0xe4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00f      	beq.n	800769c <TIM_Base_SetConfig+0x38>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007682:	d00b      	beq.n	800769c <TIM_Base_SetConfig+0x38>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a31      	ldr	r2, [pc, #196]	; (800774c <TIM_Base_SetConfig+0xe8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_Base_SetConfig+0x38>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a30      	ldr	r2, [pc, #192]	; (8007750 <TIM_Base_SetConfig+0xec>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_Base_SetConfig+0x38>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a2f      	ldr	r2, [pc, #188]	; (8007754 <TIM_Base_SetConfig+0xf0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d108      	bne.n	80076ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a25      	ldr	r2, [pc, #148]	; (8007748 <TIM_Base_SetConfig+0xe4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d01b      	beq.n	80076ee <TIM_Base_SetConfig+0x8a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076bc:	d017      	beq.n	80076ee <TIM_Base_SetConfig+0x8a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a22      	ldr	r2, [pc, #136]	; (800774c <TIM_Base_SetConfig+0xe8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <TIM_Base_SetConfig+0x8a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a21      	ldr	r2, [pc, #132]	; (8007750 <TIM_Base_SetConfig+0xec>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00f      	beq.n	80076ee <TIM_Base_SetConfig+0x8a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a20      	ldr	r2, [pc, #128]	; (8007754 <TIM_Base_SetConfig+0xf0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00b      	beq.n	80076ee <TIM_Base_SetConfig+0x8a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a1f      	ldr	r2, [pc, #124]	; (8007758 <TIM_Base_SetConfig+0xf4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d007      	beq.n	80076ee <TIM_Base_SetConfig+0x8a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1e      	ldr	r2, [pc, #120]	; (800775c <TIM_Base_SetConfig+0xf8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_Base_SetConfig+0x8a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <TIM_Base_SetConfig+0xfc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d108      	bne.n	8007700 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a08      	ldr	r2, [pc, #32]	; (8007748 <TIM_Base_SetConfig+0xe4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d103      	bne.n	8007734 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	615a      	str	r2, [r3, #20]
}
 800773a:	bf00      	nop
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40010000 	.word	0x40010000
 800774c:	40000400 	.word	0x40000400
 8007750:	40000800 	.word	0x40000800
 8007754:	40000c00 	.word	0x40000c00
 8007758:	40014000 	.word	0x40014000
 800775c:	40014400 	.word	0x40014400
 8007760:	40014800 	.word	0x40014800

08007764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f023 0302 	bic.w	r3, r3, #2
 80077ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a1c      	ldr	r2, [pc, #112]	; (800782c <TIM_OC1_SetConfig+0xc8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10c      	bne.n	80077da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f023 0308 	bic.w	r3, r3, #8
 80077c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f023 0304 	bic.w	r3, r3, #4
 80077d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a13      	ldr	r2, [pc, #76]	; (800782c <TIM_OC1_SetConfig+0xc8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d111      	bne.n	8007806 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4313      	orrs	r3, r2
 8007804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	621a      	str	r2, [r3, #32]
}
 8007820:	bf00      	nop
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	40010000 	.word	0x40010000

08007830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f023 0210 	bic.w	r2, r3, #16
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800785e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0320 	bic.w	r3, r3, #32
 800787a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <TIM_OC2_SetConfig+0xd4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d10d      	bne.n	80078ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a15      	ldr	r2, [pc, #84]	; (8007904 <TIM_OC2_SetConfig+0xd4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d113      	bne.n	80078dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	621a      	str	r2, [r3, #32]
}
 80078f6:	bf00      	nop
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40010000 	.word	0x40010000

08007908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <TIM_OC3_SetConfig+0xd0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d10d      	bne.n	8007982 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800796c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <TIM_OC3_SetConfig+0xd0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d113      	bne.n	80079b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	621a      	str	r2, [r3, #32]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40010000 	.word	0x40010000

080079dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	031b      	lsls	r3, r3, #12
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a10      	ldr	r2, [pc, #64]	; (8007a78 <TIM_OC4_SetConfig+0x9c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d109      	bne.n	8007a50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	019b      	lsls	r3, r3, #6
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40010000 	.word	0x40010000

08007a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	f023 0201 	bic.w	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f023 030a 	bic.w	r3, r3, #10
 8007ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	621a      	str	r2, [r3, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b087      	sub	sp, #28
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0210 	bic.w	r2, r3, #16
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	031b      	lsls	r3, r3, #12
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f043 0307 	orr.w	r3, r3, #7
 8007b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	609a      	str	r2, [r3, #8]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	021a      	lsls	r2, r3, #8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	609a      	str	r2, [r3, #8]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a1a      	ldr	r2, [r3, #32]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	fa01 f303 	lsl.w	r3, r1, r3
 8007be8:	431a      	orrs	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e050      	b.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c60:	d013      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d10c      	bne.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40010000 	.word	0x40010000
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40000c00 	.word	0x40000c00
 8007cd4:	40014000 	.word	0x40014000

08007cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e03d      	b.n	8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e03f      	b.n	8007e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fb f90e 	bl	8002fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2224      	movs	r2, #36	; 0x24
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fddf 	bl	8008984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695a      	ldr	r2, [r3, #20]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b08a      	sub	sp, #40	; 0x28
 8007e1a:	af02      	add	r7, sp, #8
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	603b      	str	r3, [r7, #0]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d17c      	bne.n	8007f30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <HAL_UART_Transmit+0x2c>
 8007e3c:	88fb      	ldrh	r3, [r7, #6]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e075      	b.n	8007f32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_UART_Transmit+0x3e>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e06e      	b.n	8007f32 <HAL_UART_Transmit+0x11c>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2221      	movs	r2, #33	; 0x21
 8007e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e6a:	f7fb fc83 	bl	8003774 <HAL_GetTick>
 8007e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	88fa      	ldrh	r2, [r7, #6]
 8007e7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d108      	bne.n	8007e98 <HAL_UART_Transmit+0x82>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e003      	b.n	8007ea0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ea8:	e02a      	b.n	8007f00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2180      	movs	r1, #128	; 0x80
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fb1f 	bl	80084f8 <UART_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e036      	b.n	8007f32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	3302      	adds	r3, #2
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	e007      	b.n	8007ef2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1cf      	bne.n	8007eaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2140      	movs	r1, #64	; 0x40
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 faef 	bl	80084f8 <UART_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e006      	b.n	8007f32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f30:	2302      	movs	r3, #2
  }
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	4613      	mov	r3, r2
 8007f46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d11d      	bne.n	8007f90 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <HAL_UART_Receive_IT+0x26>
 8007f5a:	88fb      	ldrh	r3, [r7, #6]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e016      	b.n	8007f92 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_UART_Receive_IT+0x38>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e00f      	b.n	8007f92 <HAL_UART_Receive_IT+0x58>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f80:	88fb      	ldrh	r3, [r7, #6]
 8007f82:	461a      	mov	r2, r3
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fb24 	bl	80085d4 <UART_Start_Receive_IT>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	e000      	b.n	8007f92 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b0ba      	sub	sp, #232	; 0xe8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10f      	bne.n	8008002 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe6:	f003 0320 	and.w	r3, r3, #32
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <HAL_UART_IRQHandler+0x66>
 8007fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fc07 	bl	800880e <UART_Receive_IT>
      return;
 8008000:	e256      	b.n	80084b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80de 	beq.w	80081c8 <HAL_UART_IRQHandler+0x22c>
 800800c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800801c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 80d1 	beq.w	80081c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <HAL_UART_IRQHandler+0xae>
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f043 0201 	orr.w	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800804a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <HAL_UART_IRQHandler+0xd2>
 8008056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f043 0202 	orr.w	r2, r3, #2
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800806e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00b      	beq.n	8008092 <HAL_UART_IRQHandler+0xf6>
 800807a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d005      	beq.n	8008092 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	f043 0204 	orr.w	r2, r3, #4
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d011      	beq.n	80080c2 <HAL_UART_IRQHandler+0x126>
 800809e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d105      	bne.n	80080b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f043 0208 	orr.w	r2, r3, #8
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 81ed 	beq.w	80084a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d008      	beq.n	80080ea <HAL_UART_IRQHandler+0x14e>
 80080d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fb92 	bl	800880e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	bf0c      	ite	eq
 80080f8:	2301      	moveq	r3, #1
 80080fa:	2300      	movne	r3, #0
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f003 0308 	and.w	r3, r3, #8
 800810a:	2b00      	cmp	r3, #0
 800810c:	d103      	bne.n	8008116 <HAL_UART_IRQHandler+0x17a>
 800810e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008112:	2b00      	cmp	r3, #0
 8008114:	d04f      	beq.n	80081b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa9a 	bl	8008650 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d141      	bne.n	80081ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3314      	adds	r3, #20
 8008130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3314      	adds	r3, #20
 8008152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800815a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800816e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1d9      	bne.n	800812a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	2b00      	cmp	r3, #0
 800817c:	d013      	beq.n	80081a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	4a7d      	ldr	r2, [pc, #500]	; (8008378 <HAL_UART_IRQHandler+0x3dc>)
 8008184:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	4618      	mov	r0, r3
 800818c:	f7fb fdaa 	bl	8003ce4 <HAL_DMA_Abort_IT>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d016      	beq.n	80081c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a4:	e00e      	b.n	80081c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f990 	bl	80084cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	e00a      	b.n	80081c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f98c 	bl	80084cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	e006      	b.n	80081c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f988 	bl	80084cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80081c2:	e170      	b.n	80084a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	bf00      	nop
    return;
 80081c6:	e16e      	b.n	80084a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	f040 814a 	bne.w	8008466 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8143 	beq.w	8008466 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 813c 	beq.w	8008466 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60bb      	str	r3, [r7, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	60bb      	str	r3, [r7, #8]
 8008202:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	f040 80b4 	bne.w	800837c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 8140 	beq.w	80084aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800822e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008232:	429a      	cmp	r2, r3
 8008234:	f080 8139 	bcs.w	80084aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800823e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800824a:	f000 8088 	beq.w	800835e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	330c      	adds	r3, #12
 8008254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800826c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800827a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800827e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008286:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1d9      	bne.n	800824e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3314      	adds	r3, #20
 80082ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e1      	bne.n	800829a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3314      	adds	r3, #20
 80082dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3314      	adds	r3, #20
 80082f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008300:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e3      	bne.n	80082d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	330c      	adds	r3, #12
 8008322:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800832c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800832e:	f023 0310 	bic.w	r3, r3, #16
 8008332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008340:	65ba      	str	r2, [r7, #88]	; 0x58
 8008342:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008346:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800834e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e3      	bne.n	800831c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	4618      	mov	r0, r3
 800835a:	f7fb fc53 	bl	8003c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008366:	b29b      	uxth	r3, r3
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	b29b      	uxth	r3, r3
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f8b6 	bl	80084e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008374:	e099      	b.n	80084aa <HAL_UART_IRQHandler+0x50e>
 8008376:	bf00      	nop
 8008378:	08008717 	.word	0x08008717
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008384:	b29b      	uxth	r3, r3
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008390:	b29b      	uxth	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 808b 	beq.w	80084ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8086 	beq.w	80084ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	330c      	adds	r3, #12
 80083a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	330c      	adds	r3, #12
 80083c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80083c6:	647a      	str	r2, [r7, #68]	; 0x44
 80083c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e3      	bne.n	80083a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3314      	adds	r3, #20
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	623b      	str	r3, [r7, #32]
   return(result);
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	f023 0301 	bic.w	r3, r3, #1
 80083f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3314      	adds	r3, #20
 80083fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e3      	bne.n	80083da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	330c      	adds	r3, #12
 8008426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0310 	bic.w	r3, r3, #16
 8008436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	330c      	adds	r3, #12
 8008440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008444:	61fa      	str	r2, [r7, #28]
 8008446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	69b9      	ldr	r1, [r7, #24]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	617b      	str	r3, [r7, #20]
   return(result);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e3      	bne.n	8008420 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f83e 	bl	80084e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008464:	e023      	b.n	80084ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <HAL_UART_IRQHandler+0x4ea>
 8008472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f95d 	bl	800873e <UART_Transmit_IT>
    return;
 8008484:	e014      	b.n	80084b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00e      	beq.n	80084b0 <HAL_UART_IRQHandler+0x514>
 8008492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d008      	beq.n	80084b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f99d 	bl	80087de <UART_EndTransmit_IT>
    return;
 80084a4:	e004      	b.n	80084b0 <HAL_UART_IRQHandler+0x514>
    return;
 80084a6:	bf00      	nop
 80084a8:	e002      	b.n	80084b0 <HAL_UART_IRQHandler+0x514>
      return;
 80084aa:	bf00      	nop
 80084ac:	e000      	b.n	80084b0 <HAL_UART_IRQHandler+0x514>
      return;
 80084ae:	bf00      	nop
  }
}
 80084b0:	37e8      	adds	r7, #232	; 0xe8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b090      	sub	sp, #64	; 0x40
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	4613      	mov	r3, r2
 8008506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008508:	e050      	b.n	80085ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800850a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d04c      	beq.n	80085ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <UART_WaitOnFlagUntilTimeout+0x30>
 8008518:	f7fb f92c 	bl	8003774 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008524:	429a      	cmp	r2, r3
 8008526:	d241      	bcs.n	80085ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	330c      	adds	r3, #12
 8008546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008548:	637a      	str	r2, [r7, #52]	; 0x34
 800854a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800854e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	613b      	str	r3, [r7, #16]
   return(result);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f023 0301 	bic.w	r3, r3, #1
 8008572:	63bb      	str	r3, [r7, #56]	; 0x38
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3314      	adds	r3, #20
 800857a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800857c:	623a      	str	r2, [r7, #32]
 800857e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	6a3a      	ldr	r2, [r7, #32]
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	61bb      	str	r3, [r7, #24]
   return(result);
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e5      	bne.n	800855c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e00f      	b.n	80085cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4013      	ands	r3, r2
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	bf0c      	ite	eq
 80085bc:	2301      	moveq	r3, #1
 80085be:	2300      	movne	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d09f      	beq.n	800850a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3740      	adds	r7, #64	; 0x40
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2222      	movs	r2, #34	; 0x22
 80085fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008620:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f042 0201 	orr.w	r2, r2, #1
 8008630:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0220 	orr.w	r2, r2, #32
 8008640:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008650:	b480      	push	{r7}
 8008652:	b095      	sub	sp, #84	; 0x54
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	330c      	adds	r3, #12
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	330c      	adds	r3, #12
 8008676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008678:	643a      	str	r2, [r7, #64]	; 0x40
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800867e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e5      	bne.n	8008658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3314      	adds	r3, #20
 8008692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	e853 3f00 	ldrex	r3, [r3]
 800869a:	61fb      	str	r3, [r7, #28]
   return(result);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f023 0301 	bic.w	r3, r3, #1
 80086a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3314      	adds	r3, #20
 80086aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b4:	e841 2300 	strex	r3, r2, [r1]
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e5      	bne.n	800868c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d119      	bne.n	80086fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f023 0310 	bic.w	r3, r3, #16
 80086de:	647b      	str	r3, [r7, #68]	; 0x44
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086e8:	61ba      	str	r2, [r7, #24]
 80086ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6979      	ldr	r1, [r7, #20]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	613b      	str	r3, [r7, #16]
   return(result);
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e5      	bne.n	80086c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
}
 800870a:	bf00      	nop
 800870c:	3754      	adds	r7, #84	; 0x54
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff fecb 	bl	80084cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800873e:	b480      	push	{r7}
 8008740:	b085      	sub	sp, #20
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b21      	cmp	r3, #33	; 0x21
 8008750:	d13e      	bne.n	80087d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800875a:	d114      	bne.n	8008786 <UART_Transmit_IT+0x48>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d110      	bne.n	8008786 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	1c9a      	adds	r2, r3, #2
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	621a      	str	r2, [r3, #32]
 8008784:	e008      	b.n	8008798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	1c59      	adds	r1, r3, #1
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6211      	str	r1, [r2, #32]
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800879c:	b29b      	uxth	r3, r3
 800879e:	3b01      	subs	r3, #1
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	4619      	mov	r1, r3
 80087a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10f      	bne.n	80087cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e000      	b.n	80087d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087d0:	2302      	movs	r3, #2
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff fe5a 	bl	80084b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b08c      	sub	sp, #48	; 0x30
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b22      	cmp	r3, #34	; 0x22
 8008820:	f040 80ab 	bne.w	800897a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882c:	d117      	bne.n	800885e <UART_Receive_IT+0x50>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d113      	bne.n	800885e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	b29b      	uxth	r3, r3
 8008848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884c:	b29a      	uxth	r2, r3
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	1c9a      	adds	r2, r3, #2
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	629a      	str	r2, [r3, #40]	; 0x28
 800885c:	e026      	b.n	80088ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008870:	d007      	beq.n	8008882 <UART_Receive_IT+0x74>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <UART_Receive_IT+0x82>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	b2da      	uxtb	r2, r3
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	e008      	b.n	80088a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889c:	b2da      	uxtb	r2, r3
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	4619      	mov	r1, r3
 80088ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d15a      	bne.n	8008976 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0220 	bic.w	r2, r2, #32
 80088ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695a      	ldr	r2, [r3, #20]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0201 	bic.w	r2, r2, #1
 80088ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d135      	bne.n	800896c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	330c      	adds	r3, #12
 800890c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	613b      	str	r3, [r7, #16]
   return(result);
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f023 0310 	bic.w	r3, r3, #16
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	330c      	adds	r3, #12
 8008924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008926:	623a      	str	r2, [r7, #32]
 8008928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	69f9      	ldr	r1, [r7, #28]
 800892c:	6a3a      	ldr	r2, [r7, #32]
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	61bb      	str	r3, [r7, #24]
   return(result);
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e5      	bne.n	8008906 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b10      	cmp	r3, #16
 8008946:	d10a      	bne.n	800895e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fdbb 	bl	80084e0 <HAL_UARTEx_RxEventCallback>
 800896a:	e002      	b.n	8008972 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7f9 f8fd 	bl	8001b6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	e002      	b.n	800897c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	e000      	b.n	800897c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800897a:	2302      	movs	r3, #2
  }
}
 800897c:	4618      	mov	r0, r3
 800897e:	3730      	adds	r7, #48	; 0x30
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008988:	b0c0      	sub	sp, #256	; 0x100
 800898a:	af00      	add	r7, sp, #0
 800898c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	68d9      	ldr	r1, [r3, #12]
 80089a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	ea40 0301 	orr.w	r3, r0, r1
 80089ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089dc:	f021 010c 	bic.w	r1, r1, #12
 80089e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089ea:	430b      	orrs	r3, r1
 80089ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fe:	6999      	ldr	r1, [r3, #24]
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	ea40 0301 	orr.w	r3, r0, r1
 8008a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b8f      	ldr	r3, [pc, #572]	; (8008c50 <UART_SetConfig+0x2cc>)
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d005      	beq.n	8008a24 <UART_SetConfig+0xa0>
 8008a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4b8d      	ldr	r3, [pc, #564]	; (8008c54 <UART_SetConfig+0x2d0>)
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d104      	bne.n	8008a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a24:	f7fd f9a4 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8008a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a2c:	e003      	b.n	8008a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a2e:	f7fd f98b 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8008a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a40:	f040 810c 	bne.w	8008c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a56:	4622      	mov	r2, r4
 8008a58:	462b      	mov	r3, r5
 8008a5a:	1891      	adds	r1, r2, r2
 8008a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a5e:	415b      	adcs	r3, r3
 8008a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a66:	4621      	mov	r1, r4
 8008a68:	eb12 0801 	adds.w	r8, r2, r1
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	eb43 0901 	adc.w	r9, r3, r1
 8008a72:	f04f 0200 	mov.w	r2, #0
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a86:	4690      	mov	r8, r2
 8008a88:	4699      	mov	r9, r3
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	eb18 0303 	adds.w	r3, r8, r3
 8008a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a94:	462b      	mov	r3, r5
 8008a96:	eb49 0303 	adc.w	r3, r9, r3
 8008a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	18db      	adds	r3, r3, r3
 8008ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ab8:	4613      	mov	r3, r2
 8008aba:	eb42 0303 	adc.w	r3, r2, r3
 8008abe:	657b      	str	r3, [r7, #84]	; 0x54
 8008ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ac8:	f7f8 f886 	bl	8000bd8 <__aeabi_uldivmod>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4b61      	ldr	r3, [pc, #388]	; (8008c58 <UART_SetConfig+0x2d4>)
 8008ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ad6:	095b      	lsrs	r3, r3, #5
 8008ad8:	011c      	lsls	r4, r3, #4
 8008ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008aec:	4642      	mov	r2, r8
 8008aee:	464b      	mov	r3, r9
 8008af0:	1891      	adds	r1, r2, r2
 8008af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008af4:	415b      	adcs	r3, r3
 8008af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008afc:	4641      	mov	r1, r8
 8008afe:	eb12 0a01 	adds.w	sl, r2, r1
 8008b02:	4649      	mov	r1, r9
 8008b04:	eb43 0b01 	adc.w	fp, r3, r1
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b1c:	4692      	mov	sl, r2
 8008b1e:	469b      	mov	fp, r3
 8008b20:	4643      	mov	r3, r8
 8008b22:	eb1a 0303 	adds.w	r3, sl, r3
 8008b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8008b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	18db      	adds	r3, r3, r3
 8008b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b4e:	4613      	mov	r3, r2
 8008b50:	eb42 0303 	adc.w	r3, r2, r3
 8008b54:	647b      	str	r3, [r7, #68]	; 0x44
 8008b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b5e:	f7f8 f83b 	bl	8000bd8 <__aeabi_uldivmod>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4611      	mov	r1, r2
 8008b68:	4b3b      	ldr	r3, [pc, #236]	; (8008c58 <UART_SetConfig+0x2d4>)
 8008b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	2264      	movs	r2, #100	; 0x64
 8008b72:	fb02 f303 	mul.w	r3, r2, r3
 8008b76:	1acb      	subs	r3, r1, r3
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b7e:	4b36      	ldr	r3, [pc, #216]	; (8008c58 <UART_SetConfig+0x2d4>)
 8008b80:	fba3 2302 	umull	r2, r3, r3, r2
 8008b84:	095b      	lsrs	r3, r3, #5
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b8c:	441c      	add	r4, r3
 8008b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	1891      	adds	r1, r2, r2
 8008ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ba8:	415b      	adcs	r3, r3
 8008baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bb0:	4641      	mov	r1, r8
 8008bb2:	1851      	adds	r1, r2, r1
 8008bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	414b      	adcs	r3, r1
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008bc8:	4659      	mov	r1, fp
 8008bca:	00cb      	lsls	r3, r1, #3
 8008bcc:	4651      	mov	r1, sl
 8008bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bd2:	4651      	mov	r1, sl
 8008bd4:	00ca      	lsls	r2, r1, #3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	4642      	mov	r2, r8
 8008bde:	189b      	adds	r3, r3, r2
 8008be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008be4:	464b      	mov	r3, r9
 8008be6:	460a      	mov	r2, r1
 8008be8:	eb42 0303 	adc.w	r3, r2, r3
 8008bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c04:	460b      	mov	r3, r1
 8008c06:	18db      	adds	r3, r3, r3
 8008c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	eb42 0303 	adc.w	r3, r2, r3
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c1a:	f7f7 ffdd 	bl	8000bd8 <__aeabi_uldivmod>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4b0d      	ldr	r3, [pc, #52]	; (8008c58 <UART_SetConfig+0x2d4>)
 8008c24:	fba3 1302 	umull	r1, r3, r3, r2
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	2164      	movs	r1, #100	; 0x64
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	3332      	adds	r3, #50	; 0x32
 8008c36:	4a08      	ldr	r2, [pc, #32]	; (8008c58 <UART_SetConfig+0x2d4>)
 8008c38:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	f003 0207 	and.w	r2, r3, #7
 8008c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4422      	add	r2, r4
 8008c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c4c:	e105      	b.n	8008e5a <UART_SetConfig+0x4d6>
 8008c4e:	bf00      	nop
 8008c50:	40011000 	.word	0x40011000
 8008c54:	40011400 	.word	0x40011400
 8008c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c6e:	4642      	mov	r2, r8
 8008c70:	464b      	mov	r3, r9
 8008c72:	1891      	adds	r1, r2, r2
 8008c74:	6239      	str	r1, [r7, #32]
 8008c76:	415b      	adcs	r3, r3
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c7e:	4641      	mov	r1, r8
 8008c80:	1854      	adds	r4, r2, r1
 8008c82:	4649      	mov	r1, r9
 8008c84:	eb43 0501 	adc.w	r5, r3, r1
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	00eb      	lsls	r3, r5, #3
 8008c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c96:	00e2      	lsls	r2, r4, #3
 8008c98:	4614      	mov	r4, r2
 8008c9a:	461d      	mov	r5, r3
 8008c9c:	4643      	mov	r3, r8
 8008c9e:	18e3      	adds	r3, r4, r3
 8008ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	eb45 0303 	adc.w	r3, r5, r3
 8008caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cbe:	f04f 0200 	mov.w	r2, #0
 8008cc2:	f04f 0300 	mov.w	r3, #0
 8008cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008cca:	4629      	mov	r1, r5
 8008ccc:	008b      	lsls	r3, r1, #2
 8008cce:	4621      	mov	r1, r4
 8008cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	008a      	lsls	r2, r1, #2
 8008cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cdc:	f7f7 ff7c 	bl	8000bd8 <__aeabi_uldivmod>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4b60      	ldr	r3, [pc, #384]	; (8008e68 <UART_SetConfig+0x4e4>)
 8008ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cea:	095b      	lsrs	r3, r3, #5
 8008cec:	011c      	lsls	r4, r3, #4
 8008cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d00:	4642      	mov	r2, r8
 8008d02:	464b      	mov	r3, r9
 8008d04:	1891      	adds	r1, r2, r2
 8008d06:	61b9      	str	r1, [r7, #24]
 8008d08:	415b      	adcs	r3, r3
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d10:	4641      	mov	r1, r8
 8008d12:	1851      	adds	r1, r2, r1
 8008d14:	6139      	str	r1, [r7, #16]
 8008d16:	4649      	mov	r1, r9
 8008d18:	414b      	adcs	r3, r1
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d28:	4659      	mov	r1, fp
 8008d2a:	00cb      	lsls	r3, r1, #3
 8008d2c:	4651      	mov	r1, sl
 8008d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d32:	4651      	mov	r1, sl
 8008d34:	00ca      	lsls	r2, r1, #3
 8008d36:	4610      	mov	r0, r2
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	189b      	adds	r3, r3, r2
 8008d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d44:	464b      	mov	r3, r9
 8008d46:	460a      	mov	r2, r1
 8008d48:	eb42 0303 	adc.w	r3, r2, r3
 8008d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	f04f 0300 	mov.w	r3, #0
 8008d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d68:	4649      	mov	r1, r9
 8008d6a:	008b      	lsls	r3, r1, #2
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d72:	4641      	mov	r1, r8
 8008d74:	008a      	lsls	r2, r1, #2
 8008d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d7a:	f7f7 ff2d 	bl	8000bd8 <__aeabi_uldivmod>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4b39      	ldr	r3, [pc, #228]	; (8008e68 <UART_SetConfig+0x4e4>)
 8008d84:	fba3 1302 	umull	r1, r3, r3, r2
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	2164      	movs	r1, #100	; 0x64
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	3332      	adds	r3, #50	; 0x32
 8008d96:	4a34      	ldr	r2, [pc, #208]	; (8008e68 <UART_SetConfig+0x4e4>)
 8008d98:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008da2:	441c      	add	r4, r3
 8008da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da8:	2200      	movs	r2, #0
 8008daa:	673b      	str	r3, [r7, #112]	; 0x70
 8008dac:	677a      	str	r2, [r7, #116]	; 0x74
 8008dae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008db2:	4642      	mov	r2, r8
 8008db4:	464b      	mov	r3, r9
 8008db6:	1891      	adds	r1, r2, r2
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	415b      	adcs	r3, r3
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	1851      	adds	r1, r2, r1
 8008dc6:	6039      	str	r1, [r7, #0]
 8008dc8:	4649      	mov	r1, r9
 8008dca:	414b      	adcs	r3, r1
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	f04f 0300 	mov.w	r3, #0
 8008dd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008dda:	4659      	mov	r1, fp
 8008ddc:	00cb      	lsls	r3, r1, #3
 8008dde:	4651      	mov	r1, sl
 8008de0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008de4:	4651      	mov	r1, sl
 8008de6:	00ca      	lsls	r2, r1, #3
 8008de8:	4610      	mov	r0, r2
 8008dea:	4619      	mov	r1, r3
 8008dec:	4603      	mov	r3, r0
 8008dee:	4642      	mov	r2, r8
 8008df0:	189b      	adds	r3, r3, r2
 8008df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008df4:	464b      	mov	r3, r9
 8008df6:	460a      	mov	r2, r1
 8008df8:	eb42 0303 	adc.w	r3, r2, r3
 8008dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	663b      	str	r3, [r7, #96]	; 0x60
 8008e08:	667a      	str	r2, [r7, #100]	; 0x64
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	f04f 0300 	mov.w	r3, #0
 8008e12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e16:	4649      	mov	r1, r9
 8008e18:	008b      	lsls	r3, r1, #2
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e20:	4641      	mov	r1, r8
 8008e22:	008a      	lsls	r2, r1, #2
 8008e24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e28:	f7f7 fed6 	bl	8000bd8 <__aeabi_uldivmod>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <UART_SetConfig+0x4e4>)
 8008e32:	fba3 1302 	umull	r1, r3, r3, r2
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	2164      	movs	r1, #100	; 0x64
 8008e3a:	fb01 f303 	mul.w	r3, r1, r3
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	3332      	adds	r3, #50	; 0x32
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <UART_SetConfig+0x4e4>)
 8008e46:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4a:	095b      	lsrs	r3, r3, #5
 8008e4c:	f003 020f 	and.w	r2, r3, #15
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4422      	add	r2, r4
 8008e58:	609a      	str	r2, [r3, #8]
}
 8008e5a:	bf00      	nop
 8008e5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e60:	46bd      	mov	sp, r7
 8008e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e66:	bf00      	nop
 8008e68:	51eb851f 	.word	0x51eb851f

08008e6c <atoi>:
 8008e6c:	220a      	movs	r2, #10
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f000 beda 	b.w	8009c28 <strtol>

08008e74 <__errno>:
 8008e74:	4b01      	ldr	r3, [pc, #4]	; (8008e7c <__errno+0x8>)
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	200000a4 	.word	0x200000a4

08008e80 <__libc_init_array>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	4d0d      	ldr	r5, [pc, #52]	; (8008eb8 <__libc_init_array+0x38>)
 8008e84:	4c0d      	ldr	r4, [pc, #52]	; (8008ebc <__libc_init_array+0x3c>)
 8008e86:	1b64      	subs	r4, r4, r5
 8008e88:	10a4      	asrs	r4, r4, #2
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	d109      	bne.n	8008ea4 <__libc_init_array+0x24>
 8008e90:	4d0b      	ldr	r5, [pc, #44]	; (8008ec0 <__libc_init_array+0x40>)
 8008e92:	4c0c      	ldr	r4, [pc, #48]	; (8008ec4 <__libc_init_array+0x44>)
 8008e94:	f003 ff4c 	bl	800cd30 <_init>
 8008e98:	1b64      	subs	r4, r4, r5
 8008e9a:	10a4      	asrs	r4, r4, #2
 8008e9c:	2600      	movs	r6, #0
 8008e9e:	42a6      	cmp	r6, r4
 8008ea0:	d105      	bne.n	8008eae <__libc_init_array+0x2e>
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea8:	4798      	blx	r3
 8008eaa:	3601      	adds	r6, #1
 8008eac:	e7ee      	b.n	8008e8c <__libc_init_array+0xc>
 8008eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb2:	4798      	blx	r3
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	e7f2      	b.n	8008e9e <__libc_init_array+0x1e>
 8008eb8:	0800d9c8 	.word	0x0800d9c8
 8008ebc:	0800d9c8 	.word	0x0800d9c8
 8008ec0:	0800d9c8 	.word	0x0800d9c8
 8008ec4:	0800d9cc 	.word	0x0800d9cc

08008ec8 <malloc>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <malloc+0xc>)
 8008eca:	4601      	mov	r1, r0
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f000 b87f 	b.w	8008fd0 <_malloc_r>
 8008ed2:	bf00      	nop
 8008ed4:	200000a4 	.word	0x200000a4

08008ed8 <free>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <free+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f000 b80b 	b.w	8008ef8 <_free_r>
 8008ee2:	bf00      	nop
 8008ee4:	200000a4 	.word	0x200000a4

08008ee8 <memset>:
 8008ee8:	4402      	add	r2, r0
 8008eea:	4603      	mov	r3, r0
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d100      	bne.n	8008ef2 <memset+0xa>
 8008ef0:	4770      	bx	lr
 8008ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef6:	e7f9      	b.n	8008eec <memset+0x4>

08008ef8 <_free_r>:
 8008ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008efa:	2900      	cmp	r1, #0
 8008efc:	d044      	beq.n	8008f88 <_free_r+0x90>
 8008efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f02:	9001      	str	r0, [sp, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f1a1 0404 	sub.w	r4, r1, #4
 8008f0a:	bfb8      	it	lt
 8008f0c:	18e4      	addlt	r4, r4, r3
 8008f0e:	f001 fd55 	bl	800a9bc <__malloc_lock>
 8008f12:	4a1e      	ldr	r2, [pc, #120]	; (8008f8c <_free_r+0x94>)
 8008f14:	9801      	ldr	r0, [sp, #4]
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	b933      	cbnz	r3, 8008f28 <_free_r+0x30>
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	6014      	str	r4, [r2, #0]
 8008f1e:	b003      	add	sp, #12
 8008f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f24:	f001 bd50 	b.w	800a9c8 <__malloc_unlock>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d908      	bls.n	8008f3e <_free_r+0x46>
 8008f2c:	6825      	ldr	r5, [r4, #0]
 8008f2e:	1961      	adds	r1, r4, r5
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf01      	itttt	eq
 8008f34:	6819      	ldreq	r1, [r3, #0]
 8008f36:	685b      	ldreq	r3, [r3, #4]
 8008f38:	1949      	addeq	r1, r1, r5
 8008f3a:	6021      	streq	r1, [r4, #0]
 8008f3c:	e7ed      	b.n	8008f1a <_free_r+0x22>
 8008f3e:	461a      	mov	r2, r3
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	b10b      	cbz	r3, 8008f48 <_free_r+0x50>
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	d9fa      	bls.n	8008f3e <_free_r+0x46>
 8008f48:	6811      	ldr	r1, [r2, #0]
 8008f4a:	1855      	adds	r5, r2, r1
 8008f4c:	42a5      	cmp	r5, r4
 8008f4e:	d10b      	bne.n	8008f68 <_free_r+0x70>
 8008f50:	6824      	ldr	r4, [r4, #0]
 8008f52:	4421      	add	r1, r4
 8008f54:	1854      	adds	r4, r2, r1
 8008f56:	42a3      	cmp	r3, r4
 8008f58:	6011      	str	r1, [r2, #0]
 8008f5a:	d1e0      	bne.n	8008f1e <_free_r+0x26>
 8008f5c:	681c      	ldr	r4, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	6053      	str	r3, [r2, #4]
 8008f62:	4421      	add	r1, r4
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	e7da      	b.n	8008f1e <_free_r+0x26>
 8008f68:	d902      	bls.n	8008f70 <_free_r+0x78>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	6003      	str	r3, [r0, #0]
 8008f6e:	e7d6      	b.n	8008f1e <_free_r+0x26>
 8008f70:	6825      	ldr	r5, [r4, #0]
 8008f72:	1961      	adds	r1, r4, r5
 8008f74:	428b      	cmp	r3, r1
 8008f76:	bf04      	itt	eq
 8008f78:	6819      	ldreq	r1, [r3, #0]
 8008f7a:	685b      	ldreq	r3, [r3, #4]
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	bf04      	itt	eq
 8008f80:	1949      	addeq	r1, r1, r5
 8008f82:	6021      	streq	r1, [r4, #0]
 8008f84:	6054      	str	r4, [r2, #4]
 8008f86:	e7ca      	b.n	8008f1e <_free_r+0x26>
 8008f88:	b003      	add	sp, #12
 8008f8a:	bd30      	pop	{r4, r5, pc}
 8008f8c:	20000590 	.word	0x20000590

08008f90 <sbrk_aligned>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4e0e      	ldr	r6, [pc, #56]	; (8008fcc <sbrk_aligned+0x3c>)
 8008f94:	460c      	mov	r4, r1
 8008f96:	6831      	ldr	r1, [r6, #0]
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b911      	cbnz	r1, 8008fa2 <sbrk_aligned+0x12>
 8008f9c:	f000 fcf6 	bl	800998c <_sbrk_r>
 8008fa0:	6030      	str	r0, [r6, #0]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 fcf1 	bl	800998c <_sbrk_r>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d00a      	beq.n	8008fc4 <sbrk_aligned+0x34>
 8008fae:	1cc4      	adds	r4, r0, #3
 8008fb0:	f024 0403 	bic.w	r4, r4, #3
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d007      	beq.n	8008fc8 <sbrk_aligned+0x38>
 8008fb8:	1a21      	subs	r1, r4, r0
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 fce6 	bl	800998c <_sbrk_r>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d101      	bne.n	8008fc8 <sbrk_aligned+0x38>
 8008fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc8:	4620      	mov	r0, r4
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	20000594 	.word	0x20000594

08008fd0 <_malloc_r>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	1ccd      	adds	r5, r1, #3
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	3508      	adds	r5, #8
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	bf38      	it	cc
 8008fe0:	250c      	movcc	r5, #12
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	db01      	blt.n	8008fec <_malloc_r+0x1c>
 8008fe8:	42a9      	cmp	r1, r5
 8008fea:	d905      	bls.n	8008ff8 <_malloc_r+0x28>
 8008fec:	230c      	movs	r3, #12
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff8:	4e2e      	ldr	r6, [pc, #184]	; (80090b4 <_malloc_r+0xe4>)
 8008ffa:	f001 fcdf 	bl	800a9bc <__malloc_lock>
 8008ffe:	6833      	ldr	r3, [r6, #0]
 8009000:	461c      	mov	r4, r3
 8009002:	bb34      	cbnz	r4, 8009052 <_malloc_r+0x82>
 8009004:	4629      	mov	r1, r5
 8009006:	4638      	mov	r0, r7
 8009008:	f7ff ffc2 	bl	8008f90 <sbrk_aligned>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	4604      	mov	r4, r0
 8009010:	d14d      	bne.n	80090ae <_malloc_r+0xde>
 8009012:	6834      	ldr	r4, [r6, #0]
 8009014:	4626      	mov	r6, r4
 8009016:	2e00      	cmp	r6, #0
 8009018:	d140      	bne.n	800909c <_malloc_r+0xcc>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	4631      	mov	r1, r6
 800901e:	4638      	mov	r0, r7
 8009020:	eb04 0803 	add.w	r8, r4, r3
 8009024:	f000 fcb2 	bl	800998c <_sbrk_r>
 8009028:	4580      	cmp	r8, r0
 800902a:	d13a      	bne.n	80090a2 <_malloc_r+0xd2>
 800902c:	6821      	ldr	r1, [r4, #0]
 800902e:	3503      	adds	r5, #3
 8009030:	1a6d      	subs	r5, r5, r1
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	4629      	mov	r1, r5
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa5 	bl	8008f90 <sbrk_aligned>
 8009046:	3001      	adds	r0, #1
 8009048:	d02b      	beq.n	80090a2 <_malloc_r+0xd2>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	442b      	add	r3, r5
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	e00e      	b.n	8009070 <_malloc_r+0xa0>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	1b52      	subs	r2, r2, r5
 8009056:	d41e      	bmi.n	8009096 <_malloc_r+0xc6>
 8009058:	2a0b      	cmp	r2, #11
 800905a:	d916      	bls.n	800908a <_malloc_r+0xba>
 800905c:	1961      	adds	r1, r4, r5
 800905e:	42a3      	cmp	r3, r4
 8009060:	6025      	str	r5, [r4, #0]
 8009062:	bf18      	it	ne
 8009064:	6059      	strne	r1, [r3, #4]
 8009066:	6863      	ldr	r3, [r4, #4]
 8009068:	bf08      	it	eq
 800906a:	6031      	streq	r1, [r6, #0]
 800906c:	5162      	str	r2, [r4, r5]
 800906e:	604b      	str	r3, [r1, #4]
 8009070:	4638      	mov	r0, r7
 8009072:	f104 060b 	add.w	r6, r4, #11
 8009076:	f001 fca7 	bl	800a9c8 <__malloc_unlock>
 800907a:	f026 0607 	bic.w	r6, r6, #7
 800907e:	1d23      	adds	r3, r4, #4
 8009080:	1af2      	subs	r2, r6, r3
 8009082:	d0b6      	beq.n	8008ff2 <_malloc_r+0x22>
 8009084:	1b9b      	subs	r3, r3, r6
 8009086:	50a3      	str	r3, [r4, r2]
 8009088:	e7b3      	b.n	8008ff2 <_malloc_r+0x22>
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	42a3      	cmp	r3, r4
 800908e:	bf0c      	ite	eq
 8009090:	6032      	streq	r2, [r6, #0]
 8009092:	605a      	strne	r2, [r3, #4]
 8009094:	e7ec      	b.n	8009070 <_malloc_r+0xa0>
 8009096:	4623      	mov	r3, r4
 8009098:	6864      	ldr	r4, [r4, #4]
 800909a:	e7b2      	b.n	8009002 <_malloc_r+0x32>
 800909c:	4634      	mov	r4, r6
 800909e:	6876      	ldr	r6, [r6, #4]
 80090a0:	e7b9      	b.n	8009016 <_malloc_r+0x46>
 80090a2:	230c      	movs	r3, #12
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	4638      	mov	r0, r7
 80090a8:	f001 fc8e 	bl	800a9c8 <__malloc_unlock>
 80090ac:	e7a1      	b.n	8008ff2 <_malloc_r+0x22>
 80090ae:	6025      	str	r5, [r4, #0]
 80090b0:	e7de      	b.n	8009070 <_malloc_r+0xa0>
 80090b2:	bf00      	nop
 80090b4:	20000590 	.word	0x20000590

080090b8 <__cvt>:
 80090b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	ec55 4b10 	vmov	r4, r5, d0
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	460e      	mov	r6, r1
 80090c4:	4619      	mov	r1, r3
 80090c6:	462b      	mov	r3, r5
 80090c8:	bfbb      	ittet	lt
 80090ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090ce:	461d      	movlt	r5, r3
 80090d0:	2300      	movge	r3, #0
 80090d2:	232d      	movlt	r3, #45	; 0x2d
 80090d4:	700b      	strb	r3, [r1, #0]
 80090d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090dc:	4691      	mov	r9, r2
 80090de:	f023 0820 	bic.w	r8, r3, #32
 80090e2:	bfbc      	itt	lt
 80090e4:	4622      	movlt	r2, r4
 80090e6:	4614      	movlt	r4, r2
 80090e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090ec:	d005      	beq.n	80090fa <__cvt+0x42>
 80090ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090f2:	d100      	bne.n	80090f6 <__cvt+0x3e>
 80090f4:	3601      	adds	r6, #1
 80090f6:	2102      	movs	r1, #2
 80090f8:	e000      	b.n	80090fc <__cvt+0x44>
 80090fa:	2103      	movs	r1, #3
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	ab02      	add	r3, sp, #8
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	ec45 4b10 	vmov	d0, r4, r5
 8009108:	4653      	mov	r3, sl
 800910a:	4632      	mov	r2, r6
 800910c:	f000 fe44 	bl	8009d98 <_dtoa_r>
 8009110:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009114:	4607      	mov	r7, r0
 8009116:	d102      	bne.n	800911e <__cvt+0x66>
 8009118:	f019 0f01 	tst.w	r9, #1
 800911c:	d022      	beq.n	8009164 <__cvt+0xac>
 800911e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009122:	eb07 0906 	add.w	r9, r7, r6
 8009126:	d110      	bne.n	800914a <__cvt+0x92>
 8009128:	783b      	ldrb	r3, [r7, #0]
 800912a:	2b30      	cmp	r3, #48	; 0x30
 800912c:	d10a      	bne.n	8009144 <__cvt+0x8c>
 800912e:	2200      	movs	r2, #0
 8009130:	2300      	movs	r3, #0
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 fcdf 	bl	8000af8 <__aeabi_dcmpeq>
 800913a:	b918      	cbnz	r0, 8009144 <__cvt+0x8c>
 800913c:	f1c6 0601 	rsb	r6, r6, #1
 8009140:	f8ca 6000 	str.w	r6, [sl]
 8009144:	f8da 3000 	ldr.w	r3, [sl]
 8009148:	4499      	add	r9, r3
 800914a:	2200      	movs	r2, #0
 800914c:	2300      	movs	r3, #0
 800914e:	4620      	mov	r0, r4
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 fcd1 	bl	8000af8 <__aeabi_dcmpeq>
 8009156:	b108      	cbz	r0, 800915c <__cvt+0xa4>
 8009158:	f8cd 900c 	str.w	r9, [sp, #12]
 800915c:	2230      	movs	r2, #48	; 0x30
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	454b      	cmp	r3, r9
 8009162:	d307      	bcc.n	8009174 <__cvt+0xbc>
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009168:	1bdb      	subs	r3, r3, r7
 800916a:	4638      	mov	r0, r7
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	b004      	add	sp, #16
 8009170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009174:	1c59      	adds	r1, r3, #1
 8009176:	9103      	str	r1, [sp, #12]
 8009178:	701a      	strb	r2, [r3, #0]
 800917a:	e7f0      	b.n	800915e <__cvt+0xa6>

0800917c <__exponent>:
 800917c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800917e:	4603      	mov	r3, r0
 8009180:	2900      	cmp	r1, #0
 8009182:	bfb8      	it	lt
 8009184:	4249      	neglt	r1, r1
 8009186:	f803 2b02 	strb.w	r2, [r3], #2
 800918a:	bfb4      	ite	lt
 800918c:	222d      	movlt	r2, #45	; 0x2d
 800918e:	222b      	movge	r2, #43	; 0x2b
 8009190:	2909      	cmp	r1, #9
 8009192:	7042      	strb	r2, [r0, #1]
 8009194:	dd2a      	ble.n	80091ec <__exponent+0x70>
 8009196:	f10d 0407 	add.w	r4, sp, #7
 800919a:	46a4      	mov	ip, r4
 800919c:	270a      	movs	r7, #10
 800919e:	46a6      	mov	lr, r4
 80091a0:	460a      	mov	r2, r1
 80091a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80091a6:	fb07 1516 	mls	r5, r7, r6, r1
 80091aa:	3530      	adds	r5, #48	; 0x30
 80091ac:	2a63      	cmp	r2, #99	; 0x63
 80091ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80091b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091b6:	4631      	mov	r1, r6
 80091b8:	dcf1      	bgt.n	800919e <__exponent+0x22>
 80091ba:	3130      	adds	r1, #48	; 0x30
 80091bc:	f1ae 0502 	sub.w	r5, lr, #2
 80091c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091c4:	1c44      	adds	r4, r0, #1
 80091c6:	4629      	mov	r1, r5
 80091c8:	4561      	cmp	r1, ip
 80091ca:	d30a      	bcc.n	80091e2 <__exponent+0x66>
 80091cc:	f10d 0209 	add.w	r2, sp, #9
 80091d0:	eba2 020e 	sub.w	r2, r2, lr
 80091d4:	4565      	cmp	r5, ip
 80091d6:	bf88      	it	hi
 80091d8:	2200      	movhi	r2, #0
 80091da:	4413      	add	r3, r2
 80091dc:	1a18      	subs	r0, r3, r0
 80091de:	b003      	add	sp, #12
 80091e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091ea:	e7ed      	b.n	80091c8 <__exponent+0x4c>
 80091ec:	2330      	movs	r3, #48	; 0x30
 80091ee:	3130      	adds	r1, #48	; 0x30
 80091f0:	7083      	strb	r3, [r0, #2]
 80091f2:	70c1      	strb	r1, [r0, #3]
 80091f4:	1d03      	adds	r3, r0, #4
 80091f6:	e7f1      	b.n	80091dc <__exponent+0x60>

080091f8 <_printf_float>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	ed2d 8b02 	vpush	{d8}
 8009200:	b08d      	sub	sp, #52	; 0x34
 8009202:	460c      	mov	r4, r1
 8009204:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009208:	4616      	mov	r6, r2
 800920a:	461f      	mov	r7, r3
 800920c:	4605      	mov	r5, r0
 800920e:	f001 fbb1 	bl	800a974 <_localeconv_r>
 8009212:	f8d0 a000 	ldr.w	sl, [r0]
 8009216:	4650      	mov	r0, sl
 8009218:	f7f6 ffec 	bl	80001f4 <strlen>
 800921c:	2300      	movs	r3, #0
 800921e:	930a      	str	r3, [sp, #40]	; 0x28
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	9305      	str	r3, [sp, #20]
 8009224:	f8d8 3000 	ldr.w	r3, [r8]
 8009228:	f894 b018 	ldrb.w	fp, [r4, #24]
 800922c:	3307      	adds	r3, #7
 800922e:	f023 0307 	bic.w	r3, r3, #7
 8009232:	f103 0208 	add.w	r2, r3, #8
 8009236:	f8c8 2000 	str.w	r2, [r8]
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009242:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009246:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800924a:	9307      	str	r3, [sp, #28]
 800924c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009250:	ee08 0a10 	vmov	s16, r0
 8009254:	4b9f      	ldr	r3, [pc, #636]	; (80094d4 <_printf_float+0x2dc>)
 8009256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	f7f7 fc7d 	bl	8000b5c <__aeabi_dcmpun>
 8009262:	bb88      	cbnz	r0, 80092c8 <_printf_float+0xd0>
 8009264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009268:	4b9a      	ldr	r3, [pc, #616]	; (80094d4 <_printf_float+0x2dc>)
 800926a:	f04f 32ff 	mov.w	r2, #4294967295
 800926e:	f7f7 fc57 	bl	8000b20 <__aeabi_dcmple>
 8009272:	bb48      	cbnz	r0, 80092c8 <_printf_float+0xd0>
 8009274:	2200      	movs	r2, #0
 8009276:	2300      	movs	r3, #0
 8009278:	4640      	mov	r0, r8
 800927a:	4649      	mov	r1, r9
 800927c:	f7f7 fc46 	bl	8000b0c <__aeabi_dcmplt>
 8009280:	b110      	cbz	r0, 8009288 <_printf_float+0x90>
 8009282:	232d      	movs	r3, #45	; 0x2d
 8009284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009288:	4b93      	ldr	r3, [pc, #588]	; (80094d8 <_printf_float+0x2e0>)
 800928a:	4894      	ldr	r0, [pc, #592]	; (80094dc <_printf_float+0x2e4>)
 800928c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009290:	bf94      	ite	ls
 8009292:	4698      	movls	r8, r3
 8009294:	4680      	movhi	r8, r0
 8009296:	2303      	movs	r3, #3
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	f023 0204 	bic.w	r2, r3, #4
 80092a0:	6022      	str	r2, [r4, #0]
 80092a2:	f04f 0900 	mov.w	r9, #0
 80092a6:	9700      	str	r7, [sp, #0]
 80092a8:	4633      	mov	r3, r6
 80092aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80092ac:	4621      	mov	r1, r4
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 f9d8 	bl	8009664 <_printf_common>
 80092b4:	3001      	adds	r0, #1
 80092b6:	f040 8090 	bne.w	80093da <_printf_float+0x1e2>
 80092ba:	f04f 30ff 	mov.w	r0, #4294967295
 80092be:	b00d      	add	sp, #52	; 0x34
 80092c0:	ecbd 8b02 	vpop	{d8}
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	4642      	mov	r2, r8
 80092ca:	464b      	mov	r3, r9
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7f7 fc44 	bl	8000b5c <__aeabi_dcmpun>
 80092d4:	b140      	cbz	r0, 80092e8 <_printf_float+0xf0>
 80092d6:	464b      	mov	r3, r9
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bfbc      	itt	lt
 80092dc:	232d      	movlt	r3, #45	; 0x2d
 80092de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092e2:	487f      	ldr	r0, [pc, #508]	; (80094e0 <_printf_float+0x2e8>)
 80092e4:	4b7f      	ldr	r3, [pc, #508]	; (80094e4 <_printf_float+0x2ec>)
 80092e6:	e7d1      	b.n	800928c <_printf_float+0x94>
 80092e8:	6863      	ldr	r3, [r4, #4]
 80092ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092ee:	9206      	str	r2, [sp, #24]
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	d13f      	bne.n	8009374 <_printf_float+0x17c>
 80092f4:	2306      	movs	r3, #6
 80092f6:	6063      	str	r3, [r4, #4]
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	6861      	ldr	r1, [r4, #4]
 80092fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009300:	2300      	movs	r3, #0
 8009302:	9303      	str	r3, [sp, #12]
 8009304:	ab0a      	add	r3, sp, #40	; 0x28
 8009306:	e9cd b301 	strd	fp, r3, [sp, #4]
 800930a:	ab09      	add	r3, sp, #36	; 0x24
 800930c:	ec49 8b10 	vmov	d0, r8, r9
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	6022      	str	r2, [r4, #0]
 8009314:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009318:	4628      	mov	r0, r5
 800931a:	f7ff fecd 	bl	80090b8 <__cvt>
 800931e:	9b06      	ldr	r3, [sp, #24]
 8009320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009322:	2b47      	cmp	r3, #71	; 0x47
 8009324:	4680      	mov	r8, r0
 8009326:	d108      	bne.n	800933a <_printf_float+0x142>
 8009328:	1cc8      	adds	r0, r1, #3
 800932a:	db02      	blt.n	8009332 <_printf_float+0x13a>
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	4299      	cmp	r1, r3
 8009330:	dd41      	ble.n	80093b6 <_printf_float+0x1be>
 8009332:	f1ab 0b02 	sub.w	fp, fp, #2
 8009336:	fa5f fb8b 	uxtb.w	fp, fp
 800933a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800933e:	d820      	bhi.n	8009382 <_printf_float+0x18a>
 8009340:	3901      	subs	r1, #1
 8009342:	465a      	mov	r2, fp
 8009344:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009348:	9109      	str	r1, [sp, #36]	; 0x24
 800934a:	f7ff ff17 	bl	800917c <__exponent>
 800934e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009350:	1813      	adds	r3, r2, r0
 8009352:	2a01      	cmp	r2, #1
 8009354:	4681      	mov	r9, r0
 8009356:	6123      	str	r3, [r4, #16]
 8009358:	dc02      	bgt.n	8009360 <_printf_float+0x168>
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	07d2      	lsls	r2, r2, #31
 800935e:	d501      	bpl.n	8009364 <_printf_float+0x16c>
 8009360:	3301      	adds	r3, #1
 8009362:	6123      	str	r3, [r4, #16]
 8009364:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009368:	2b00      	cmp	r3, #0
 800936a:	d09c      	beq.n	80092a6 <_printf_float+0xae>
 800936c:	232d      	movs	r3, #45	; 0x2d
 800936e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009372:	e798      	b.n	80092a6 <_printf_float+0xae>
 8009374:	9a06      	ldr	r2, [sp, #24]
 8009376:	2a47      	cmp	r2, #71	; 0x47
 8009378:	d1be      	bne.n	80092f8 <_printf_float+0x100>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1bc      	bne.n	80092f8 <_printf_float+0x100>
 800937e:	2301      	movs	r3, #1
 8009380:	e7b9      	b.n	80092f6 <_printf_float+0xfe>
 8009382:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009386:	d118      	bne.n	80093ba <_printf_float+0x1c2>
 8009388:	2900      	cmp	r1, #0
 800938a:	6863      	ldr	r3, [r4, #4]
 800938c:	dd0b      	ble.n	80093a6 <_printf_float+0x1ae>
 800938e:	6121      	str	r1, [r4, #16]
 8009390:	b913      	cbnz	r3, 8009398 <_printf_float+0x1a0>
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	07d0      	lsls	r0, r2, #31
 8009396:	d502      	bpl.n	800939e <_printf_float+0x1a6>
 8009398:	3301      	adds	r3, #1
 800939a:	440b      	add	r3, r1
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	65a1      	str	r1, [r4, #88]	; 0x58
 80093a0:	f04f 0900 	mov.w	r9, #0
 80093a4:	e7de      	b.n	8009364 <_printf_float+0x16c>
 80093a6:	b913      	cbnz	r3, 80093ae <_printf_float+0x1b6>
 80093a8:	6822      	ldr	r2, [r4, #0]
 80093aa:	07d2      	lsls	r2, r2, #31
 80093ac:	d501      	bpl.n	80093b2 <_printf_float+0x1ba>
 80093ae:	3302      	adds	r3, #2
 80093b0:	e7f4      	b.n	800939c <_printf_float+0x1a4>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e7f2      	b.n	800939c <_printf_float+0x1a4>
 80093b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093bc:	4299      	cmp	r1, r3
 80093be:	db05      	blt.n	80093cc <_printf_float+0x1d4>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	6121      	str	r1, [r4, #16]
 80093c4:	07d8      	lsls	r0, r3, #31
 80093c6:	d5ea      	bpl.n	800939e <_printf_float+0x1a6>
 80093c8:	1c4b      	adds	r3, r1, #1
 80093ca:	e7e7      	b.n	800939c <_printf_float+0x1a4>
 80093cc:	2900      	cmp	r1, #0
 80093ce:	bfd4      	ite	le
 80093d0:	f1c1 0202 	rsble	r2, r1, #2
 80093d4:	2201      	movgt	r2, #1
 80093d6:	4413      	add	r3, r2
 80093d8:	e7e0      	b.n	800939c <_printf_float+0x1a4>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	055a      	lsls	r2, r3, #21
 80093de:	d407      	bmi.n	80093f0 <_printf_float+0x1f8>
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	4642      	mov	r2, r8
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	d12c      	bne.n	8009448 <_printf_float+0x250>
 80093ee:	e764      	b.n	80092ba <_printf_float+0xc2>
 80093f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093f4:	f240 80e0 	bls.w	80095b8 <_printf_float+0x3c0>
 80093f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093fc:	2200      	movs	r2, #0
 80093fe:	2300      	movs	r3, #0
 8009400:	f7f7 fb7a 	bl	8000af8 <__aeabi_dcmpeq>
 8009404:	2800      	cmp	r0, #0
 8009406:	d034      	beq.n	8009472 <_printf_float+0x27a>
 8009408:	4a37      	ldr	r2, [pc, #220]	; (80094e8 <_printf_float+0x2f0>)
 800940a:	2301      	movs	r3, #1
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	f43f af51 	beq.w	80092ba <_printf_float+0xc2>
 8009418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800941c:	429a      	cmp	r2, r3
 800941e:	db02      	blt.n	8009426 <_printf_float+0x22e>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	07d8      	lsls	r0, r3, #31
 8009424:	d510      	bpl.n	8009448 <_printf_float+0x250>
 8009426:	ee18 3a10 	vmov	r3, s16
 800942a:	4652      	mov	r2, sl
 800942c:	4631      	mov	r1, r6
 800942e:	4628      	mov	r0, r5
 8009430:	47b8      	blx	r7
 8009432:	3001      	adds	r0, #1
 8009434:	f43f af41 	beq.w	80092ba <_printf_float+0xc2>
 8009438:	f04f 0800 	mov.w	r8, #0
 800943c:	f104 091a 	add.w	r9, r4, #26
 8009440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009442:	3b01      	subs	r3, #1
 8009444:	4543      	cmp	r3, r8
 8009446:	dc09      	bgt.n	800945c <_printf_float+0x264>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	079b      	lsls	r3, r3, #30
 800944c:	f100 8105 	bmi.w	800965a <_printf_float+0x462>
 8009450:	68e0      	ldr	r0, [r4, #12]
 8009452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009454:	4298      	cmp	r0, r3
 8009456:	bfb8      	it	lt
 8009458:	4618      	movlt	r0, r3
 800945a:	e730      	b.n	80092be <_printf_float+0xc6>
 800945c:	2301      	movs	r3, #1
 800945e:	464a      	mov	r2, r9
 8009460:	4631      	mov	r1, r6
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f af27 	beq.w	80092ba <_printf_float+0xc2>
 800946c:	f108 0801 	add.w	r8, r8, #1
 8009470:	e7e6      	b.n	8009440 <_printf_float+0x248>
 8009472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	dc39      	bgt.n	80094ec <_printf_float+0x2f4>
 8009478:	4a1b      	ldr	r2, [pc, #108]	; (80094e8 <_printf_float+0x2f0>)
 800947a:	2301      	movs	r3, #1
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f af19 	beq.w	80092ba <_printf_float+0xc2>
 8009488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800948c:	4313      	orrs	r3, r2
 800948e:	d102      	bne.n	8009496 <_printf_float+0x29e>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	07d9      	lsls	r1, r3, #31
 8009494:	d5d8      	bpl.n	8009448 <_printf_float+0x250>
 8009496:	ee18 3a10 	vmov	r3, s16
 800949a:	4652      	mov	r2, sl
 800949c:	4631      	mov	r1, r6
 800949e:	4628      	mov	r0, r5
 80094a0:	47b8      	blx	r7
 80094a2:	3001      	adds	r0, #1
 80094a4:	f43f af09 	beq.w	80092ba <_printf_float+0xc2>
 80094a8:	f04f 0900 	mov.w	r9, #0
 80094ac:	f104 0a1a 	add.w	sl, r4, #26
 80094b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b2:	425b      	negs	r3, r3
 80094b4:	454b      	cmp	r3, r9
 80094b6:	dc01      	bgt.n	80094bc <_printf_float+0x2c4>
 80094b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ba:	e792      	b.n	80093e2 <_printf_float+0x1ea>
 80094bc:	2301      	movs	r3, #1
 80094be:	4652      	mov	r2, sl
 80094c0:	4631      	mov	r1, r6
 80094c2:	4628      	mov	r0, r5
 80094c4:	47b8      	blx	r7
 80094c6:	3001      	adds	r0, #1
 80094c8:	f43f aef7 	beq.w	80092ba <_printf_float+0xc2>
 80094cc:	f109 0901 	add.w	r9, r9, #1
 80094d0:	e7ee      	b.n	80094b0 <_printf_float+0x2b8>
 80094d2:	bf00      	nop
 80094d4:	7fefffff 	.word	0x7fefffff
 80094d8:	0800d560 	.word	0x0800d560
 80094dc:	0800d564 	.word	0x0800d564
 80094e0:	0800d56c 	.word	0x0800d56c
 80094e4:	0800d568 	.word	0x0800d568
 80094e8:	0800d891 	.word	0x0800d891
 80094ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094f0:	429a      	cmp	r2, r3
 80094f2:	bfa8      	it	ge
 80094f4:	461a      	movge	r2, r3
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	4691      	mov	r9, r2
 80094fa:	dc37      	bgt.n	800956c <_printf_float+0x374>
 80094fc:	f04f 0b00 	mov.w	fp, #0
 8009500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009504:	f104 021a 	add.w	r2, r4, #26
 8009508:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800950a:	9305      	str	r3, [sp, #20]
 800950c:	eba3 0309 	sub.w	r3, r3, r9
 8009510:	455b      	cmp	r3, fp
 8009512:	dc33      	bgt.n	800957c <_printf_float+0x384>
 8009514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009518:	429a      	cmp	r2, r3
 800951a:	db3b      	blt.n	8009594 <_printf_float+0x39c>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	07da      	lsls	r2, r3, #31
 8009520:	d438      	bmi.n	8009594 <_printf_float+0x39c>
 8009522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009524:	9a05      	ldr	r2, [sp, #20]
 8009526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009528:	1a9a      	subs	r2, r3, r2
 800952a:	eba3 0901 	sub.w	r9, r3, r1
 800952e:	4591      	cmp	r9, r2
 8009530:	bfa8      	it	ge
 8009532:	4691      	movge	r9, r2
 8009534:	f1b9 0f00 	cmp.w	r9, #0
 8009538:	dc35      	bgt.n	80095a6 <_printf_float+0x3ae>
 800953a:	f04f 0800 	mov.w	r8, #0
 800953e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009542:	f104 0a1a 	add.w	sl, r4, #26
 8009546:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	eba3 0309 	sub.w	r3, r3, r9
 8009550:	4543      	cmp	r3, r8
 8009552:	f77f af79 	ble.w	8009448 <_printf_float+0x250>
 8009556:	2301      	movs	r3, #1
 8009558:	4652      	mov	r2, sl
 800955a:	4631      	mov	r1, r6
 800955c:	4628      	mov	r0, r5
 800955e:	47b8      	blx	r7
 8009560:	3001      	adds	r0, #1
 8009562:	f43f aeaa 	beq.w	80092ba <_printf_float+0xc2>
 8009566:	f108 0801 	add.w	r8, r8, #1
 800956a:	e7ec      	b.n	8009546 <_printf_float+0x34e>
 800956c:	4613      	mov	r3, r2
 800956e:	4631      	mov	r1, r6
 8009570:	4642      	mov	r2, r8
 8009572:	4628      	mov	r0, r5
 8009574:	47b8      	blx	r7
 8009576:	3001      	adds	r0, #1
 8009578:	d1c0      	bne.n	80094fc <_printf_float+0x304>
 800957a:	e69e      	b.n	80092ba <_printf_float+0xc2>
 800957c:	2301      	movs	r3, #1
 800957e:	4631      	mov	r1, r6
 8009580:	4628      	mov	r0, r5
 8009582:	9205      	str	r2, [sp, #20]
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f ae97 	beq.w	80092ba <_printf_float+0xc2>
 800958c:	9a05      	ldr	r2, [sp, #20]
 800958e:	f10b 0b01 	add.w	fp, fp, #1
 8009592:	e7b9      	b.n	8009508 <_printf_float+0x310>
 8009594:	ee18 3a10 	vmov	r3, s16
 8009598:	4652      	mov	r2, sl
 800959a:	4631      	mov	r1, r6
 800959c:	4628      	mov	r0, r5
 800959e:	47b8      	blx	r7
 80095a0:	3001      	adds	r0, #1
 80095a2:	d1be      	bne.n	8009522 <_printf_float+0x32a>
 80095a4:	e689      	b.n	80092ba <_printf_float+0xc2>
 80095a6:	9a05      	ldr	r2, [sp, #20]
 80095a8:	464b      	mov	r3, r9
 80095aa:	4442      	add	r2, r8
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	47b8      	blx	r7
 80095b2:	3001      	adds	r0, #1
 80095b4:	d1c1      	bne.n	800953a <_printf_float+0x342>
 80095b6:	e680      	b.n	80092ba <_printf_float+0xc2>
 80095b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ba:	2a01      	cmp	r2, #1
 80095bc:	dc01      	bgt.n	80095c2 <_printf_float+0x3ca>
 80095be:	07db      	lsls	r3, r3, #31
 80095c0:	d538      	bpl.n	8009634 <_printf_float+0x43c>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4642      	mov	r2, r8
 80095c6:	4631      	mov	r1, r6
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	f43f ae74 	beq.w	80092ba <_printf_float+0xc2>
 80095d2:	ee18 3a10 	vmov	r3, s16
 80095d6:	4652      	mov	r2, sl
 80095d8:	4631      	mov	r1, r6
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	f43f ae6b 	beq.w	80092ba <_printf_float+0xc2>
 80095e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	f7f7 fa84 	bl	8000af8 <__aeabi_dcmpeq>
 80095f0:	b9d8      	cbnz	r0, 800962a <_printf_float+0x432>
 80095f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f4:	f108 0201 	add.w	r2, r8, #1
 80095f8:	3b01      	subs	r3, #1
 80095fa:	4631      	mov	r1, r6
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	d10e      	bne.n	8009622 <_printf_float+0x42a>
 8009604:	e659      	b.n	80092ba <_printf_float+0xc2>
 8009606:	2301      	movs	r3, #1
 8009608:	4652      	mov	r2, sl
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	47b8      	blx	r7
 8009610:	3001      	adds	r0, #1
 8009612:	f43f ae52 	beq.w	80092ba <_printf_float+0xc2>
 8009616:	f108 0801 	add.w	r8, r8, #1
 800961a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800961c:	3b01      	subs	r3, #1
 800961e:	4543      	cmp	r3, r8
 8009620:	dcf1      	bgt.n	8009606 <_printf_float+0x40e>
 8009622:	464b      	mov	r3, r9
 8009624:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009628:	e6dc      	b.n	80093e4 <_printf_float+0x1ec>
 800962a:	f04f 0800 	mov.w	r8, #0
 800962e:	f104 0a1a 	add.w	sl, r4, #26
 8009632:	e7f2      	b.n	800961a <_printf_float+0x422>
 8009634:	2301      	movs	r3, #1
 8009636:	4642      	mov	r2, r8
 8009638:	e7df      	b.n	80095fa <_printf_float+0x402>
 800963a:	2301      	movs	r3, #1
 800963c:	464a      	mov	r2, r9
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f ae38 	beq.w	80092ba <_printf_float+0xc2>
 800964a:	f108 0801 	add.w	r8, r8, #1
 800964e:	68e3      	ldr	r3, [r4, #12]
 8009650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009652:	1a5b      	subs	r3, r3, r1
 8009654:	4543      	cmp	r3, r8
 8009656:	dcf0      	bgt.n	800963a <_printf_float+0x442>
 8009658:	e6fa      	b.n	8009450 <_printf_float+0x258>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	f104 0919 	add.w	r9, r4, #25
 8009662:	e7f4      	b.n	800964e <_printf_float+0x456>

08009664 <_printf_common>:
 8009664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009668:	4616      	mov	r6, r2
 800966a:	4699      	mov	r9, r3
 800966c:	688a      	ldr	r2, [r1, #8]
 800966e:	690b      	ldr	r3, [r1, #16]
 8009670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009674:	4293      	cmp	r3, r2
 8009676:	bfb8      	it	lt
 8009678:	4613      	movlt	r3, r2
 800967a:	6033      	str	r3, [r6, #0]
 800967c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009680:	4607      	mov	r7, r0
 8009682:	460c      	mov	r4, r1
 8009684:	b10a      	cbz	r2, 800968a <_printf_common+0x26>
 8009686:	3301      	adds	r3, #1
 8009688:	6033      	str	r3, [r6, #0]
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	0699      	lsls	r1, r3, #26
 800968e:	bf42      	ittt	mi
 8009690:	6833      	ldrmi	r3, [r6, #0]
 8009692:	3302      	addmi	r3, #2
 8009694:	6033      	strmi	r3, [r6, #0]
 8009696:	6825      	ldr	r5, [r4, #0]
 8009698:	f015 0506 	ands.w	r5, r5, #6
 800969c:	d106      	bne.n	80096ac <_printf_common+0x48>
 800969e:	f104 0a19 	add.w	sl, r4, #25
 80096a2:	68e3      	ldr	r3, [r4, #12]
 80096a4:	6832      	ldr	r2, [r6, #0]
 80096a6:	1a9b      	subs	r3, r3, r2
 80096a8:	42ab      	cmp	r3, r5
 80096aa:	dc26      	bgt.n	80096fa <_printf_common+0x96>
 80096ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096b0:	1e13      	subs	r3, r2, #0
 80096b2:	6822      	ldr	r2, [r4, #0]
 80096b4:	bf18      	it	ne
 80096b6:	2301      	movne	r3, #1
 80096b8:	0692      	lsls	r2, r2, #26
 80096ba:	d42b      	bmi.n	8009714 <_printf_common+0xb0>
 80096bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096c0:	4649      	mov	r1, r9
 80096c2:	4638      	mov	r0, r7
 80096c4:	47c0      	blx	r8
 80096c6:	3001      	adds	r0, #1
 80096c8:	d01e      	beq.n	8009708 <_printf_common+0xa4>
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	68e5      	ldr	r5, [r4, #12]
 80096ce:	6832      	ldr	r2, [r6, #0]
 80096d0:	f003 0306 	and.w	r3, r3, #6
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	bf08      	it	eq
 80096d8:	1aad      	subeq	r5, r5, r2
 80096da:	68a3      	ldr	r3, [r4, #8]
 80096dc:	6922      	ldr	r2, [r4, #16]
 80096de:	bf0c      	ite	eq
 80096e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096e4:	2500      	movne	r5, #0
 80096e6:	4293      	cmp	r3, r2
 80096e8:	bfc4      	itt	gt
 80096ea:	1a9b      	subgt	r3, r3, r2
 80096ec:	18ed      	addgt	r5, r5, r3
 80096ee:	2600      	movs	r6, #0
 80096f0:	341a      	adds	r4, #26
 80096f2:	42b5      	cmp	r5, r6
 80096f4:	d11a      	bne.n	800972c <_printf_common+0xc8>
 80096f6:	2000      	movs	r0, #0
 80096f8:	e008      	b.n	800970c <_printf_common+0xa8>
 80096fa:	2301      	movs	r3, #1
 80096fc:	4652      	mov	r2, sl
 80096fe:	4649      	mov	r1, r9
 8009700:	4638      	mov	r0, r7
 8009702:	47c0      	blx	r8
 8009704:	3001      	adds	r0, #1
 8009706:	d103      	bne.n	8009710 <_printf_common+0xac>
 8009708:	f04f 30ff 	mov.w	r0, #4294967295
 800970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009710:	3501      	adds	r5, #1
 8009712:	e7c6      	b.n	80096a2 <_printf_common+0x3e>
 8009714:	18e1      	adds	r1, r4, r3
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	2030      	movs	r0, #48	; 0x30
 800971a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800971e:	4422      	add	r2, r4
 8009720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009728:	3302      	adds	r3, #2
 800972a:	e7c7      	b.n	80096bc <_printf_common+0x58>
 800972c:	2301      	movs	r3, #1
 800972e:	4622      	mov	r2, r4
 8009730:	4649      	mov	r1, r9
 8009732:	4638      	mov	r0, r7
 8009734:	47c0      	blx	r8
 8009736:	3001      	adds	r0, #1
 8009738:	d0e6      	beq.n	8009708 <_printf_common+0xa4>
 800973a:	3601      	adds	r6, #1
 800973c:	e7d9      	b.n	80096f2 <_printf_common+0x8e>
	...

08009740 <_printf_i>:
 8009740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009744:	7e0f      	ldrb	r7, [r1, #24]
 8009746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009748:	2f78      	cmp	r7, #120	; 0x78
 800974a:	4691      	mov	r9, r2
 800974c:	4680      	mov	r8, r0
 800974e:	460c      	mov	r4, r1
 8009750:	469a      	mov	sl, r3
 8009752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009756:	d807      	bhi.n	8009768 <_printf_i+0x28>
 8009758:	2f62      	cmp	r7, #98	; 0x62
 800975a:	d80a      	bhi.n	8009772 <_printf_i+0x32>
 800975c:	2f00      	cmp	r7, #0
 800975e:	f000 80d8 	beq.w	8009912 <_printf_i+0x1d2>
 8009762:	2f58      	cmp	r7, #88	; 0x58
 8009764:	f000 80a3 	beq.w	80098ae <_printf_i+0x16e>
 8009768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800976c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009770:	e03a      	b.n	80097e8 <_printf_i+0xa8>
 8009772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009776:	2b15      	cmp	r3, #21
 8009778:	d8f6      	bhi.n	8009768 <_printf_i+0x28>
 800977a:	a101      	add	r1, pc, #4	; (adr r1, 8009780 <_printf_i+0x40>)
 800977c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009780:	080097d9 	.word	0x080097d9
 8009784:	080097ed 	.word	0x080097ed
 8009788:	08009769 	.word	0x08009769
 800978c:	08009769 	.word	0x08009769
 8009790:	08009769 	.word	0x08009769
 8009794:	08009769 	.word	0x08009769
 8009798:	080097ed 	.word	0x080097ed
 800979c:	08009769 	.word	0x08009769
 80097a0:	08009769 	.word	0x08009769
 80097a4:	08009769 	.word	0x08009769
 80097a8:	08009769 	.word	0x08009769
 80097ac:	080098f9 	.word	0x080098f9
 80097b0:	0800981d 	.word	0x0800981d
 80097b4:	080098db 	.word	0x080098db
 80097b8:	08009769 	.word	0x08009769
 80097bc:	08009769 	.word	0x08009769
 80097c0:	0800991b 	.word	0x0800991b
 80097c4:	08009769 	.word	0x08009769
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009769 	.word	0x08009769
 80097d0:	08009769 	.word	0x08009769
 80097d4:	080098e3 	.word	0x080098e3
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	1d1a      	adds	r2, r3, #4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	602a      	str	r2, [r5, #0]
 80097e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097e8:	2301      	movs	r3, #1
 80097ea:	e0a3      	b.n	8009934 <_printf_i+0x1f4>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	6829      	ldr	r1, [r5, #0]
 80097f0:	0606      	lsls	r6, r0, #24
 80097f2:	f101 0304 	add.w	r3, r1, #4
 80097f6:	d50a      	bpl.n	800980e <_printf_i+0xce>
 80097f8:	680e      	ldr	r6, [r1, #0]
 80097fa:	602b      	str	r3, [r5, #0]
 80097fc:	2e00      	cmp	r6, #0
 80097fe:	da03      	bge.n	8009808 <_printf_i+0xc8>
 8009800:	232d      	movs	r3, #45	; 0x2d
 8009802:	4276      	negs	r6, r6
 8009804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009808:	485e      	ldr	r0, [pc, #376]	; (8009984 <_printf_i+0x244>)
 800980a:	230a      	movs	r3, #10
 800980c:	e019      	b.n	8009842 <_printf_i+0x102>
 800980e:	680e      	ldr	r6, [r1, #0]
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009816:	bf18      	it	ne
 8009818:	b236      	sxthne	r6, r6
 800981a:	e7ef      	b.n	80097fc <_printf_i+0xbc>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	1d19      	adds	r1, r3, #4
 8009822:	6029      	str	r1, [r5, #0]
 8009824:	0601      	lsls	r1, r0, #24
 8009826:	d501      	bpl.n	800982c <_printf_i+0xec>
 8009828:	681e      	ldr	r6, [r3, #0]
 800982a:	e002      	b.n	8009832 <_printf_i+0xf2>
 800982c:	0646      	lsls	r6, r0, #25
 800982e:	d5fb      	bpl.n	8009828 <_printf_i+0xe8>
 8009830:	881e      	ldrh	r6, [r3, #0]
 8009832:	4854      	ldr	r0, [pc, #336]	; (8009984 <_printf_i+0x244>)
 8009834:	2f6f      	cmp	r7, #111	; 0x6f
 8009836:	bf0c      	ite	eq
 8009838:	2308      	moveq	r3, #8
 800983a:	230a      	movne	r3, #10
 800983c:	2100      	movs	r1, #0
 800983e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009842:	6865      	ldr	r5, [r4, #4]
 8009844:	60a5      	str	r5, [r4, #8]
 8009846:	2d00      	cmp	r5, #0
 8009848:	bfa2      	ittt	ge
 800984a:	6821      	ldrge	r1, [r4, #0]
 800984c:	f021 0104 	bicge.w	r1, r1, #4
 8009850:	6021      	strge	r1, [r4, #0]
 8009852:	b90e      	cbnz	r6, 8009858 <_printf_i+0x118>
 8009854:	2d00      	cmp	r5, #0
 8009856:	d04d      	beq.n	80098f4 <_printf_i+0x1b4>
 8009858:	4615      	mov	r5, r2
 800985a:	fbb6 f1f3 	udiv	r1, r6, r3
 800985e:	fb03 6711 	mls	r7, r3, r1, r6
 8009862:	5dc7      	ldrb	r7, [r0, r7]
 8009864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009868:	4637      	mov	r7, r6
 800986a:	42bb      	cmp	r3, r7
 800986c:	460e      	mov	r6, r1
 800986e:	d9f4      	bls.n	800985a <_printf_i+0x11a>
 8009870:	2b08      	cmp	r3, #8
 8009872:	d10b      	bne.n	800988c <_printf_i+0x14c>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	07de      	lsls	r6, r3, #31
 8009878:	d508      	bpl.n	800988c <_printf_i+0x14c>
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	6861      	ldr	r1, [r4, #4]
 800987e:	4299      	cmp	r1, r3
 8009880:	bfde      	ittt	le
 8009882:	2330      	movle	r3, #48	; 0x30
 8009884:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800988c:	1b52      	subs	r2, r2, r5
 800988e:	6122      	str	r2, [r4, #16]
 8009890:	f8cd a000 	str.w	sl, [sp]
 8009894:	464b      	mov	r3, r9
 8009896:	aa03      	add	r2, sp, #12
 8009898:	4621      	mov	r1, r4
 800989a:	4640      	mov	r0, r8
 800989c:	f7ff fee2 	bl	8009664 <_printf_common>
 80098a0:	3001      	adds	r0, #1
 80098a2:	d14c      	bne.n	800993e <_printf_i+0x1fe>
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	b004      	add	sp, #16
 80098aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ae:	4835      	ldr	r0, [pc, #212]	; (8009984 <_printf_i+0x244>)
 80098b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80098b4:	6829      	ldr	r1, [r5, #0]
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80098bc:	6029      	str	r1, [r5, #0]
 80098be:	061d      	lsls	r5, r3, #24
 80098c0:	d514      	bpl.n	80098ec <_printf_i+0x1ac>
 80098c2:	07df      	lsls	r7, r3, #31
 80098c4:	bf44      	itt	mi
 80098c6:	f043 0320 	orrmi.w	r3, r3, #32
 80098ca:	6023      	strmi	r3, [r4, #0]
 80098cc:	b91e      	cbnz	r6, 80098d6 <_printf_i+0x196>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	f023 0320 	bic.w	r3, r3, #32
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	2310      	movs	r3, #16
 80098d8:	e7b0      	b.n	800983c <_printf_i+0xfc>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	f043 0320 	orr.w	r3, r3, #32
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	2378      	movs	r3, #120	; 0x78
 80098e4:	4828      	ldr	r0, [pc, #160]	; (8009988 <_printf_i+0x248>)
 80098e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098ea:	e7e3      	b.n	80098b4 <_printf_i+0x174>
 80098ec:	0659      	lsls	r1, r3, #25
 80098ee:	bf48      	it	mi
 80098f0:	b2b6      	uxthmi	r6, r6
 80098f2:	e7e6      	b.n	80098c2 <_printf_i+0x182>
 80098f4:	4615      	mov	r5, r2
 80098f6:	e7bb      	b.n	8009870 <_printf_i+0x130>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	6826      	ldr	r6, [r4, #0]
 80098fc:	6961      	ldr	r1, [r4, #20]
 80098fe:	1d18      	adds	r0, r3, #4
 8009900:	6028      	str	r0, [r5, #0]
 8009902:	0635      	lsls	r5, r6, #24
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	d501      	bpl.n	800990c <_printf_i+0x1cc>
 8009908:	6019      	str	r1, [r3, #0]
 800990a:	e002      	b.n	8009912 <_printf_i+0x1d2>
 800990c:	0670      	lsls	r0, r6, #25
 800990e:	d5fb      	bpl.n	8009908 <_printf_i+0x1c8>
 8009910:	8019      	strh	r1, [r3, #0]
 8009912:	2300      	movs	r3, #0
 8009914:	6123      	str	r3, [r4, #16]
 8009916:	4615      	mov	r5, r2
 8009918:	e7ba      	b.n	8009890 <_printf_i+0x150>
 800991a:	682b      	ldr	r3, [r5, #0]
 800991c:	1d1a      	adds	r2, r3, #4
 800991e:	602a      	str	r2, [r5, #0]
 8009920:	681d      	ldr	r5, [r3, #0]
 8009922:	6862      	ldr	r2, [r4, #4]
 8009924:	2100      	movs	r1, #0
 8009926:	4628      	mov	r0, r5
 8009928:	f7f6 fc72 	bl	8000210 <memchr>
 800992c:	b108      	cbz	r0, 8009932 <_printf_i+0x1f2>
 800992e:	1b40      	subs	r0, r0, r5
 8009930:	6060      	str	r0, [r4, #4]
 8009932:	6863      	ldr	r3, [r4, #4]
 8009934:	6123      	str	r3, [r4, #16]
 8009936:	2300      	movs	r3, #0
 8009938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800993c:	e7a8      	b.n	8009890 <_printf_i+0x150>
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	462a      	mov	r2, r5
 8009942:	4649      	mov	r1, r9
 8009944:	4640      	mov	r0, r8
 8009946:	47d0      	blx	sl
 8009948:	3001      	adds	r0, #1
 800994a:	d0ab      	beq.n	80098a4 <_printf_i+0x164>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	079b      	lsls	r3, r3, #30
 8009950:	d413      	bmi.n	800997a <_printf_i+0x23a>
 8009952:	68e0      	ldr	r0, [r4, #12]
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	4298      	cmp	r0, r3
 8009958:	bfb8      	it	lt
 800995a:	4618      	movlt	r0, r3
 800995c:	e7a4      	b.n	80098a8 <_printf_i+0x168>
 800995e:	2301      	movs	r3, #1
 8009960:	4632      	mov	r2, r6
 8009962:	4649      	mov	r1, r9
 8009964:	4640      	mov	r0, r8
 8009966:	47d0      	blx	sl
 8009968:	3001      	adds	r0, #1
 800996a:	d09b      	beq.n	80098a4 <_printf_i+0x164>
 800996c:	3501      	adds	r5, #1
 800996e:	68e3      	ldr	r3, [r4, #12]
 8009970:	9903      	ldr	r1, [sp, #12]
 8009972:	1a5b      	subs	r3, r3, r1
 8009974:	42ab      	cmp	r3, r5
 8009976:	dcf2      	bgt.n	800995e <_printf_i+0x21e>
 8009978:	e7eb      	b.n	8009952 <_printf_i+0x212>
 800997a:	2500      	movs	r5, #0
 800997c:	f104 0619 	add.w	r6, r4, #25
 8009980:	e7f5      	b.n	800996e <_printf_i+0x22e>
 8009982:	bf00      	nop
 8009984:	0800d570 	.word	0x0800d570
 8009988:	0800d581 	.word	0x0800d581

0800998c <_sbrk_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d06      	ldr	r5, [pc, #24]	; (80099a8 <_sbrk_r+0x1c>)
 8009990:	2300      	movs	r3, #0
 8009992:	4604      	mov	r4, r0
 8009994:	4608      	mov	r0, r1
 8009996:	602b      	str	r3, [r5, #0]
 8009998:	f7f9 f974 	bl	8002c84 <_sbrk>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_sbrk_r+0x1a>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_sbrk_r+0x1a>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	20000598 	.word	0x20000598

080099ac <siprintf>:
 80099ac:	b40e      	push	{r1, r2, r3}
 80099ae:	b500      	push	{lr}
 80099b0:	b09c      	sub	sp, #112	; 0x70
 80099b2:	ab1d      	add	r3, sp, #116	; 0x74
 80099b4:	9002      	str	r0, [sp, #8]
 80099b6:	9006      	str	r0, [sp, #24]
 80099b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099bc:	4809      	ldr	r0, [pc, #36]	; (80099e4 <siprintf+0x38>)
 80099be:	9107      	str	r1, [sp, #28]
 80099c0:	9104      	str	r1, [sp, #16]
 80099c2:	4909      	ldr	r1, [pc, #36]	; (80099e8 <siprintf+0x3c>)
 80099c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c8:	9105      	str	r1, [sp, #20]
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	a902      	add	r1, sp, #8
 80099d0:	f001 fbf6 	bl	800b1c0 <_svfiprintf_r>
 80099d4:	9b02      	ldr	r3, [sp, #8]
 80099d6:	2200      	movs	r2, #0
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	b01c      	add	sp, #112	; 0x70
 80099dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e0:	b003      	add	sp, #12
 80099e2:	4770      	bx	lr
 80099e4:	200000a4 	.word	0x200000a4
 80099e8:	ffff0208 	.word	0xffff0208

080099ec <siscanf>:
 80099ec:	b40e      	push	{r1, r2, r3}
 80099ee:	b510      	push	{r4, lr}
 80099f0:	b09f      	sub	sp, #124	; 0x7c
 80099f2:	ac21      	add	r4, sp, #132	; 0x84
 80099f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80099f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80099fc:	9201      	str	r2, [sp, #4]
 80099fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009a02:	9004      	str	r0, [sp, #16]
 8009a04:	9008      	str	r0, [sp, #32]
 8009a06:	f7f6 fbf5 	bl	80001f4 <strlen>
 8009a0a:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <siscanf+0x50>)
 8009a0c:	9005      	str	r0, [sp, #20]
 8009a0e:	9009      	str	r0, [sp, #36]	; 0x24
 8009a10:	930d      	str	r3, [sp, #52]	; 0x34
 8009a12:	480b      	ldr	r0, [pc, #44]	; (8009a40 <siscanf+0x54>)
 8009a14:	9a01      	ldr	r2, [sp, #4]
 8009a16:	6800      	ldr	r0, [r0, #0]
 8009a18:	9403      	str	r4, [sp, #12]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9311      	str	r3, [sp, #68]	; 0x44
 8009a1e:	9316      	str	r3, [sp, #88]	; 0x58
 8009a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009a28:	a904      	add	r1, sp, #16
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	f001 fd22 	bl	800b474 <__ssvfiscanf_r>
 8009a30:	b01f      	add	sp, #124	; 0x7c
 8009a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a36:	b003      	add	sp, #12
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	08009a67 	.word	0x08009a67
 8009a40:	200000a4 	.word	0x200000a4

08009a44 <__sread>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	460c      	mov	r4, r1
 8009a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4c:	f001 ffdc 	bl	800ba08 <_read_r>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	bfab      	itete	ge
 8009a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a56:	89a3      	ldrhlt	r3, [r4, #12]
 8009a58:	181b      	addge	r3, r3, r0
 8009a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a5e:	bfac      	ite	ge
 8009a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a62:	81a3      	strhlt	r3, [r4, #12]
 8009a64:	bd10      	pop	{r4, pc}

08009a66 <__seofread>:
 8009a66:	2000      	movs	r0, #0
 8009a68:	4770      	bx	lr

08009a6a <__swrite>:
 8009a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6e:	461f      	mov	r7, r3
 8009a70:	898b      	ldrh	r3, [r1, #12]
 8009a72:	05db      	lsls	r3, r3, #23
 8009a74:	4605      	mov	r5, r0
 8009a76:	460c      	mov	r4, r1
 8009a78:	4616      	mov	r6, r2
 8009a7a:	d505      	bpl.n	8009a88 <__swrite+0x1e>
 8009a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a80:	2302      	movs	r3, #2
 8009a82:	2200      	movs	r2, #0
 8009a84:	f000 ff7a 	bl	800a97c <_lseek_r>
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	4632      	mov	r2, r6
 8009a96:	463b      	mov	r3, r7
 8009a98:	4628      	mov	r0, r5
 8009a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9e:	f000 b8cd 	b.w	8009c3c <_write_r>

08009aa2 <__sseek>:
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aaa:	f000 ff67 	bl	800a97c <_lseek_r>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	bf15      	itete	ne
 8009ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009abe:	81a3      	strheq	r3, [r4, #12]
 8009ac0:	bf18      	it	ne
 8009ac2:	81a3      	strhne	r3, [r4, #12]
 8009ac4:	bd10      	pop	{r4, pc}

08009ac6 <__sclose>:
 8009ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aca:	f000 b8c9 	b.w	8009c60 <_close_r>

08009ace <strchr>:
 8009ace:	b2c9      	uxtb	r1, r1
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad6:	b11a      	cbz	r2, 8009ae0 <strchr+0x12>
 8009ad8:	428a      	cmp	r2, r1
 8009ada:	d1f9      	bne.n	8009ad0 <strchr+0x2>
 8009adc:	4618      	mov	r0, r3
 8009ade:	4770      	bx	lr
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	bf18      	it	ne
 8009ae4:	2300      	movne	r3, #0
 8009ae6:	e7f9      	b.n	8009adc <strchr+0xe>

08009ae8 <strcpy>:
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aee:	f803 2b01 	strb.w	r2, [r3], #1
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d1f9      	bne.n	8009aea <strcpy+0x2>
 8009af6:	4770      	bx	lr

08009af8 <strncmp>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	b17a      	cbz	r2, 8009b1c <strncmp+0x24>
 8009afc:	4603      	mov	r3, r0
 8009afe:	3901      	subs	r1, #1
 8009b00:	1884      	adds	r4, r0, r2
 8009b02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b0a:	4290      	cmp	r0, r2
 8009b0c:	d101      	bne.n	8009b12 <strncmp+0x1a>
 8009b0e:	42a3      	cmp	r3, r4
 8009b10:	d101      	bne.n	8009b16 <strncmp+0x1e>
 8009b12:	1a80      	subs	r0, r0, r2
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d1f3      	bne.n	8009b02 <strncmp+0xa>
 8009b1a:	e7fa      	b.n	8009b12 <strncmp+0x1a>
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	e7f9      	b.n	8009b14 <strncmp+0x1c>

08009b20 <_strtol_l.constprop.0>:
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b26:	d001      	beq.n	8009b2c <_strtol_l.constprop.0+0xc>
 8009b28:	2b24      	cmp	r3, #36	; 0x24
 8009b2a:	d906      	bls.n	8009b3a <_strtol_l.constprop.0+0x1a>
 8009b2c:	f7ff f9a2 	bl	8008e74 <__errno>
 8009b30:	2316      	movs	r3, #22
 8009b32:	6003      	str	r3, [r0, #0]
 8009b34:	2000      	movs	r0, #0
 8009b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c20 <_strtol_l.constprop.0+0x100>
 8009b3e:	460d      	mov	r5, r1
 8009b40:	462e      	mov	r6, r5
 8009b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b4a:	f017 0708 	ands.w	r7, r7, #8
 8009b4e:	d1f7      	bne.n	8009b40 <_strtol_l.constprop.0+0x20>
 8009b50:	2c2d      	cmp	r4, #45	; 0x2d
 8009b52:	d132      	bne.n	8009bba <_strtol_l.constprop.0+0x9a>
 8009b54:	782c      	ldrb	r4, [r5, #0]
 8009b56:	2701      	movs	r7, #1
 8009b58:	1cb5      	adds	r5, r6, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d05b      	beq.n	8009c16 <_strtol_l.constprop.0+0xf6>
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d109      	bne.n	8009b76 <_strtol_l.constprop.0+0x56>
 8009b62:	2c30      	cmp	r4, #48	; 0x30
 8009b64:	d107      	bne.n	8009b76 <_strtol_l.constprop.0+0x56>
 8009b66:	782c      	ldrb	r4, [r5, #0]
 8009b68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b6c:	2c58      	cmp	r4, #88	; 0x58
 8009b6e:	d14d      	bne.n	8009c0c <_strtol_l.constprop.0+0xec>
 8009b70:	786c      	ldrb	r4, [r5, #1]
 8009b72:	2310      	movs	r3, #16
 8009b74:	3502      	adds	r5, #2
 8009b76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b7e:	f04f 0c00 	mov.w	ip, #0
 8009b82:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b86:	4666      	mov	r6, ip
 8009b88:	fb03 8a19 	mls	sl, r3, r9, r8
 8009b8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009b90:	f1be 0f09 	cmp.w	lr, #9
 8009b94:	d816      	bhi.n	8009bc4 <_strtol_l.constprop.0+0xa4>
 8009b96:	4674      	mov	r4, lr
 8009b98:	42a3      	cmp	r3, r4
 8009b9a:	dd24      	ble.n	8009be6 <_strtol_l.constprop.0+0xc6>
 8009b9c:	f1bc 0f00 	cmp.w	ip, #0
 8009ba0:	db1e      	blt.n	8009be0 <_strtol_l.constprop.0+0xc0>
 8009ba2:	45b1      	cmp	r9, r6
 8009ba4:	d31c      	bcc.n	8009be0 <_strtol_l.constprop.0+0xc0>
 8009ba6:	d101      	bne.n	8009bac <_strtol_l.constprop.0+0x8c>
 8009ba8:	45a2      	cmp	sl, r4
 8009baa:	db19      	blt.n	8009be0 <_strtol_l.constprop.0+0xc0>
 8009bac:	fb06 4603 	mla	r6, r6, r3, r4
 8009bb0:	f04f 0c01 	mov.w	ip, #1
 8009bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bb8:	e7e8      	b.n	8009b8c <_strtol_l.constprop.0+0x6c>
 8009bba:	2c2b      	cmp	r4, #43	; 0x2b
 8009bbc:	bf04      	itt	eq
 8009bbe:	782c      	ldrbeq	r4, [r5, #0]
 8009bc0:	1cb5      	addeq	r5, r6, #2
 8009bc2:	e7ca      	b.n	8009b5a <_strtol_l.constprop.0+0x3a>
 8009bc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009bc8:	f1be 0f19 	cmp.w	lr, #25
 8009bcc:	d801      	bhi.n	8009bd2 <_strtol_l.constprop.0+0xb2>
 8009bce:	3c37      	subs	r4, #55	; 0x37
 8009bd0:	e7e2      	b.n	8009b98 <_strtol_l.constprop.0+0x78>
 8009bd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009bd6:	f1be 0f19 	cmp.w	lr, #25
 8009bda:	d804      	bhi.n	8009be6 <_strtol_l.constprop.0+0xc6>
 8009bdc:	3c57      	subs	r4, #87	; 0x57
 8009bde:	e7db      	b.n	8009b98 <_strtol_l.constprop.0+0x78>
 8009be0:	f04f 3cff 	mov.w	ip, #4294967295
 8009be4:	e7e6      	b.n	8009bb4 <_strtol_l.constprop.0+0x94>
 8009be6:	f1bc 0f00 	cmp.w	ip, #0
 8009bea:	da05      	bge.n	8009bf8 <_strtol_l.constprop.0+0xd8>
 8009bec:	2322      	movs	r3, #34	; 0x22
 8009bee:	6003      	str	r3, [r0, #0]
 8009bf0:	4646      	mov	r6, r8
 8009bf2:	b942      	cbnz	r2, 8009c06 <_strtol_l.constprop.0+0xe6>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	e79e      	b.n	8009b36 <_strtol_l.constprop.0+0x16>
 8009bf8:	b107      	cbz	r7, 8009bfc <_strtol_l.constprop.0+0xdc>
 8009bfa:	4276      	negs	r6, r6
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d0f9      	beq.n	8009bf4 <_strtol_l.constprop.0+0xd4>
 8009c00:	f1bc 0f00 	cmp.w	ip, #0
 8009c04:	d000      	beq.n	8009c08 <_strtol_l.constprop.0+0xe8>
 8009c06:	1e69      	subs	r1, r5, #1
 8009c08:	6011      	str	r1, [r2, #0]
 8009c0a:	e7f3      	b.n	8009bf4 <_strtol_l.constprop.0+0xd4>
 8009c0c:	2430      	movs	r4, #48	; 0x30
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1b1      	bne.n	8009b76 <_strtol_l.constprop.0+0x56>
 8009c12:	2308      	movs	r3, #8
 8009c14:	e7af      	b.n	8009b76 <_strtol_l.constprop.0+0x56>
 8009c16:	2c30      	cmp	r4, #48	; 0x30
 8009c18:	d0a5      	beq.n	8009b66 <_strtol_l.constprop.0+0x46>
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	e7ab      	b.n	8009b76 <_strtol_l.constprop.0+0x56>
 8009c1e:	bf00      	nop
 8009c20:	0800d593 	.word	0x0800d593

08009c24 <_strtol_r>:
 8009c24:	f7ff bf7c 	b.w	8009b20 <_strtol_l.constprop.0>

08009c28 <strtol>:
 8009c28:	4613      	mov	r3, r2
 8009c2a:	460a      	mov	r2, r1
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	4802      	ldr	r0, [pc, #8]	; (8009c38 <strtol+0x10>)
 8009c30:	6800      	ldr	r0, [r0, #0]
 8009c32:	f7ff bf75 	b.w	8009b20 <_strtol_l.constprop.0>
 8009c36:	bf00      	nop
 8009c38:	200000a4 	.word	0x200000a4

08009c3c <_write_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	; (8009c5c <_write_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f7f8 ffc9 	bl	8002be2 <_write>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_write_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_write_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20000598 	.word	0x20000598

08009c60 <_close_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	; (8009c7c <_close_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f8 ffd5 	bl	8002c1a <_close>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_close_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_close_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20000598 	.word	0x20000598

08009c80 <quorem>:
 8009c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	6903      	ldr	r3, [r0, #16]
 8009c86:	690c      	ldr	r4, [r1, #16]
 8009c88:	42a3      	cmp	r3, r4
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	f2c0 8081 	blt.w	8009d92 <quorem+0x112>
 8009c90:	3c01      	subs	r4, #1
 8009c92:	f101 0814 	add.w	r8, r1, #20
 8009c96:	f100 0514 	add.w	r5, r0, #20
 8009c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ca4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	429a      	cmp	r2, r3
 8009cac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cb8:	d331      	bcc.n	8009d1e <quorem+0x9e>
 8009cba:	f04f 0e00 	mov.w	lr, #0
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	46ac      	mov	ip, r5
 8009cc2:	46f2      	mov	sl, lr
 8009cc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009cc8:	b293      	uxth	r3, r2
 8009cca:	fb06 e303 	mla	r3, r6, r3, lr
 8009cce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8009cd8:	f8dc a000 	ldr.w	sl, [ip]
 8009cdc:	0c12      	lsrs	r2, r2, #16
 8009cde:	fa13 f38a 	uxtah	r3, r3, sl
 8009ce2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cee:	b292      	uxth	r2, r2
 8009cf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009cf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cfc:	4581      	cmp	r9, r0
 8009cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d02:	f84c 3b04 	str.w	r3, [ip], #4
 8009d06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d0a:	d2db      	bcs.n	8009cc4 <quorem+0x44>
 8009d0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d10:	b92b      	cbnz	r3, 8009d1e <quorem+0x9e>
 8009d12:	9b01      	ldr	r3, [sp, #4]
 8009d14:	3b04      	subs	r3, #4
 8009d16:	429d      	cmp	r5, r3
 8009d18:	461a      	mov	r2, r3
 8009d1a:	d32e      	bcc.n	8009d7a <quorem+0xfa>
 8009d1c:	613c      	str	r4, [r7, #16]
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f001 f8da 	bl	800aed8 <__mcmp>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	db24      	blt.n	8009d72 <quorem+0xf2>
 8009d28:	3601      	adds	r6, #1
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f04f 0c00 	mov.w	ip, #0
 8009d30:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d34:	f8d0 e000 	ldr.w	lr, [r0]
 8009d38:	b293      	uxth	r3, r2
 8009d3a:	ebac 0303 	sub.w	r3, ip, r3
 8009d3e:	0c12      	lsrs	r2, r2, #16
 8009d40:	fa13 f38e 	uxtah	r3, r3, lr
 8009d44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d52:	45c1      	cmp	r9, r8
 8009d54:	f840 3b04 	str.w	r3, [r0], #4
 8009d58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d5c:	d2e8      	bcs.n	8009d30 <quorem+0xb0>
 8009d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d66:	b922      	cbnz	r2, 8009d72 <quorem+0xf2>
 8009d68:	3b04      	subs	r3, #4
 8009d6a:	429d      	cmp	r5, r3
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	d30a      	bcc.n	8009d86 <quorem+0x106>
 8009d70:	613c      	str	r4, [r7, #16]
 8009d72:	4630      	mov	r0, r6
 8009d74:	b003      	add	sp, #12
 8009d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7a:	6812      	ldr	r2, [r2, #0]
 8009d7c:	3b04      	subs	r3, #4
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	d1cc      	bne.n	8009d1c <quorem+0x9c>
 8009d82:	3c01      	subs	r4, #1
 8009d84:	e7c7      	b.n	8009d16 <quorem+0x96>
 8009d86:	6812      	ldr	r2, [r2, #0]
 8009d88:	3b04      	subs	r3, #4
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	d1f0      	bne.n	8009d70 <quorem+0xf0>
 8009d8e:	3c01      	subs	r4, #1
 8009d90:	e7eb      	b.n	8009d6a <quorem+0xea>
 8009d92:	2000      	movs	r0, #0
 8009d94:	e7ee      	b.n	8009d74 <quorem+0xf4>
	...

08009d98 <_dtoa_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	ed2d 8b04 	vpush	{d8-d9}
 8009da0:	ec57 6b10 	vmov	r6, r7, d0
 8009da4:	b093      	sub	sp, #76	; 0x4c
 8009da6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009da8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009dac:	9106      	str	r1, [sp, #24]
 8009dae:	ee10 aa10 	vmov	sl, s0
 8009db2:	4604      	mov	r4, r0
 8009db4:	9209      	str	r2, [sp, #36]	; 0x24
 8009db6:	930c      	str	r3, [sp, #48]	; 0x30
 8009db8:	46bb      	mov	fp, r7
 8009dba:	b975      	cbnz	r5, 8009dda <_dtoa_r+0x42>
 8009dbc:	2010      	movs	r0, #16
 8009dbe:	f7ff f883 	bl	8008ec8 <malloc>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	6260      	str	r0, [r4, #36]	; 0x24
 8009dc6:	b920      	cbnz	r0, 8009dd2 <_dtoa_r+0x3a>
 8009dc8:	4ba7      	ldr	r3, [pc, #668]	; (800a068 <_dtoa_r+0x2d0>)
 8009dca:	21ea      	movs	r1, #234	; 0xea
 8009dcc:	48a7      	ldr	r0, [pc, #668]	; (800a06c <_dtoa_r+0x2d4>)
 8009dce:	f001 ff13 	bl	800bbf8 <__assert_func>
 8009dd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dd6:	6005      	str	r5, [r0, #0]
 8009dd8:	60c5      	str	r5, [r0, #12]
 8009dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ddc:	6819      	ldr	r1, [r3, #0]
 8009dde:	b151      	cbz	r1, 8009df6 <_dtoa_r+0x5e>
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	604a      	str	r2, [r1, #4]
 8009de4:	2301      	movs	r3, #1
 8009de6:	4093      	lsls	r3, r2
 8009de8:	608b      	str	r3, [r1, #8]
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fe32 	bl	800aa54 <_Bfree>
 8009df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	1e3b      	subs	r3, r7, #0
 8009df8:	bfaa      	itet	ge
 8009dfa:	2300      	movge	r3, #0
 8009dfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009e00:	f8c8 3000 	strge.w	r3, [r8]
 8009e04:	4b9a      	ldr	r3, [pc, #616]	; (800a070 <_dtoa_r+0x2d8>)
 8009e06:	bfbc      	itt	lt
 8009e08:	2201      	movlt	r2, #1
 8009e0a:	f8c8 2000 	strlt.w	r2, [r8]
 8009e0e:	ea33 030b 	bics.w	r3, r3, fp
 8009e12:	d11b      	bne.n	8009e4c <_dtoa_r+0xb4>
 8009e14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e16:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e20:	4333      	orrs	r3, r6
 8009e22:	f000 8592 	beq.w	800a94a <_dtoa_r+0xbb2>
 8009e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e28:	b963      	cbnz	r3, 8009e44 <_dtoa_r+0xac>
 8009e2a:	4b92      	ldr	r3, [pc, #584]	; (800a074 <_dtoa_r+0x2dc>)
 8009e2c:	e022      	b.n	8009e74 <_dtoa_r+0xdc>
 8009e2e:	4b92      	ldr	r3, [pc, #584]	; (800a078 <_dtoa_r+0x2e0>)
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	3308      	adds	r3, #8
 8009e34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	9801      	ldr	r0, [sp, #4]
 8009e3a:	b013      	add	sp, #76	; 0x4c
 8009e3c:	ecbd 8b04 	vpop	{d8-d9}
 8009e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e44:	4b8b      	ldr	r3, [pc, #556]	; (800a074 <_dtoa_r+0x2dc>)
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	3303      	adds	r3, #3
 8009e4a:	e7f3      	b.n	8009e34 <_dtoa_r+0x9c>
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4650      	mov	r0, sl
 8009e52:	4659      	mov	r1, fp
 8009e54:	f7f6 fe50 	bl	8000af8 <__aeabi_dcmpeq>
 8009e58:	ec4b ab19 	vmov	d9, sl, fp
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	b158      	cbz	r0, 8009e78 <_dtoa_r+0xe0>
 8009e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e62:	2301      	movs	r3, #1
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 856b 	beq.w	800a944 <_dtoa_r+0xbac>
 8009e6e:	4883      	ldr	r0, [pc, #524]	; (800a07c <_dtoa_r+0x2e4>)
 8009e70:	6018      	str	r0, [r3, #0]
 8009e72:	1e43      	subs	r3, r0, #1
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	e7df      	b.n	8009e38 <_dtoa_r+0xa0>
 8009e78:	ec4b ab10 	vmov	d0, sl, fp
 8009e7c:	aa10      	add	r2, sp, #64	; 0x40
 8009e7e:	a911      	add	r1, sp, #68	; 0x44
 8009e80:	4620      	mov	r0, r4
 8009e82:	f001 f8cf 	bl	800b024 <__d2b>
 8009e86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009e8a:	ee08 0a10 	vmov	s16, r0
 8009e8e:	2d00      	cmp	r5, #0
 8009e90:	f000 8084 	beq.w	8009f9c <_dtoa_r+0x204>
 8009e94:	ee19 3a90 	vmov	r3, s19
 8009e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ea0:	4656      	mov	r6, sl
 8009ea2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ea6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009eaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009eae:	4b74      	ldr	r3, [pc, #464]	; (800a080 <_dtoa_r+0x2e8>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	f7f6 f9ff 	bl	80002b8 <__aeabi_dsub>
 8009eba:	a365      	add	r3, pc, #404	; (adr r3, 800a050 <_dtoa_r+0x2b8>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f7f6 fbb2 	bl	8000628 <__aeabi_dmul>
 8009ec4:	a364      	add	r3, pc, #400	; (adr r3, 800a058 <_dtoa_r+0x2c0>)
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f7f6 f9f7 	bl	80002bc <__adddf3>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	f7f6 fb3e 	bl	8000554 <__aeabi_i2d>
 8009ed8:	a361      	add	r3, pc, #388	; (adr r3, 800a060 <_dtoa_r+0x2c8>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f7f6 fba3 	bl	8000628 <__aeabi_dmul>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 f9e7 	bl	80002bc <__adddf3>
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	f7f6 fe49 	bl	8000b88 <__aeabi_d2iz>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	9000      	str	r0, [sp, #0]
 8009efa:	2300      	movs	r3, #0
 8009efc:	4630      	mov	r0, r6
 8009efe:	4639      	mov	r1, r7
 8009f00:	f7f6 fe04 	bl	8000b0c <__aeabi_dcmplt>
 8009f04:	b150      	cbz	r0, 8009f1c <_dtoa_r+0x184>
 8009f06:	9800      	ldr	r0, [sp, #0]
 8009f08:	f7f6 fb24 	bl	8000554 <__aeabi_i2d>
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	f7f6 fdf2 	bl	8000af8 <__aeabi_dcmpeq>
 8009f14:	b910      	cbnz	r0, 8009f1c <_dtoa_r+0x184>
 8009f16:	9b00      	ldr	r3, [sp, #0]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	9b00      	ldr	r3, [sp, #0]
 8009f1e:	2b16      	cmp	r3, #22
 8009f20:	d85a      	bhi.n	8009fd8 <_dtoa_r+0x240>
 8009f22:	9a00      	ldr	r2, [sp, #0]
 8009f24:	4b57      	ldr	r3, [pc, #348]	; (800a084 <_dtoa_r+0x2ec>)
 8009f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	ec51 0b19 	vmov	r0, r1, d9
 8009f32:	f7f6 fdeb 	bl	8000b0c <__aeabi_dcmplt>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d050      	beq.n	8009fdc <_dtoa_r+0x244>
 8009f3a:	9b00      	ldr	r3, [sp, #0]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	2300      	movs	r3, #0
 8009f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f46:	1b5d      	subs	r5, r3, r5
 8009f48:	1e6b      	subs	r3, r5, #1
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	bf45      	ittet	mi
 8009f4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f52:	9304      	strmi	r3, [sp, #16]
 8009f54:	2300      	movpl	r3, #0
 8009f56:	2300      	movmi	r3, #0
 8009f58:	bf4c      	ite	mi
 8009f5a:	9305      	strmi	r3, [sp, #20]
 8009f5c:	9304      	strpl	r3, [sp, #16]
 8009f5e:	9b00      	ldr	r3, [sp, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	db3d      	blt.n	8009fe0 <_dtoa_r+0x248>
 8009f64:	9b05      	ldr	r3, [sp, #20]
 8009f66:	9a00      	ldr	r2, [sp, #0]
 8009f68:	920a      	str	r2, [sp, #40]	; 0x28
 8009f6a:	4413      	add	r3, r2
 8009f6c:	9305      	str	r3, [sp, #20]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	9307      	str	r3, [sp, #28]
 8009f72:	9b06      	ldr	r3, [sp, #24]
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	f200 8089 	bhi.w	800a08c <_dtoa_r+0x2f4>
 8009f7a:	2b05      	cmp	r3, #5
 8009f7c:	bfc4      	itt	gt
 8009f7e:	3b04      	subgt	r3, #4
 8009f80:	9306      	strgt	r3, [sp, #24]
 8009f82:	9b06      	ldr	r3, [sp, #24]
 8009f84:	f1a3 0302 	sub.w	r3, r3, #2
 8009f88:	bfcc      	ite	gt
 8009f8a:	2500      	movgt	r5, #0
 8009f8c:	2501      	movle	r5, #1
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	f200 8087 	bhi.w	800a0a2 <_dtoa_r+0x30a>
 8009f94:	e8df f003 	tbb	[pc, r3]
 8009f98:	59383a2d 	.word	0x59383a2d
 8009f9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009fa0:	441d      	add	r5, r3
 8009fa2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009fa6:	2b20      	cmp	r3, #32
 8009fa8:	bfc1      	itttt	gt
 8009faa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009fb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009fb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009fba:	bfda      	itte	le
 8009fbc:	f1c3 0320 	rsble	r3, r3, #32
 8009fc0:	fa06 f003 	lslle.w	r0, r6, r3
 8009fc4:	4318      	orrgt	r0, r3
 8009fc6:	f7f6 fab5 	bl	8000534 <__aeabi_ui2d>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4606      	mov	r6, r0
 8009fce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009fd2:	3d01      	subs	r5, #1
 8009fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8009fd6:	e76a      	b.n	8009eae <_dtoa_r+0x116>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e7b2      	b.n	8009f42 <_dtoa_r+0x1aa>
 8009fdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fde:	e7b1      	b.n	8009f44 <_dtoa_r+0x1ac>
 8009fe0:	9b04      	ldr	r3, [sp, #16]
 8009fe2:	9a00      	ldr	r2, [sp, #0]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	4253      	negs	r3, r2
 8009fea:	9307      	str	r3, [sp, #28]
 8009fec:	2300      	movs	r3, #0
 8009fee:	930a      	str	r3, [sp, #40]	; 0x28
 8009ff0:	e7bf      	b.n	8009f72 <_dtoa_r+0x1da>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	9308      	str	r3, [sp, #32]
 8009ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dc55      	bgt.n	800a0a8 <_dtoa_r+0x310>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a002:	461a      	mov	r2, r3
 800a004:	9209      	str	r2, [sp, #36]	; 0x24
 800a006:	e00c      	b.n	800a022 <_dtoa_r+0x28a>
 800a008:	2301      	movs	r3, #1
 800a00a:	e7f3      	b.n	8009ff4 <_dtoa_r+0x25c>
 800a00c:	2300      	movs	r3, #0
 800a00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a010:	9308      	str	r3, [sp, #32]
 800a012:	9b00      	ldr	r3, [sp, #0]
 800a014:	4413      	add	r3, r2
 800a016:	9302      	str	r3, [sp, #8]
 800a018:	3301      	adds	r3, #1
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	9303      	str	r3, [sp, #12]
 800a01e:	bfb8      	it	lt
 800a020:	2301      	movlt	r3, #1
 800a022:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a024:	2200      	movs	r2, #0
 800a026:	6042      	str	r2, [r0, #4]
 800a028:	2204      	movs	r2, #4
 800a02a:	f102 0614 	add.w	r6, r2, #20
 800a02e:	429e      	cmp	r6, r3
 800a030:	6841      	ldr	r1, [r0, #4]
 800a032:	d93d      	bls.n	800a0b0 <_dtoa_r+0x318>
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fccd 	bl	800a9d4 <_Balloc>
 800a03a:	9001      	str	r0, [sp, #4]
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d13b      	bne.n	800a0b8 <_dtoa_r+0x320>
 800a040:	4b11      	ldr	r3, [pc, #68]	; (800a088 <_dtoa_r+0x2f0>)
 800a042:	4602      	mov	r2, r0
 800a044:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a048:	e6c0      	b.n	8009dcc <_dtoa_r+0x34>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e7df      	b.n	800a00e <_dtoa_r+0x276>
 800a04e:	bf00      	nop
 800a050:	636f4361 	.word	0x636f4361
 800a054:	3fd287a7 	.word	0x3fd287a7
 800a058:	8b60c8b3 	.word	0x8b60c8b3
 800a05c:	3fc68a28 	.word	0x3fc68a28
 800a060:	509f79fb 	.word	0x509f79fb
 800a064:	3fd34413 	.word	0x3fd34413
 800a068:	0800d6a0 	.word	0x0800d6a0
 800a06c:	0800d6b7 	.word	0x0800d6b7
 800a070:	7ff00000 	.word	0x7ff00000
 800a074:	0800d69c 	.word	0x0800d69c
 800a078:	0800d693 	.word	0x0800d693
 800a07c:	0800d892 	.word	0x0800d892
 800a080:	3ff80000 	.word	0x3ff80000
 800a084:	0800d7a8 	.word	0x0800d7a8
 800a088:	0800d712 	.word	0x0800d712
 800a08c:	2501      	movs	r5, #1
 800a08e:	2300      	movs	r3, #0
 800a090:	9306      	str	r3, [sp, #24]
 800a092:	9508      	str	r5, [sp, #32]
 800a094:	f04f 33ff 	mov.w	r3, #4294967295
 800a098:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	2312      	movs	r3, #18
 800a0a0:	e7b0      	b.n	800a004 <_dtoa_r+0x26c>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	9308      	str	r3, [sp, #32]
 800a0a6:	e7f5      	b.n	800a094 <_dtoa_r+0x2fc>
 800a0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0ae:	e7b8      	b.n	800a022 <_dtoa_r+0x28a>
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	6041      	str	r1, [r0, #4]
 800a0b4:	0052      	lsls	r2, r2, #1
 800a0b6:	e7b8      	b.n	800a02a <_dtoa_r+0x292>
 800a0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ba:	9a01      	ldr	r2, [sp, #4]
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	2b0e      	cmp	r3, #14
 800a0c2:	f200 809d 	bhi.w	800a200 <_dtoa_r+0x468>
 800a0c6:	2d00      	cmp	r5, #0
 800a0c8:	f000 809a 	beq.w	800a200 <_dtoa_r+0x468>
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	dd32      	ble.n	800a138 <_dtoa_r+0x3a0>
 800a0d2:	4ab7      	ldr	r2, [pc, #732]	; (800a3b0 <_dtoa_r+0x618>)
 800a0d4:	f003 030f 	and.w	r3, r3, #15
 800a0d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0e0:	9b00      	ldr	r3, [sp, #0]
 800a0e2:	05d8      	lsls	r0, r3, #23
 800a0e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a0e8:	d516      	bpl.n	800a118 <_dtoa_r+0x380>
 800a0ea:	4bb2      	ldr	r3, [pc, #712]	; (800a3b4 <_dtoa_r+0x61c>)
 800a0ec:	ec51 0b19 	vmov	r0, r1, d9
 800a0f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0f4:	f7f6 fbc2 	bl	800087c <__aeabi_ddiv>
 800a0f8:	f007 070f 	and.w	r7, r7, #15
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	468b      	mov	fp, r1
 800a100:	2503      	movs	r5, #3
 800a102:	4eac      	ldr	r6, [pc, #688]	; (800a3b4 <_dtoa_r+0x61c>)
 800a104:	b957      	cbnz	r7, 800a11c <_dtoa_r+0x384>
 800a106:	4642      	mov	r2, r8
 800a108:	464b      	mov	r3, r9
 800a10a:	4650      	mov	r0, sl
 800a10c:	4659      	mov	r1, fp
 800a10e:	f7f6 fbb5 	bl	800087c <__aeabi_ddiv>
 800a112:	4682      	mov	sl, r0
 800a114:	468b      	mov	fp, r1
 800a116:	e028      	b.n	800a16a <_dtoa_r+0x3d2>
 800a118:	2502      	movs	r5, #2
 800a11a:	e7f2      	b.n	800a102 <_dtoa_r+0x36a>
 800a11c:	07f9      	lsls	r1, r7, #31
 800a11e:	d508      	bpl.n	800a132 <_dtoa_r+0x39a>
 800a120:	4640      	mov	r0, r8
 800a122:	4649      	mov	r1, r9
 800a124:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a128:	f7f6 fa7e 	bl	8000628 <__aeabi_dmul>
 800a12c:	3501      	adds	r5, #1
 800a12e:	4680      	mov	r8, r0
 800a130:	4689      	mov	r9, r1
 800a132:	107f      	asrs	r7, r7, #1
 800a134:	3608      	adds	r6, #8
 800a136:	e7e5      	b.n	800a104 <_dtoa_r+0x36c>
 800a138:	f000 809b 	beq.w	800a272 <_dtoa_r+0x4da>
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	4f9d      	ldr	r7, [pc, #628]	; (800a3b4 <_dtoa_r+0x61c>)
 800a140:	425e      	negs	r6, r3
 800a142:	4b9b      	ldr	r3, [pc, #620]	; (800a3b0 <_dtoa_r+0x618>)
 800a144:	f006 020f 	and.w	r2, r6, #15
 800a148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	ec51 0b19 	vmov	r0, r1, d9
 800a154:	f7f6 fa68 	bl	8000628 <__aeabi_dmul>
 800a158:	1136      	asrs	r6, r6, #4
 800a15a:	4682      	mov	sl, r0
 800a15c:	468b      	mov	fp, r1
 800a15e:	2300      	movs	r3, #0
 800a160:	2502      	movs	r5, #2
 800a162:	2e00      	cmp	r6, #0
 800a164:	d17a      	bne.n	800a25c <_dtoa_r+0x4c4>
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1d3      	bne.n	800a112 <_dtoa_r+0x37a>
 800a16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 8082 	beq.w	800a276 <_dtoa_r+0x4de>
 800a172:	4b91      	ldr	r3, [pc, #580]	; (800a3b8 <_dtoa_r+0x620>)
 800a174:	2200      	movs	r2, #0
 800a176:	4650      	mov	r0, sl
 800a178:	4659      	mov	r1, fp
 800a17a:	f7f6 fcc7 	bl	8000b0c <__aeabi_dcmplt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d079      	beq.n	800a276 <_dtoa_r+0x4de>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d076      	beq.n	800a276 <_dtoa_r+0x4de>
 800a188:	9b02      	ldr	r3, [sp, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	dd36      	ble.n	800a1fc <_dtoa_r+0x464>
 800a18e:	9b00      	ldr	r3, [sp, #0]
 800a190:	4650      	mov	r0, sl
 800a192:	4659      	mov	r1, fp
 800a194:	1e5f      	subs	r7, r3, #1
 800a196:	2200      	movs	r2, #0
 800a198:	4b88      	ldr	r3, [pc, #544]	; (800a3bc <_dtoa_r+0x624>)
 800a19a:	f7f6 fa45 	bl	8000628 <__aeabi_dmul>
 800a19e:	9e02      	ldr	r6, [sp, #8]
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	468b      	mov	fp, r1
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f7f6 f9d4 	bl	8000554 <__aeabi_i2d>
 800a1ac:	4652      	mov	r2, sl
 800a1ae:	465b      	mov	r3, fp
 800a1b0:	f7f6 fa3a 	bl	8000628 <__aeabi_dmul>
 800a1b4:	4b82      	ldr	r3, [pc, #520]	; (800a3c0 <_dtoa_r+0x628>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f7f6 f880 	bl	80002bc <__adddf3>
 800a1bc:	46d0      	mov	r8, sl
 800a1be:	46d9      	mov	r9, fp
 800a1c0:	4682      	mov	sl, r0
 800a1c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	d158      	bne.n	800a27c <_dtoa_r+0x4e4>
 800a1ca:	4b7e      	ldr	r3, [pc, #504]	; (800a3c4 <_dtoa_r+0x62c>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	f7f6 f871 	bl	80002b8 <__aeabi_dsub>
 800a1d6:	4652      	mov	r2, sl
 800a1d8:	465b      	mov	r3, fp
 800a1da:	4680      	mov	r8, r0
 800a1dc:	4689      	mov	r9, r1
 800a1de:	f7f6 fcb3 	bl	8000b48 <__aeabi_dcmpgt>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f040 8295 	bne.w	800a712 <_dtoa_r+0x97a>
 800a1e8:	4652      	mov	r2, sl
 800a1ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	f7f6 fc8b 	bl	8000b0c <__aeabi_dcmplt>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	f040 8289 	bne.w	800a70e <_dtoa_r+0x976>
 800a1fc:	ec5b ab19 	vmov	sl, fp, d9
 800a200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a202:	2b00      	cmp	r3, #0
 800a204:	f2c0 8148 	blt.w	800a498 <_dtoa_r+0x700>
 800a208:	9a00      	ldr	r2, [sp, #0]
 800a20a:	2a0e      	cmp	r2, #14
 800a20c:	f300 8144 	bgt.w	800a498 <_dtoa_r+0x700>
 800a210:	4b67      	ldr	r3, [pc, #412]	; (800a3b0 <_dtoa_r+0x618>)
 800a212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a216:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f280 80d5 	bge.w	800a3cc <_dtoa_r+0x634>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f300 80d1 	bgt.w	800a3cc <_dtoa_r+0x634>
 800a22a:	f040 826f 	bne.w	800a70c <_dtoa_r+0x974>
 800a22e:	4b65      	ldr	r3, [pc, #404]	; (800a3c4 <_dtoa_r+0x62c>)
 800a230:	2200      	movs	r2, #0
 800a232:	4640      	mov	r0, r8
 800a234:	4649      	mov	r1, r9
 800a236:	f7f6 f9f7 	bl	8000628 <__aeabi_dmul>
 800a23a:	4652      	mov	r2, sl
 800a23c:	465b      	mov	r3, fp
 800a23e:	f7f6 fc79 	bl	8000b34 <__aeabi_dcmpge>
 800a242:	9e03      	ldr	r6, [sp, #12]
 800a244:	4637      	mov	r7, r6
 800a246:	2800      	cmp	r0, #0
 800a248:	f040 8245 	bne.w	800a6d6 <_dtoa_r+0x93e>
 800a24c:	9d01      	ldr	r5, [sp, #4]
 800a24e:	2331      	movs	r3, #49	; 0x31
 800a250:	f805 3b01 	strb.w	r3, [r5], #1
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	3301      	adds	r3, #1
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	e240      	b.n	800a6de <_dtoa_r+0x946>
 800a25c:	07f2      	lsls	r2, r6, #31
 800a25e:	d505      	bpl.n	800a26c <_dtoa_r+0x4d4>
 800a260:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a264:	f7f6 f9e0 	bl	8000628 <__aeabi_dmul>
 800a268:	3501      	adds	r5, #1
 800a26a:	2301      	movs	r3, #1
 800a26c:	1076      	asrs	r6, r6, #1
 800a26e:	3708      	adds	r7, #8
 800a270:	e777      	b.n	800a162 <_dtoa_r+0x3ca>
 800a272:	2502      	movs	r5, #2
 800a274:	e779      	b.n	800a16a <_dtoa_r+0x3d2>
 800a276:	9f00      	ldr	r7, [sp, #0]
 800a278:	9e03      	ldr	r6, [sp, #12]
 800a27a:	e794      	b.n	800a1a6 <_dtoa_r+0x40e>
 800a27c:	9901      	ldr	r1, [sp, #4]
 800a27e:	4b4c      	ldr	r3, [pc, #304]	; (800a3b0 <_dtoa_r+0x618>)
 800a280:	4431      	add	r1, r6
 800a282:	910d      	str	r1, [sp, #52]	; 0x34
 800a284:	9908      	ldr	r1, [sp, #32]
 800a286:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a28a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a28e:	2900      	cmp	r1, #0
 800a290:	d043      	beq.n	800a31a <_dtoa_r+0x582>
 800a292:	494d      	ldr	r1, [pc, #308]	; (800a3c8 <_dtoa_r+0x630>)
 800a294:	2000      	movs	r0, #0
 800a296:	f7f6 faf1 	bl	800087c <__aeabi_ddiv>
 800a29a:	4652      	mov	r2, sl
 800a29c:	465b      	mov	r3, fp
 800a29e:	f7f6 f80b 	bl	80002b8 <__aeabi_dsub>
 800a2a2:	9d01      	ldr	r5, [sp, #4]
 800a2a4:	4682      	mov	sl, r0
 800a2a6:	468b      	mov	fp, r1
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7f6 fc6c 	bl	8000b88 <__aeabi_d2iz>
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	f7f6 f94f 	bl	8000554 <__aeabi_i2d>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4649      	mov	r1, r9
 800a2be:	f7f5 fffb 	bl	80002b8 <__aeabi_dsub>
 800a2c2:	3630      	adds	r6, #48	; 0x30
 800a2c4:	f805 6b01 	strb.w	r6, [r5], #1
 800a2c8:	4652      	mov	r2, sl
 800a2ca:	465b      	mov	r3, fp
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4689      	mov	r9, r1
 800a2d0:	f7f6 fc1c 	bl	8000b0c <__aeabi_dcmplt>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d163      	bne.n	800a3a0 <_dtoa_r+0x608>
 800a2d8:	4642      	mov	r2, r8
 800a2da:	464b      	mov	r3, r9
 800a2dc:	4936      	ldr	r1, [pc, #216]	; (800a3b8 <_dtoa_r+0x620>)
 800a2de:	2000      	movs	r0, #0
 800a2e0:	f7f5 ffea 	bl	80002b8 <__aeabi_dsub>
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	f7f6 fc10 	bl	8000b0c <__aeabi_dcmplt>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f040 80b5 	bne.w	800a45c <_dtoa_r+0x6c4>
 800a2f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2f4:	429d      	cmp	r5, r3
 800a2f6:	d081      	beq.n	800a1fc <_dtoa_r+0x464>
 800a2f8:	4b30      	ldr	r3, [pc, #192]	; (800a3bc <_dtoa_r+0x624>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	4659      	mov	r1, fp
 800a300:	f7f6 f992 	bl	8000628 <__aeabi_dmul>
 800a304:	4b2d      	ldr	r3, [pc, #180]	; (800a3bc <_dtoa_r+0x624>)
 800a306:	4682      	mov	sl, r0
 800a308:	468b      	mov	fp, r1
 800a30a:	4640      	mov	r0, r8
 800a30c:	4649      	mov	r1, r9
 800a30e:	2200      	movs	r2, #0
 800a310:	f7f6 f98a 	bl	8000628 <__aeabi_dmul>
 800a314:	4680      	mov	r8, r0
 800a316:	4689      	mov	r9, r1
 800a318:	e7c6      	b.n	800a2a8 <_dtoa_r+0x510>
 800a31a:	4650      	mov	r0, sl
 800a31c:	4659      	mov	r1, fp
 800a31e:	f7f6 f983 	bl	8000628 <__aeabi_dmul>
 800a322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a324:	9d01      	ldr	r5, [sp, #4]
 800a326:	930f      	str	r3, [sp, #60]	; 0x3c
 800a328:	4682      	mov	sl, r0
 800a32a:	468b      	mov	fp, r1
 800a32c:	4649      	mov	r1, r9
 800a32e:	4640      	mov	r0, r8
 800a330:	f7f6 fc2a 	bl	8000b88 <__aeabi_d2iz>
 800a334:	4606      	mov	r6, r0
 800a336:	f7f6 f90d 	bl	8000554 <__aeabi_i2d>
 800a33a:	3630      	adds	r6, #48	; 0x30
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4640      	mov	r0, r8
 800a342:	4649      	mov	r1, r9
 800a344:	f7f5 ffb8 	bl	80002b8 <__aeabi_dsub>
 800a348:	f805 6b01 	strb.w	r6, [r5], #1
 800a34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a34e:	429d      	cmp	r5, r3
 800a350:	4680      	mov	r8, r0
 800a352:	4689      	mov	r9, r1
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	d124      	bne.n	800a3a4 <_dtoa_r+0x60c>
 800a35a:	4b1b      	ldr	r3, [pc, #108]	; (800a3c8 <_dtoa_r+0x630>)
 800a35c:	4650      	mov	r0, sl
 800a35e:	4659      	mov	r1, fp
 800a360:	f7f5 ffac 	bl	80002bc <__adddf3>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4640      	mov	r0, r8
 800a36a:	4649      	mov	r1, r9
 800a36c:	f7f6 fbec 	bl	8000b48 <__aeabi_dcmpgt>
 800a370:	2800      	cmp	r0, #0
 800a372:	d173      	bne.n	800a45c <_dtoa_r+0x6c4>
 800a374:	4652      	mov	r2, sl
 800a376:	465b      	mov	r3, fp
 800a378:	4913      	ldr	r1, [pc, #76]	; (800a3c8 <_dtoa_r+0x630>)
 800a37a:	2000      	movs	r0, #0
 800a37c:	f7f5 ff9c 	bl	80002b8 <__aeabi_dsub>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4640      	mov	r0, r8
 800a386:	4649      	mov	r1, r9
 800a388:	f7f6 fbc0 	bl	8000b0c <__aeabi_dcmplt>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f43f af35 	beq.w	800a1fc <_dtoa_r+0x464>
 800a392:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a394:	1e6b      	subs	r3, r5, #1
 800a396:	930f      	str	r3, [sp, #60]	; 0x3c
 800a398:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a39c:	2b30      	cmp	r3, #48	; 0x30
 800a39e:	d0f8      	beq.n	800a392 <_dtoa_r+0x5fa>
 800a3a0:	9700      	str	r7, [sp, #0]
 800a3a2:	e049      	b.n	800a438 <_dtoa_r+0x6a0>
 800a3a4:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <_dtoa_r+0x624>)
 800a3a6:	f7f6 f93f 	bl	8000628 <__aeabi_dmul>
 800a3aa:	4680      	mov	r8, r0
 800a3ac:	4689      	mov	r9, r1
 800a3ae:	e7bd      	b.n	800a32c <_dtoa_r+0x594>
 800a3b0:	0800d7a8 	.word	0x0800d7a8
 800a3b4:	0800d780 	.word	0x0800d780
 800a3b8:	3ff00000 	.word	0x3ff00000
 800a3bc:	40240000 	.word	0x40240000
 800a3c0:	401c0000 	.word	0x401c0000
 800a3c4:	40140000 	.word	0x40140000
 800a3c8:	3fe00000 	.word	0x3fe00000
 800a3cc:	9d01      	ldr	r5, [sp, #4]
 800a3ce:	4656      	mov	r6, sl
 800a3d0:	465f      	mov	r7, fp
 800a3d2:	4642      	mov	r2, r8
 800a3d4:	464b      	mov	r3, r9
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	4639      	mov	r1, r7
 800a3da:	f7f6 fa4f 	bl	800087c <__aeabi_ddiv>
 800a3de:	f7f6 fbd3 	bl	8000b88 <__aeabi_d2iz>
 800a3e2:	4682      	mov	sl, r0
 800a3e4:	f7f6 f8b6 	bl	8000554 <__aeabi_i2d>
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	f7f6 f91c 	bl	8000628 <__aeabi_dmul>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a3fc:	f7f5 ff5c 	bl	80002b8 <__aeabi_dsub>
 800a400:	f805 6b01 	strb.w	r6, [r5], #1
 800a404:	9e01      	ldr	r6, [sp, #4]
 800a406:	9f03      	ldr	r7, [sp, #12]
 800a408:	1bae      	subs	r6, r5, r6
 800a40a:	42b7      	cmp	r7, r6
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	d135      	bne.n	800a47e <_dtoa_r+0x6e6>
 800a412:	f7f5 ff53 	bl	80002bc <__adddf3>
 800a416:	4642      	mov	r2, r8
 800a418:	464b      	mov	r3, r9
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	f7f6 fb93 	bl	8000b48 <__aeabi_dcmpgt>
 800a422:	b9d0      	cbnz	r0, 800a45a <_dtoa_r+0x6c2>
 800a424:	4642      	mov	r2, r8
 800a426:	464b      	mov	r3, r9
 800a428:	4630      	mov	r0, r6
 800a42a:	4639      	mov	r1, r7
 800a42c:	f7f6 fb64 	bl	8000af8 <__aeabi_dcmpeq>
 800a430:	b110      	cbz	r0, 800a438 <_dtoa_r+0x6a0>
 800a432:	f01a 0f01 	tst.w	sl, #1
 800a436:	d110      	bne.n	800a45a <_dtoa_r+0x6c2>
 800a438:	4620      	mov	r0, r4
 800a43a:	ee18 1a10 	vmov	r1, s16
 800a43e:	f000 fb09 	bl	800aa54 <_Bfree>
 800a442:	2300      	movs	r3, #0
 800a444:	9800      	ldr	r0, [sp, #0]
 800a446:	702b      	strb	r3, [r5, #0]
 800a448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a44a:	3001      	adds	r0, #1
 800a44c:	6018      	str	r0, [r3, #0]
 800a44e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a450:	2b00      	cmp	r3, #0
 800a452:	f43f acf1 	beq.w	8009e38 <_dtoa_r+0xa0>
 800a456:	601d      	str	r5, [r3, #0]
 800a458:	e4ee      	b.n	8009e38 <_dtoa_r+0xa0>
 800a45a:	9f00      	ldr	r7, [sp, #0]
 800a45c:	462b      	mov	r3, r5
 800a45e:	461d      	mov	r5, r3
 800a460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a464:	2a39      	cmp	r2, #57	; 0x39
 800a466:	d106      	bne.n	800a476 <_dtoa_r+0x6de>
 800a468:	9a01      	ldr	r2, [sp, #4]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d1f7      	bne.n	800a45e <_dtoa_r+0x6c6>
 800a46e:	9901      	ldr	r1, [sp, #4]
 800a470:	2230      	movs	r2, #48	; 0x30
 800a472:	3701      	adds	r7, #1
 800a474:	700a      	strb	r2, [r1, #0]
 800a476:	781a      	ldrb	r2, [r3, #0]
 800a478:	3201      	adds	r2, #1
 800a47a:	701a      	strb	r2, [r3, #0]
 800a47c:	e790      	b.n	800a3a0 <_dtoa_r+0x608>
 800a47e:	4ba6      	ldr	r3, [pc, #664]	; (800a718 <_dtoa_r+0x980>)
 800a480:	2200      	movs	r2, #0
 800a482:	f7f6 f8d1 	bl	8000628 <__aeabi_dmul>
 800a486:	2200      	movs	r2, #0
 800a488:	2300      	movs	r3, #0
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	f7f6 fb33 	bl	8000af8 <__aeabi_dcmpeq>
 800a492:	2800      	cmp	r0, #0
 800a494:	d09d      	beq.n	800a3d2 <_dtoa_r+0x63a>
 800a496:	e7cf      	b.n	800a438 <_dtoa_r+0x6a0>
 800a498:	9a08      	ldr	r2, [sp, #32]
 800a49a:	2a00      	cmp	r2, #0
 800a49c:	f000 80d7 	beq.w	800a64e <_dtoa_r+0x8b6>
 800a4a0:	9a06      	ldr	r2, [sp, #24]
 800a4a2:	2a01      	cmp	r2, #1
 800a4a4:	f300 80ba 	bgt.w	800a61c <_dtoa_r+0x884>
 800a4a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4aa:	2a00      	cmp	r2, #0
 800a4ac:	f000 80b2 	beq.w	800a614 <_dtoa_r+0x87c>
 800a4b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4b4:	9e07      	ldr	r6, [sp, #28]
 800a4b6:	9d04      	ldr	r5, [sp, #16]
 800a4b8:	9a04      	ldr	r2, [sp, #16]
 800a4ba:	441a      	add	r2, r3
 800a4bc:	9204      	str	r2, [sp, #16]
 800a4be:	9a05      	ldr	r2, [sp, #20]
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	441a      	add	r2, r3
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	9205      	str	r2, [sp, #20]
 800a4c8:	f000 fb7c 	bl	800abc4 <__i2b>
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	dd0c      	ble.n	800a4ec <_dtoa_r+0x754>
 800a4d2:	9b05      	ldr	r3, [sp, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dd09      	ble.n	800a4ec <_dtoa_r+0x754>
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	9a04      	ldr	r2, [sp, #16]
 800a4dc:	bfa8      	it	ge
 800a4de:	462b      	movge	r3, r5
 800a4e0:	1ad2      	subs	r2, r2, r3
 800a4e2:	9204      	str	r2, [sp, #16]
 800a4e4:	9a05      	ldr	r2, [sp, #20]
 800a4e6:	1aed      	subs	r5, r5, r3
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	9b07      	ldr	r3, [sp, #28]
 800a4ee:	b31b      	cbz	r3, 800a538 <_dtoa_r+0x7a0>
 800a4f0:	9b08      	ldr	r3, [sp, #32]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 80af 	beq.w	800a656 <_dtoa_r+0x8be>
 800a4f8:	2e00      	cmp	r6, #0
 800a4fa:	dd13      	ble.n	800a524 <_dtoa_r+0x78c>
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	4632      	mov	r2, r6
 800a500:	4620      	mov	r0, r4
 800a502:	f000 fc1f 	bl	800ad44 <__pow5mult>
 800a506:	ee18 2a10 	vmov	r2, s16
 800a50a:	4601      	mov	r1, r0
 800a50c:	4607      	mov	r7, r0
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 fb6e 	bl	800abf0 <__multiply>
 800a514:	ee18 1a10 	vmov	r1, s16
 800a518:	4680      	mov	r8, r0
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 fa9a 	bl	800aa54 <_Bfree>
 800a520:	ee08 8a10 	vmov	s16, r8
 800a524:	9b07      	ldr	r3, [sp, #28]
 800a526:	1b9a      	subs	r2, r3, r6
 800a528:	d006      	beq.n	800a538 <_dtoa_r+0x7a0>
 800a52a:	ee18 1a10 	vmov	r1, s16
 800a52e:	4620      	mov	r0, r4
 800a530:	f000 fc08 	bl	800ad44 <__pow5mult>
 800a534:	ee08 0a10 	vmov	s16, r0
 800a538:	2101      	movs	r1, #1
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fb42 	bl	800abc4 <__i2b>
 800a540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a542:	2b00      	cmp	r3, #0
 800a544:	4606      	mov	r6, r0
 800a546:	f340 8088 	ble.w	800a65a <_dtoa_r+0x8c2>
 800a54a:	461a      	mov	r2, r3
 800a54c:	4601      	mov	r1, r0
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 fbf8 	bl	800ad44 <__pow5mult>
 800a554:	9b06      	ldr	r3, [sp, #24]
 800a556:	2b01      	cmp	r3, #1
 800a558:	4606      	mov	r6, r0
 800a55a:	f340 8081 	ble.w	800a660 <_dtoa_r+0x8c8>
 800a55e:	f04f 0800 	mov.w	r8, #0
 800a562:	6933      	ldr	r3, [r6, #16]
 800a564:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a568:	6918      	ldr	r0, [r3, #16]
 800a56a:	f000 fadb 	bl	800ab24 <__hi0bits>
 800a56e:	f1c0 0020 	rsb	r0, r0, #32
 800a572:	9b05      	ldr	r3, [sp, #20]
 800a574:	4418      	add	r0, r3
 800a576:	f010 001f 	ands.w	r0, r0, #31
 800a57a:	f000 8092 	beq.w	800a6a2 <_dtoa_r+0x90a>
 800a57e:	f1c0 0320 	rsb	r3, r0, #32
 800a582:	2b04      	cmp	r3, #4
 800a584:	f340 808a 	ble.w	800a69c <_dtoa_r+0x904>
 800a588:	f1c0 001c 	rsb	r0, r0, #28
 800a58c:	9b04      	ldr	r3, [sp, #16]
 800a58e:	4403      	add	r3, r0
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	9b05      	ldr	r3, [sp, #20]
 800a594:	4403      	add	r3, r0
 800a596:	4405      	add	r5, r0
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	9b04      	ldr	r3, [sp, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	dd07      	ble.n	800a5b0 <_dtoa_r+0x818>
 800a5a0:	ee18 1a10 	vmov	r1, s16
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 fc26 	bl	800adf8 <__lshift>
 800a5ac:	ee08 0a10 	vmov	s16, r0
 800a5b0:	9b05      	ldr	r3, [sp, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	dd05      	ble.n	800a5c2 <_dtoa_r+0x82a>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 fc1c 	bl	800adf8 <__lshift>
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d06e      	beq.n	800a6a6 <_dtoa_r+0x90e>
 800a5c8:	ee18 0a10 	vmov	r0, s16
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	f000 fc83 	bl	800aed8 <__mcmp>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	da67      	bge.n	800a6a6 <_dtoa_r+0x90e>
 800a5d6:	9b00      	ldr	r3, [sp, #0]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	ee18 1a10 	vmov	r1, s16
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	220a      	movs	r2, #10
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fa57 	bl	800aa98 <__multadd>
 800a5ea:	9b08      	ldr	r3, [sp, #32]
 800a5ec:	ee08 0a10 	vmov	s16, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 81b1 	beq.w	800a958 <_dtoa_r+0xbc0>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	220a      	movs	r2, #10
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 fa4b 	bl	800aa98 <__multadd>
 800a602:	9b02      	ldr	r3, [sp, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	4607      	mov	r7, r0
 800a608:	f300 808e 	bgt.w	800a728 <_dtoa_r+0x990>
 800a60c:	9b06      	ldr	r3, [sp, #24]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	dc51      	bgt.n	800a6b6 <_dtoa_r+0x91e>
 800a612:	e089      	b.n	800a728 <_dtoa_r+0x990>
 800a614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a61a:	e74b      	b.n	800a4b4 <_dtoa_r+0x71c>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	1e5e      	subs	r6, r3, #1
 800a620:	9b07      	ldr	r3, [sp, #28]
 800a622:	42b3      	cmp	r3, r6
 800a624:	bfbf      	itttt	lt
 800a626:	9b07      	ldrlt	r3, [sp, #28]
 800a628:	9607      	strlt	r6, [sp, #28]
 800a62a:	1af2      	sublt	r2, r6, r3
 800a62c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a62e:	bfb6      	itet	lt
 800a630:	189b      	addlt	r3, r3, r2
 800a632:	1b9e      	subge	r6, r3, r6
 800a634:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	bfb8      	it	lt
 800a63a:	2600      	movlt	r6, #0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfb7      	itett	lt
 800a640:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a644:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a648:	1a9d      	sublt	r5, r3, r2
 800a64a:	2300      	movlt	r3, #0
 800a64c:	e734      	b.n	800a4b8 <_dtoa_r+0x720>
 800a64e:	9e07      	ldr	r6, [sp, #28]
 800a650:	9d04      	ldr	r5, [sp, #16]
 800a652:	9f08      	ldr	r7, [sp, #32]
 800a654:	e73b      	b.n	800a4ce <_dtoa_r+0x736>
 800a656:	9a07      	ldr	r2, [sp, #28]
 800a658:	e767      	b.n	800a52a <_dtoa_r+0x792>
 800a65a:	9b06      	ldr	r3, [sp, #24]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	dc18      	bgt.n	800a692 <_dtoa_r+0x8fa>
 800a660:	f1ba 0f00 	cmp.w	sl, #0
 800a664:	d115      	bne.n	800a692 <_dtoa_r+0x8fa>
 800a666:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a66a:	b993      	cbnz	r3, 800a692 <_dtoa_r+0x8fa>
 800a66c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a670:	0d1b      	lsrs	r3, r3, #20
 800a672:	051b      	lsls	r3, r3, #20
 800a674:	b183      	cbz	r3, 800a698 <_dtoa_r+0x900>
 800a676:	9b04      	ldr	r3, [sp, #16]
 800a678:	3301      	adds	r3, #1
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	9b05      	ldr	r3, [sp, #20]
 800a67e:	3301      	adds	r3, #1
 800a680:	9305      	str	r3, [sp, #20]
 800a682:	f04f 0801 	mov.w	r8, #1
 800a686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f47f af6a 	bne.w	800a562 <_dtoa_r+0x7ca>
 800a68e:	2001      	movs	r0, #1
 800a690:	e76f      	b.n	800a572 <_dtoa_r+0x7da>
 800a692:	f04f 0800 	mov.w	r8, #0
 800a696:	e7f6      	b.n	800a686 <_dtoa_r+0x8ee>
 800a698:	4698      	mov	r8, r3
 800a69a:	e7f4      	b.n	800a686 <_dtoa_r+0x8ee>
 800a69c:	f43f af7d 	beq.w	800a59a <_dtoa_r+0x802>
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	301c      	adds	r0, #28
 800a6a4:	e772      	b.n	800a58c <_dtoa_r+0x7f4>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dc37      	bgt.n	800a71c <_dtoa_r+0x984>
 800a6ac:	9b06      	ldr	r3, [sp, #24]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	dd34      	ble.n	800a71c <_dtoa_r+0x984>
 800a6b2:	9b03      	ldr	r3, [sp, #12]
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	9b02      	ldr	r3, [sp, #8]
 800a6b8:	b96b      	cbnz	r3, 800a6d6 <_dtoa_r+0x93e>
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	2205      	movs	r2, #5
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f000 f9ea 	bl	800aa98 <__multadd>
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	ee18 0a10 	vmov	r0, s16
 800a6cc:	f000 fc04 	bl	800aed8 <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	f73f adbb 	bgt.w	800a24c <_dtoa_r+0x4b4>
 800a6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d8:	9d01      	ldr	r5, [sp, #4]
 800a6da:	43db      	mvns	r3, r3
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 f9b5 	bl	800aa54 <_Bfree>
 800a6ea:	2f00      	cmp	r7, #0
 800a6ec:	f43f aea4 	beq.w	800a438 <_dtoa_r+0x6a0>
 800a6f0:	f1b8 0f00 	cmp.w	r8, #0
 800a6f4:	d005      	beq.n	800a702 <_dtoa_r+0x96a>
 800a6f6:	45b8      	cmp	r8, r7
 800a6f8:	d003      	beq.n	800a702 <_dtoa_r+0x96a>
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 f9a9 	bl	800aa54 <_Bfree>
 800a702:	4639      	mov	r1, r7
 800a704:	4620      	mov	r0, r4
 800a706:	f000 f9a5 	bl	800aa54 <_Bfree>
 800a70a:	e695      	b.n	800a438 <_dtoa_r+0x6a0>
 800a70c:	2600      	movs	r6, #0
 800a70e:	4637      	mov	r7, r6
 800a710:	e7e1      	b.n	800a6d6 <_dtoa_r+0x93e>
 800a712:	9700      	str	r7, [sp, #0]
 800a714:	4637      	mov	r7, r6
 800a716:	e599      	b.n	800a24c <_dtoa_r+0x4b4>
 800a718:	40240000 	.word	0x40240000
 800a71c:	9b08      	ldr	r3, [sp, #32]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 80ca 	beq.w	800a8b8 <_dtoa_r+0xb20>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	9302      	str	r3, [sp, #8]
 800a728:	2d00      	cmp	r5, #0
 800a72a:	dd05      	ble.n	800a738 <_dtoa_r+0x9a0>
 800a72c:	4639      	mov	r1, r7
 800a72e:	462a      	mov	r2, r5
 800a730:	4620      	mov	r0, r4
 800a732:	f000 fb61 	bl	800adf8 <__lshift>
 800a736:	4607      	mov	r7, r0
 800a738:	f1b8 0f00 	cmp.w	r8, #0
 800a73c:	d05b      	beq.n	800a7f6 <_dtoa_r+0xa5e>
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	4620      	mov	r0, r4
 800a742:	f000 f947 	bl	800a9d4 <_Balloc>
 800a746:	4605      	mov	r5, r0
 800a748:	b928      	cbnz	r0, 800a756 <_dtoa_r+0x9be>
 800a74a:	4b87      	ldr	r3, [pc, #540]	; (800a968 <_dtoa_r+0xbd0>)
 800a74c:	4602      	mov	r2, r0
 800a74e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a752:	f7ff bb3b 	b.w	8009dcc <_dtoa_r+0x34>
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	3202      	adds	r2, #2
 800a75a:	0092      	lsls	r2, r2, #2
 800a75c:	f107 010c 	add.w	r1, r7, #12
 800a760:	300c      	adds	r0, #12
 800a762:	f000 f91d 	bl	800a9a0 <memcpy>
 800a766:	2201      	movs	r2, #1
 800a768:	4629      	mov	r1, r5
 800a76a:	4620      	mov	r0, r4
 800a76c:	f000 fb44 	bl	800adf8 <__lshift>
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	f103 0901 	add.w	r9, r3, #1
 800a776:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a77a:	4413      	add	r3, r2
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	f00a 0301 	and.w	r3, sl, #1
 800a782:	46b8      	mov	r8, r7
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	4607      	mov	r7, r0
 800a788:	4631      	mov	r1, r6
 800a78a:	ee18 0a10 	vmov	r0, s16
 800a78e:	f7ff fa77 	bl	8009c80 <quorem>
 800a792:	4641      	mov	r1, r8
 800a794:	9002      	str	r0, [sp, #8]
 800a796:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a79a:	ee18 0a10 	vmov	r0, s16
 800a79e:	f000 fb9b 	bl	800aed8 <__mcmp>
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	9003      	str	r0, [sp, #12]
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fbb1 	bl	800af10 <__mdiff>
 800a7ae:	68c2      	ldr	r2, [r0, #12]
 800a7b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	bb02      	cbnz	r2, 800a7fa <_dtoa_r+0xa62>
 800a7b8:	4601      	mov	r1, r0
 800a7ba:	ee18 0a10 	vmov	r0, s16
 800a7be:	f000 fb8b 	bl	800aed8 <__mcmp>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	9207      	str	r2, [sp, #28]
 800a7ca:	f000 f943 	bl	800aa54 <_Bfree>
 800a7ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a7d2:	ea43 0102 	orr.w	r1, r3, r2
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	430b      	orrs	r3, r1
 800a7da:	464d      	mov	r5, r9
 800a7dc:	d10f      	bne.n	800a7fe <_dtoa_r+0xa66>
 800a7de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7e2:	d02a      	beq.n	800a83a <_dtoa_r+0xaa2>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	dd02      	ble.n	800a7f0 <_dtoa_r+0xa58>
 800a7ea:	9b02      	ldr	r3, [sp, #8]
 800a7ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a7f0:	f88b a000 	strb.w	sl, [fp]
 800a7f4:	e775      	b.n	800a6e2 <_dtoa_r+0x94a>
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	e7ba      	b.n	800a770 <_dtoa_r+0x9d8>
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	e7e2      	b.n	800a7c4 <_dtoa_r+0xa2c>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	db04      	blt.n	800a80e <_dtoa_r+0xa76>
 800a804:	9906      	ldr	r1, [sp, #24]
 800a806:	430b      	orrs	r3, r1
 800a808:	9904      	ldr	r1, [sp, #16]
 800a80a:	430b      	orrs	r3, r1
 800a80c:	d122      	bne.n	800a854 <_dtoa_r+0xabc>
 800a80e:	2a00      	cmp	r2, #0
 800a810:	ddee      	ble.n	800a7f0 <_dtoa_r+0xa58>
 800a812:	ee18 1a10 	vmov	r1, s16
 800a816:	2201      	movs	r2, #1
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 faed 	bl	800adf8 <__lshift>
 800a81e:	4631      	mov	r1, r6
 800a820:	ee08 0a10 	vmov	s16, r0
 800a824:	f000 fb58 	bl	800aed8 <__mcmp>
 800a828:	2800      	cmp	r0, #0
 800a82a:	dc03      	bgt.n	800a834 <_dtoa_r+0xa9c>
 800a82c:	d1e0      	bne.n	800a7f0 <_dtoa_r+0xa58>
 800a82e:	f01a 0f01 	tst.w	sl, #1
 800a832:	d0dd      	beq.n	800a7f0 <_dtoa_r+0xa58>
 800a834:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a838:	d1d7      	bne.n	800a7ea <_dtoa_r+0xa52>
 800a83a:	2339      	movs	r3, #57	; 0x39
 800a83c:	f88b 3000 	strb.w	r3, [fp]
 800a840:	462b      	mov	r3, r5
 800a842:	461d      	mov	r5, r3
 800a844:	3b01      	subs	r3, #1
 800a846:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a84a:	2a39      	cmp	r2, #57	; 0x39
 800a84c:	d071      	beq.n	800a932 <_dtoa_r+0xb9a>
 800a84e:	3201      	adds	r2, #1
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	e746      	b.n	800a6e2 <_dtoa_r+0x94a>
 800a854:	2a00      	cmp	r2, #0
 800a856:	dd07      	ble.n	800a868 <_dtoa_r+0xad0>
 800a858:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a85c:	d0ed      	beq.n	800a83a <_dtoa_r+0xaa2>
 800a85e:	f10a 0301 	add.w	r3, sl, #1
 800a862:	f88b 3000 	strb.w	r3, [fp]
 800a866:	e73c      	b.n	800a6e2 <_dtoa_r+0x94a>
 800a868:	9b05      	ldr	r3, [sp, #20]
 800a86a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a86e:	4599      	cmp	r9, r3
 800a870:	d047      	beq.n	800a902 <_dtoa_r+0xb6a>
 800a872:	ee18 1a10 	vmov	r1, s16
 800a876:	2300      	movs	r3, #0
 800a878:	220a      	movs	r2, #10
 800a87a:	4620      	mov	r0, r4
 800a87c:	f000 f90c 	bl	800aa98 <__multadd>
 800a880:	45b8      	cmp	r8, r7
 800a882:	ee08 0a10 	vmov	s16, r0
 800a886:	f04f 0300 	mov.w	r3, #0
 800a88a:	f04f 020a 	mov.w	r2, #10
 800a88e:	4641      	mov	r1, r8
 800a890:	4620      	mov	r0, r4
 800a892:	d106      	bne.n	800a8a2 <_dtoa_r+0xb0a>
 800a894:	f000 f900 	bl	800aa98 <__multadd>
 800a898:	4680      	mov	r8, r0
 800a89a:	4607      	mov	r7, r0
 800a89c:	f109 0901 	add.w	r9, r9, #1
 800a8a0:	e772      	b.n	800a788 <_dtoa_r+0x9f0>
 800a8a2:	f000 f8f9 	bl	800aa98 <__multadd>
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 f8f2 	bl	800aa98 <__multadd>
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	e7f1      	b.n	800a89c <_dtoa_r+0xb04>
 800a8b8:	9b03      	ldr	r3, [sp, #12]
 800a8ba:	9302      	str	r3, [sp, #8]
 800a8bc:	9d01      	ldr	r5, [sp, #4]
 800a8be:	ee18 0a10 	vmov	r0, s16
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	f7ff f9dc 	bl	8009c80 <quorem>
 800a8c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8cc:	9b01      	ldr	r3, [sp, #4]
 800a8ce:	f805 ab01 	strb.w	sl, [r5], #1
 800a8d2:	1aea      	subs	r2, r5, r3
 800a8d4:	9b02      	ldr	r3, [sp, #8]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	dd09      	ble.n	800a8ee <_dtoa_r+0xb56>
 800a8da:	ee18 1a10 	vmov	r1, s16
 800a8de:	2300      	movs	r3, #0
 800a8e0:	220a      	movs	r2, #10
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 f8d8 	bl	800aa98 <__multadd>
 800a8e8:	ee08 0a10 	vmov	s16, r0
 800a8ec:	e7e7      	b.n	800a8be <_dtoa_r+0xb26>
 800a8ee:	9b02      	ldr	r3, [sp, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfc8      	it	gt
 800a8f4:	461d      	movgt	r5, r3
 800a8f6:	9b01      	ldr	r3, [sp, #4]
 800a8f8:	bfd8      	it	le
 800a8fa:	2501      	movle	r5, #1
 800a8fc:	441d      	add	r5, r3
 800a8fe:	f04f 0800 	mov.w	r8, #0
 800a902:	ee18 1a10 	vmov	r1, s16
 800a906:	2201      	movs	r2, #1
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fa75 	bl	800adf8 <__lshift>
 800a90e:	4631      	mov	r1, r6
 800a910:	ee08 0a10 	vmov	s16, r0
 800a914:	f000 fae0 	bl	800aed8 <__mcmp>
 800a918:	2800      	cmp	r0, #0
 800a91a:	dc91      	bgt.n	800a840 <_dtoa_r+0xaa8>
 800a91c:	d102      	bne.n	800a924 <_dtoa_r+0xb8c>
 800a91e:	f01a 0f01 	tst.w	sl, #1
 800a922:	d18d      	bne.n	800a840 <_dtoa_r+0xaa8>
 800a924:	462b      	mov	r3, r5
 800a926:	461d      	mov	r5, r3
 800a928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a92c:	2a30      	cmp	r2, #48	; 0x30
 800a92e:	d0fa      	beq.n	800a926 <_dtoa_r+0xb8e>
 800a930:	e6d7      	b.n	800a6e2 <_dtoa_r+0x94a>
 800a932:	9a01      	ldr	r2, [sp, #4]
 800a934:	429a      	cmp	r2, r3
 800a936:	d184      	bne.n	800a842 <_dtoa_r+0xaaa>
 800a938:	9b00      	ldr	r3, [sp, #0]
 800a93a:	3301      	adds	r3, #1
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	2331      	movs	r3, #49	; 0x31
 800a940:	7013      	strb	r3, [r2, #0]
 800a942:	e6ce      	b.n	800a6e2 <_dtoa_r+0x94a>
 800a944:	4b09      	ldr	r3, [pc, #36]	; (800a96c <_dtoa_r+0xbd4>)
 800a946:	f7ff ba95 	b.w	8009e74 <_dtoa_r+0xdc>
 800a94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f47f aa6e 	bne.w	8009e2e <_dtoa_r+0x96>
 800a952:	4b07      	ldr	r3, [pc, #28]	; (800a970 <_dtoa_r+0xbd8>)
 800a954:	f7ff ba8e 	b.w	8009e74 <_dtoa_r+0xdc>
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	dcae      	bgt.n	800a8bc <_dtoa_r+0xb24>
 800a95e:	9b06      	ldr	r3, [sp, #24]
 800a960:	2b02      	cmp	r3, #2
 800a962:	f73f aea8 	bgt.w	800a6b6 <_dtoa_r+0x91e>
 800a966:	e7a9      	b.n	800a8bc <_dtoa_r+0xb24>
 800a968:	0800d712 	.word	0x0800d712
 800a96c:	0800d891 	.word	0x0800d891
 800a970:	0800d693 	.word	0x0800d693

0800a974 <_localeconv_r>:
 800a974:	4800      	ldr	r0, [pc, #0]	; (800a978 <_localeconv_r+0x4>)
 800a976:	4770      	bx	lr
 800a978:	200001f8 	.word	0x200001f8

0800a97c <_lseek_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d07      	ldr	r5, [pc, #28]	; (800a99c <_lseek_r+0x20>)
 800a980:	4604      	mov	r4, r0
 800a982:	4608      	mov	r0, r1
 800a984:	4611      	mov	r1, r2
 800a986:	2200      	movs	r2, #0
 800a988:	602a      	str	r2, [r5, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	f7f8 f96c 	bl	8002c68 <_lseek>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_lseek_r+0x1e>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_lseek_r+0x1e>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	20000598 	.word	0x20000598

0800a9a0 <memcpy>:
 800a9a0:	440a      	add	r2, r1
 800a9a2:	4291      	cmp	r1, r2
 800a9a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a8:	d100      	bne.n	800a9ac <memcpy+0xc>
 800a9aa:	4770      	bx	lr
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	d1f9      	bne.n	800a9ae <memcpy+0xe>
 800a9ba:	bd10      	pop	{r4, pc}

0800a9bc <__malloc_lock>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	; (800a9c4 <__malloc_lock+0x8>)
 800a9be:	f001 bb03 	b.w	800bfc8 <__retarget_lock_acquire_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	2000059c 	.word	0x2000059c

0800a9c8 <__malloc_unlock>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	; (800a9d0 <__malloc_unlock+0x8>)
 800a9ca:	f001 bafe 	b.w	800bfca <__retarget_lock_release_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	2000059c 	.word	0x2000059c

0800a9d4 <_Balloc>:
 800a9d4:	b570      	push	{r4, r5, r6, lr}
 800a9d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9d8:	4604      	mov	r4, r0
 800a9da:	460d      	mov	r5, r1
 800a9dc:	b976      	cbnz	r6, 800a9fc <_Balloc+0x28>
 800a9de:	2010      	movs	r0, #16
 800a9e0:	f7fe fa72 	bl	8008ec8 <malloc>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6260      	str	r0, [r4, #36]	; 0x24
 800a9e8:	b920      	cbnz	r0, 800a9f4 <_Balloc+0x20>
 800a9ea:	4b18      	ldr	r3, [pc, #96]	; (800aa4c <_Balloc+0x78>)
 800a9ec:	4818      	ldr	r0, [pc, #96]	; (800aa50 <_Balloc+0x7c>)
 800a9ee:	2166      	movs	r1, #102	; 0x66
 800a9f0:	f001 f902 	bl	800bbf8 <__assert_func>
 800a9f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9f8:	6006      	str	r6, [r0, #0]
 800a9fa:	60c6      	str	r6, [r0, #12]
 800a9fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9fe:	68f3      	ldr	r3, [r6, #12]
 800aa00:	b183      	cbz	r3, 800aa24 <_Balloc+0x50>
 800aa02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa0a:	b9b8      	cbnz	r0, 800aa3c <_Balloc+0x68>
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	fa01 f605 	lsl.w	r6, r1, r5
 800aa12:	1d72      	adds	r2, r6, #5
 800aa14:	0092      	lsls	r2, r2, #2
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fb60 	bl	800b0dc <_calloc_r>
 800aa1c:	b160      	cbz	r0, 800aa38 <_Balloc+0x64>
 800aa1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa22:	e00e      	b.n	800aa42 <_Balloc+0x6e>
 800aa24:	2221      	movs	r2, #33	; 0x21
 800aa26:	2104      	movs	r1, #4
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 fb57 	bl	800b0dc <_calloc_r>
 800aa2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa30:	60f0      	str	r0, [r6, #12]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e4      	bne.n	800aa02 <_Balloc+0x2e>
 800aa38:	2000      	movs	r0, #0
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	6802      	ldr	r2, [r0, #0]
 800aa3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa42:	2300      	movs	r3, #0
 800aa44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa48:	e7f7      	b.n	800aa3a <_Balloc+0x66>
 800aa4a:	bf00      	nop
 800aa4c:	0800d6a0 	.word	0x0800d6a0
 800aa50:	0800d723 	.word	0x0800d723

0800aa54 <_Bfree>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa58:	4605      	mov	r5, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	b976      	cbnz	r6, 800aa7c <_Bfree+0x28>
 800aa5e:	2010      	movs	r0, #16
 800aa60:	f7fe fa32 	bl	8008ec8 <malloc>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6268      	str	r0, [r5, #36]	; 0x24
 800aa68:	b920      	cbnz	r0, 800aa74 <_Bfree+0x20>
 800aa6a:	4b09      	ldr	r3, [pc, #36]	; (800aa90 <_Bfree+0x3c>)
 800aa6c:	4809      	ldr	r0, [pc, #36]	; (800aa94 <_Bfree+0x40>)
 800aa6e:	218a      	movs	r1, #138	; 0x8a
 800aa70:	f001 f8c2 	bl	800bbf8 <__assert_func>
 800aa74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa78:	6006      	str	r6, [r0, #0]
 800aa7a:	60c6      	str	r6, [r0, #12]
 800aa7c:	b13c      	cbz	r4, 800aa8e <_Bfree+0x3a>
 800aa7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa80:	6862      	ldr	r2, [r4, #4]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa88:	6021      	str	r1, [r4, #0]
 800aa8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	0800d6a0 	.word	0x0800d6a0
 800aa94:	0800d723 	.word	0x0800d723

0800aa98 <__multadd>:
 800aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9c:	690d      	ldr	r5, [r1, #16]
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	461e      	mov	r6, r3
 800aaa4:	f101 0c14 	add.w	ip, r1, #20
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	f8dc 3000 	ldr.w	r3, [ip]
 800aaae:	b299      	uxth	r1, r3
 800aab0:	fb02 6101 	mla	r1, r2, r1, r6
 800aab4:	0c1e      	lsrs	r6, r3, #16
 800aab6:	0c0b      	lsrs	r3, r1, #16
 800aab8:	fb02 3306 	mla	r3, r2, r6, r3
 800aabc:	b289      	uxth	r1, r1
 800aabe:	3001      	adds	r0, #1
 800aac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aac4:	4285      	cmp	r5, r0
 800aac6:	f84c 1b04 	str.w	r1, [ip], #4
 800aaca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aace:	dcec      	bgt.n	800aaaa <__multadd+0x12>
 800aad0:	b30e      	cbz	r6, 800ab16 <__multadd+0x7e>
 800aad2:	68a3      	ldr	r3, [r4, #8]
 800aad4:	42ab      	cmp	r3, r5
 800aad6:	dc19      	bgt.n	800ab0c <__multadd+0x74>
 800aad8:	6861      	ldr	r1, [r4, #4]
 800aada:	4638      	mov	r0, r7
 800aadc:	3101      	adds	r1, #1
 800aade:	f7ff ff79 	bl	800a9d4 <_Balloc>
 800aae2:	4680      	mov	r8, r0
 800aae4:	b928      	cbnz	r0, 800aaf2 <__multadd+0x5a>
 800aae6:	4602      	mov	r2, r0
 800aae8:	4b0c      	ldr	r3, [pc, #48]	; (800ab1c <__multadd+0x84>)
 800aaea:	480d      	ldr	r0, [pc, #52]	; (800ab20 <__multadd+0x88>)
 800aaec:	21b5      	movs	r1, #181	; 0xb5
 800aaee:	f001 f883 	bl	800bbf8 <__assert_func>
 800aaf2:	6922      	ldr	r2, [r4, #16]
 800aaf4:	3202      	adds	r2, #2
 800aaf6:	f104 010c 	add.w	r1, r4, #12
 800aafa:	0092      	lsls	r2, r2, #2
 800aafc:	300c      	adds	r0, #12
 800aafe:	f7ff ff4f 	bl	800a9a0 <memcpy>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4638      	mov	r0, r7
 800ab06:	f7ff ffa5 	bl	800aa54 <_Bfree>
 800ab0a:	4644      	mov	r4, r8
 800ab0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab10:	3501      	adds	r5, #1
 800ab12:	615e      	str	r6, [r3, #20]
 800ab14:	6125      	str	r5, [r4, #16]
 800ab16:	4620      	mov	r0, r4
 800ab18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab1c:	0800d712 	.word	0x0800d712
 800ab20:	0800d723 	.word	0x0800d723

0800ab24 <__hi0bits>:
 800ab24:	0c03      	lsrs	r3, r0, #16
 800ab26:	041b      	lsls	r3, r3, #16
 800ab28:	b9d3      	cbnz	r3, 800ab60 <__hi0bits+0x3c>
 800ab2a:	0400      	lsls	r0, r0, #16
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab32:	bf04      	itt	eq
 800ab34:	0200      	lsleq	r0, r0, #8
 800ab36:	3308      	addeq	r3, #8
 800ab38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab3c:	bf04      	itt	eq
 800ab3e:	0100      	lsleq	r0, r0, #4
 800ab40:	3304      	addeq	r3, #4
 800ab42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab46:	bf04      	itt	eq
 800ab48:	0080      	lsleq	r0, r0, #2
 800ab4a:	3302      	addeq	r3, #2
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	db05      	blt.n	800ab5c <__hi0bits+0x38>
 800ab50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab54:	f103 0301 	add.w	r3, r3, #1
 800ab58:	bf08      	it	eq
 800ab5a:	2320      	moveq	r3, #32
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	4770      	bx	lr
 800ab60:	2300      	movs	r3, #0
 800ab62:	e7e4      	b.n	800ab2e <__hi0bits+0xa>

0800ab64 <__lo0bits>:
 800ab64:	6803      	ldr	r3, [r0, #0]
 800ab66:	f013 0207 	ands.w	r2, r3, #7
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	d00b      	beq.n	800ab86 <__lo0bits+0x22>
 800ab6e:	07da      	lsls	r2, r3, #31
 800ab70:	d423      	bmi.n	800abba <__lo0bits+0x56>
 800ab72:	0798      	lsls	r0, r3, #30
 800ab74:	bf49      	itett	mi
 800ab76:	085b      	lsrmi	r3, r3, #1
 800ab78:	089b      	lsrpl	r3, r3, #2
 800ab7a:	2001      	movmi	r0, #1
 800ab7c:	600b      	strmi	r3, [r1, #0]
 800ab7e:	bf5c      	itt	pl
 800ab80:	600b      	strpl	r3, [r1, #0]
 800ab82:	2002      	movpl	r0, #2
 800ab84:	4770      	bx	lr
 800ab86:	b298      	uxth	r0, r3
 800ab88:	b9a8      	cbnz	r0, 800abb6 <__lo0bits+0x52>
 800ab8a:	0c1b      	lsrs	r3, r3, #16
 800ab8c:	2010      	movs	r0, #16
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	b90a      	cbnz	r2, 800ab96 <__lo0bits+0x32>
 800ab92:	3008      	adds	r0, #8
 800ab94:	0a1b      	lsrs	r3, r3, #8
 800ab96:	071a      	lsls	r2, r3, #28
 800ab98:	bf04      	itt	eq
 800ab9a:	091b      	lsreq	r3, r3, #4
 800ab9c:	3004      	addeq	r0, #4
 800ab9e:	079a      	lsls	r2, r3, #30
 800aba0:	bf04      	itt	eq
 800aba2:	089b      	lsreq	r3, r3, #2
 800aba4:	3002      	addeq	r0, #2
 800aba6:	07da      	lsls	r2, r3, #31
 800aba8:	d403      	bmi.n	800abb2 <__lo0bits+0x4e>
 800abaa:	085b      	lsrs	r3, r3, #1
 800abac:	f100 0001 	add.w	r0, r0, #1
 800abb0:	d005      	beq.n	800abbe <__lo0bits+0x5a>
 800abb2:	600b      	str	r3, [r1, #0]
 800abb4:	4770      	bx	lr
 800abb6:	4610      	mov	r0, r2
 800abb8:	e7e9      	b.n	800ab8e <__lo0bits+0x2a>
 800abba:	2000      	movs	r0, #0
 800abbc:	4770      	bx	lr
 800abbe:	2020      	movs	r0, #32
 800abc0:	4770      	bx	lr
	...

0800abc4 <__i2b>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	460c      	mov	r4, r1
 800abc8:	2101      	movs	r1, #1
 800abca:	f7ff ff03 	bl	800a9d4 <_Balloc>
 800abce:	4602      	mov	r2, r0
 800abd0:	b928      	cbnz	r0, 800abde <__i2b+0x1a>
 800abd2:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <__i2b+0x24>)
 800abd4:	4805      	ldr	r0, [pc, #20]	; (800abec <__i2b+0x28>)
 800abd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abda:	f001 f80d 	bl	800bbf8 <__assert_func>
 800abde:	2301      	movs	r3, #1
 800abe0:	6144      	str	r4, [r0, #20]
 800abe2:	6103      	str	r3, [r0, #16]
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	0800d712 	.word	0x0800d712
 800abec:	0800d723 	.word	0x0800d723

0800abf0 <__multiply>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4691      	mov	r9, r2
 800abf6:	690a      	ldr	r2, [r1, #16]
 800abf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	bfb8      	it	lt
 800ac00:	460b      	movlt	r3, r1
 800ac02:	460c      	mov	r4, r1
 800ac04:	bfbc      	itt	lt
 800ac06:	464c      	movlt	r4, r9
 800ac08:	4699      	movlt	r9, r3
 800ac0a:	6927      	ldr	r7, [r4, #16]
 800ac0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	6861      	ldr	r1, [r4, #4]
 800ac14:	eb07 060a 	add.w	r6, r7, sl
 800ac18:	42b3      	cmp	r3, r6
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	bfb8      	it	lt
 800ac1e:	3101      	addlt	r1, #1
 800ac20:	f7ff fed8 	bl	800a9d4 <_Balloc>
 800ac24:	b930      	cbnz	r0, 800ac34 <__multiply+0x44>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4b44      	ldr	r3, [pc, #272]	; (800ad3c <__multiply+0x14c>)
 800ac2a:	4845      	ldr	r0, [pc, #276]	; (800ad40 <__multiply+0x150>)
 800ac2c:	f240 115d 	movw	r1, #349	; 0x15d
 800ac30:	f000 ffe2 	bl	800bbf8 <__assert_func>
 800ac34:	f100 0514 	add.w	r5, r0, #20
 800ac38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac3c:	462b      	mov	r3, r5
 800ac3e:	2200      	movs	r2, #0
 800ac40:	4543      	cmp	r3, r8
 800ac42:	d321      	bcc.n	800ac88 <__multiply+0x98>
 800ac44:	f104 0314 	add.w	r3, r4, #20
 800ac48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac4c:	f109 0314 	add.w	r3, r9, #20
 800ac50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac54:	9202      	str	r2, [sp, #8]
 800ac56:	1b3a      	subs	r2, r7, r4
 800ac58:	3a15      	subs	r2, #21
 800ac5a:	f022 0203 	bic.w	r2, r2, #3
 800ac5e:	3204      	adds	r2, #4
 800ac60:	f104 0115 	add.w	r1, r4, #21
 800ac64:	428f      	cmp	r7, r1
 800ac66:	bf38      	it	cc
 800ac68:	2204      	movcc	r2, #4
 800ac6a:	9201      	str	r2, [sp, #4]
 800ac6c:	9a02      	ldr	r2, [sp, #8]
 800ac6e:	9303      	str	r3, [sp, #12]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d80c      	bhi.n	800ac8e <__multiply+0x9e>
 800ac74:	2e00      	cmp	r6, #0
 800ac76:	dd03      	ble.n	800ac80 <__multiply+0x90>
 800ac78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d05a      	beq.n	800ad36 <__multiply+0x146>
 800ac80:	6106      	str	r6, [r0, #16]
 800ac82:	b005      	add	sp, #20
 800ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac88:	f843 2b04 	str.w	r2, [r3], #4
 800ac8c:	e7d8      	b.n	800ac40 <__multiply+0x50>
 800ac8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac92:	f1ba 0f00 	cmp.w	sl, #0
 800ac96:	d024      	beq.n	800ace2 <__multiply+0xf2>
 800ac98:	f104 0e14 	add.w	lr, r4, #20
 800ac9c:	46a9      	mov	r9, r5
 800ac9e:	f04f 0c00 	mov.w	ip, #0
 800aca2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aca6:	f8d9 1000 	ldr.w	r1, [r9]
 800acaa:	fa1f fb82 	uxth.w	fp, r2
 800acae:	b289      	uxth	r1, r1
 800acb0:	fb0a 110b 	mla	r1, sl, fp, r1
 800acb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acb8:	f8d9 2000 	ldr.w	r2, [r9]
 800acbc:	4461      	add	r1, ip
 800acbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acc2:	fb0a c20b 	mla	r2, sl, fp, ip
 800acc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acca:	b289      	uxth	r1, r1
 800accc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acd0:	4577      	cmp	r7, lr
 800acd2:	f849 1b04 	str.w	r1, [r9], #4
 800acd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acda:	d8e2      	bhi.n	800aca2 <__multiply+0xb2>
 800acdc:	9a01      	ldr	r2, [sp, #4]
 800acde:	f845 c002 	str.w	ip, [r5, r2]
 800ace2:	9a03      	ldr	r2, [sp, #12]
 800ace4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ace8:	3304      	adds	r3, #4
 800acea:	f1b9 0f00 	cmp.w	r9, #0
 800acee:	d020      	beq.n	800ad32 <__multiply+0x142>
 800acf0:	6829      	ldr	r1, [r5, #0]
 800acf2:	f104 0c14 	add.w	ip, r4, #20
 800acf6:	46ae      	mov	lr, r5
 800acf8:	f04f 0a00 	mov.w	sl, #0
 800acfc:	f8bc b000 	ldrh.w	fp, [ip]
 800ad00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad04:	fb09 220b 	mla	r2, r9, fp, r2
 800ad08:	4492      	add	sl, r2
 800ad0a:	b289      	uxth	r1, r1
 800ad0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad10:	f84e 1b04 	str.w	r1, [lr], #4
 800ad14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad18:	f8be 1000 	ldrh.w	r1, [lr]
 800ad1c:	0c12      	lsrs	r2, r2, #16
 800ad1e:	fb09 1102 	mla	r1, r9, r2, r1
 800ad22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad26:	4567      	cmp	r7, ip
 800ad28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad2c:	d8e6      	bhi.n	800acfc <__multiply+0x10c>
 800ad2e:	9a01      	ldr	r2, [sp, #4]
 800ad30:	50a9      	str	r1, [r5, r2]
 800ad32:	3504      	adds	r5, #4
 800ad34:	e79a      	b.n	800ac6c <__multiply+0x7c>
 800ad36:	3e01      	subs	r6, #1
 800ad38:	e79c      	b.n	800ac74 <__multiply+0x84>
 800ad3a:	bf00      	nop
 800ad3c:	0800d712 	.word	0x0800d712
 800ad40:	0800d723 	.word	0x0800d723

0800ad44 <__pow5mult>:
 800ad44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad48:	4615      	mov	r5, r2
 800ad4a:	f012 0203 	ands.w	r2, r2, #3
 800ad4e:	4606      	mov	r6, r0
 800ad50:	460f      	mov	r7, r1
 800ad52:	d007      	beq.n	800ad64 <__pow5mult+0x20>
 800ad54:	4c25      	ldr	r4, [pc, #148]	; (800adec <__pow5mult+0xa8>)
 800ad56:	3a01      	subs	r2, #1
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad5e:	f7ff fe9b 	bl	800aa98 <__multadd>
 800ad62:	4607      	mov	r7, r0
 800ad64:	10ad      	asrs	r5, r5, #2
 800ad66:	d03d      	beq.n	800ade4 <__pow5mult+0xa0>
 800ad68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad6a:	b97c      	cbnz	r4, 800ad8c <__pow5mult+0x48>
 800ad6c:	2010      	movs	r0, #16
 800ad6e:	f7fe f8ab 	bl	8008ec8 <malloc>
 800ad72:	4602      	mov	r2, r0
 800ad74:	6270      	str	r0, [r6, #36]	; 0x24
 800ad76:	b928      	cbnz	r0, 800ad84 <__pow5mult+0x40>
 800ad78:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <__pow5mult+0xac>)
 800ad7a:	481e      	ldr	r0, [pc, #120]	; (800adf4 <__pow5mult+0xb0>)
 800ad7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad80:	f000 ff3a 	bl	800bbf8 <__assert_func>
 800ad84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad88:	6004      	str	r4, [r0, #0]
 800ad8a:	60c4      	str	r4, [r0, #12]
 800ad8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad94:	b94c      	cbnz	r4, 800adaa <__pow5mult+0x66>
 800ad96:	f240 2171 	movw	r1, #625	; 0x271
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f7ff ff12 	bl	800abc4 <__i2b>
 800ada0:	2300      	movs	r3, #0
 800ada2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ada6:	4604      	mov	r4, r0
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	f04f 0900 	mov.w	r9, #0
 800adae:	07eb      	lsls	r3, r5, #31
 800adb0:	d50a      	bpl.n	800adc8 <__pow5mult+0x84>
 800adb2:	4639      	mov	r1, r7
 800adb4:	4622      	mov	r2, r4
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ff1a 	bl	800abf0 <__multiply>
 800adbc:	4639      	mov	r1, r7
 800adbe:	4680      	mov	r8, r0
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff fe47 	bl	800aa54 <_Bfree>
 800adc6:	4647      	mov	r7, r8
 800adc8:	106d      	asrs	r5, r5, #1
 800adca:	d00b      	beq.n	800ade4 <__pow5mult+0xa0>
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	b938      	cbnz	r0, 800ade0 <__pow5mult+0x9c>
 800add0:	4622      	mov	r2, r4
 800add2:	4621      	mov	r1, r4
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff ff0b 	bl	800abf0 <__multiply>
 800adda:	6020      	str	r0, [r4, #0]
 800addc:	f8c0 9000 	str.w	r9, [r0]
 800ade0:	4604      	mov	r4, r0
 800ade2:	e7e4      	b.n	800adae <__pow5mult+0x6a>
 800ade4:	4638      	mov	r0, r7
 800ade6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adea:	bf00      	nop
 800adec:	0800d870 	.word	0x0800d870
 800adf0:	0800d6a0 	.word	0x0800d6a0
 800adf4:	0800d723 	.word	0x0800d723

0800adf8 <__lshift>:
 800adf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adfc:	460c      	mov	r4, r1
 800adfe:	6849      	ldr	r1, [r1, #4]
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae06:	68a3      	ldr	r3, [r4, #8]
 800ae08:	4607      	mov	r7, r0
 800ae0a:	4691      	mov	r9, r2
 800ae0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae10:	f108 0601 	add.w	r6, r8, #1
 800ae14:	42b3      	cmp	r3, r6
 800ae16:	db0b      	blt.n	800ae30 <__lshift+0x38>
 800ae18:	4638      	mov	r0, r7
 800ae1a:	f7ff fddb 	bl	800a9d4 <_Balloc>
 800ae1e:	4605      	mov	r5, r0
 800ae20:	b948      	cbnz	r0, 800ae36 <__lshift+0x3e>
 800ae22:	4602      	mov	r2, r0
 800ae24:	4b2a      	ldr	r3, [pc, #168]	; (800aed0 <__lshift+0xd8>)
 800ae26:	482b      	ldr	r0, [pc, #172]	; (800aed4 <__lshift+0xdc>)
 800ae28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae2c:	f000 fee4 	bl	800bbf8 <__assert_func>
 800ae30:	3101      	adds	r1, #1
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	e7ee      	b.n	800ae14 <__lshift+0x1c>
 800ae36:	2300      	movs	r3, #0
 800ae38:	f100 0114 	add.w	r1, r0, #20
 800ae3c:	f100 0210 	add.w	r2, r0, #16
 800ae40:	4618      	mov	r0, r3
 800ae42:	4553      	cmp	r3, sl
 800ae44:	db37      	blt.n	800aeb6 <__lshift+0xbe>
 800ae46:	6920      	ldr	r0, [r4, #16]
 800ae48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae4c:	f104 0314 	add.w	r3, r4, #20
 800ae50:	f019 091f 	ands.w	r9, r9, #31
 800ae54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae5c:	d02f      	beq.n	800aebe <__lshift+0xc6>
 800ae5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ae62:	468a      	mov	sl, r1
 800ae64:	f04f 0c00 	mov.w	ip, #0
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	fa02 f209 	lsl.w	r2, r2, r9
 800ae6e:	ea42 020c 	orr.w	r2, r2, ip
 800ae72:	f84a 2b04 	str.w	r2, [sl], #4
 800ae76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae7a:	4298      	cmp	r0, r3
 800ae7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae80:	d8f2      	bhi.n	800ae68 <__lshift+0x70>
 800ae82:	1b03      	subs	r3, r0, r4
 800ae84:	3b15      	subs	r3, #21
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	f104 0215 	add.w	r2, r4, #21
 800ae90:	4290      	cmp	r0, r2
 800ae92:	bf38      	it	cc
 800ae94:	2304      	movcc	r3, #4
 800ae96:	f841 c003 	str.w	ip, [r1, r3]
 800ae9a:	f1bc 0f00 	cmp.w	ip, #0
 800ae9e:	d001      	beq.n	800aea4 <__lshift+0xac>
 800aea0:	f108 0602 	add.w	r6, r8, #2
 800aea4:	3e01      	subs	r6, #1
 800aea6:	4638      	mov	r0, r7
 800aea8:	612e      	str	r6, [r5, #16]
 800aeaa:	4621      	mov	r1, r4
 800aeac:	f7ff fdd2 	bl	800aa54 <_Bfree>
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aeba:	3301      	adds	r3, #1
 800aebc:	e7c1      	b.n	800ae42 <__lshift+0x4a>
 800aebe:	3904      	subs	r1, #4
 800aec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aec4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aec8:	4298      	cmp	r0, r3
 800aeca:	d8f9      	bhi.n	800aec0 <__lshift+0xc8>
 800aecc:	e7ea      	b.n	800aea4 <__lshift+0xac>
 800aece:	bf00      	nop
 800aed0:	0800d712 	.word	0x0800d712
 800aed4:	0800d723 	.word	0x0800d723

0800aed8 <__mcmp>:
 800aed8:	b530      	push	{r4, r5, lr}
 800aeda:	6902      	ldr	r2, [r0, #16]
 800aedc:	690c      	ldr	r4, [r1, #16]
 800aede:	1b12      	subs	r2, r2, r4
 800aee0:	d10e      	bne.n	800af00 <__mcmp+0x28>
 800aee2:	f100 0314 	add.w	r3, r0, #20
 800aee6:	3114      	adds	r1, #20
 800aee8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aeec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aef0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aef4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aef8:	42a5      	cmp	r5, r4
 800aefa:	d003      	beq.n	800af04 <__mcmp+0x2c>
 800aefc:	d305      	bcc.n	800af0a <__mcmp+0x32>
 800aefe:	2201      	movs	r2, #1
 800af00:	4610      	mov	r0, r2
 800af02:	bd30      	pop	{r4, r5, pc}
 800af04:	4283      	cmp	r3, r0
 800af06:	d3f3      	bcc.n	800aef0 <__mcmp+0x18>
 800af08:	e7fa      	b.n	800af00 <__mcmp+0x28>
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295
 800af0e:	e7f7      	b.n	800af00 <__mcmp+0x28>

0800af10 <__mdiff>:
 800af10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	460c      	mov	r4, r1
 800af16:	4606      	mov	r6, r0
 800af18:	4611      	mov	r1, r2
 800af1a:	4620      	mov	r0, r4
 800af1c:	4690      	mov	r8, r2
 800af1e:	f7ff ffdb 	bl	800aed8 <__mcmp>
 800af22:	1e05      	subs	r5, r0, #0
 800af24:	d110      	bne.n	800af48 <__mdiff+0x38>
 800af26:	4629      	mov	r1, r5
 800af28:	4630      	mov	r0, r6
 800af2a:	f7ff fd53 	bl	800a9d4 <_Balloc>
 800af2e:	b930      	cbnz	r0, 800af3e <__mdiff+0x2e>
 800af30:	4b3a      	ldr	r3, [pc, #232]	; (800b01c <__mdiff+0x10c>)
 800af32:	4602      	mov	r2, r0
 800af34:	f240 2132 	movw	r1, #562	; 0x232
 800af38:	4839      	ldr	r0, [pc, #228]	; (800b020 <__mdiff+0x110>)
 800af3a:	f000 fe5d 	bl	800bbf8 <__assert_func>
 800af3e:	2301      	movs	r3, #1
 800af40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af48:	bfa4      	itt	ge
 800af4a:	4643      	movge	r3, r8
 800af4c:	46a0      	movge	r8, r4
 800af4e:	4630      	mov	r0, r6
 800af50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af54:	bfa6      	itte	ge
 800af56:	461c      	movge	r4, r3
 800af58:	2500      	movge	r5, #0
 800af5a:	2501      	movlt	r5, #1
 800af5c:	f7ff fd3a 	bl	800a9d4 <_Balloc>
 800af60:	b920      	cbnz	r0, 800af6c <__mdiff+0x5c>
 800af62:	4b2e      	ldr	r3, [pc, #184]	; (800b01c <__mdiff+0x10c>)
 800af64:	4602      	mov	r2, r0
 800af66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af6a:	e7e5      	b.n	800af38 <__mdiff+0x28>
 800af6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af70:	6926      	ldr	r6, [r4, #16]
 800af72:	60c5      	str	r5, [r0, #12]
 800af74:	f104 0914 	add.w	r9, r4, #20
 800af78:	f108 0514 	add.w	r5, r8, #20
 800af7c:	f100 0e14 	add.w	lr, r0, #20
 800af80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af88:	f108 0210 	add.w	r2, r8, #16
 800af8c:	46f2      	mov	sl, lr
 800af8e:	2100      	movs	r1, #0
 800af90:	f859 3b04 	ldr.w	r3, [r9], #4
 800af94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af98:	fa1f f883 	uxth.w	r8, r3
 800af9c:	fa11 f18b 	uxtah	r1, r1, fp
 800afa0:	0c1b      	lsrs	r3, r3, #16
 800afa2:	eba1 0808 	sub.w	r8, r1, r8
 800afa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afae:	fa1f f888 	uxth.w	r8, r8
 800afb2:	1419      	asrs	r1, r3, #16
 800afb4:	454e      	cmp	r6, r9
 800afb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afba:	f84a 3b04 	str.w	r3, [sl], #4
 800afbe:	d8e7      	bhi.n	800af90 <__mdiff+0x80>
 800afc0:	1b33      	subs	r3, r6, r4
 800afc2:	3b15      	subs	r3, #21
 800afc4:	f023 0303 	bic.w	r3, r3, #3
 800afc8:	3304      	adds	r3, #4
 800afca:	3415      	adds	r4, #21
 800afcc:	42a6      	cmp	r6, r4
 800afce:	bf38      	it	cc
 800afd0:	2304      	movcc	r3, #4
 800afd2:	441d      	add	r5, r3
 800afd4:	4473      	add	r3, lr
 800afd6:	469e      	mov	lr, r3
 800afd8:	462e      	mov	r6, r5
 800afda:	4566      	cmp	r6, ip
 800afdc:	d30e      	bcc.n	800affc <__mdiff+0xec>
 800afde:	f10c 0203 	add.w	r2, ip, #3
 800afe2:	1b52      	subs	r2, r2, r5
 800afe4:	f022 0203 	bic.w	r2, r2, #3
 800afe8:	3d03      	subs	r5, #3
 800afea:	45ac      	cmp	ip, r5
 800afec:	bf38      	it	cc
 800afee:	2200      	movcc	r2, #0
 800aff0:	441a      	add	r2, r3
 800aff2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aff6:	b17b      	cbz	r3, 800b018 <__mdiff+0x108>
 800aff8:	6107      	str	r7, [r0, #16]
 800affa:	e7a3      	b.n	800af44 <__mdiff+0x34>
 800affc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b000:	fa11 f288 	uxtah	r2, r1, r8
 800b004:	1414      	asrs	r4, r2, #16
 800b006:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b00a:	b292      	uxth	r2, r2
 800b00c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b010:	f84e 2b04 	str.w	r2, [lr], #4
 800b014:	1421      	asrs	r1, r4, #16
 800b016:	e7e0      	b.n	800afda <__mdiff+0xca>
 800b018:	3f01      	subs	r7, #1
 800b01a:	e7ea      	b.n	800aff2 <__mdiff+0xe2>
 800b01c:	0800d712 	.word	0x0800d712
 800b020:	0800d723 	.word	0x0800d723

0800b024 <__d2b>:
 800b024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b028:	4689      	mov	r9, r1
 800b02a:	2101      	movs	r1, #1
 800b02c:	ec57 6b10 	vmov	r6, r7, d0
 800b030:	4690      	mov	r8, r2
 800b032:	f7ff fccf 	bl	800a9d4 <_Balloc>
 800b036:	4604      	mov	r4, r0
 800b038:	b930      	cbnz	r0, 800b048 <__d2b+0x24>
 800b03a:	4602      	mov	r2, r0
 800b03c:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <__d2b+0xb0>)
 800b03e:	4826      	ldr	r0, [pc, #152]	; (800b0d8 <__d2b+0xb4>)
 800b040:	f240 310a 	movw	r1, #778	; 0x30a
 800b044:	f000 fdd8 	bl	800bbf8 <__assert_func>
 800b048:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b04c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b050:	bb35      	cbnz	r5, 800b0a0 <__d2b+0x7c>
 800b052:	2e00      	cmp	r6, #0
 800b054:	9301      	str	r3, [sp, #4]
 800b056:	d028      	beq.n	800b0aa <__d2b+0x86>
 800b058:	4668      	mov	r0, sp
 800b05a:	9600      	str	r6, [sp, #0]
 800b05c:	f7ff fd82 	bl	800ab64 <__lo0bits>
 800b060:	9900      	ldr	r1, [sp, #0]
 800b062:	b300      	cbz	r0, 800b0a6 <__d2b+0x82>
 800b064:	9a01      	ldr	r2, [sp, #4]
 800b066:	f1c0 0320 	rsb	r3, r0, #32
 800b06a:	fa02 f303 	lsl.w	r3, r2, r3
 800b06e:	430b      	orrs	r3, r1
 800b070:	40c2      	lsrs	r2, r0
 800b072:	6163      	str	r3, [r4, #20]
 800b074:	9201      	str	r2, [sp, #4]
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	61a3      	str	r3, [r4, #24]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bf14      	ite	ne
 800b07e:	2202      	movne	r2, #2
 800b080:	2201      	moveq	r2, #1
 800b082:	6122      	str	r2, [r4, #16]
 800b084:	b1d5      	cbz	r5, 800b0bc <__d2b+0x98>
 800b086:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b08a:	4405      	add	r5, r0
 800b08c:	f8c9 5000 	str.w	r5, [r9]
 800b090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b094:	f8c8 0000 	str.w	r0, [r8]
 800b098:	4620      	mov	r0, r4
 800b09a:	b003      	add	sp, #12
 800b09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0a4:	e7d5      	b.n	800b052 <__d2b+0x2e>
 800b0a6:	6161      	str	r1, [r4, #20]
 800b0a8:	e7e5      	b.n	800b076 <__d2b+0x52>
 800b0aa:	a801      	add	r0, sp, #4
 800b0ac:	f7ff fd5a 	bl	800ab64 <__lo0bits>
 800b0b0:	9b01      	ldr	r3, [sp, #4]
 800b0b2:	6163      	str	r3, [r4, #20]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	6122      	str	r2, [r4, #16]
 800b0b8:	3020      	adds	r0, #32
 800b0ba:	e7e3      	b.n	800b084 <__d2b+0x60>
 800b0bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0c4:	f8c9 0000 	str.w	r0, [r9]
 800b0c8:	6918      	ldr	r0, [r3, #16]
 800b0ca:	f7ff fd2b 	bl	800ab24 <__hi0bits>
 800b0ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0d2:	e7df      	b.n	800b094 <__d2b+0x70>
 800b0d4:	0800d712 	.word	0x0800d712
 800b0d8:	0800d723 	.word	0x0800d723

0800b0dc <_calloc_r>:
 800b0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0de:	fba1 2402 	umull	r2, r4, r1, r2
 800b0e2:	b94c      	cbnz	r4, 800b0f8 <_calloc_r+0x1c>
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	9201      	str	r2, [sp, #4]
 800b0e8:	f7fd ff72 	bl	8008fd0 <_malloc_r>
 800b0ec:	9a01      	ldr	r2, [sp, #4]
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	b930      	cbnz	r0, 800b100 <_calloc_r+0x24>
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	b003      	add	sp, #12
 800b0f6:	bd30      	pop	{r4, r5, pc}
 800b0f8:	220c      	movs	r2, #12
 800b0fa:	6002      	str	r2, [r0, #0]
 800b0fc:	2500      	movs	r5, #0
 800b0fe:	e7f8      	b.n	800b0f2 <_calloc_r+0x16>
 800b100:	4621      	mov	r1, r4
 800b102:	f7fd fef1 	bl	8008ee8 <memset>
 800b106:	e7f4      	b.n	800b0f2 <_calloc_r+0x16>

0800b108 <__ssputs_r>:
 800b108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	688e      	ldr	r6, [r1, #8]
 800b10e:	429e      	cmp	r6, r3
 800b110:	4682      	mov	sl, r0
 800b112:	460c      	mov	r4, r1
 800b114:	4690      	mov	r8, r2
 800b116:	461f      	mov	r7, r3
 800b118:	d838      	bhi.n	800b18c <__ssputs_r+0x84>
 800b11a:	898a      	ldrh	r2, [r1, #12]
 800b11c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b120:	d032      	beq.n	800b188 <__ssputs_r+0x80>
 800b122:	6825      	ldr	r5, [r4, #0]
 800b124:	6909      	ldr	r1, [r1, #16]
 800b126:	eba5 0901 	sub.w	r9, r5, r1
 800b12a:	6965      	ldr	r5, [r4, #20]
 800b12c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b134:	3301      	adds	r3, #1
 800b136:	444b      	add	r3, r9
 800b138:	106d      	asrs	r5, r5, #1
 800b13a:	429d      	cmp	r5, r3
 800b13c:	bf38      	it	cc
 800b13e:	461d      	movcc	r5, r3
 800b140:	0553      	lsls	r3, r2, #21
 800b142:	d531      	bpl.n	800b1a8 <__ssputs_r+0xa0>
 800b144:	4629      	mov	r1, r5
 800b146:	f7fd ff43 	bl	8008fd0 <_malloc_r>
 800b14a:	4606      	mov	r6, r0
 800b14c:	b950      	cbnz	r0, 800b164 <__ssputs_r+0x5c>
 800b14e:	230c      	movs	r3, #12
 800b150:	f8ca 3000 	str.w	r3, [sl]
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	f04f 30ff 	mov.w	r0, #4294967295
 800b160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b164:	6921      	ldr	r1, [r4, #16]
 800b166:	464a      	mov	r2, r9
 800b168:	f7ff fc1a 	bl	800a9a0 <memcpy>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	6126      	str	r6, [r4, #16]
 800b17a:	6165      	str	r5, [r4, #20]
 800b17c:	444e      	add	r6, r9
 800b17e:	eba5 0509 	sub.w	r5, r5, r9
 800b182:	6026      	str	r6, [r4, #0]
 800b184:	60a5      	str	r5, [r4, #8]
 800b186:	463e      	mov	r6, r7
 800b188:	42be      	cmp	r6, r7
 800b18a:	d900      	bls.n	800b18e <__ssputs_r+0x86>
 800b18c:	463e      	mov	r6, r7
 800b18e:	6820      	ldr	r0, [r4, #0]
 800b190:	4632      	mov	r2, r6
 800b192:	4641      	mov	r1, r8
 800b194:	f000 ff2c 	bl	800bff0 <memmove>
 800b198:	68a3      	ldr	r3, [r4, #8]
 800b19a:	1b9b      	subs	r3, r3, r6
 800b19c:	60a3      	str	r3, [r4, #8]
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	4433      	add	r3, r6
 800b1a2:	6023      	str	r3, [r4, #0]
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	e7db      	b.n	800b160 <__ssputs_r+0x58>
 800b1a8:	462a      	mov	r2, r5
 800b1aa:	f000 ff3b 	bl	800c024 <_realloc_r>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d1e1      	bne.n	800b178 <__ssputs_r+0x70>
 800b1b4:	6921      	ldr	r1, [r4, #16]
 800b1b6:	4650      	mov	r0, sl
 800b1b8:	f7fd fe9e 	bl	8008ef8 <_free_r>
 800b1bc:	e7c7      	b.n	800b14e <__ssputs_r+0x46>
	...

0800b1c0 <_svfiprintf_r>:
 800b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	4698      	mov	r8, r3
 800b1c6:	898b      	ldrh	r3, [r1, #12]
 800b1c8:	061b      	lsls	r3, r3, #24
 800b1ca:	b09d      	sub	sp, #116	; 0x74
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	460d      	mov	r5, r1
 800b1d0:	4614      	mov	r4, r2
 800b1d2:	d50e      	bpl.n	800b1f2 <_svfiprintf_r+0x32>
 800b1d4:	690b      	ldr	r3, [r1, #16]
 800b1d6:	b963      	cbnz	r3, 800b1f2 <_svfiprintf_r+0x32>
 800b1d8:	2140      	movs	r1, #64	; 0x40
 800b1da:	f7fd fef9 	bl	8008fd0 <_malloc_r>
 800b1de:	6028      	str	r0, [r5, #0]
 800b1e0:	6128      	str	r0, [r5, #16]
 800b1e2:	b920      	cbnz	r0, 800b1ee <_svfiprintf_r+0x2e>
 800b1e4:	230c      	movs	r3, #12
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	e0d1      	b.n	800b392 <_svfiprintf_r+0x1d2>
 800b1ee:	2340      	movs	r3, #64	; 0x40
 800b1f0:	616b      	str	r3, [r5, #20]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f6:	2320      	movs	r3, #32
 800b1f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b200:	2330      	movs	r3, #48	; 0x30
 800b202:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3ac <_svfiprintf_r+0x1ec>
 800b206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b20a:	f04f 0901 	mov.w	r9, #1
 800b20e:	4623      	mov	r3, r4
 800b210:	469a      	mov	sl, r3
 800b212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b216:	b10a      	cbz	r2, 800b21c <_svfiprintf_r+0x5c>
 800b218:	2a25      	cmp	r2, #37	; 0x25
 800b21a:	d1f9      	bne.n	800b210 <_svfiprintf_r+0x50>
 800b21c:	ebba 0b04 	subs.w	fp, sl, r4
 800b220:	d00b      	beq.n	800b23a <_svfiprintf_r+0x7a>
 800b222:	465b      	mov	r3, fp
 800b224:	4622      	mov	r2, r4
 800b226:	4629      	mov	r1, r5
 800b228:	4638      	mov	r0, r7
 800b22a:	f7ff ff6d 	bl	800b108 <__ssputs_r>
 800b22e:	3001      	adds	r0, #1
 800b230:	f000 80aa 	beq.w	800b388 <_svfiprintf_r+0x1c8>
 800b234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b236:	445a      	add	r2, fp
 800b238:	9209      	str	r2, [sp, #36]	; 0x24
 800b23a:	f89a 3000 	ldrb.w	r3, [sl]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 80a2 	beq.w	800b388 <_svfiprintf_r+0x1c8>
 800b244:	2300      	movs	r3, #0
 800b246:	f04f 32ff 	mov.w	r2, #4294967295
 800b24a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b24e:	f10a 0a01 	add.w	sl, sl, #1
 800b252:	9304      	str	r3, [sp, #16]
 800b254:	9307      	str	r3, [sp, #28]
 800b256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b25a:	931a      	str	r3, [sp, #104]	; 0x68
 800b25c:	4654      	mov	r4, sl
 800b25e:	2205      	movs	r2, #5
 800b260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b264:	4851      	ldr	r0, [pc, #324]	; (800b3ac <_svfiprintf_r+0x1ec>)
 800b266:	f7f4 ffd3 	bl	8000210 <memchr>
 800b26a:	9a04      	ldr	r2, [sp, #16]
 800b26c:	b9d8      	cbnz	r0, 800b2a6 <_svfiprintf_r+0xe6>
 800b26e:	06d0      	lsls	r0, r2, #27
 800b270:	bf44      	itt	mi
 800b272:	2320      	movmi	r3, #32
 800b274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b278:	0711      	lsls	r1, r2, #28
 800b27a:	bf44      	itt	mi
 800b27c:	232b      	movmi	r3, #43	; 0x2b
 800b27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b282:	f89a 3000 	ldrb.w	r3, [sl]
 800b286:	2b2a      	cmp	r3, #42	; 0x2a
 800b288:	d015      	beq.n	800b2b6 <_svfiprintf_r+0xf6>
 800b28a:	9a07      	ldr	r2, [sp, #28]
 800b28c:	4654      	mov	r4, sl
 800b28e:	2000      	movs	r0, #0
 800b290:	f04f 0c0a 	mov.w	ip, #10
 800b294:	4621      	mov	r1, r4
 800b296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b29a:	3b30      	subs	r3, #48	; 0x30
 800b29c:	2b09      	cmp	r3, #9
 800b29e:	d94e      	bls.n	800b33e <_svfiprintf_r+0x17e>
 800b2a0:	b1b0      	cbz	r0, 800b2d0 <_svfiprintf_r+0x110>
 800b2a2:	9207      	str	r2, [sp, #28]
 800b2a4:	e014      	b.n	800b2d0 <_svfiprintf_r+0x110>
 800b2a6:	eba0 0308 	sub.w	r3, r0, r8
 800b2aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	9304      	str	r3, [sp, #16]
 800b2b2:	46a2      	mov	sl, r4
 800b2b4:	e7d2      	b.n	800b25c <_svfiprintf_r+0x9c>
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	1d19      	adds	r1, r3, #4
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	9103      	str	r1, [sp, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	bfbb      	ittet	lt
 800b2c2:	425b      	neglt	r3, r3
 800b2c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c8:	9307      	strge	r3, [sp, #28]
 800b2ca:	9307      	strlt	r3, [sp, #28]
 800b2cc:	bfb8      	it	lt
 800b2ce:	9204      	strlt	r2, [sp, #16]
 800b2d0:	7823      	ldrb	r3, [r4, #0]
 800b2d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d4:	d10c      	bne.n	800b2f0 <_svfiprintf_r+0x130>
 800b2d6:	7863      	ldrb	r3, [r4, #1]
 800b2d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2da:	d135      	bne.n	800b348 <_svfiprintf_r+0x188>
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	1d1a      	adds	r2, r3, #4
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	9203      	str	r2, [sp, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bfb8      	it	lt
 800b2e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2ec:	3402      	adds	r4, #2
 800b2ee:	9305      	str	r3, [sp, #20]
 800b2f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3bc <_svfiprintf_r+0x1fc>
 800b2f4:	7821      	ldrb	r1, [r4, #0]
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	4650      	mov	r0, sl
 800b2fa:	f7f4 ff89 	bl	8000210 <memchr>
 800b2fe:	b140      	cbz	r0, 800b312 <_svfiprintf_r+0x152>
 800b300:	2340      	movs	r3, #64	; 0x40
 800b302:	eba0 000a 	sub.w	r0, r0, sl
 800b306:	fa03 f000 	lsl.w	r0, r3, r0
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	4303      	orrs	r3, r0
 800b30e:	3401      	adds	r4, #1
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b316:	4826      	ldr	r0, [pc, #152]	; (800b3b0 <_svfiprintf_r+0x1f0>)
 800b318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b31c:	2206      	movs	r2, #6
 800b31e:	f7f4 ff77 	bl	8000210 <memchr>
 800b322:	2800      	cmp	r0, #0
 800b324:	d038      	beq.n	800b398 <_svfiprintf_r+0x1d8>
 800b326:	4b23      	ldr	r3, [pc, #140]	; (800b3b4 <_svfiprintf_r+0x1f4>)
 800b328:	bb1b      	cbnz	r3, 800b372 <_svfiprintf_r+0x1b2>
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	3307      	adds	r3, #7
 800b32e:	f023 0307 	bic.w	r3, r3, #7
 800b332:	3308      	adds	r3, #8
 800b334:	9303      	str	r3, [sp, #12]
 800b336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b338:	4433      	add	r3, r6
 800b33a:	9309      	str	r3, [sp, #36]	; 0x24
 800b33c:	e767      	b.n	800b20e <_svfiprintf_r+0x4e>
 800b33e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b342:	460c      	mov	r4, r1
 800b344:	2001      	movs	r0, #1
 800b346:	e7a5      	b.n	800b294 <_svfiprintf_r+0xd4>
 800b348:	2300      	movs	r3, #0
 800b34a:	3401      	adds	r4, #1
 800b34c:	9305      	str	r3, [sp, #20]
 800b34e:	4619      	mov	r1, r3
 800b350:	f04f 0c0a 	mov.w	ip, #10
 800b354:	4620      	mov	r0, r4
 800b356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35a:	3a30      	subs	r2, #48	; 0x30
 800b35c:	2a09      	cmp	r2, #9
 800b35e:	d903      	bls.n	800b368 <_svfiprintf_r+0x1a8>
 800b360:	2b00      	cmp	r3, #0
 800b362:	d0c5      	beq.n	800b2f0 <_svfiprintf_r+0x130>
 800b364:	9105      	str	r1, [sp, #20]
 800b366:	e7c3      	b.n	800b2f0 <_svfiprintf_r+0x130>
 800b368:	fb0c 2101 	mla	r1, ip, r1, r2
 800b36c:	4604      	mov	r4, r0
 800b36e:	2301      	movs	r3, #1
 800b370:	e7f0      	b.n	800b354 <_svfiprintf_r+0x194>
 800b372:	ab03      	add	r3, sp, #12
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	462a      	mov	r2, r5
 800b378:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <_svfiprintf_r+0x1f8>)
 800b37a:	a904      	add	r1, sp, #16
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7fd ff3b 	bl	80091f8 <_printf_float>
 800b382:	1c42      	adds	r2, r0, #1
 800b384:	4606      	mov	r6, r0
 800b386:	d1d6      	bne.n	800b336 <_svfiprintf_r+0x176>
 800b388:	89ab      	ldrh	r3, [r5, #12]
 800b38a:	065b      	lsls	r3, r3, #25
 800b38c:	f53f af2c 	bmi.w	800b1e8 <_svfiprintf_r+0x28>
 800b390:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b392:	b01d      	add	sp, #116	; 0x74
 800b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b398:	ab03      	add	r3, sp, #12
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	462a      	mov	r2, r5
 800b39e:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <_svfiprintf_r+0x1f8>)
 800b3a0:	a904      	add	r1, sp, #16
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	f7fe f9cc 	bl	8009740 <_printf_i>
 800b3a8:	e7eb      	b.n	800b382 <_svfiprintf_r+0x1c2>
 800b3aa:	bf00      	nop
 800b3ac:	0800d87c 	.word	0x0800d87c
 800b3b0:	0800d886 	.word	0x0800d886
 800b3b4:	080091f9 	.word	0x080091f9
 800b3b8:	0800b109 	.word	0x0800b109
 800b3bc:	0800d882 	.word	0x0800d882

0800b3c0 <_sungetc_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	1c4b      	adds	r3, r1, #1
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	d103      	bne.n	800b3d0 <_sungetc_r+0x10>
 800b3c8:	f04f 35ff 	mov.w	r5, #4294967295
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	8993      	ldrh	r3, [r2, #12]
 800b3d2:	f023 0320 	bic.w	r3, r3, #32
 800b3d6:	8193      	strh	r3, [r2, #12]
 800b3d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3da:	6852      	ldr	r2, [r2, #4]
 800b3dc:	b2cd      	uxtb	r5, r1
 800b3de:	b18b      	cbz	r3, 800b404 <_sungetc_r+0x44>
 800b3e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	dd08      	ble.n	800b3f8 <_sungetc_r+0x38>
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	1e5a      	subs	r2, r3, #1
 800b3ea:	6022      	str	r2, [r4, #0]
 800b3ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b3f0:	6863      	ldr	r3, [r4, #4]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	6063      	str	r3, [r4, #4]
 800b3f6:	e7e9      	b.n	800b3cc <_sungetc_r+0xc>
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	f000 fbc3 	bl	800bb84 <__submore>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d0f1      	beq.n	800b3e6 <_sungetc_r+0x26>
 800b402:	e7e1      	b.n	800b3c8 <_sungetc_r+0x8>
 800b404:	6921      	ldr	r1, [r4, #16]
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	b151      	cbz	r1, 800b420 <_sungetc_r+0x60>
 800b40a:	4299      	cmp	r1, r3
 800b40c:	d208      	bcs.n	800b420 <_sungetc_r+0x60>
 800b40e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b412:	42a9      	cmp	r1, r5
 800b414:	d104      	bne.n	800b420 <_sungetc_r+0x60>
 800b416:	3b01      	subs	r3, #1
 800b418:	3201      	adds	r2, #1
 800b41a:	6023      	str	r3, [r4, #0]
 800b41c:	6062      	str	r2, [r4, #4]
 800b41e:	e7d5      	b.n	800b3cc <_sungetc_r+0xc>
 800b420:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b428:	6363      	str	r3, [r4, #52]	; 0x34
 800b42a:	2303      	movs	r3, #3
 800b42c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b42e:	4623      	mov	r3, r4
 800b430:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	2301      	movs	r3, #1
 800b438:	e7dc      	b.n	800b3f4 <_sungetc_r+0x34>

0800b43a <__ssrefill_r>:
 800b43a:	b510      	push	{r4, lr}
 800b43c:	460c      	mov	r4, r1
 800b43e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b440:	b169      	cbz	r1, 800b45e <__ssrefill_r+0x24>
 800b442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b446:	4299      	cmp	r1, r3
 800b448:	d001      	beq.n	800b44e <__ssrefill_r+0x14>
 800b44a:	f7fd fd55 	bl	8008ef8 <_free_r>
 800b44e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	2000      	movs	r0, #0
 800b454:	6360      	str	r0, [r4, #52]	; 0x34
 800b456:	b113      	cbz	r3, 800b45e <__ssrefill_r+0x24>
 800b458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	2300      	movs	r3, #0
 800b464:	6063      	str	r3, [r4, #4]
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	f043 0320 	orr.w	r3, r3, #32
 800b46c:	81a3      	strh	r3, [r4, #12]
 800b46e:	f04f 30ff 	mov.w	r0, #4294967295
 800b472:	e7f3      	b.n	800b45c <__ssrefill_r+0x22>

0800b474 <__ssvfiscanf_r>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	460c      	mov	r4, r1
 800b47a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b47e:	2100      	movs	r1, #0
 800b480:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b484:	49a6      	ldr	r1, [pc, #664]	; (800b720 <__ssvfiscanf_r+0x2ac>)
 800b486:	91a0      	str	r1, [sp, #640]	; 0x280
 800b488:	f10d 0804 	add.w	r8, sp, #4
 800b48c:	49a5      	ldr	r1, [pc, #660]	; (800b724 <__ssvfiscanf_r+0x2b0>)
 800b48e:	4fa6      	ldr	r7, [pc, #664]	; (800b728 <__ssvfiscanf_r+0x2b4>)
 800b490:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b72c <__ssvfiscanf_r+0x2b8>
 800b494:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b498:	4606      	mov	r6, r0
 800b49a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	7813      	ldrb	r3, [r2, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 815a 	beq.w	800b75a <__ssvfiscanf_r+0x2e6>
 800b4a6:	5dd9      	ldrb	r1, [r3, r7]
 800b4a8:	f011 0108 	ands.w	r1, r1, #8
 800b4ac:	f102 0501 	add.w	r5, r2, #1
 800b4b0:	d019      	beq.n	800b4e6 <__ssvfiscanf_r+0x72>
 800b4b2:	6863      	ldr	r3, [r4, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dd0f      	ble.n	800b4d8 <__ssvfiscanf_r+0x64>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	781a      	ldrb	r2, [r3, #0]
 800b4bc:	5cba      	ldrb	r2, [r7, r2]
 800b4be:	0712      	lsls	r2, r2, #28
 800b4c0:	d401      	bmi.n	800b4c6 <__ssvfiscanf_r+0x52>
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	e7eb      	b.n	800b49e <__ssvfiscanf_r+0x2a>
 800b4c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4c8:	3201      	adds	r2, #1
 800b4ca:	9245      	str	r2, [sp, #276]	; 0x114
 800b4cc:	6862      	ldr	r2, [r4, #4]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	3a01      	subs	r2, #1
 800b4d2:	6062      	str	r2, [r4, #4]
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	e7ec      	b.n	800b4b2 <__ssvfiscanf_r+0x3e>
 800b4d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4798      	blx	r3
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d0e9      	beq.n	800b4b8 <__ssvfiscanf_r+0x44>
 800b4e4:	e7ed      	b.n	800b4c2 <__ssvfiscanf_r+0x4e>
 800b4e6:	2b25      	cmp	r3, #37	; 0x25
 800b4e8:	d012      	beq.n	800b510 <__ssvfiscanf_r+0x9c>
 800b4ea:	469a      	mov	sl, r3
 800b4ec:	6863      	ldr	r3, [r4, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f340 8091 	ble.w	800b616 <__ssvfiscanf_r+0x1a2>
 800b4f4:	6822      	ldr	r2, [r4, #0]
 800b4f6:	7813      	ldrb	r3, [r2, #0]
 800b4f8:	4553      	cmp	r3, sl
 800b4fa:	f040 812e 	bne.w	800b75a <__ssvfiscanf_r+0x2e6>
 800b4fe:	6863      	ldr	r3, [r4, #4]
 800b500:	3b01      	subs	r3, #1
 800b502:	6063      	str	r3, [r4, #4]
 800b504:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b506:	3201      	adds	r2, #1
 800b508:	3301      	adds	r3, #1
 800b50a:	6022      	str	r2, [r4, #0]
 800b50c:	9345      	str	r3, [sp, #276]	; 0x114
 800b50e:	e7d8      	b.n	800b4c2 <__ssvfiscanf_r+0x4e>
 800b510:	9141      	str	r1, [sp, #260]	; 0x104
 800b512:	9143      	str	r1, [sp, #268]	; 0x10c
 800b514:	7853      	ldrb	r3, [r2, #1]
 800b516:	2b2a      	cmp	r3, #42	; 0x2a
 800b518:	bf02      	ittt	eq
 800b51a:	2310      	moveq	r3, #16
 800b51c:	1c95      	addeq	r5, r2, #2
 800b51e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b520:	220a      	movs	r2, #10
 800b522:	46aa      	mov	sl, r5
 800b524:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b528:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b52c:	2b09      	cmp	r3, #9
 800b52e:	d91d      	bls.n	800b56c <__ssvfiscanf_r+0xf8>
 800b530:	487e      	ldr	r0, [pc, #504]	; (800b72c <__ssvfiscanf_r+0x2b8>)
 800b532:	2203      	movs	r2, #3
 800b534:	f7f4 fe6c 	bl	8000210 <memchr>
 800b538:	b140      	cbz	r0, 800b54c <__ssvfiscanf_r+0xd8>
 800b53a:	2301      	movs	r3, #1
 800b53c:	eba0 0009 	sub.w	r0, r0, r9
 800b540:	fa03 f000 	lsl.w	r0, r3, r0
 800b544:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b546:	4318      	orrs	r0, r3
 800b548:	9041      	str	r0, [sp, #260]	; 0x104
 800b54a:	4655      	mov	r5, sl
 800b54c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b550:	2b78      	cmp	r3, #120	; 0x78
 800b552:	d806      	bhi.n	800b562 <__ssvfiscanf_r+0xee>
 800b554:	2b57      	cmp	r3, #87	; 0x57
 800b556:	d810      	bhi.n	800b57a <__ssvfiscanf_r+0x106>
 800b558:	2b25      	cmp	r3, #37	; 0x25
 800b55a:	d0c6      	beq.n	800b4ea <__ssvfiscanf_r+0x76>
 800b55c:	d856      	bhi.n	800b60c <__ssvfiscanf_r+0x198>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d064      	beq.n	800b62c <__ssvfiscanf_r+0x1b8>
 800b562:	2303      	movs	r3, #3
 800b564:	9347      	str	r3, [sp, #284]	; 0x11c
 800b566:	230a      	movs	r3, #10
 800b568:	9342      	str	r3, [sp, #264]	; 0x108
 800b56a:	e071      	b.n	800b650 <__ssvfiscanf_r+0x1dc>
 800b56c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b56e:	fb02 1103 	mla	r1, r2, r3, r1
 800b572:	3930      	subs	r1, #48	; 0x30
 800b574:	9143      	str	r1, [sp, #268]	; 0x10c
 800b576:	4655      	mov	r5, sl
 800b578:	e7d3      	b.n	800b522 <__ssvfiscanf_r+0xae>
 800b57a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b57e:	2a20      	cmp	r2, #32
 800b580:	d8ef      	bhi.n	800b562 <__ssvfiscanf_r+0xee>
 800b582:	a101      	add	r1, pc, #4	; (adr r1, 800b588 <__ssvfiscanf_r+0x114>)
 800b584:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b588:	0800b63b 	.word	0x0800b63b
 800b58c:	0800b563 	.word	0x0800b563
 800b590:	0800b563 	.word	0x0800b563
 800b594:	0800b699 	.word	0x0800b699
 800b598:	0800b563 	.word	0x0800b563
 800b59c:	0800b563 	.word	0x0800b563
 800b5a0:	0800b563 	.word	0x0800b563
 800b5a4:	0800b563 	.word	0x0800b563
 800b5a8:	0800b563 	.word	0x0800b563
 800b5ac:	0800b563 	.word	0x0800b563
 800b5b0:	0800b563 	.word	0x0800b563
 800b5b4:	0800b6af 	.word	0x0800b6af
 800b5b8:	0800b685 	.word	0x0800b685
 800b5bc:	0800b613 	.word	0x0800b613
 800b5c0:	0800b613 	.word	0x0800b613
 800b5c4:	0800b613 	.word	0x0800b613
 800b5c8:	0800b563 	.word	0x0800b563
 800b5cc:	0800b689 	.word	0x0800b689
 800b5d0:	0800b563 	.word	0x0800b563
 800b5d4:	0800b563 	.word	0x0800b563
 800b5d8:	0800b563 	.word	0x0800b563
 800b5dc:	0800b563 	.word	0x0800b563
 800b5e0:	0800b6bf 	.word	0x0800b6bf
 800b5e4:	0800b691 	.word	0x0800b691
 800b5e8:	0800b633 	.word	0x0800b633
 800b5ec:	0800b563 	.word	0x0800b563
 800b5f0:	0800b563 	.word	0x0800b563
 800b5f4:	0800b6bb 	.word	0x0800b6bb
 800b5f8:	0800b563 	.word	0x0800b563
 800b5fc:	0800b685 	.word	0x0800b685
 800b600:	0800b563 	.word	0x0800b563
 800b604:	0800b563 	.word	0x0800b563
 800b608:	0800b63b 	.word	0x0800b63b
 800b60c:	3b45      	subs	r3, #69	; 0x45
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d8a7      	bhi.n	800b562 <__ssvfiscanf_r+0xee>
 800b612:	2305      	movs	r3, #5
 800b614:	e01b      	b.n	800b64e <__ssvfiscanf_r+0x1da>
 800b616:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b618:	4621      	mov	r1, r4
 800b61a:	4630      	mov	r0, r6
 800b61c:	4798      	blx	r3
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f af68 	beq.w	800b4f4 <__ssvfiscanf_r+0x80>
 800b624:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b626:	2800      	cmp	r0, #0
 800b628:	f040 808d 	bne.w	800b746 <__ssvfiscanf_r+0x2d2>
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	e08f      	b.n	800b752 <__ssvfiscanf_r+0x2de>
 800b632:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b634:	f042 0220 	orr.w	r2, r2, #32
 800b638:	9241      	str	r2, [sp, #260]	; 0x104
 800b63a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b63c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b640:	9241      	str	r2, [sp, #260]	; 0x104
 800b642:	2210      	movs	r2, #16
 800b644:	2b6f      	cmp	r3, #111	; 0x6f
 800b646:	9242      	str	r2, [sp, #264]	; 0x108
 800b648:	bf34      	ite	cc
 800b64a:	2303      	movcc	r3, #3
 800b64c:	2304      	movcs	r3, #4
 800b64e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b650:	6863      	ldr	r3, [r4, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	dd42      	ble.n	800b6dc <__ssvfiscanf_r+0x268>
 800b656:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b658:	0659      	lsls	r1, r3, #25
 800b65a:	d404      	bmi.n	800b666 <__ssvfiscanf_r+0x1f2>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	781a      	ldrb	r2, [r3, #0]
 800b660:	5cba      	ldrb	r2, [r7, r2]
 800b662:	0712      	lsls	r2, r2, #28
 800b664:	d441      	bmi.n	800b6ea <__ssvfiscanf_r+0x276>
 800b666:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b668:	2b02      	cmp	r3, #2
 800b66a:	dc50      	bgt.n	800b70e <__ssvfiscanf_r+0x29a>
 800b66c:	466b      	mov	r3, sp
 800b66e:	4622      	mov	r2, r4
 800b670:	a941      	add	r1, sp, #260	; 0x104
 800b672:	4630      	mov	r0, r6
 800b674:	f000 f876 	bl	800b764 <_scanf_chars>
 800b678:	2801      	cmp	r0, #1
 800b67a:	d06e      	beq.n	800b75a <__ssvfiscanf_r+0x2e6>
 800b67c:	2802      	cmp	r0, #2
 800b67e:	f47f af20 	bne.w	800b4c2 <__ssvfiscanf_r+0x4e>
 800b682:	e7cf      	b.n	800b624 <__ssvfiscanf_r+0x1b0>
 800b684:	220a      	movs	r2, #10
 800b686:	e7dd      	b.n	800b644 <__ssvfiscanf_r+0x1d0>
 800b688:	2300      	movs	r3, #0
 800b68a:	9342      	str	r3, [sp, #264]	; 0x108
 800b68c:	2303      	movs	r3, #3
 800b68e:	e7de      	b.n	800b64e <__ssvfiscanf_r+0x1da>
 800b690:	2308      	movs	r3, #8
 800b692:	9342      	str	r3, [sp, #264]	; 0x108
 800b694:	2304      	movs	r3, #4
 800b696:	e7da      	b.n	800b64e <__ssvfiscanf_r+0x1da>
 800b698:	4629      	mov	r1, r5
 800b69a:	4640      	mov	r0, r8
 800b69c:	f000 f9c6 	bl	800ba2c <__sccl>
 800b6a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a6:	9341      	str	r3, [sp, #260]	; 0x104
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e7cf      	b.n	800b64e <__ssvfiscanf_r+0x1da>
 800b6ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b4:	9341      	str	r3, [sp, #260]	; 0x104
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e7c9      	b.n	800b64e <__ssvfiscanf_r+0x1da>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e7c7      	b.n	800b64e <__ssvfiscanf_r+0x1da>
 800b6be:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b6c0:	06c3      	lsls	r3, r0, #27
 800b6c2:	f53f aefe 	bmi.w	800b4c2 <__ssvfiscanf_r+0x4e>
 800b6c6:	9b00      	ldr	r3, [sp, #0]
 800b6c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b6ca:	1d19      	adds	r1, r3, #4
 800b6cc:	9100      	str	r1, [sp, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f010 0f01 	tst.w	r0, #1
 800b6d4:	bf14      	ite	ne
 800b6d6:	801a      	strhne	r2, [r3, #0]
 800b6d8:	601a      	streq	r2, [r3, #0]
 800b6da:	e6f2      	b.n	800b4c2 <__ssvfiscanf_r+0x4e>
 800b6dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4798      	blx	r3
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d0b6      	beq.n	800b656 <__ssvfiscanf_r+0x1e2>
 800b6e8:	e79c      	b.n	800b624 <__ssvfiscanf_r+0x1b0>
 800b6ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	9245      	str	r2, [sp, #276]	; 0x114
 800b6f0:	6862      	ldr	r2, [r4, #4]
 800b6f2:	3a01      	subs	r2, #1
 800b6f4:	2a00      	cmp	r2, #0
 800b6f6:	6062      	str	r2, [r4, #4]
 800b6f8:	dd02      	ble.n	800b700 <__ssvfiscanf_r+0x28c>
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	e7ad      	b.n	800b65c <__ssvfiscanf_r+0x1e8>
 800b700:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b702:	4621      	mov	r1, r4
 800b704:	4630      	mov	r0, r6
 800b706:	4798      	blx	r3
 800b708:	2800      	cmp	r0, #0
 800b70a:	d0a7      	beq.n	800b65c <__ssvfiscanf_r+0x1e8>
 800b70c:	e78a      	b.n	800b624 <__ssvfiscanf_r+0x1b0>
 800b70e:	2b04      	cmp	r3, #4
 800b710:	dc0e      	bgt.n	800b730 <__ssvfiscanf_r+0x2bc>
 800b712:	466b      	mov	r3, sp
 800b714:	4622      	mov	r2, r4
 800b716:	a941      	add	r1, sp, #260	; 0x104
 800b718:	4630      	mov	r0, r6
 800b71a:	f000 f87d 	bl	800b818 <_scanf_i>
 800b71e:	e7ab      	b.n	800b678 <__ssvfiscanf_r+0x204>
 800b720:	0800b3c1 	.word	0x0800b3c1
 800b724:	0800b43b 	.word	0x0800b43b
 800b728:	0800d593 	.word	0x0800d593
 800b72c:	0800d882 	.word	0x0800d882
 800b730:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <__ssvfiscanf_r+0x2ec>)
 800b732:	2b00      	cmp	r3, #0
 800b734:	f43f aec5 	beq.w	800b4c2 <__ssvfiscanf_r+0x4e>
 800b738:	466b      	mov	r3, sp
 800b73a:	4622      	mov	r2, r4
 800b73c:	a941      	add	r1, sp, #260	; 0x104
 800b73e:	4630      	mov	r0, r6
 800b740:	f3af 8000 	nop.w
 800b744:	e798      	b.n	800b678 <__ssvfiscanf_r+0x204>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b74c:	bf18      	it	ne
 800b74e:	f04f 30ff 	movne.w	r0, #4294967295
 800b752:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b75c:	e7f9      	b.n	800b752 <__ssvfiscanf_r+0x2de>
 800b75e:	bf00      	nop
 800b760:	00000000 	.word	0x00000000

0800b764 <_scanf_chars>:
 800b764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b768:	4615      	mov	r5, r2
 800b76a:	688a      	ldr	r2, [r1, #8]
 800b76c:	4680      	mov	r8, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	b932      	cbnz	r2, 800b780 <_scanf_chars+0x1c>
 800b772:	698a      	ldr	r2, [r1, #24]
 800b774:	2a00      	cmp	r2, #0
 800b776:	bf0c      	ite	eq
 800b778:	2201      	moveq	r2, #1
 800b77a:	f04f 32ff 	movne.w	r2, #4294967295
 800b77e:	608a      	str	r2, [r1, #8]
 800b780:	6822      	ldr	r2, [r4, #0]
 800b782:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b814 <_scanf_chars+0xb0>
 800b786:	06d1      	lsls	r1, r2, #27
 800b788:	bf5f      	itttt	pl
 800b78a:	681a      	ldrpl	r2, [r3, #0]
 800b78c:	1d11      	addpl	r1, r2, #4
 800b78e:	6019      	strpl	r1, [r3, #0]
 800b790:	6816      	ldrpl	r6, [r2, #0]
 800b792:	2700      	movs	r7, #0
 800b794:	69a0      	ldr	r0, [r4, #24]
 800b796:	b188      	cbz	r0, 800b7bc <_scanf_chars+0x58>
 800b798:	2801      	cmp	r0, #1
 800b79a:	d107      	bne.n	800b7ac <_scanf_chars+0x48>
 800b79c:	682a      	ldr	r2, [r5, #0]
 800b79e:	7811      	ldrb	r1, [r2, #0]
 800b7a0:	6962      	ldr	r2, [r4, #20]
 800b7a2:	5c52      	ldrb	r2, [r2, r1]
 800b7a4:	b952      	cbnz	r2, 800b7bc <_scanf_chars+0x58>
 800b7a6:	2f00      	cmp	r7, #0
 800b7a8:	d031      	beq.n	800b80e <_scanf_chars+0xaa>
 800b7aa:	e022      	b.n	800b7f2 <_scanf_chars+0x8e>
 800b7ac:	2802      	cmp	r0, #2
 800b7ae:	d120      	bne.n	800b7f2 <_scanf_chars+0x8e>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b7b8:	071b      	lsls	r3, r3, #28
 800b7ba:	d41a      	bmi.n	800b7f2 <_scanf_chars+0x8e>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	06da      	lsls	r2, r3, #27
 800b7c0:	bf5e      	ittt	pl
 800b7c2:	682b      	ldrpl	r3, [r5, #0]
 800b7c4:	781b      	ldrbpl	r3, [r3, #0]
 800b7c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b7ca:	682a      	ldr	r2, [r5, #0]
 800b7cc:	686b      	ldr	r3, [r5, #4]
 800b7ce:	3201      	adds	r2, #1
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	68a2      	ldr	r2, [r4, #8]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	3a01      	subs	r2, #1
 800b7d8:	606b      	str	r3, [r5, #4]
 800b7da:	3701      	adds	r7, #1
 800b7dc:	60a2      	str	r2, [r4, #8]
 800b7de:	b142      	cbz	r2, 800b7f2 <_scanf_chars+0x8e>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dcd7      	bgt.n	800b794 <_scanf_chars+0x30>
 800b7e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4798      	blx	r3
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d0d0      	beq.n	800b794 <_scanf_chars+0x30>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	f013 0310 	ands.w	r3, r3, #16
 800b7f8:	d105      	bne.n	800b806 <_scanf_chars+0xa2>
 800b7fa:	68e2      	ldr	r2, [r4, #12]
 800b7fc:	3201      	adds	r2, #1
 800b7fe:	60e2      	str	r2, [r4, #12]
 800b800:	69a2      	ldr	r2, [r4, #24]
 800b802:	b102      	cbz	r2, 800b806 <_scanf_chars+0xa2>
 800b804:	7033      	strb	r3, [r6, #0]
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	443b      	add	r3, r7
 800b80a:	6123      	str	r3, [r4, #16]
 800b80c:	2000      	movs	r0, #0
 800b80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b812:	bf00      	nop
 800b814:	0800d593 	.word	0x0800d593

0800b818 <_scanf_i>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	4698      	mov	r8, r3
 800b81e:	4b76      	ldr	r3, [pc, #472]	; (800b9f8 <_scanf_i+0x1e0>)
 800b820:	460c      	mov	r4, r1
 800b822:	4682      	mov	sl, r0
 800b824:	4616      	mov	r6, r2
 800b826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b82a:	b087      	sub	sp, #28
 800b82c:	ab03      	add	r3, sp, #12
 800b82e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b832:	4b72      	ldr	r3, [pc, #456]	; (800b9fc <_scanf_i+0x1e4>)
 800b834:	69a1      	ldr	r1, [r4, #24]
 800b836:	4a72      	ldr	r2, [pc, #456]	; (800ba00 <_scanf_i+0x1e8>)
 800b838:	2903      	cmp	r1, #3
 800b83a:	bf18      	it	ne
 800b83c:	461a      	movne	r2, r3
 800b83e:	68a3      	ldr	r3, [r4, #8]
 800b840:	9201      	str	r2, [sp, #4]
 800b842:	1e5a      	subs	r2, r3, #1
 800b844:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b848:	bf88      	it	hi
 800b84a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b84e:	4627      	mov	r7, r4
 800b850:	bf82      	ittt	hi
 800b852:	eb03 0905 	addhi.w	r9, r3, r5
 800b856:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b85a:	60a3      	strhi	r3, [r4, #8]
 800b85c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b860:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b864:	bf98      	it	ls
 800b866:	f04f 0900 	movls.w	r9, #0
 800b86a:	6023      	str	r3, [r4, #0]
 800b86c:	463d      	mov	r5, r7
 800b86e:	f04f 0b00 	mov.w	fp, #0
 800b872:	6831      	ldr	r1, [r6, #0]
 800b874:	ab03      	add	r3, sp, #12
 800b876:	7809      	ldrb	r1, [r1, #0]
 800b878:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b87c:	2202      	movs	r2, #2
 800b87e:	f7f4 fcc7 	bl	8000210 <memchr>
 800b882:	b328      	cbz	r0, 800b8d0 <_scanf_i+0xb8>
 800b884:	f1bb 0f01 	cmp.w	fp, #1
 800b888:	d159      	bne.n	800b93e <_scanf_i+0x126>
 800b88a:	6862      	ldr	r2, [r4, #4]
 800b88c:	b92a      	cbnz	r2, 800b89a <_scanf_i+0x82>
 800b88e:	6822      	ldr	r2, [r4, #0]
 800b890:	2308      	movs	r3, #8
 800b892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b896:	6063      	str	r3, [r4, #4]
 800b898:	6022      	str	r2, [r4, #0]
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b8a0:	6022      	str	r2, [r4, #0]
 800b8a2:	68a2      	ldr	r2, [r4, #8]
 800b8a4:	1e51      	subs	r1, r2, #1
 800b8a6:	60a1      	str	r1, [r4, #8]
 800b8a8:	b192      	cbz	r2, 800b8d0 <_scanf_i+0xb8>
 800b8aa:	6832      	ldr	r2, [r6, #0]
 800b8ac:	1c51      	adds	r1, r2, #1
 800b8ae:	6031      	str	r1, [r6, #0]
 800b8b0:	7812      	ldrb	r2, [r2, #0]
 800b8b2:	f805 2b01 	strb.w	r2, [r5], #1
 800b8b6:	6872      	ldr	r2, [r6, #4]
 800b8b8:	3a01      	subs	r2, #1
 800b8ba:	2a00      	cmp	r2, #0
 800b8bc:	6072      	str	r2, [r6, #4]
 800b8be:	dc07      	bgt.n	800b8d0 <_scanf_i+0xb8>
 800b8c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b8c4:	4631      	mov	r1, r6
 800b8c6:	4650      	mov	r0, sl
 800b8c8:	4790      	blx	r2
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f040 8085 	bne.w	800b9da <_scanf_i+0x1c2>
 800b8d0:	f10b 0b01 	add.w	fp, fp, #1
 800b8d4:	f1bb 0f03 	cmp.w	fp, #3
 800b8d8:	d1cb      	bne.n	800b872 <_scanf_i+0x5a>
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	b90b      	cbnz	r3, 800b8e2 <_scanf_i+0xca>
 800b8de:	230a      	movs	r3, #10
 800b8e0:	6063      	str	r3, [r4, #4]
 800b8e2:	6863      	ldr	r3, [r4, #4]
 800b8e4:	4947      	ldr	r1, [pc, #284]	; (800ba04 <_scanf_i+0x1ec>)
 800b8e6:	6960      	ldr	r0, [r4, #20]
 800b8e8:	1ac9      	subs	r1, r1, r3
 800b8ea:	f000 f89f 	bl	800ba2c <__sccl>
 800b8ee:	f04f 0b00 	mov.w	fp, #0
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	6822      	ldr	r2, [r4, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d03d      	beq.n	800b976 <_scanf_i+0x15e>
 800b8fa:	6831      	ldr	r1, [r6, #0]
 800b8fc:	6960      	ldr	r0, [r4, #20]
 800b8fe:	f891 c000 	ldrb.w	ip, [r1]
 800b902:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b906:	2800      	cmp	r0, #0
 800b908:	d035      	beq.n	800b976 <_scanf_i+0x15e>
 800b90a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b90e:	d124      	bne.n	800b95a <_scanf_i+0x142>
 800b910:	0510      	lsls	r0, r2, #20
 800b912:	d522      	bpl.n	800b95a <_scanf_i+0x142>
 800b914:	f10b 0b01 	add.w	fp, fp, #1
 800b918:	f1b9 0f00 	cmp.w	r9, #0
 800b91c:	d003      	beq.n	800b926 <_scanf_i+0x10e>
 800b91e:	3301      	adds	r3, #1
 800b920:	f109 39ff 	add.w	r9, r9, #4294967295
 800b924:	60a3      	str	r3, [r4, #8]
 800b926:	6873      	ldr	r3, [r6, #4]
 800b928:	3b01      	subs	r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	6073      	str	r3, [r6, #4]
 800b92e:	dd1b      	ble.n	800b968 <_scanf_i+0x150>
 800b930:	6833      	ldr	r3, [r6, #0]
 800b932:	3301      	adds	r3, #1
 800b934:	6033      	str	r3, [r6, #0]
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	3b01      	subs	r3, #1
 800b93a:	60a3      	str	r3, [r4, #8]
 800b93c:	e7d9      	b.n	800b8f2 <_scanf_i+0xda>
 800b93e:	f1bb 0f02 	cmp.w	fp, #2
 800b942:	d1ae      	bne.n	800b8a2 <_scanf_i+0x8a>
 800b944:	6822      	ldr	r2, [r4, #0]
 800b946:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b94a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b94e:	d1bf      	bne.n	800b8d0 <_scanf_i+0xb8>
 800b950:	2310      	movs	r3, #16
 800b952:	6063      	str	r3, [r4, #4]
 800b954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b958:	e7a2      	b.n	800b8a0 <_scanf_i+0x88>
 800b95a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	780b      	ldrb	r3, [r1, #0]
 800b962:	f805 3b01 	strb.w	r3, [r5], #1
 800b966:	e7de      	b.n	800b926 <_scanf_i+0x10e>
 800b968:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b96c:	4631      	mov	r1, r6
 800b96e:	4650      	mov	r0, sl
 800b970:	4798      	blx	r3
 800b972:	2800      	cmp	r0, #0
 800b974:	d0df      	beq.n	800b936 <_scanf_i+0x11e>
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	05db      	lsls	r3, r3, #23
 800b97a:	d50d      	bpl.n	800b998 <_scanf_i+0x180>
 800b97c:	42bd      	cmp	r5, r7
 800b97e:	d909      	bls.n	800b994 <_scanf_i+0x17c>
 800b980:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b984:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b988:	4632      	mov	r2, r6
 800b98a:	4650      	mov	r0, sl
 800b98c:	4798      	blx	r3
 800b98e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b992:	464d      	mov	r5, r9
 800b994:	42bd      	cmp	r5, r7
 800b996:	d02d      	beq.n	800b9f4 <_scanf_i+0x1dc>
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	f012 0210 	ands.w	r2, r2, #16
 800b99e:	d113      	bne.n	800b9c8 <_scanf_i+0x1b0>
 800b9a0:	702a      	strb	r2, [r5, #0]
 800b9a2:	6863      	ldr	r3, [r4, #4]
 800b9a4:	9e01      	ldr	r6, [sp, #4]
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	47b0      	blx	r6
 800b9ac:	6821      	ldr	r1, [r4, #0]
 800b9ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b2:	f011 0f20 	tst.w	r1, #32
 800b9b6:	d013      	beq.n	800b9e0 <_scanf_i+0x1c8>
 800b9b8:	1d1a      	adds	r2, r3, #4
 800b9ba:	f8c8 2000 	str.w	r2, [r8]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6018      	str	r0, [r3, #0]
 800b9c2:	68e3      	ldr	r3, [r4, #12]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	60e3      	str	r3, [r4, #12]
 800b9c8:	1bed      	subs	r5, r5, r7
 800b9ca:	44ab      	add	fp, r5
 800b9cc:	6925      	ldr	r5, [r4, #16]
 800b9ce:	445d      	add	r5, fp
 800b9d0:	6125      	str	r5, [r4, #16]
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	b007      	add	sp, #28
 800b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9da:	f04f 0b00 	mov.w	fp, #0
 800b9de:	e7ca      	b.n	800b976 <_scanf_i+0x15e>
 800b9e0:	1d1a      	adds	r2, r3, #4
 800b9e2:	f8c8 2000 	str.w	r2, [r8]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f011 0f01 	tst.w	r1, #1
 800b9ec:	bf14      	ite	ne
 800b9ee:	8018      	strhne	r0, [r3, #0]
 800b9f0:	6018      	streq	r0, [r3, #0]
 800b9f2:	e7e6      	b.n	800b9c2 <_scanf_i+0x1aa>
 800b9f4:	2001      	movs	r0, #1
 800b9f6:	e7ed      	b.n	800b9d4 <_scanf_i+0x1bc>
 800b9f8:	0800d184 	.word	0x0800d184
 800b9fc:	0800bb81 	.word	0x0800bb81
 800ba00:	08009c25 	.word	0x08009c25
 800ba04:	0800d8a6 	.word	0x0800d8a6

0800ba08 <_read_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_read_r+0x20>)
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4611      	mov	r1, r2
 800ba12:	2200      	movs	r2, #0
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f7f7 f8c6 	bl	8002ba8 <_read>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_read_r+0x1e>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_read_r+0x1e>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	20000598 	.word	0x20000598

0800ba2c <__sccl>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	780b      	ldrb	r3, [r1, #0]
 800ba30:	4604      	mov	r4, r0
 800ba32:	2b5e      	cmp	r3, #94	; 0x5e
 800ba34:	bf0b      	itete	eq
 800ba36:	784b      	ldrbeq	r3, [r1, #1]
 800ba38:	1c48      	addne	r0, r1, #1
 800ba3a:	1c88      	addeq	r0, r1, #2
 800ba3c:	2200      	movne	r2, #0
 800ba3e:	bf08      	it	eq
 800ba40:	2201      	moveq	r2, #1
 800ba42:	1e61      	subs	r1, r4, #1
 800ba44:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ba48:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ba4c:	42a9      	cmp	r1, r5
 800ba4e:	d1fb      	bne.n	800ba48 <__sccl+0x1c>
 800ba50:	b90b      	cbnz	r3, 800ba56 <__sccl+0x2a>
 800ba52:	3801      	subs	r0, #1
 800ba54:	bd70      	pop	{r4, r5, r6, pc}
 800ba56:	f082 0201 	eor.w	r2, r2, #1
 800ba5a:	54e2      	strb	r2, [r4, r3]
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ba64:	292d      	cmp	r1, #45	; 0x2d
 800ba66:	d006      	beq.n	800ba76 <__sccl+0x4a>
 800ba68:	295d      	cmp	r1, #93	; 0x5d
 800ba6a:	d0f3      	beq.n	800ba54 <__sccl+0x28>
 800ba6c:	b909      	cbnz	r1, 800ba72 <__sccl+0x46>
 800ba6e:	4628      	mov	r0, r5
 800ba70:	e7f0      	b.n	800ba54 <__sccl+0x28>
 800ba72:	460b      	mov	r3, r1
 800ba74:	e7f1      	b.n	800ba5a <__sccl+0x2e>
 800ba76:	786e      	ldrb	r6, [r5, #1]
 800ba78:	2e5d      	cmp	r6, #93	; 0x5d
 800ba7a:	d0fa      	beq.n	800ba72 <__sccl+0x46>
 800ba7c:	42b3      	cmp	r3, r6
 800ba7e:	dcf8      	bgt.n	800ba72 <__sccl+0x46>
 800ba80:	3502      	adds	r5, #2
 800ba82:	4619      	mov	r1, r3
 800ba84:	3101      	adds	r1, #1
 800ba86:	428e      	cmp	r6, r1
 800ba88:	5462      	strb	r2, [r4, r1]
 800ba8a:	dcfb      	bgt.n	800ba84 <__sccl+0x58>
 800ba8c:	1af1      	subs	r1, r6, r3
 800ba8e:	3901      	subs	r1, #1
 800ba90:	1c58      	adds	r0, r3, #1
 800ba92:	42b3      	cmp	r3, r6
 800ba94:	bfa8      	it	ge
 800ba96:	2100      	movge	r1, #0
 800ba98:	1843      	adds	r3, r0, r1
 800ba9a:	e7e0      	b.n	800ba5e <__sccl+0x32>

0800ba9c <_strtoul_l.constprop.0>:
 800ba9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baa0:	4f36      	ldr	r7, [pc, #216]	; (800bb7c <_strtoul_l.constprop.0+0xe0>)
 800baa2:	4686      	mov	lr, r0
 800baa4:	460d      	mov	r5, r1
 800baa6:	4628      	mov	r0, r5
 800baa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baac:	5de6      	ldrb	r6, [r4, r7]
 800baae:	f016 0608 	ands.w	r6, r6, #8
 800bab2:	d1f8      	bne.n	800baa6 <_strtoul_l.constprop.0+0xa>
 800bab4:	2c2d      	cmp	r4, #45	; 0x2d
 800bab6:	d12f      	bne.n	800bb18 <_strtoul_l.constprop.0+0x7c>
 800bab8:	782c      	ldrb	r4, [r5, #0]
 800baba:	2601      	movs	r6, #1
 800babc:	1c85      	adds	r5, r0, #2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d057      	beq.n	800bb72 <_strtoul_l.constprop.0+0xd6>
 800bac2:	2b10      	cmp	r3, #16
 800bac4:	d109      	bne.n	800bada <_strtoul_l.constprop.0+0x3e>
 800bac6:	2c30      	cmp	r4, #48	; 0x30
 800bac8:	d107      	bne.n	800bada <_strtoul_l.constprop.0+0x3e>
 800baca:	7828      	ldrb	r0, [r5, #0]
 800bacc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bad0:	2858      	cmp	r0, #88	; 0x58
 800bad2:	d149      	bne.n	800bb68 <_strtoul_l.constprop.0+0xcc>
 800bad4:	786c      	ldrb	r4, [r5, #1]
 800bad6:	2310      	movs	r3, #16
 800bad8:	3502      	adds	r5, #2
 800bada:	f04f 38ff 	mov.w	r8, #4294967295
 800bade:	2700      	movs	r7, #0
 800bae0:	fbb8 f8f3 	udiv	r8, r8, r3
 800bae4:	fb03 f908 	mul.w	r9, r3, r8
 800bae8:	ea6f 0909 	mvn.w	r9, r9
 800baec:	4638      	mov	r0, r7
 800baee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800baf2:	f1bc 0f09 	cmp.w	ip, #9
 800baf6:	d814      	bhi.n	800bb22 <_strtoul_l.constprop.0+0x86>
 800baf8:	4664      	mov	r4, ip
 800bafa:	42a3      	cmp	r3, r4
 800bafc:	dd22      	ble.n	800bb44 <_strtoul_l.constprop.0+0xa8>
 800bafe:	2f00      	cmp	r7, #0
 800bb00:	db1d      	blt.n	800bb3e <_strtoul_l.constprop.0+0xa2>
 800bb02:	4580      	cmp	r8, r0
 800bb04:	d31b      	bcc.n	800bb3e <_strtoul_l.constprop.0+0xa2>
 800bb06:	d101      	bne.n	800bb0c <_strtoul_l.constprop.0+0x70>
 800bb08:	45a1      	cmp	r9, r4
 800bb0a:	db18      	blt.n	800bb3e <_strtoul_l.constprop.0+0xa2>
 800bb0c:	fb00 4003 	mla	r0, r0, r3, r4
 800bb10:	2701      	movs	r7, #1
 800bb12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb16:	e7ea      	b.n	800baee <_strtoul_l.constprop.0+0x52>
 800bb18:	2c2b      	cmp	r4, #43	; 0x2b
 800bb1a:	bf04      	itt	eq
 800bb1c:	782c      	ldrbeq	r4, [r5, #0]
 800bb1e:	1c85      	addeq	r5, r0, #2
 800bb20:	e7cd      	b.n	800babe <_strtoul_l.constprop.0+0x22>
 800bb22:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bb26:	f1bc 0f19 	cmp.w	ip, #25
 800bb2a:	d801      	bhi.n	800bb30 <_strtoul_l.constprop.0+0x94>
 800bb2c:	3c37      	subs	r4, #55	; 0x37
 800bb2e:	e7e4      	b.n	800bafa <_strtoul_l.constprop.0+0x5e>
 800bb30:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bb34:	f1bc 0f19 	cmp.w	ip, #25
 800bb38:	d804      	bhi.n	800bb44 <_strtoul_l.constprop.0+0xa8>
 800bb3a:	3c57      	subs	r4, #87	; 0x57
 800bb3c:	e7dd      	b.n	800bafa <_strtoul_l.constprop.0+0x5e>
 800bb3e:	f04f 37ff 	mov.w	r7, #4294967295
 800bb42:	e7e6      	b.n	800bb12 <_strtoul_l.constprop.0+0x76>
 800bb44:	2f00      	cmp	r7, #0
 800bb46:	da07      	bge.n	800bb58 <_strtoul_l.constprop.0+0xbc>
 800bb48:	2322      	movs	r3, #34	; 0x22
 800bb4a:	f8ce 3000 	str.w	r3, [lr]
 800bb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb52:	b932      	cbnz	r2, 800bb62 <_strtoul_l.constprop.0+0xc6>
 800bb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb58:	b106      	cbz	r6, 800bb5c <_strtoul_l.constprop.0+0xc0>
 800bb5a:	4240      	negs	r0, r0
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	d0f9      	beq.n	800bb54 <_strtoul_l.constprop.0+0xb8>
 800bb60:	b107      	cbz	r7, 800bb64 <_strtoul_l.constprop.0+0xc8>
 800bb62:	1e69      	subs	r1, r5, #1
 800bb64:	6011      	str	r1, [r2, #0]
 800bb66:	e7f5      	b.n	800bb54 <_strtoul_l.constprop.0+0xb8>
 800bb68:	2430      	movs	r4, #48	; 0x30
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1b5      	bne.n	800bada <_strtoul_l.constprop.0+0x3e>
 800bb6e:	2308      	movs	r3, #8
 800bb70:	e7b3      	b.n	800bada <_strtoul_l.constprop.0+0x3e>
 800bb72:	2c30      	cmp	r4, #48	; 0x30
 800bb74:	d0a9      	beq.n	800baca <_strtoul_l.constprop.0+0x2e>
 800bb76:	230a      	movs	r3, #10
 800bb78:	e7af      	b.n	800bada <_strtoul_l.constprop.0+0x3e>
 800bb7a:	bf00      	nop
 800bb7c:	0800d593 	.word	0x0800d593

0800bb80 <_strtoul_r>:
 800bb80:	f7ff bf8c 	b.w	800ba9c <_strtoul_l.constprop.0>

0800bb84 <__submore>:
 800bb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb88:	460c      	mov	r4, r1
 800bb8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb90:	4299      	cmp	r1, r3
 800bb92:	d11d      	bne.n	800bbd0 <__submore+0x4c>
 800bb94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb98:	f7fd fa1a 	bl	8008fd0 <_malloc_r>
 800bb9c:	b918      	cbnz	r0, 800bba6 <__submore+0x22>
 800bb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbaa:	63a3      	str	r3, [r4, #56]	; 0x38
 800bbac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bbb0:	6360      	str	r0, [r4, #52]	; 0x34
 800bbb2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bbb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bbba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bbbe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bbc2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bbc6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bbca:	6020      	str	r0, [r4, #0]
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e7e8      	b.n	800bba2 <__submore+0x1e>
 800bbd0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bbd2:	0077      	lsls	r7, r6, #1
 800bbd4:	463a      	mov	r2, r7
 800bbd6:	f000 fa25 	bl	800c024 <_realloc_r>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d0de      	beq.n	800bb9e <__submore+0x1a>
 800bbe0:	eb00 0806 	add.w	r8, r0, r6
 800bbe4:	4601      	mov	r1, r0
 800bbe6:	4632      	mov	r2, r6
 800bbe8:	4640      	mov	r0, r8
 800bbea:	f7fe fed9 	bl	800a9a0 <memcpy>
 800bbee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bbf2:	f8c4 8000 	str.w	r8, [r4]
 800bbf6:	e7e9      	b.n	800bbcc <__submore+0x48>

0800bbf8 <__assert_func>:
 800bbf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbfa:	4614      	mov	r4, r2
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <__assert_func+0x2c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4605      	mov	r5, r0
 800bc04:	68d8      	ldr	r0, [r3, #12]
 800bc06:	b14c      	cbz	r4, 800bc1c <__assert_func+0x24>
 800bc08:	4b07      	ldr	r3, [pc, #28]	; (800bc28 <__assert_func+0x30>)
 800bc0a:	9100      	str	r1, [sp, #0]
 800bc0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc10:	4906      	ldr	r1, [pc, #24]	; (800bc2c <__assert_func+0x34>)
 800bc12:	462b      	mov	r3, r5
 800bc14:	f000 f9a6 	bl	800bf64 <fiprintf>
 800bc18:	f000 fc5a 	bl	800c4d0 <abort>
 800bc1c:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <__assert_func+0x38>)
 800bc1e:	461c      	mov	r4, r3
 800bc20:	e7f3      	b.n	800bc0a <__assert_func+0x12>
 800bc22:	bf00      	nop
 800bc24:	200000a4 	.word	0x200000a4
 800bc28:	0800d8a8 	.word	0x0800d8a8
 800bc2c:	0800d8b5 	.word	0x0800d8b5
 800bc30:	0800d8e3 	.word	0x0800d8e3

0800bc34 <__sflush_r>:
 800bc34:	898a      	ldrh	r2, [r1, #12]
 800bc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	0710      	lsls	r0, r2, #28
 800bc3e:	460c      	mov	r4, r1
 800bc40:	d458      	bmi.n	800bcf4 <__sflush_r+0xc0>
 800bc42:	684b      	ldr	r3, [r1, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dc05      	bgt.n	800bc54 <__sflush_r+0x20>
 800bc48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dc02      	bgt.n	800bc54 <__sflush_r+0x20>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	d0f9      	beq.n	800bc4e <__sflush_r+0x1a>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc60:	682f      	ldr	r7, [r5, #0]
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	d032      	beq.n	800bccc <__sflush_r+0x98>
 800bc66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	075a      	lsls	r2, r3, #29
 800bc6c:	d505      	bpl.n	800bc7a <__sflush_r+0x46>
 800bc6e:	6863      	ldr	r3, [r4, #4]
 800bc70:	1ac0      	subs	r0, r0, r3
 800bc72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc74:	b10b      	cbz	r3, 800bc7a <__sflush_r+0x46>
 800bc76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc78:	1ac0      	subs	r0, r0, r3
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc80:	6a21      	ldr	r1, [r4, #32]
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b0      	blx	r6
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	d106      	bne.n	800bc9a <__sflush_r+0x66>
 800bc8c:	6829      	ldr	r1, [r5, #0]
 800bc8e:	291d      	cmp	r1, #29
 800bc90:	d82c      	bhi.n	800bcec <__sflush_r+0xb8>
 800bc92:	4a2a      	ldr	r2, [pc, #168]	; (800bd3c <__sflush_r+0x108>)
 800bc94:	40ca      	lsrs	r2, r1
 800bc96:	07d6      	lsls	r6, r2, #31
 800bc98:	d528      	bpl.n	800bcec <__sflush_r+0xb8>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	6062      	str	r2, [r4, #4]
 800bc9e:	04d9      	lsls	r1, r3, #19
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	6022      	str	r2, [r4, #0]
 800bca4:	d504      	bpl.n	800bcb0 <__sflush_r+0x7c>
 800bca6:	1c42      	adds	r2, r0, #1
 800bca8:	d101      	bne.n	800bcae <__sflush_r+0x7a>
 800bcaa:	682b      	ldr	r3, [r5, #0]
 800bcac:	b903      	cbnz	r3, 800bcb0 <__sflush_r+0x7c>
 800bcae:	6560      	str	r0, [r4, #84]	; 0x54
 800bcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb2:	602f      	str	r7, [r5, #0]
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	d0ca      	beq.n	800bc4e <__sflush_r+0x1a>
 800bcb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcbc:	4299      	cmp	r1, r3
 800bcbe:	d002      	beq.n	800bcc6 <__sflush_r+0x92>
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f7fd f919 	bl	8008ef8 <_free_r>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	6360      	str	r0, [r4, #52]	; 0x34
 800bcca:	e7c1      	b.n	800bc50 <__sflush_r+0x1c>
 800bccc:	6a21      	ldr	r1, [r4, #32]
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b0      	blx	r6
 800bcd4:	1c41      	adds	r1, r0, #1
 800bcd6:	d1c7      	bne.n	800bc68 <__sflush_r+0x34>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0c4      	beq.n	800bc68 <__sflush_r+0x34>
 800bcde:	2b1d      	cmp	r3, #29
 800bce0:	d001      	beq.n	800bce6 <__sflush_r+0xb2>
 800bce2:	2b16      	cmp	r3, #22
 800bce4:	d101      	bne.n	800bcea <__sflush_r+0xb6>
 800bce6:	602f      	str	r7, [r5, #0]
 800bce8:	e7b1      	b.n	800bc4e <__sflush_r+0x1a>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf0:	81a3      	strh	r3, [r4, #12]
 800bcf2:	e7ad      	b.n	800bc50 <__sflush_r+0x1c>
 800bcf4:	690f      	ldr	r7, [r1, #16]
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d0a9      	beq.n	800bc4e <__sflush_r+0x1a>
 800bcfa:	0793      	lsls	r3, r2, #30
 800bcfc:	680e      	ldr	r6, [r1, #0]
 800bcfe:	bf08      	it	eq
 800bd00:	694b      	ldreq	r3, [r1, #20]
 800bd02:	600f      	str	r7, [r1, #0]
 800bd04:	bf18      	it	ne
 800bd06:	2300      	movne	r3, #0
 800bd08:	eba6 0807 	sub.w	r8, r6, r7
 800bd0c:	608b      	str	r3, [r1, #8]
 800bd0e:	f1b8 0f00 	cmp.w	r8, #0
 800bd12:	dd9c      	ble.n	800bc4e <__sflush_r+0x1a>
 800bd14:	6a21      	ldr	r1, [r4, #32]
 800bd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd18:	4643      	mov	r3, r8
 800bd1a:	463a      	mov	r2, r7
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b0      	blx	r6
 800bd20:	2800      	cmp	r0, #0
 800bd22:	dc06      	bgt.n	800bd32 <__sflush_r+0xfe>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	e78e      	b.n	800bc50 <__sflush_r+0x1c>
 800bd32:	4407      	add	r7, r0
 800bd34:	eba8 0800 	sub.w	r8, r8, r0
 800bd38:	e7e9      	b.n	800bd0e <__sflush_r+0xda>
 800bd3a:	bf00      	nop
 800bd3c:	20400001 	.word	0x20400001

0800bd40 <_fflush_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	690b      	ldr	r3, [r1, #16]
 800bd44:	4605      	mov	r5, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	b913      	cbnz	r3, 800bd50 <_fflush_r+0x10>
 800bd4a:	2500      	movs	r5, #0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	b118      	cbz	r0, 800bd5a <_fflush_r+0x1a>
 800bd52:	6983      	ldr	r3, [r0, #24]
 800bd54:	b90b      	cbnz	r3, 800bd5a <_fflush_r+0x1a>
 800bd56:	f000 f887 	bl	800be68 <__sinit>
 800bd5a:	4b14      	ldr	r3, [pc, #80]	; (800bdac <_fflush_r+0x6c>)
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d11b      	bne.n	800bd98 <_fflush_r+0x58>
 800bd60:	686c      	ldr	r4, [r5, #4]
 800bd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0ef      	beq.n	800bd4a <_fflush_r+0xa>
 800bd6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd6c:	07d0      	lsls	r0, r2, #31
 800bd6e:	d404      	bmi.n	800bd7a <_fflush_r+0x3a>
 800bd70:	0599      	lsls	r1, r3, #22
 800bd72:	d402      	bmi.n	800bd7a <_fflush_r+0x3a>
 800bd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd76:	f000 f927 	bl	800bfc8 <__retarget_lock_acquire_recursive>
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	f7ff ff59 	bl	800bc34 <__sflush_r>
 800bd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd84:	07da      	lsls	r2, r3, #31
 800bd86:	4605      	mov	r5, r0
 800bd88:	d4e0      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	059b      	lsls	r3, r3, #22
 800bd8e:	d4dd      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd92:	f000 f91a 	bl	800bfca <__retarget_lock_release_recursive>
 800bd96:	e7d9      	b.n	800bd4c <_fflush_r+0xc>
 800bd98:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <_fflush_r+0x70>)
 800bd9a:	429c      	cmp	r4, r3
 800bd9c:	d101      	bne.n	800bda2 <_fflush_r+0x62>
 800bd9e:	68ac      	ldr	r4, [r5, #8]
 800bda0:	e7df      	b.n	800bd62 <_fflush_r+0x22>
 800bda2:	4b04      	ldr	r3, [pc, #16]	; (800bdb4 <_fflush_r+0x74>)
 800bda4:	429c      	cmp	r4, r3
 800bda6:	bf08      	it	eq
 800bda8:	68ec      	ldreq	r4, [r5, #12]
 800bdaa:	e7da      	b.n	800bd62 <_fflush_r+0x22>
 800bdac:	0800d904 	.word	0x0800d904
 800bdb0:	0800d924 	.word	0x0800d924
 800bdb4:	0800d8e4 	.word	0x0800d8e4

0800bdb8 <std>:
 800bdb8:	2300      	movs	r3, #0
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	e9c0 3300 	strd	r3, r3, [r0]
 800bdc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdc6:	6083      	str	r3, [r0, #8]
 800bdc8:	8181      	strh	r1, [r0, #12]
 800bdca:	6643      	str	r3, [r0, #100]	; 0x64
 800bdcc:	81c2      	strh	r2, [r0, #14]
 800bdce:	6183      	str	r3, [r0, #24]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	2208      	movs	r2, #8
 800bdd4:	305c      	adds	r0, #92	; 0x5c
 800bdd6:	f7fd f887 	bl	8008ee8 <memset>
 800bdda:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <std+0x38>)
 800bddc:	6263      	str	r3, [r4, #36]	; 0x24
 800bdde:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <std+0x3c>)
 800bde0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <std+0x40>)
 800bde4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bde6:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <std+0x44>)
 800bde8:	6224      	str	r4, [r4, #32]
 800bdea:	6323      	str	r3, [r4, #48]	; 0x30
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	bf00      	nop
 800bdf0:	08009a45 	.word	0x08009a45
 800bdf4:	08009a6b 	.word	0x08009a6b
 800bdf8:	08009aa3 	.word	0x08009aa3
 800bdfc:	08009ac7 	.word	0x08009ac7

0800be00 <_cleanup_r>:
 800be00:	4901      	ldr	r1, [pc, #4]	; (800be08 <_cleanup_r+0x8>)
 800be02:	f000 b8c1 	b.w	800bf88 <_fwalk_reent>
 800be06:	bf00      	nop
 800be08:	0800bd41 	.word	0x0800bd41

0800be0c <__sfmoreglue>:
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	2268      	movs	r2, #104	; 0x68
 800be10:	1e4d      	subs	r5, r1, #1
 800be12:	4355      	muls	r5, r2
 800be14:	460e      	mov	r6, r1
 800be16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be1a:	f7fd f8d9 	bl	8008fd0 <_malloc_r>
 800be1e:	4604      	mov	r4, r0
 800be20:	b140      	cbz	r0, 800be34 <__sfmoreglue+0x28>
 800be22:	2100      	movs	r1, #0
 800be24:	e9c0 1600 	strd	r1, r6, [r0]
 800be28:	300c      	adds	r0, #12
 800be2a:	60a0      	str	r0, [r4, #8]
 800be2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be30:	f7fd f85a 	bl	8008ee8 <memset>
 800be34:	4620      	mov	r0, r4
 800be36:	bd70      	pop	{r4, r5, r6, pc}

0800be38 <__sfp_lock_acquire>:
 800be38:	4801      	ldr	r0, [pc, #4]	; (800be40 <__sfp_lock_acquire+0x8>)
 800be3a:	f000 b8c5 	b.w	800bfc8 <__retarget_lock_acquire_recursive>
 800be3e:	bf00      	nop
 800be40:	2000059d 	.word	0x2000059d

0800be44 <__sfp_lock_release>:
 800be44:	4801      	ldr	r0, [pc, #4]	; (800be4c <__sfp_lock_release+0x8>)
 800be46:	f000 b8c0 	b.w	800bfca <__retarget_lock_release_recursive>
 800be4a:	bf00      	nop
 800be4c:	2000059d 	.word	0x2000059d

0800be50 <__sinit_lock_acquire>:
 800be50:	4801      	ldr	r0, [pc, #4]	; (800be58 <__sinit_lock_acquire+0x8>)
 800be52:	f000 b8b9 	b.w	800bfc8 <__retarget_lock_acquire_recursive>
 800be56:	bf00      	nop
 800be58:	2000059e 	.word	0x2000059e

0800be5c <__sinit_lock_release>:
 800be5c:	4801      	ldr	r0, [pc, #4]	; (800be64 <__sinit_lock_release+0x8>)
 800be5e:	f000 b8b4 	b.w	800bfca <__retarget_lock_release_recursive>
 800be62:	bf00      	nop
 800be64:	2000059e 	.word	0x2000059e

0800be68 <__sinit>:
 800be68:	b510      	push	{r4, lr}
 800be6a:	4604      	mov	r4, r0
 800be6c:	f7ff fff0 	bl	800be50 <__sinit_lock_acquire>
 800be70:	69a3      	ldr	r3, [r4, #24]
 800be72:	b11b      	cbz	r3, 800be7c <__sinit+0x14>
 800be74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be78:	f7ff bff0 	b.w	800be5c <__sinit_lock_release>
 800be7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be80:	6523      	str	r3, [r4, #80]	; 0x50
 800be82:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <__sinit+0x68>)
 800be84:	4a13      	ldr	r2, [pc, #76]	; (800bed4 <__sinit+0x6c>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	62a2      	str	r2, [r4, #40]	; 0x28
 800be8a:	42a3      	cmp	r3, r4
 800be8c:	bf04      	itt	eq
 800be8e:	2301      	moveq	r3, #1
 800be90:	61a3      	streq	r3, [r4, #24]
 800be92:	4620      	mov	r0, r4
 800be94:	f000 f820 	bl	800bed8 <__sfp>
 800be98:	6060      	str	r0, [r4, #4]
 800be9a:	4620      	mov	r0, r4
 800be9c:	f000 f81c 	bl	800bed8 <__sfp>
 800bea0:	60a0      	str	r0, [r4, #8]
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 f818 	bl	800bed8 <__sfp>
 800bea8:	2200      	movs	r2, #0
 800beaa:	60e0      	str	r0, [r4, #12]
 800beac:	2104      	movs	r1, #4
 800beae:	6860      	ldr	r0, [r4, #4]
 800beb0:	f7ff ff82 	bl	800bdb8 <std>
 800beb4:	68a0      	ldr	r0, [r4, #8]
 800beb6:	2201      	movs	r2, #1
 800beb8:	2109      	movs	r1, #9
 800beba:	f7ff ff7d 	bl	800bdb8 <std>
 800bebe:	68e0      	ldr	r0, [r4, #12]
 800bec0:	2202      	movs	r2, #2
 800bec2:	2112      	movs	r1, #18
 800bec4:	f7ff ff78 	bl	800bdb8 <std>
 800bec8:	2301      	movs	r3, #1
 800beca:	61a3      	str	r3, [r4, #24]
 800becc:	e7d2      	b.n	800be74 <__sinit+0xc>
 800bece:	bf00      	nop
 800bed0:	0800d55c 	.word	0x0800d55c
 800bed4:	0800be01 	.word	0x0800be01

0800bed8 <__sfp>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	4607      	mov	r7, r0
 800bedc:	f7ff ffac 	bl	800be38 <__sfp_lock_acquire>
 800bee0:	4b1e      	ldr	r3, [pc, #120]	; (800bf5c <__sfp+0x84>)
 800bee2:	681e      	ldr	r6, [r3, #0]
 800bee4:	69b3      	ldr	r3, [r6, #24]
 800bee6:	b913      	cbnz	r3, 800beee <__sfp+0x16>
 800bee8:	4630      	mov	r0, r6
 800beea:	f7ff ffbd 	bl	800be68 <__sinit>
 800beee:	3648      	adds	r6, #72	; 0x48
 800bef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	d503      	bpl.n	800bf00 <__sfp+0x28>
 800bef8:	6833      	ldr	r3, [r6, #0]
 800befa:	b30b      	cbz	r3, 800bf40 <__sfp+0x68>
 800befc:	6836      	ldr	r6, [r6, #0]
 800befe:	e7f7      	b.n	800bef0 <__sfp+0x18>
 800bf00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf04:	b9d5      	cbnz	r5, 800bf3c <__sfp+0x64>
 800bf06:	4b16      	ldr	r3, [pc, #88]	; (800bf60 <__sfp+0x88>)
 800bf08:	60e3      	str	r3, [r4, #12]
 800bf0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf0e:	6665      	str	r5, [r4, #100]	; 0x64
 800bf10:	f000 f859 	bl	800bfc6 <__retarget_lock_init_recursive>
 800bf14:	f7ff ff96 	bl	800be44 <__sfp_lock_release>
 800bf18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf20:	6025      	str	r5, [r4, #0]
 800bf22:	61a5      	str	r5, [r4, #24]
 800bf24:	2208      	movs	r2, #8
 800bf26:	4629      	mov	r1, r5
 800bf28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf2c:	f7fc ffdc 	bl	8008ee8 <memset>
 800bf30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf38:	4620      	mov	r0, r4
 800bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf3c:	3468      	adds	r4, #104	; 0x68
 800bf3e:	e7d9      	b.n	800bef4 <__sfp+0x1c>
 800bf40:	2104      	movs	r1, #4
 800bf42:	4638      	mov	r0, r7
 800bf44:	f7ff ff62 	bl	800be0c <__sfmoreglue>
 800bf48:	4604      	mov	r4, r0
 800bf4a:	6030      	str	r0, [r6, #0]
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d1d5      	bne.n	800befc <__sfp+0x24>
 800bf50:	f7ff ff78 	bl	800be44 <__sfp_lock_release>
 800bf54:	230c      	movs	r3, #12
 800bf56:	603b      	str	r3, [r7, #0]
 800bf58:	e7ee      	b.n	800bf38 <__sfp+0x60>
 800bf5a:	bf00      	nop
 800bf5c:	0800d55c 	.word	0x0800d55c
 800bf60:	ffff0001 	.word	0xffff0001

0800bf64 <fiprintf>:
 800bf64:	b40e      	push	{r1, r2, r3}
 800bf66:	b503      	push	{r0, r1, lr}
 800bf68:	4601      	mov	r1, r0
 800bf6a:	ab03      	add	r3, sp, #12
 800bf6c:	4805      	ldr	r0, [pc, #20]	; (800bf84 <fiprintf+0x20>)
 800bf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf72:	6800      	ldr	r0, [r0, #0]
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	f000 f8ad 	bl	800c0d4 <_vfiprintf_r>
 800bf7a:	b002      	add	sp, #8
 800bf7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf80:	b003      	add	sp, #12
 800bf82:	4770      	bx	lr
 800bf84:	200000a4 	.word	0x200000a4

0800bf88 <_fwalk_reent>:
 800bf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	4688      	mov	r8, r1
 800bf90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf94:	2700      	movs	r7, #0
 800bf96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf9a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf9e:	d505      	bpl.n	800bfac <_fwalk_reent+0x24>
 800bfa0:	6824      	ldr	r4, [r4, #0]
 800bfa2:	2c00      	cmp	r4, #0
 800bfa4:	d1f7      	bne.n	800bf96 <_fwalk_reent+0xe>
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfac:	89ab      	ldrh	r3, [r5, #12]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d907      	bls.n	800bfc2 <_fwalk_reent+0x3a>
 800bfb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	d003      	beq.n	800bfc2 <_fwalk_reent+0x3a>
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	47c0      	blx	r8
 800bfc0:	4307      	orrs	r7, r0
 800bfc2:	3568      	adds	r5, #104	; 0x68
 800bfc4:	e7e9      	b.n	800bf9a <_fwalk_reent+0x12>

0800bfc6 <__retarget_lock_init_recursive>:
 800bfc6:	4770      	bx	lr

0800bfc8 <__retarget_lock_acquire_recursive>:
 800bfc8:	4770      	bx	lr

0800bfca <__retarget_lock_release_recursive>:
 800bfca:	4770      	bx	lr

0800bfcc <__ascii_mbtowc>:
 800bfcc:	b082      	sub	sp, #8
 800bfce:	b901      	cbnz	r1, 800bfd2 <__ascii_mbtowc+0x6>
 800bfd0:	a901      	add	r1, sp, #4
 800bfd2:	b142      	cbz	r2, 800bfe6 <__ascii_mbtowc+0x1a>
 800bfd4:	b14b      	cbz	r3, 800bfea <__ascii_mbtowc+0x1e>
 800bfd6:	7813      	ldrb	r3, [r2, #0]
 800bfd8:	600b      	str	r3, [r1, #0]
 800bfda:	7812      	ldrb	r2, [r2, #0]
 800bfdc:	1e10      	subs	r0, r2, #0
 800bfde:	bf18      	it	ne
 800bfe0:	2001      	movne	r0, #1
 800bfe2:	b002      	add	sp, #8
 800bfe4:	4770      	bx	lr
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	e7fb      	b.n	800bfe2 <__ascii_mbtowc+0x16>
 800bfea:	f06f 0001 	mvn.w	r0, #1
 800bfee:	e7f8      	b.n	800bfe2 <__ascii_mbtowc+0x16>

0800bff0 <memmove>:
 800bff0:	4288      	cmp	r0, r1
 800bff2:	b510      	push	{r4, lr}
 800bff4:	eb01 0402 	add.w	r4, r1, r2
 800bff8:	d902      	bls.n	800c000 <memmove+0x10>
 800bffa:	4284      	cmp	r4, r0
 800bffc:	4623      	mov	r3, r4
 800bffe:	d807      	bhi.n	800c010 <memmove+0x20>
 800c000:	1e43      	subs	r3, r0, #1
 800c002:	42a1      	cmp	r1, r4
 800c004:	d008      	beq.n	800c018 <memmove+0x28>
 800c006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c00a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c00e:	e7f8      	b.n	800c002 <memmove+0x12>
 800c010:	4402      	add	r2, r0
 800c012:	4601      	mov	r1, r0
 800c014:	428a      	cmp	r2, r1
 800c016:	d100      	bne.n	800c01a <memmove+0x2a>
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c01e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c022:	e7f7      	b.n	800c014 <memmove+0x24>

0800c024 <_realloc_r>:
 800c024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c028:	4680      	mov	r8, r0
 800c02a:	4614      	mov	r4, r2
 800c02c:	460e      	mov	r6, r1
 800c02e:	b921      	cbnz	r1, 800c03a <_realloc_r+0x16>
 800c030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	4611      	mov	r1, r2
 800c036:	f7fc bfcb 	b.w	8008fd0 <_malloc_r>
 800c03a:	b92a      	cbnz	r2, 800c048 <_realloc_r+0x24>
 800c03c:	f7fc ff5c 	bl	8008ef8 <_free_r>
 800c040:	4625      	mov	r5, r4
 800c042:	4628      	mov	r0, r5
 800c044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c048:	f000 faae 	bl	800c5a8 <_malloc_usable_size_r>
 800c04c:	4284      	cmp	r4, r0
 800c04e:	4607      	mov	r7, r0
 800c050:	d802      	bhi.n	800c058 <_realloc_r+0x34>
 800c052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c056:	d812      	bhi.n	800c07e <_realloc_r+0x5a>
 800c058:	4621      	mov	r1, r4
 800c05a:	4640      	mov	r0, r8
 800c05c:	f7fc ffb8 	bl	8008fd0 <_malloc_r>
 800c060:	4605      	mov	r5, r0
 800c062:	2800      	cmp	r0, #0
 800c064:	d0ed      	beq.n	800c042 <_realloc_r+0x1e>
 800c066:	42bc      	cmp	r4, r7
 800c068:	4622      	mov	r2, r4
 800c06a:	4631      	mov	r1, r6
 800c06c:	bf28      	it	cs
 800c06e:	463a      	movcs	r2, r7
 800c070:	f7fe fc96 	bl	800a9a0 <memcpy>
 800c074:	4631      	mov	r1, r6
 800c076:	4640      	mov	r0, r8
 800c078:	f7fc ff3e 	bl	8008ef8 <_free_r>
 800c07c:	e7e1      	b.n	800c042 <_realloc_r+0x1e>
 800c07e:	4635      	mov	r5, r6
 800c080:	e7df      	b.n	800c042 <_realloc_r+0x1e>

0800c082 <__sfputc_r>:
 800c082:	6893      	ldr	r3, [r2, #8]
 800c084:	3b01      	subs	r3, #1
 800c086:	2b00      	cmp	r3, #0
 800c088:	b410      	push	{r4}
 800c08a:	6093      	str	r3, [r2, #8]
 800c08c:	da08      	bge.n	800c0a0 <__sfputc_r+0x1e>
 800c08e:	6994      	ldr	r4, [r2, #24]
 800c090:	42a3      	cmp	r3, r4
 800c092:	db01      	blt.n	800c098 <__sfputc_r+0x16>
 800c094:	290a      	cmp	r1, #10
 800c096:	d103      	bne.n	800c0a0 <__sfputc_r+0x1e>
 800c098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c09c:	f000 b94a 	b.w	800c334 <__swbuf_r>
 800c0a0:	6813      	ldr	r3, [r2, #0]
 800c0a2:	1c58      	adds	r0, r3, #1
 800c0a4:	6010      	str	r0, [r2, #0]
 800c0a6:	7019      	strb	r1, [r3, #0]
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <__sfputs_r>:
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	4614      	mov	r4, r2
 800c0b8:	18d5      	adds	r5, r2, r3
 800c0ba:	42ac      	cmp	r4, r5
 800c0bc:	d101      	bne.n	800c0c2 <__sfputs_r+0x12>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e007      	b.n	800c0d2 <__sfputs_r+0x22>
 800c0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c6:	463a      	mov	r2, r7
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7ff ffda 	bl	800c082 <__sfputc_r>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	d1f3      	bne.n	800c0ba <__sfputs_r+0xa>
 800c0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c0d4 <_vfiprintf_r>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	460d      	mov	r5, r1
 800c0da:	b09d      	sub	sp, #116	; 0x74
 800c0dc:	4614      	mov	r4, r2
 800c0de:	4698      	mov	r8, r3
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	b118      	cbz	r0, 800c0ec <_vfiprintf_r+0x18>
 800c0e4:	6983      	ldr	r3, [r0, #24]
 800c0e6:	b90b      	cbnz	r3, 800c0ec <_vfiprintf_r+0x18>
 800c0e8:	f7ff febe 	bl	800be68 <__sinit>
 800c0ec:	4b89      	ldr	r3, [pc, #548]	; (800c314 <_vfiprintf_r+0x240>)
 800c0ee:	429d      	cmp	r5, r3
 800c0f0:	d11b      	bne.n	800c12a <_vfiprintf_r+0x56>
 800c0f2:	6875      	ldr	r5, [r6, #4]
 800c0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0f6:	07d9      	lsls	r1, r3, #31
 800c0f8:	d405      	bmi.n	800c106 <_vfiprintf_r+0x32>
 800c0fa:	89ab      	ldrh	r3, [r5, #12]
 800c0fc:	059a      	lsls	r2, r3, #22
 800c0fe:	d402      	bmi.n	800c106 <_vfiprintf_r+0x32>
 800c100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c102:	f7ff ff61 	bl	800bfc8 <__retarget_lock_acquire_recursive>
 800c106:	89ab      	ldrh	r3, [r5, #12]
 800c108:	071b      	lsls	r3, r3, #28
 800c10a:	d501      	bpl.n	800c110 <_vfiprintf_r+0x3c>
 800c10c:	692b      	ldr	r3, [r5, #16]
 800c10e:	b9eb      	cbnz	r3, 800c14c <_vfiprintf_r+0x78>
 800c110:	4629      	mov	r1, r5
 800c112:	4630      	mov	r0, r6
 800c114:	f000 f96e 	bl	800c3f4 <__swsetup_r>
 800c118:	b1c0      	cbz	r0, 800c14c <_vfiprintf_r+0x78>
 800c11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c11c:	07dc      	lsls	r4, r3, #31
 800c11e:	d50e      	bpl.n	800c13e <_vfiprintf_r+0x6a>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	b01d      	add	sp, #116	; 0x74
 800c126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c12a:	4b7b      	ldr	r3, [pc, #492]	; (800c318 <_vfiprintf_r+0x244>)
 800c12c:	429d      	cmp	r5, r3
 800c12e:	d101      	bne.n	800c134 <_vfiprintf_r+0x60>
 800c130:	68b5      	ldr	r5, [r6, #8]
 800c132:	e7df      	b.n	800c0f4 <_vfiprintf_r+0x20>
 800c134:	4b79      	ldr	r3, [pc, #484]	; (800c31c <_vfiprintf_r+0x248>)
 800c136:	429d      	cmp	r5, r3
 800c138:	bf08      	it	eq
 800c13a:	68f5      	ldreq	r5, [r6, #12]
 800c13c:	e7da      	b.n	800c0f4 <_vfiprintf_r+0x20>
 800c13e:	89ab      	ldrh	r3, [r5, #12]
 800c140:	0598      	lsls	r0, r3, #22
 800c142:	d4ed      	bmi.n	800c120 <_vfiprintf_r+0x4c>
 800c144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c146:	f7ff ff40 	bl	800bfca <__retarget_lock_release_recursive>
 800c14a:	e7e9      	b.n	800c120 <_vfiprintf_r+0x4c>
 800c14c:	2300      	movs	r3, #0
 800c14e:	9309      	str	r3, [sp, #36]	; 0x24
 800c150:	2320      	movs	r3, #32
 800c152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c156:	f8cd 800c 	str.w	r8, [sp, #12]
 800c15a:	2330      	movs	r3, #48	; 0x30
 800c15c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c320 <_vfiprintf_r+0x24c>
 800c160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c164:	f04f 0901 	mov.w	r9, #1
 800c168:	4623      	mov	r3, r4
 800c16a:	469a      	mov	sl, r3
 800c16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c170:	b10a      	cbz	r2, 800c176 <_vfiprintf_r+0xa2>
 800c172:	2a25      	cmp	r2, #37	; 0x25
 800c174:	d1f9      	bne.n	800c16a <_vfiprintf_r+0x96>
 800c176:	ebba 0b04 	subs.w	fp, sl, r4
 800c17a:	d00b      	beq.n	800c194 <_vfiprintf_r+0xc0>
 800c17c:	465b      	mov	r3, fp
 800c17e:	4622      	mov	r2, r4
 800c180:	4629      	mov	r1, r5
 800c182:	4630      	mov	r0, r6
 800c184:	f7ff ff94 	bl	800c0b0 <__sfputs_r>
 800c188:	3001      	adds	r0, #1
 800c18a:	f000 80aa 	beq.w	800c2e2 <_vfiprintf_r+0x20e>
 800c18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c190:	445a      	add	r2, fp
 800c192:	9209      	str	r2, [sp, #36]	; 0x24
 800c194:	f89a 3000 	ldrb.w	r3, [sl]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 80a2 	beq.w	800c2e2 <_vfiprintf_r+0x20e>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1a8:	f10a 0a01 	add.w	sl, sl, #1
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	9307      	str	r3, [sp, #28]
 800c1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800c1b6:	4654      	mov	r4, sl
 800c1b8:	2205      	movs	r2, #5
 800c1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1be:	4858      	ldr	r0, [pc, #352]	; (800c320 <_vfiprintf_r+0x24c>)
 800c1c0:	f7f4 f826 	bl	8000210 <memchr>
 800c1c4:	9a04      	ldr	r2, [sp, #16]
 800c1c6:	b9d8      	cbnz	r0, 800c200 <_vfiprintf_r+0x12c>
 800c1c8:	06d1      	lsls	r1, r2, #27
 800c1ca:	bf44      	itt	mi
 800c1cc:	2320      	movmi	r3, #32
 800c1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1d2:	0713      	lsls	r3, r2, #28
 800c1d4:	bf44      	itt	mi
 800c1d6:	232b      	movmi	r3, #43	; 0x2b
 800c1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e2:	d015      	beq.n	800c210 <_vfiprintf_r+0x13c>
 800c1e4:	9a07      	ldr	r2, [sp, #28]
 800c1e6:	4654      	mov	r4, sl
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	f04f 0c0a 	mov.w	ip, #10
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1f4:	3b30      	subs	r3, #48	; 0x30
 800c1f6:	2b09      	cmp	r3, #9
 800c1f8:	d94e      	bls.n	800c298 <_vfiprintf_r+0x1c4>
 800c1fa:	b1b0      	cbz	r0, 800c22a <_vfiprintf_r+0x156>
 800c1fc:	9207      	str	r2, [sp, #28]
 800c1fe:	e014      	b.n	800c22a <_vfiprintf_r+0x156>
 800c200:	eba0 0308 	sub.w	r3, r0, r8
 800c204:	fa09 f303 	lsl.w	r3, r9, r3
 800c208:	4313      	orrs	r3, r2
 800c20a:	9304      	str	r3, [sp, #16]
 800c20c:	46a2      	mov	sl, r4
 800c20e:	e7d2      	b.n	800c1b6 <_vfiprintf_r+0xe2>
 800c210:	9b03      	ldr	r3, [sp, #12]
 800c212:	1d19      	adds	r1, r3, #4
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	9103      	str	r1, [sp, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bfbb      	ittet	lt
 800c21c:	425b      	neglt	r3, r3
 800c21e:	f042 0202 	orrlt.w	r2, r2, #2
 800c222:	9307      	strge	r3, [sp, #28]
 800c224:	9307      	strlt	r3, [sp, #28]
 800c226:	bfb8      	it	lt
 800c228:	9204      	strlt	r2, [sp, #16]
 800c22a:	7823      	ldrb	r3, [r4, #0]
 800c22c:	2b2e      	cmp	r3, #46	; 0x2e
 800c22e:	d10c      	bne.n	800c24a <_vfiprintf_r+0x176>
 800c230:	7863      	ldrb	r3, [r4, #1]
 800c232:	2b2a      	cmp	r3, #42	; 0x2a
 800c234:	d135      	bne.n	800c2a2 <_vfiprintf_r+0x1ce>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	1d1a      	adds	r2, r3, #4
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	9203      	str	r2, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	bfb8      	it	lt
 800c242:	f04f 33ff 	movlt.w	r3, #4294967295
 800c246:	3402      	adds	r4, #2
 800c248:	9305      	str	r3, [sp, #20]
 800c24a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c330 <_vfiprintf_r+0x25c>
 800c24e:	7821      	ldrb	r1, [r4, #0]
 800c250:	2203      	movs	r2, #3
 800c252:	4650      	mov	r0, sl
 800c254:	f7f3 ffdc 	bl	8000210 <memchr>
 800c258:	b140      	cbz	r0, 800c26c <_vfiprintf_r+0x198>
 800c25a:	2340      	movs	r3, #64	; 0x40
 800c25c:	eba0 000a 	sub.w	r0, r0, sl
 800c260:	fa03 f000 	lsl.w	r0, r3, r0
 800c264:	9b04      	ldr	r3, [sp, #16]
 800c266:	4303      	orrs	r3, r0
 800c268:	3401      	adds	r4, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c270:	482c      	ldr	r0, [pc, #176]	; (800c324 <_vfiprintf_r+0x250>)
 800c272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c276:	2206      	movs	r2, #6
 800c278:	f7f3 ffca 	bl	8000210 <memchr>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d03f      	beq.n	800c300 <_vfiprintf_r+0x22c>
 800c280:	4b29      	ldr	r3, [pc, #164]	; (800c328 <_vfiprintf_r+0x254>)
 800c282:	bb1b      	cbnz	r3, 800c2cc <_vfiprintf_r+0x1f8>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	3307      	adds	r3, #7
 800c288:	f023 0307 	bic.w	r3, r3, #7
 800c28c:	3308      	adds	r3, #8
 800c28e:	9303      	str	r3, [sp, #12]
 800c290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c292:	443b      	add	r3, r7
 800c294:	9309      	str	r3, [sp, #36]	; 0x24
 800c296:	e767      	b.n	800c168 <_vfiprintf_r+0x94>
 800c298:	fb0c 3202 	mla	r2, ip, r2, r3
 800c29c:	460c      	mov	r4, r1
 800c29e:	2001      	movs	r0, #1
 800c2a0:	e7a5      	b.n	800c1ee <_vfiprintf_r+0x11a>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	3401      	adds	r4, #1
 800c2a6:	9305      	str	r3, [sp, #20]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	f04f 0c0a 	mov.w	ip, #10
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2b4:	3a30      	subs	r2, #48	; 0x30
 800c2b6:	2a09      	cmp	r2, #9
 800c2b8:	d903      	bls.n	800c2c2 <_vfiprintf_r+0x1ee>
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d0c5      	beq.n	800c24a <_vfiprintf_r+0x176>
 800c2be:	9105      	str	r1, [sp, #20]
 800c2c0:	e7c3      	b.n	800c24a <_vfiprintf_r+0x176>
 800c2c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e7f0      	b.n	800c2ae <_vfiprintf_r+0x1da>
 800c2cc:	ab03      	add	r3, sp, #12
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	462a      	mov	r2, r5
 800c2d2:	4b16      	ldr	r3, [pc, #88]	; (800c32c <_vfiprintf_r+0x258>)
 800c2d4:	a904      	add	r1, sp, #16
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f7fc ff8e 	bl	80091f8 <_printf_float>
 800c2dc:	4607      	mov	r7, r0
 800c2de:	1c78      	adds	r0, r7, #1
 800c2e0:	d1d6      	bne.n	800c290 <_vfiprintf_r+0x1bc>
 800c2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2e4:	07d9      	lsls	r1, r3, #31
 800c2e6:	d405      	bmi.n	800c2f4 <_vfiprintf_r+0x220>
 800c2e8:	89ab      	ldrh	r3, [r5, #12]
 800c2ea:	059a      	lsls	r2, r3, #22
 800c2ec:	d402      	bmi.n	800c2f4 <_vfiprintf_r+0x220>
 800c2ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2f0:	f7ff fe6b 	bl	800bfca <__retarget_lock_release_recursive>
 800c2f4:	89ab      	ldrh	r3, [r5, #12]
 800c2f6:	065b      	lsls	r3, r3, #25
 800c2f8:	f53f af12 	bmi.w	800c120 <_vfiprintf_r+0x4c>
 800c2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2fe:	e711      	b.n	800c124 <_vfiprintf_r+0x50>
 800c300:	ab03      	add	r3, sp, #12
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	462a      	mov	r2, r5
 800c306:	4b09      	ldr	r3, [pc, #36]	; (800c32c <_vfiprintf_r+0x258>)
 800c308:	a904      	add	r1, sp, #16
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7fd fa18 	bl	8009740 <_printf_i>
 800c310:	e7e4      	b.n	800c2dc <_vfiprintf_r+0x208>
 800c312:	bf00      	nop
 800c314:	0800d904 	.word	0x0800d904
 800c318:	0800d924 	.word	0x0800d924
 800c31c:	0800d8e4 	.word	0x0800d8e4
 800c320:	0800d87c 	.word	0x0800d87c
 800c324:	0800d886 	.word	0x0800d886
 800c328:	080091f9 	.word	0x080091f9
 800c32c:	0800c0b1 	.word	0x0800c0b1
 800c330:	0800d882 	.word	0x0800d882

0800c334 <__swbuf_r>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	460e      	mov	r6, r1
 800c338:	4614      	mov	r4, r2
 800c33a:	4605      	mov	r5, r0
 800c33c:	b118      	cbz	r0, 800c346 <__swbuf_r+0x12>
 800c33e:	6983      	ldr	r3, [r0, #24]
 800c340:	b90b      	cbnz	r3, 800c346 <__swbuf_r+0x12>
 800c342:	f7ff fd91 	bl	800be68 <__sinit>
 800c346:	4b21      	ldr	r3, [pc, #132]	; (800c3cc <__swbuf_r+0x98>)
 800c348:	429c      	cmp	r4, r3
 800c34a:	d12b      	bne.n	800c3a4 <__swbuf_r+0x70>
 800c34c:	686c      	ldr	r4, [r5, #4]
 800c34e:	69a3      	ldr	r3, [r4, #24]
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	071a      	lsls	r2, r3, #28
 800c356:	d52f      	bpl.n	800c3b8 <__swbuf_r+0x84>
 800c358:	6923      	ldr	r3, [r4, #16]
 800c35a:	b36b      	cbz	r3, 800c3b8 <__swbuf_r+0x84>
 800c35c:	6923      	ldr	r3, [r4, #16]
 800c35e:	6820      	ldr	r0, [r4, #0]
 800c360:	1ac0      	subs	r0, r0, r3
 800c362:	6963      	ldr	r3, [r4, #20]
 800c364:	b2f6      	uxtb	r6, r6
 800c366:	4283      	cmp	r3, r0
 800c368:	4637      	mov	r7, r6
 800c36a:	dc04      	bgt.n	800c376 <__swbuf_r+0x42>
 800c36c:	4621      	mov	r1, r4
 800c36e:	4628      	mov	r0, r5
 800c370:	f7ff fce6 	bl	800bd40 <_fflush_r>
 800c374:	bb30      	cbnz	r0, 800c3c4 <__swbuf_r+0x90>
 800c376:	68a3      	ldr	r3, [r4, #8]
 800c378:	3b01      	subs	r3, #1
 800c37a:	60a3      	str	r3, [r4, #8]
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	6022      	str	r2, [r4, #0]
 800c382:	701e      	strb	r6, [r3, #0]
 800c384:	6963      	ldr	r3, [r4, #20]
 800c386:	3001      	adds	r0, #1
 800c388:	4283      	cmp	r3, r0
 800c38a:	d004      	beq.n	800c396 <__swbuf_r+0x62>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	07db      	lsls	r3, r3, #31
 800c390:	d506      	bpl.n	800c3a0 <__swbuf_r+0x6c>
 800c392:	2e0a      	cmp	r6, #10
 800c394:	d104      	bne.n	800c3a0 <__swbuf_r+0x6c>
 800c396:	4621      	mov	r1, r4
 800c398:	4628      	mov	r0, r5
 800c39a:	f7ff fcd1 	bl	800bd40 <_fflush_r>
 800c39e:	b988      	cbnz	r0, 800c3c4 <__swbuf_r+0x90>
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a4:	4b0a      	ldr	r3, [pc, #40]	; (800c3d0 <__swbuf_r+0x9c>)
 800c3a6:	429c      	cmp	r4, r3
 800c3a8:	d101      	bne.n	800c3ae <__swbuf_r+0x7a>
 800c3aa:	68ac      	ldr	r4, [r5, #8]
 800c3ac:	e7cf      	b.n	800c34e <__swbuf_r+0x1a>
 800c3ae:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <__swbuf_r+0xa0>)
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	bf08      	it	eq
 800c3b4:	68ec      	ldreq	r4, [r5, #12]
 800c3b6:	e7ca      	b.n	800c34e <__swbuf_r+0x1a>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 f81a 	bl	800c3f4 <__swsetup_r>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d0cb      	beq.n	800c35c <__swbuf_r+0x28>
 800c3c4:	f04f 37ff 	mov.w	r7, #4294967295
 800c3c8:	e7ea      	b.n	800c3a0 <__swbuf_r+0x6c>
 800c3ca:	bf00      	nop
 800c3cc:	0800d904 	.word	0x0800d904
 800c3d0:	0800d924 	.word	0x0800d924
 800c3d4:	0800d8e4 	.word	0x0800d8e4

0800c3d8 <__ascii_wctomb>:
 800c3d8:	b149      	cbz	r1, 800c3ee <__ascii_wctomb+0x16>
 800c3da:	2aff      	cmp	r2, #255	; 0xff
 800c3dc:	bf85      	ittet	hi
 800c3de:	238a      	movhi	r3, #138	; 0x8a
 800c3e0:	6003      	strhi	r3, [r0, #0]
 800c3e2:	700a      	strbls	r2, [r1, #0]
 800c3e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3e8:	bf98      	it	ls
 800c3ea:	2001      	movls	r0, #1
 800c3ec:	4770      	bx	lr
 800c3ee:	4608      	mov	r0, r1
 800c3f0:	4770      	bx	lr
	...

0800c3f4 <__swsetup_r>:
 800c3f4:	4b32      	ldr	r3, [pc, #200]	; (800c4c0 <__swsetup_r+0xcc>)
 800c3f6:	b570      	push	{r4, r5, r6, lr}
 800c3f8:	681d      	ldr	r5, [r3, #0]
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	b125      	cbz	r5, 800c40a <__swsetup_r+0x16>
 800c400:	69ab      	ldr	r3, [r5, #24]
 800c402:	b913      	cbnz	r3, 800c40a <__swsetup_r+0x16>
 800c404:	4628      	mov	r0, r5
 800c406:	f7ff fd2f 	bl	800be68 <__sinit>
 800c40a:	4b2e      	ldr	r3, [pc, #184]	; (800c4c4 <__swsetup_r+0xd0>)
 800c40c:	429c      	cmp	r4, r3
 800c40e:	d10f      	bne.n	800c430 <__swsetup_r+0x3c>
 800c410:	686c      	ldr	r4, [r5, #4]
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c418:	0719      	lsls	r1, r3, #28
 800c41a:	d42c      	bmi.n	800c476 <__swsetup_r+0x82>
 800c41c:	06dd      	lsls	r5, r3, #27
 800c41e:	d411      	bmi.n	800c444 <__swsetup_r+0x50>
 800c420:	2309      	movs	r3, #9
 800c422:	6033      	str	r3, [r6, #0]
 800c424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c428:	81a3      	strh	r3, [r4, #12]
 800c42a:	f04f 30ff 	mov.w	r0, #4294967295
 800c42e:	e03e      	b.n	800c4ae <__swsetup_r+0xba>
 800c430:	4b25      	ldr	r3, [pc, #148]	; (800c4c8 <__swsetup_r+0xd4>)
 800c432:	429c      	cmp	r4, r3
 800c434:	d101      	bne.n	800c43a <__swsetup_r+0x46>
 800c436:	68ac      	ldr	r4, [r5, #8]
 800c438:	e7eb      	b.n	800c412 <__swsetup_r+0x1e>
 800c43a:	4b24      	ldr	r3, [pc, #144]	; (800c4cc <__swsetup_r+0xd8>)
 800c43c:	429c      	cmp	r4, r3
 800c43e:	bf08      	it	eq
 800c440:	68ec      	ldreq	r4, [r5, #12]
 800c442:	e7e6      	b.n	800c412 <__swsetup_r+0x1e>
 800c444:	0758      	lsls	r0, r3, #29
 800c446:	d512      	bpl.n	800c46e <__swsetup_r+0x7a>
 800c448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c44a:	b141      	cbz	r1, 800c45e <__swsetup_r+0x6a>
 800c44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c450:	4299      	cmp	r1, r3
 800c452:	d002      	beq.n	800c45a <__swsetup_r+0x66>
 800c454:	4630      	mov	r0, r6
 800c456:	f7fc fd4f 	bl	8008ef8 <_free_r>
 800c45a:	2300      	movs	r3, #0
 800c45c:	6363      	str	r3, [r4, #52]	; 0x34
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c464:	81a3      	strh	r3, [r4, #12]
 800c466:	2300      	movs	r3, #0
 800c468:	6063      	str	r3, [r4, #4]
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	f043 0308 	orr.w	r3, r3, #8
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	6923      	ldr	r3, [r4, #16]
 800c478:	b94b      	cbnz	r3, 800c48e <__swsetup_r+0x9a>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c484:	d003      	beq.n	800c48e <__swsetup_r+0x9a>
 800c486:	4621      	mov	r1, r4
 800c488:	4630      	mov	r0, r6
 800c48a:	f000 f84d 	bl	800c528 <__smakebuf_r>
 800c48e:	89a0      	ldrh	r0, [r4, #12]
 800c490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c494:	f010 0301 	ands.w	r3, r0, #1
 800c498:	d00a      	beq.n	800c4b0 <__swsetup_r+0xbc>
 800c49a:	2300      	movs	r3, #0
 800c49c:	60a3      	str	r3, [r4, #8]
 800c49e:	6963      	ldr	r3, [r4, #20]
 800c4a0:	425b      	negs	r3, r3
 800c4a2:	61a3      	str	r3, [r4, #24]
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	b943      	cbnz	r3, 800c4ba <__swsetup_r+0xc6>
 800c4a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4ac:	d1ba      	bne.n	800c424 <__swsetup_r+0x30>
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
 800c4b0:	0781      	lsls	r1, r0, #30
 800c4b2:	bf58      	it	pl
 800c4b4:	6963      	ldrpl	r3, [r4, #20]
 800c4b6:	60a3      	str	r3, [r4, #8]
 800c4b8:	e7f4      	b.n	800c4a4 <__swsetup_r+0xb0>
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	e7f7      	b.n	800c4ae <__swsetup_r+0xba>
 800c4be:	bf00      	nop
 800c4c0:	200000a4 	.word	0x200000a4
 800c4c4:	0800d904 	.word	0x0800d904
 800c4c8:	0800d924 	.word	0x0800d924
 800c4cc:	0800d8e4 	.word	0x0800d8e4

0800c4d0 <abort>:
 800c4d0:	b508      	push	{r3, lr}
 800c4d2:	2006      	movs	r0, #6
 800c4d4:	f000 f898 	bl	800c608 <raise>
 800c4d8:	2001      	movs	r0, #1
 800c4da:	f7f6 fb5b 	bl	8002b94 <_exit>

0800c4de <__swhatbuf_r>:
 800c4de:	b570      	push	{r4, r5, r6, lr}
 800c4e0:	460e      	mov	r6, r1
 800c4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	b096      	sub	sp, #88	; 0x58
 800c4ea:	4614      	mov	r4, r2
 800c4ec:	461d      	mov	r5, r3
 800c4ee:	da08      	bge.n	800c502 <__swhatbuf_r+0x24>
 800c4f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	602a      	str	r2, [r5, #0]
 800c4f8:	061a      	lsls	r2, r3, #24
 800c4fa:	d410      	bmi.n	800c51e <__swhatbuf_r+0x40>
 800c4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c500:	e00e      	b.n	800c520 <__swhatbuf_r+0x42>
 800c502:	466a      	mov	r2, sp
 800c504:	f000 f89c 	bl	800c640 <_fstat_r>
 800c508:	2800      	cmp	r0, #0
 800c50a:	dbf1      	blt.n	800c4f0 <__swhatbuf_r+0x12>
 800c50c:	9a01      	ldr	r2, [sp, #4]
 800c50e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c516:	425a      	negs	r2, r3
 800c518:	415a      	adcs	r2, r3
 800c51a:	602a      	str	r2, [r5, #0]
 800c51c:	e7ee      	b.n	800c4fc <__swhatbuf_r+0x1e>
 800c51e:	2340      	movs	r3, #64	; 0x40
 800c520:	2000      	movs	r0, #0
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	b016      	add	sp, #88	; 0x58
 800c526:	bd70      	pop	{r4, r5, r6, pc}

0800c528 <__smakebuf_r>:
 800c528:	898b      	ldrh	r3, [r1, #12]
 800c52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c52c:	079d      	lsls	r5, r3, #30
 800c52e:	4606      	mov	r6, r0
 800c530:	460c      	mov	r4, r1
 800c532:	d507      	bpl.n	800c544 <__smakebuf_r+0x1c>
 800c534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	6123      	str	r3, [r4, #16]
 800c53c:	2301      	movs	r3, #1
 800c53e:	6163      	str	r3, [r4, #20]
 800c540:	b002      	add	sp, #8
 800c542:	bd70      	pop	{r4, r5, r6, pc}
 800c544:	ab01      	add	r3, sp, #4
 800c546:	466a      	mov	r2, sp
 800c548:	f7ff ffc9 	bl	800c4de <__swhatbuf_r>
 800c54c:	9900      	ldr	r1, [sp, #0]
 800c54e:	4605      	mov	r5, r0
 800c550:	4630      	mov	r0, r6
 800c552:	f7fc fd3d 	bl	8008fd0 <_malloc_r>
 800c556:	b948      	cbnz	r0, 800c56c <__smakebuf_r+0x44>
 800c558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c55c:	059a      	lsls	r2, r3, #22
 800c55e:	d4ef      	bmi.n	800c540 <__smakebuf_r+0x18>
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	f043 0302 	orr.w	r3, r3, #2
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	e7e3      	b.n	800c534 <__smakebuf_r+0xc>
 800c56c:	4b0d      	ldr	r3, [pc, #52]	; (800c5a4 <__smakebuf_r+0x7c>)
 800c56e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	6020      	str	r0, [r4, #0]
 800c574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c578:	81a3      	strh	r3, [r4, #12]
 800c57a:	9b00      	ldr	r3, [sp, #0]
 800c57c:	6163      	str	r3, [r4, #20]
 800c57e:	9b01      	ldr	r3, [sp, #4]
 800c580:	6120      	str	r0, [r4, #16]
 800c582:	b15b      	cbz	r3, 800c59c <__smakebuf_r+0x74>
 800c584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c588:	4630      	mov	r0, r6
 800c58a:	f000 f86b 	bl	800c664 <_isatty_r>
 800c58e:	b128      	cbz	r0, 800c59c <__smakebuf_r+0x74>
 800c590:	89a3      	ldrh	r3, [r4, #12]
 800c592:	f023 0303 	bic.w	r3, r3, #3
 800c596:	f043 0301 	orr.w	r3, r3, #1
 800c59a:	81a3      	strh	r3, [r4, #12]
 800c59c:	89a0      	ldrh	r0, [r4, #12]
 800c59e:	4305      	orrs	r5, r0
 800c5a0:	81a5      	strh	r5, [r4, #12]
 800c5a2:	e7cd      	b.n	800c540 <__smakebuf_r+0x18>
 800c5a4:	0800be01 	.word	0x0800be01

0800c5a8 <_malloc_usable_size_r>:
 800c5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ac:	1f18      	subs	r0, r3, #4
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	bfbc      	itt	lt
 800c5b2:	580b      	ldrlt	r3, [r1, r0]
 800c5b4:	18c0      	addlt	r0, r0, r3
 800c5b6:	4770      	bx	lr

0800c5b8 <_raise_r>:
 800c5b8:	291f      	cmp	r1, #31
 800c5ba:	b538      	push	{r3, r4, r5, lr}
 800c5bc:	4604      	mov	r4, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	d904      	bls.n	800c5cc <_raise_r+0x14>
 800c5c2:	2316      	movs	r3, #22
 800c5c4:	6003      	str	r3, [r0, #0]
 800c5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5ce:	b112      	cbz	r2, 800c5d6 <_raise_r+0x1e>
 800c5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5d4:	b94b      	cbnz	r3, 800c5ea <_raise_r+0x32>
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 f830 	bl	800c63c <_getpid_r>
 800c5dc:	462a      	mov	r2, r5
 800c5de:	4601      	mov	r1, r0
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5e6:	f000 b817 	b.w	800c618 <_kill_r>
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d00a      	beq.n	800c604 <_raise_r+0x4c>
 800c5ee:	1c59      	adds	r1, r3, #1
 800c5f0:	d103      	bne.n	800c5fa <_raise_r+0x42>
 800c5f2:	2316      	movs	r3, #22
 800c5f4:	6003      	str	r3, [r0, #0]
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	e7e7      	b.n	800c5ca <_raise_r+0x12>
 800c5fa:	2400      	movs	r4, #0
 800c5fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c600:	4628      	mov	r0, r5
 800c602:	4798      	blx	r3
 800c604:	2000      	movs	r0, #0
 800c606:	e7e0      	b.n	800c5ca <_raise_r+0x12>

0800c608 <raise>:
 800c608:	4b02      	ldr	r3, [pc, #8]	; (800c614 <raise+0xc>)
 800c60a:	4601      	mov	r1, r0
 800c60c:	6818      	ldr	r0, [r3, #0]
 800c60e:	f7ff bfd3 	b.w	800c5b8 <_raise_r>
 800c612:	bf00      	nop
 800c614:	200000a4 	.word	0x200000a4

0800c618 <_kill_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4d07      	ldr	r5, [pc, #28]	; (800c638 <_kill_r+0x20>)
 800c61c:	2300      	movs	r3, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	4611      	mov	r1, r2
 800c624:	602b      	str	r3, [r5, #0]
 800c626:	f7f6 faa5 	bl	8002b74 <_kill>
 800c62a:	1c43      	adds	r3, r0, #1
 800c62c:	d102      	bne.n	800c634 <_kill_r+0x1c>
 800c62e:	682b      	ldr	r3, [r5, #0]
 800c630:	b103      	cbz	r3, 800c634 <_kill_r+0x1c>
 800c632:	6023      	str	r3, [r4, #0]
 800c634:	bd38      	pop	{r3, r4, r5, pc}
 800c636:	bf00      	nop
 800c638:	20000598 	.word	0x20000598

0800c63c <_getpid_r>:
 800c63c:	f7f6 ba92 	b.w	8002b64 <_getpid>

0800c640 <_fstat_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d07      	ldr	r5, [pc, #28]	; (800c660 <_fstat_r+0x20>)
 800c644:	2300      	movs	r3, #0
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	4611      	mov	r1, r2
 800c64c:	602b      	str	r3, [r5, #0]
 800c64e:	f7f6 faf0 	bl	8002c32 <_fstat>
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	d102      	bne.n	800c65c <_fstat_r+0x1c>
 800c656:	682b      	ldr	r3, [r5, #0]
 800c658:	b103      	cbz	r3, 800c65c <_fstat_r+0x1c>
 800c65a:	6023      	str	r3, [r4, #0]
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
 800c65e:	bf00      	nop
 800c660:	20000598 	.word	0x20000598

0800c664 <_isatty_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4d06      	ldr	r5, [pc, #24]	; (800c680 <_isatty_r+0x1c>)
 800c668:	2300      	movs	r3, #0
 800c66a:	4604      	mov	r4, r0
 800c66c:	4608      	mov	r0, r1
 800c66e:	602b      	str	r3, [r5, #0]
 800c670:	f7f6 faef 	bl	8002c52 <_isatty>
 800c674:	1c43      	adds	r3, r0, #1
 800c676:	d102      	bne.n	800c67e <_isatty_r+0x1a>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	b103      	cbz	r3, 800c67e <_isatty_r+0x1a>
 800c67c:	6023      	str	r3, [r4, #0]
 800c67e:	bd38      	pop	{r3, r4, r5, pc}
 800c680:	20000598 	.word	0x20000598
 800c684:	00000000 	.word	0x00000000

0800c688 <atan>:
 800c688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	ec55 4b10 	vmov	r4, r5, d0
 800c690:	4bc3      	ldr	r3, [pc, #780]	; (800c9a0 <atan+0x318>)
 800c692:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c696:	429e      	cmp	r6, r3
 800c698:	46ab      	mov	fp, r5
 800c69a:	dd18      	ble.n	800c6ce <atan+0x46>
 800c69c:	4bc1      	ldr	r3, [pc, #772]	; (800c9a4 <atan+0x31c>)
 800c69e:	429e      	cmp	r6, r3
 800c6a0:	dc01      	bgt.n	800c6a6 <atan+0x1e>
 800c6a2:	d109      	bne.n	800c6b8 <atan+0x30>
 800c6a4:	b144      	cbz	r4, 800c6b8 <atan+0x30>
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	462b      	mov	r3, r5
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	f7f3 fe05 	bl	80002bc <__adddf3>
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	e006      	b.n	800c6c6 <atan+0x3e>
 800c6b8:	f1bb 0f00 	cmp.w	fp, #0
 800c6bc:	f300 8131 	bgt.w	800c922 <atan+0x29a>
 800c6c0:	a59b      	add	r5, pc, #620	; (adr r5, 800c930 <atan+0x2a8>)
 800c6c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6c6:	ec45 4b10 	vmov	d0, r4, r5
 800c6ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ce:	4bb6      	ldr	r3, [pc, #728]	; (800c9a8 <atan+0x320>)
 800c6d0:	429e      	cmp	r6, r3
 800c6d2:	dc14      	bgt.n	800c6fe <atan+0x76>
 800c6d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c6d8:	429e      	cmp	r6, r3
 800c6da:	dc0d      	bgt.n	800c6f8 <atan+0x70>
 800c6dc:	a396      	add	r3, pc, #600	; (adr r3, 800c938 <atan+0x2b0>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	ee10 0a10 	vmov	r0, s0
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f7f3 fde8 	bl	80002bc <__adddf3>
 800c6ec:	4baf      	ldr	r3, [pc, #700]	; (800c9ac <atan+0x324>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f7f4 fa2a 	bl	8000b48 <__aeabi_dcmpgt>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d1e6      	bne.n	800c6c6 <atan+0x3e>
 800c6f8:	f04f 3aff 	mov.w	sl, #4294967295
 800c6fc:	e02b      	b.n	800c756 <atan+0xce>
 800c6fe:	f000 f963 	bl	800c9c8 <fabs>
 800c702:	4bab      	ldr	r3, [pc, #684]	; (800c9b0 <atan+0x328>)
 800c704:	429e      	cmp	r6, r3
 800c706:	ec55 4b10 	vmov	r4, r5, d0
 800c70a:	f300 80bf 	bgt.w	800c88c <atan+0x204>
 800c70e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c712:	429e      	cmp	r6, r3
 800c714:	f300 80a0 	bgt.w	800c858 <atan+0x1d0>
 800c718:	ee10 2a10 	vmov	r2, s0
 800c71c:	ee10 0a10 	vmov	r0, s0
 800c720:	462b      	mov	r3, r5
 800c722:	4629      	mov	r1, r5
 800c724:	f7f3 fdca 	bl	80002bc <__adddf3>
 800c728:	4ba0      	ldr	r3, [pc, #640]	; (800c9ac <atan+0x324>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	f7f3 fdc4 	bl	80002b8 <__aeabi_dsub>
 800c730:	2200      	movs	r2, #0
 800c732:	4606      	mov	r6, r0
 800c734:	460f      	mov	r7, r1
 800c736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c73a:	4620      	mov	r0, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	f7f3 fdbd 	bl	80002bc <__adddf3>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4630      	mov	r0, r6
 800c748:	4639      	mov	r1, r7
 800c74a:	f7f4 f897 	bl	800087c <__aeabi_ddiv>
 800c74e:	f04f 0a00 	mov.w	sl, #0
 800c752:	4604      	mov	r4, r0
 800c754:	460d      	mov	r5, r1
 800c756:	4622      	mov	r2, r4
 800c758:	462b      	mov	r3, r5
 800c75a:	4620      	mov	r0, r4
 800c75c:	4629      	mov	r1, r5
 800c75e:	f7f3 ff63 	bl	8000628 <__aeabi_dmul>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	4680      	mov	r8, r0
 800c768:	4689      	mov	r9, r1
 800c76a:	f7f3 ff5d 	bl	8000628 <__aeabi_dmul>
 800c76e:	a374      	add	r3, pc, #464	; (adr r3, 800c940 <atan+0x2b8>)
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	4606      	mov	r6, r0
 800c776:	460f      	mov	r7, r1
 800c778:	f7f3 ff56 	bl	8000628 <__aeabi_dmul>
 800c77c:	a372      	add	r3, pc, #456	; (adr r3, 800c948 <atan+0x2c0>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	f7f3 fd9b 	bl	80002bc <__adddf3>
 800c786:	4632      	mov	r2, r6
 800c788:	463b      	mov	r3, r7
 800c78a:	f7f3 ff4d 	bl	8000628 <__aeabi_dmul>
 800c78e:	a370      	add	r3, pc, #448	; (adr r3, 800c950 <atan+0x2c8>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 fd92 	bl	80002bc <__adddf3>
 800c798:	4632      	mov	r2, r6
 800c79a:	463b      	mov	r3, r7
 800c79c:	f7f3 ff44 	bl	8000628 <__aeabi_dmul>
 800c7a0:	a36d      	add	r3, pc, #436	; (adr r3, 800c958 <atan+0x2d0>)
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	f7f3 fd89 	bl	80002bc <__adddf3>
 800c7aa:	4632      	mov	r2, r6
 800c7ac:	463b      	mov	r3, r7
 800c7ae:	f7f3 ff3b 	bl	8000628 <__aeabi_dmul>
 800c7b2:	a36b      	add	r3, pc, #428	; (adr r3, 800c960 <atan+0x2d8>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	f7f3 fd80 	bl	80002bc <__adddf3>
 800c7bc:	4632      	mov	r2, r6
 800c7be:	463b      	mov	r3, r7
 800c7c0:	f7f3 ff32 	bl	8000628 <__aeabi_dmul>
 800c7c4:	a368      	add	r3, pc, #416	; (adr r3, 800c968 <atan+0x2e0>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd77 	bl	80002bc <__adddf3>
 800c7ce:	4642      	mov	r2, r8
 800c7d0:	464b      	mov	r3, r9
 800c7d2:	f7f3 ff29 	bl	8000628 <__aeabi_dmul>
 800c7d6:	a366      	add	r3, pc, #408	; (adr r3, 800c970 <atan+0x2e8>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	4680      	mov	r8, r0
 800c7de:	4689      	mov	r9, r1
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f3 ff20 	bl	8000628 <__aeabi_dmul>
 800c7e8:	a363      	add	r3, pc, #396	; (adr r3, 800c978 <atan+0x2f0>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 fd63 	bl	80002b8 <__aeabi_dsub>
 800c7f2:	4632      	mov	r2, r6
 800c7f4:	463b      	mov	r3, r7
 800c7f6:	f7f3 ff17 	bl	8000628 <__aeabi_dmul>
 800c7fa:	a361      	add	r3, pc, #388	; (adr r3, 800c980 <atan+0x2f8>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f7f3 fd5a 	bl	80002b8 <__aeabi_dsub>
 800c804:	4632      	mov	r2, r6
 800c806:	463b      	mov	r3, r7
 800c808:	f7f3 ff0e 	bl	8000628 <__aeabi_dmul>
 800c80c:	a35e      	add	r3, pc, #376	; (adr r3, 800c988 <atan+0x300>)
 800c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c812:	f7f3 fd51 	bl	80002b8 <__aeabi_dsub>
 800c816:	4632      	mov	r2, r6
 800c818:	463b      	mov	r3, r7
 800c81a:	f7f3 ff05 	bl	8000628 <__aeabi_dmul>
 800c81e:	a35c      	add	r3, pc, #368	; (adr r3, 800c990 <atan+0x308>)
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	f7f3 fd48 	bl	80002b8 <__aeabi_dsub>
 800c828:	4632      	mov	r2, r6
 800c82a:	463b      	mov	r3, r7
 800c82c:	f7f3 fefc 	bl	8000628 <__aeabi_dmul>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4640      	mov	r0, r8
 800c836:	4649      	mov	r1, r9
 800c838:	f7f3 fd40 	bl	80002bc <__adddf3>
 800c83c:	4622      	mov	r2, r4
 800c83e:	462b      	mov	r3, r5
 800c840:	f7f3 fef2 	bl	8000628 <__aeabi_dmul>
 800c844:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	d14b      	bne.n	800c8e6 <atan+0x25e>
 800c84e:	4620      	mov	r0, r4
 800c850:	4629      	mov	r1, r5
 800c852:	f7f3 fd31 	bl	80002b8 <__aeabi_dsub>
 800c856:	e72c      	b.n	800c6b2 <atan+0x2a>
 800c858:	ee10 0a10 	vmov	r0, s0
 800c85c:	4b53      	ldr	r3, [pc, #332]	; (800c9ac <atan+0x324>)
 800c85e:	2200      	movs	r2, #0
 800c860:	4629      	mov	r1, r5
 800c862:	f7f3 fd29 	bl	80002b8 <__aeabi_dsub>
 800c866:	4b51      	ldr	r3, [pc, #324]	; (800c9ac <atan+0x324>)
 800c868:	4606      	mov	r6, r0
 800c86a:	460f      	mov	r7, r1
 800c86c:	2200      	movs	r2, #0
 800c86e:	4620      	mov	r0, r4
 800c870:	4629      	mov	r1, r5
 800c872:	f7f3 fd23 	bl	80002bc <__adddf3>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4630      	mov	r0, r6
 800c87c:	4639      	mov	r1, r7
 800c87e:	f7f3 fffd 	bl	800087c <__aeabi_ddiv>
 800c882:	f04f 0a01 	mov.w	sl, #1
 800c886:	4604      	mov	r4, r0
 800c888:	460d      	mov	r5, r1
 800c88a:	e764      	b.n	800c756 <atan+0xce>
 800c88c:	4b49      	ldr	r3, [pc, #292]	; (800c9b4 <atan+0x32c>)
 800c88e:	429e      	cmp	r6, r3
 800c890:	da1d      	bge.n	800c8ce <atan+0x246>
 800c892:	ee10 0a10 	vmov	r0, s0
 800c896:	4b48      	ldr	r3, [pc, #288]	; (800c9b8 <atan+0x330>)
 800c898:	2200      	movs	r2, #0
 800c89a:	4629      	mov	r1, r5
 800c89c:	f7f3 fd0c 	bl	80002b8 <__aeabi_dsub>
 800c8a0:	4b45      	ldr	r3, [pc, #276]	; (800c9b8 <atan+0x330>)
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	460f      	mov	r7, r1
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	f7f3 febc 	bl	8000628 <__aeabi_dmul>
 800c8b0:	4b3e      	ldr	r3, [pc, #248]	; (800c9ac <atan+0x324>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f7f3 fd02 	bl	80002bc <__adddf3>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f3 ffdc 	bl	800087c <__aeabi_ddiv>
 800c8c4:	f04f 0a02 	mov.w	sl, #2
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	e743      	b.n	800c756 <atan+0xce>
 800c8ce:	462b      	mov	r3, r5
 800c8d0:	ee10 2a10 	vmov	r2, s0
 800c8d4:	4939      	ldr	r1, [pc, #228]	; (800c9bc <atan+0x334>)
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	f7f3 ffd0 	bl	800087c <__aeabi_ddiv>
 800c8dc:	f04f 0a03 	mov.w	sl, #3
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	e737      	b.n	800c756 <atan+0xce>
 800c8e6:	4b36      	ldr	r3, [pc, #216]	; (800c9c0 <atan+0x338>)
 800c8e8:	4e36      	ldr	r6, [pc, #216]	; (800c9c4 <atan+0x33c>)
 800c8ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c8ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c8f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c8f6:	f7f3 fcdf 	bl	80002b8 <__aeabi_dsub>
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	f7f3 fcdb 	bl	80002b8 <__aeabi_dsub>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c90a:	f7f3 fcd5 	bl	80002b8 <__aeabi_dsub>
 800c90e:	f1bb 0f00 	cmp.w	fp, #0
 800c912:	4604      	mov	r4, r0
 800c914:	460d      	mov	r5, r1
 800c916:	f6bf aed6 	bge.w	800c6c6 <atan+0x3e>
 800c91a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c91e:	461d      	mov	r5, r3
 800c920:	e6d1      	b.n	800c6c6 <atan+0x3e>
 800c922:	a51d      	add	r5, pc, #116	; (adr r5, 800c998 <atan+0x310>)
 800c924:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c928:	e6cd      	b.n	800c6c6 <atan+0x3e>
 800c92a:	bf00      	nop
 800c92c:	f3af 8000 	nop.w
 800c930:	54442d18 	.word	0x54442d18
 800c934:	bff921fb 	.word	0xbff921fb
 800c938:	8800759c 	.word	0x8800759c
 800c93c:	7e37e43c 	.word	0x7e37e43c
 800c940:	e322da11 	.word	0xe322da11
 800c944:	3f90ad3a 	.word	0x3f90ad3a
 800c948:	24760deb 	.word	0x24760deb
 800c94c:	3fa97b4b 	.word	0x3fa97b4b
 800c950:	a0d03d51 	.word	0xa0d03d51
 800c954:	3fb10d66 	.word	0x3fb10d66
 800c958:	c54c206e 	.word	0xc54c206e
 800c95c:	3fb745cd 	.word	0x3fb745cd
 800c960:	920083ff 	.word	0x920083ff
 800c964:	3fc24924 	.word	0x3fc24924
 800c968:	5555550d 	.word	0x5555550d
 800c96c:	3fd55555 	.word	0x3fd55555
 800c970:	2c6a6c2f 	.word	0x2c6a6c2f
 800c974:	bfa2b444 	.word	0xbfa2b444
 800c978:	52defd9a 	.word	0x52defd9a
 800c97c:	3fadde2d 	.word	0x3fadde2d
 800c980:	af749a6d 	.word	0xaf749a6d
 800c984:	3fb3b0f2 	.word	0x3fb3b0f2
 800c988:	fe231671 	.word	0xfe231671
 800c98c:	3fbc71c6 	.word	0x3fbc71c6
 800c990:	9998ebc4 	.word	0x9998ebc4
 800c994:	3fc99999 	.word	0x3fc99999
 800c998:	54442d18 	.word	0x54442d18
 800c99c:	3ff921fb 	.word	0x3ff921fb
 800c9a0:	440fffff 	.word	0x440fffff
 800c9a4:	7ff00000 	.word	0x7ff00000
 800c9a8:	3fdbffff 	.word	0x3fdbffff
 800c9ac:	3ff00000 	.word	0x3ff00000
 800c9b0:	3ff2ffff 	.word	0x3ff2ffff
 800c9b4:	40038000 	.word	0x40038000
 800c9b8:	3ff80000 	.word	0x3ff80000
 800c9bc:	bff00000 	.word	0xbff00000
 800c9c0:	0800d970 	.word	0x0800d970
 800c9c4:	0800d950 	.word	0x0800d950

0800c9c8 <fabs>:
 800c9c8:	ec51 0b10 	vmov	r0, r1, d0
 800c9cc:	ee10 2a10 	vmov	r2, s0
 800c9d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9d4:	ec43 2b10 	vmov	d0, r2, r3
 800c9d8:	4770      	bx	lr

0800c9da <atan2>:
 800c9da:	f000 b82d 	b.w	800ca38 <__ieee754_atan2>

0800c9de <sqrt>:
 800c9de:	b538      	push	{r3, r4, r5, lr}
 800c9e0:	ed2d 8b02 	vpush	{d8}
 800c9e4:	ec55 4b10 	vmov	r4, r5, d0
 800c9e8:	f000 f8f0 	bl	800cbcc <__ieee754_sqrt>
 800c9ec:	4622      	mov	r2, r4
 800c9ee:	462b      	mov	r3, r5
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	eeb0 8a40 	vmov.f32	s16, s0
 800c9f8:	eef0 8a60 	vmov.f32	s17, s1
 800c9fc:	f7f4 f8ae 	bl	8000b5c <__aeabi_dcmpun>
 800ca00:	b990      	cbnz	r0, 800ca28 <sqrt+0x4a>
 800ca02:	2200      	movs	r2, #0
 800ca04:	2300      	movs	r3, #0
 800ca06:	4620      	mov	r0, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	f7f4 f87f 	bl	8000b0c <__aeabi_dcmplt>
 800ca0e:	b158      	cbz	r0, 800ca28 <sqrt+0x4a>
 800ca10:	f7fc fa30 	bl	8008e74 <__errno>
 800ca14:	2321      	movs	r3, #33	; 0x21
 800ca16:	6003      	str	r3, [r0, #0]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	4619      	mov	r1, r3
 800ca20:	f7f3 ff2c 	bl	800087c <__aeabi_ddiv>
 800ca24:	ec41 0b18 	vmov	d8, r0, r1
 800ca28:	eeb0 0a48 	vmov.f32	s0, s16
 800ca2c:	eef0 0a68 	vmov.f32	s1, s17
 800ca30:	ecbd 8b02 	vpop	{d8}
 800ca34:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ca38 <__ieee754_atan2>:
 800ca38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca3c:	ec57 6b11 	vmov	r6, r7, d1
 800ca40:	4273      	negs	r3, r6
 800ca42:	f8df e184 	ldr.w	lr, [pc, #388]	; 800cbc8 <__ieee754_atan2+0x190>
 800ca46:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ca4a:	4333      	orrs	r3, r6
 800ca4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ca50:	4573      	cmp	r3, lr
 800ca52:	ec51 0b10 	vmov	r0, r1, d0
 800ca56:	ee11 8a10 	vmov	r8, s2
 800ca5a:	d80a      	bhi.n	800ca72 <__ieee754_atan2+0x3a>
 800ca5c:	4244      	negs	r4, r0
 800ca5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca62:	4304      	orrs	r4, r0
 800ca64:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ca68:	4574      	cmp	r4, lr
 800ca6a:	ee10 9a10 	vmov	r9, s0
 800ca6e:	468c      	mov	ip, r1
 800ca70:	d907      	bls.n	800ca82 <__ieee754_atan2+0x4a>
 800ca72:	4632      	mov	r2, r6
 800ca74:	463b      	mov	r3, r7
 800ca76:	f7f3 fc21 	bl	80002bc <__adddf3>
 800ca7a:	ec41 0b10 	vmov	d0, r0, r1
 800ca7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca82:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ca86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ca8a:	4334      	orrs	r4, r6
 800ca8c:	d103      	bne.n	800ca96 <__ieee754_atan2+0x5e>
 800ca8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca92:	f7ff bdf9 	b.w	800c688 <atan>
 800ca96:	17bc      	asrs	r4, r7, #30
 800ca98:	f004 0402 	and.w	r4, r4, #2
 800ca9c:	ea53 0909 	orrs.w	r9, r3, r9
 800caa0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800caa4:	d107      	bne.n	800cab6 <__ieee754_atan2+0x7e>
 800caa6:	2c02      	cmp	r4, #2
 800caa8:	d060      	beq.n	800cb6c <__ieee754_atan2+0x134>
 800caaa:	2c03      	cmp	r4, #3
 800caac:	d1e5      	bne.n	800ca7a <__ieee754_atan2+0x42>
 800caae:	a142      	add	r1, pc, #264	; (adr r1, 800cbb8 <__ieee754_atan2+0x180>)
 800cab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cab4:	e7e1      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cab6:	ea52 0808 	orrs.w	r8, r2, r8
 800caba:	d106      	bne.n	800caca <__ieee754_atan2+0x92>
 800cabc:	f1bc 0f00 	cmp.w	ip, #0
 800cac0:	da5f      	bge.n	800cb82 <__ieee754_atan2+0x14a>
 800cac2:	a13f      	add	r1, pc, #252	; (adr r1, 800cbc0 <__ieee754_atan2+0x188>)
 800cac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac8:	e7d7      	b.n	800ca7a <__ieee754_atan2+0x42>
 800caca:	4572      	cmp	r2, lr
 800cacc:	d10f      	bne.n	800caee <__ieee754_atan2+0xb6>
 800cace:	4293      	cmp	r3, r2
 800cad0:	f104 34ff 	add.w	r4, r4, #4294967295
 800cad4:	d107      	bne.n	800cae6 <__ieee754_atan2+0xae>
 800cad6:	2c02      	cmp	r4, #2
 800cad8:	d84c      	bhi.n	800cb74 <__ieee754_atan2+0x13c>
 800cada:	4b35      	ldr	r3, [pc, #212]	; (800cbb0 <__ieee754_atan2+0x178>)
 800cadc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cae0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cae4:	e7c9      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cae6:	2c02      	cmp	r4, #2
 800cae8:	d848      	bhi.n	800cb7c <__ieee754_atan2+0x144>
 800caea:	4b32      	ldr	r3, [pc, #200]	; (800cbb4 <__ieee754_atan2+0x17c>)
 800caec:	e7f6      	b.n	800cadc <__ieee754_atan2+0xa4>
 800caee:	4573      	cmp	r3, lr
 800caf0:	d0e4      	beq.n	800cabc <__ieee754_atan2+0x84>
 800caf2:	1a9b      	subs	r3, r3, r2
 800caf4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800caf8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cafc:	da1e      	bge.n	800cb3c <__ieee754_atan2+0x104>
 800cafe:	2f00      	cmp	r7, #0
 800cb00:	da01      	bge.n	800cb06 <__ieee754_atan2+0xce>
 800cb02:	323c      	adds	r2, #60	; 0x3c
 800cb04:	db1e      	blt.n	800cb44 <__ieee754_atan2+0x10c>
 800cb06:	4632      	mov	r2, r6
 800cb08:	463b      	mov	r3, r7
 800cb0a:	f7f3 feb7 	bl	800087c <__aeabi_ddiv>
 800cb0e:	ec41 0b10 	vmov	d0, r0, r1
 800cb12:	f7ff ff59 	bl	800c9c8 <fabs>
 800cb16:	f7ff fdb7 	bl	800c688 <atan>
 800cb1a:	ec51 0b10 	vmov	r0, r1, d0
 800cb1e:	2c01      	cmp	r4, #1
 800cb20:	d013      	beq.n	800cb4a <__ieee754_atan2+0x112>
 800cb22:	2c02      	cmp	r4, #2
 800cb24:	d015      	beq.n	800cb52 <__ieee754_atan2+0x11a>
 800cb26:	2c00      	cmp	r4, #0
 800cb28:	d0a7      	beq.n	800ca7a <__ieee754_atan2+0x42>
 800cb2a:	a319      	add	r3, pc, #100	; (adr r3, 800cb90 <__ieee754_atan2+0x158>)
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	f7f3 fbc2 	bl	80002b8 <__aeabi_dsub>
 800cb34:	a318      	add	r3, pc, #96	; (adr r3, 800cb98 <__ieee754_atan2+0x160>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	e014      	b.n	800cb66 <__ieee754_atan2+0x12e>
 800cb3c:	a118      	add	r1, pc, #96	; (adr r1, 800cba0 <__ieee754_atan2+0x168>)
 800cb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb42:	e7ec      	b.n	800cb1e <__ieee754_atan2+0xe6>
 800cb44:	2000      	movs	r0, #0
 800cb46:	2100      	movs	r1, #0
 800cb48:	e7e9      	b.n	800cb1e <__ieee754_atan2+0xe6>
 800cb4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb4e:	4619      	mov	r1, r3
 800cb50:	e793      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cb52:	a30f      	add	r3, pc, #60	; (adr r3, 800cb90 <__ieee754_atan2+0x158>)
 800cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb58:	f7f3 fbae 	bl	80002b8 <__aeabi_dsub>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	a10d      	add	r1, pc, #52	; (adr r1, 800cb98 <__ieee754_atan2+0x160>)
 800cb62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb66:	f7f3 fba7 	bl	80002b8 <__aeabi_dsub>
 800cb6a:	e786      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cb6c:	a10a      	add	r1, pc, #40	; (adr r1, 800cb98 <__ieee754_atan2+0x160>)
 800cb6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb72:	e782      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cb74:	a10c      	add	r1, pc, #48	; (adr r1, 800cba8 <__ieee754_atan2+0x170>)
 800cb76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb7a:	e77e      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	2100      	movs	r1, #0
 800cb80:	e77b      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cb82:	a107      	add	r1, pc, #28	; (adr r1, 800cba0 <__ieee754_atan2+0x168>)
 800cb84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb88:	e777      	b.n	800ca7a <__ieee754_atan2+0x42>
 800cb8a:	bf00      	nop
 800cb8c:	f3af 8000 	nop.w
 800cb90:	33145c07 	.word	0x33145c07
 800cb94:	3ca1a626 	.word	0x3ca1a626
 800cb98:	54442d18 	.word	0x54442d18
 800cb9c:	400921fb 	.word	0x400921fb
 800cba0:	54442d18 	.word	0x54442d18
 800cba4:	3ff921fb 	.word	0x3ff921fb
 800cba8:	54442d18 	.word	0x54442d18
 800cbac:	3fe921fb 	.word	0x3fe921fb
 800cbb0:	0800d990 	.word	0x0800d990
 800cbb4:	0800d9a8 	.word	0x0800d9a8
 800cbb8:	54442d18 	.word	0x54442d18
 800cbbc:	c00921fb 	.word	0xc00921fb
 800cbc0:	54442d18 	.word	0x54442d18
 800cbc4:	bff921fb 	.word	0xbff921fb
 800cbc8:	7ff00000 	.word	0x7ff00000

0800cbcc <__ieee754_sqrt>:
 800cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd0:	ec55 4b10 	vmov	r4, r5, d0
 800cbd4:	4e55      	ldr	r6, [pc, #340]	; (800cd2c <__ieee754_sqrt+0x160>)
 800cbd6:	43ae      	bics	r6, r5
 800cbd8:	ee10 0a10 	vmov	r0, s0
 800cbdc:	ee10 3a10 	vmov	r3, s0
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	d110      	bne.n	800cc08 <__ieee754_sqrt+0x3c>
 800cbe6:	ee10 2a10 	vmov	r2, s0
 800cbea:	462b      	mov	r3, r5
 800cbec:	f7f3 fd1c 	bl	8000628 <__aeabi_dmul>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	f7f3 fb60 	bl	80002bc <__adddf3>
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	460d      	mov	r5, r1
 800cc00:	ec45 4b10 	vmov	d0, r4, r5
 800cc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc08:	2d00      	cmp	r5, #0
 800cc0a:	dc10      	bgt.n	800cc2e <__ieee754_sqrt+0x62>
 800cc0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc10:	4330      	orrs	r0, r6
 800cc12:	d0f5      	beq.n	800cc00 <__ieee754_sqrt+0x34>
 800cc14:	b15d      	cbz	r5, 800cc2e <__ieee754_sqrt+0x62>
 800cc16:	ee10 2a10 	vmov	r2, s0
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	ee10 0a10 	vmov	r0, s0
 800cc20:	f7f3 fb4a 	bl	80002b8 <__aeabi_dsub>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	f7f3 fe28 	bl	800087c <__aeabi_ddiv>
 800cc2c:	e7e6      	b.n	800cbfc <__ieee754_sqrt+0x30>
 800cc2e:	1512      	asrs	r2, r2, #20
 800cc30:	d074      	beq.n	800cd1c <__ieee754_sqrt+0x150>
 800cc32:	07d4      	lsls	r4, r2, #31
 800cc34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cc38:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cc3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cc40:	bf5e      	ittt	pl
 800cc42:	0fda      	lsrpl	r2, r3, #31
 800cc44:	005b      	lslpl	r3, r3, #1
 800cc46:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cc4a:	2400      	movs	r4, #0
 800cc4c:	0fda      	lsrs	r2, r3, #31
 800cc4e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cc52:	107f      	asrs	r7, r7, #1
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	2516      	movs	r5, #22
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cc5e:	1886      	adds	r6, r0, r2
 800cc60:	428e      	cmp	r6, r1
 800cc62:	bfde      	ittt	le
 800cc64:	1b89      	suble	r1, r1, r6
 800cc66:	18b0      	addle	r0, r6, r2
 800cc68:	18a4      	addle	r4, r4, r2
 800cc6a:	0049      	lsls	r1, r1, #1
 800cc6c:	3d01      	subs	r5, #1
 800cc6e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cc72:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cc76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc7a:	d1f0      	bne.n	800cc5e <__ieee754_sqrt+0x92>
 800cc7c:	462a      	mov	r2, r5
 800cc7e:	f04f 0e20 	mov.w	lr, #32
 800cc82:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cc86:	4281      	cmp	r1, r0
 800cc88:	eb06 0c05 	add.w	ip, r6, r5
 800cc8c:	dc02      	bgt.n	800cc94 <__ieee754_sqrt+0xc8>
 800cc8e:	d113      	bne.n	800ccb8 <__ieee754_sqrt+0xec>
 800cc90:	459c      	cmp	ip, r3
 800cc92:	d811      	bhi.n	800ccb8 <__ieee754_sqrt+0xec>
 800cc94:	f1bc 0f00 	cmp.w	ip, #0
 800cc98:	eb0c 0506 	add.w	r5, ip, r6
 800cc9c:	da43      	bge.n	800cd26 <__ieee754_sqrt+0x15a>
 800cc9e:	2d00      	cmp	r5, #0
 800cca0:	db41      	blt.n	800cd26 <__ieee754_sqrt+0x15a>
 800cca2:	f100 0801 	add.w	r8, r0, #1
 800cca6:	1a09      	subs	r1, r1, r0
 800cca8:	459c      	cmp	ip, r3
 800ccaa:	bf88      	it	hi
 800ccac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ccb0:	eba3 030c 	sub.w	r3, r3, ip
 800ccb4:	4432      	add	r2, r6
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ccbc:	f1be 0e01 	subs.w	lr, lr, #1
 800ccc0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ccc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ccc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cccc:	d1db      	bne.n	800cc86 <__ieee754_sqrt+0xba>
 800ccce:	430b      	orrs	r3, r1
 800ccd0:	d006      	beq.n	800cce0 <__ieee754_sqrt+0x114>
 800ccd2:	1c50      	adds	r0, r2, #1
 800ccd4:	bf13      	iteet	ne
 800ccd6:	3201      	addne	r2, #1
 800ccd8:	3401      	addeq	r4, #1
 800ccda:	4672      	moveq	r2, lr
 800ccdc:	f022 0201 	bicne.w	r2, r2, #1
 800cce0:	1063      	asrs	r3, r4, #1
 800cce2:	0852      	lsrs	r2, r2, #1
 800cce4:	07e1      	lsls	r1, r4, #31
 800cce6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ccea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ccee:	bf48      	it	mi
 800ccf0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ccf4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ccf8:	4614      	mov	r4, r2
 800ccfa:	e781      	b.n	800cc00 <__ieee754_sqrt+0x34>
 800ccfc:	0ad9      	lsrs	r1, r3, #11
 800ccfe:	3815      	subs	r0, #21
 800cd00:	055b      	lsls	r3, r3, #21
 800cd02:	2900      	cmp	r1, #0
 800cd04:	d0fa      	beq.n	800ccfc <__ieee754_sqrt+0x130>
 800cd06:	02cd      	lsls	r5, r1, #11
 800cd08:	d50a      	bpl.n	800cd20 <__ieee754_sqrt+0x154>
 800cd0a:	f1c2 0420 	rsb	r4, r2, #32
 800cd0e:	fa23 f404 	lsr.w	r4, r3, r4
 800cd12:	1e55      	subs	r5, r2, #1
 800cd14:	4093      	lsls	r3, r2
 800cd16:	4321      	orrs	r1, r4
 800cd18:	1b42      	subs	r2, r0, r5
 800cd1a:	e78a      	b.n	800cc32 <__ieee754_sqrt+0x66>
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	e7f0      	b.n	800cd02 <__ieee754_sqrt+0x136>
 800cd20:	0049      	lsls	r1, r1, #1
 800cd22:	3201      	adds	r2, #1
 800cd24:	e7ef      	b.n	800cd06 <__ieee754_sqrt+0x13a>
 800cd26:	4680      	mov	r8, r0
 800cd28:	e7bd      	b.n	800cca6 <__ieee754_sqrt+0xda>
 800cd2a:	bf00      	nop
 800cd2c:	7ff00000 	.word	0x7ff00000

0800cd30 <_init>:
 800cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd32:	bf00      	nop
 800cd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd36:	bc08      	pop	{r3}
 800cd38:	469e      	mov	lr, r3
 800cd3a:	4770      	bx	lr

0800cd3c <_fini>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	bf00      	nop
 800cd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd42:	bc08      	pop	{r3}
 800cd44:	469e      	mov	lr, r3
 800cd46:	4770      	bx	lr
