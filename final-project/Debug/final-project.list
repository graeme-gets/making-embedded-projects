
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .systemConfig 00000004  0807e800  0807e800  0003e800  2**0
                  ALLOC, READONLY
  2 .text         0000fe48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000017f8  0800ffe8  0800ffe8  0001ffe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080117e0  080117e0  000304f4  2**0
                  CONTENTS
  5 .ARM          00000008  080117e0  080117e0  000217e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080117e8  080117e8  000304f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080117e8  080117e8  000217e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080117ec  080117ec  000217ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000004f4  20000000  080117f0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000b98  200004f8  08011ce4  000304f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001090  08011ce4  00031090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020311  00000000  00000000  00030524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b04  00000000  00000000  00050835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00056340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c8  00000000  00000000  00057eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e854  00000000  00000000  00059780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029fb5  00000000  00000000  00077fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cf88  00000000  00000000  000a1f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ef11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000876c  00000000  00000000  0013ef64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004f8 	.word	0x200004f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ffd0 	.word	0x0800ffd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004fc 	.word	0x200004fc
 80001dc:	0800ffd0 	.word	0x0800ffd0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ldivmod>:
 8000c18:	b97b      	cbnz	r3, 8000c3a <__aeabi_ldivmod+0x22>
 8000c1a:	b972      	cbnz	r2, 8000c3a <__aeabi_ldivmod+0x22>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bfbe      	ittt	lt
 8000c20:	2000      	movlt	r0, #0
 8000c22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c26:	e006      	blt.n	8000c36 <__aeabi_ldivmod+0x1e>
 8000c28:	bf08      	it	eq
 8000c2a:	2800      	cmpeq	r0, #0
 8000c2c:	bf1c      	itt	ne
 8000c2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c32:	f04f 30ff 	movne.w	r0, #4294967295
 8000c36:	f000 b9bf 	b.w	8000fb8 <__aeabi_idiv0>
 8000c3a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c42:	2900      	cmp	r1, #0
 8000c44:	db09      	blt.n	8000c5a <__aeabi_ldivmod+0x42>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db1a      	blt.n	8000c80 <__aeabi_ldivmod+0x68>
 8000c4a:	f000 f84d 	bl	8000ce8 <__udivmoddi4>
 8000c4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c56:	b004      	add	sp, #16
 8000c58:	4770      	bx	lr
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db1b      	blt.n	8000c9c <__aeabi_ldivmod+0x84>
 8000c64:	f000 f840 	bl	8000ce8 <__udivmoddi4>
 8000c68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c70:	b004      	add	sp, #16
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	4252      	negs	r2, r2
 8000c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f82f 	bl	8000ce8 <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4240      	negs	r0, r0
 8000c96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9a:	4770      	bx	lr
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca2:	f000 f821 	bl	8000ce8 <__udivmoddi4>
 8000ca6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cae:	b004      	add	sp, #16
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <cBuffer_init>:
#include "cBuffer.h"
#include "string.h"


void cBuffer_init(cBuffer_t *cbuffer,uint8_t* buffer,uint8_t size)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	71fb      	strb	r3, [r7, #7]
	// TODO : Use Assert to verify length of CBuffer
	cbuffer->buffer = buffer;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	601a      	str	r2, [r3, #0]
	cbuffer->read = 0;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	715a      	strb	r2, [r3, #5]
	cbuffer->write = 0;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	719a      	strb	r2, [r3, #6]
	cbuffer->size = size;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	711a      	strb	r2, [r3, #4]
	memset(cbuffer->buffer,0, cbuffer->size);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	461a      	mov	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f00a fba7 	bl	800b740 <memset>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <cBuffer_Write>:

CBUFFER_ERR cBuffer_Write(cBuffer_t * cbuffer, uint8_t data)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
	cbuffer->buffer[cbuffer->write] = data;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	7992      	ldrb	r2, [r2, #6]
 800100e:	4413      	add	r3, r2
 8001010:	78fa      	ldrb	r2, [r7, #3]
 8001012:	701a      	strb	r2, [r3, #0]
	cbuffer->write = (cbuffer->write+1) & (cbuffer->size-1);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	3301      	adds	r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	b25a      	sxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	791b      	ldrb	r3, [r3, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b25b      	sxtb	r3, r3
 8001028:	4013      	ands	r3, r2
 800102a:	b25b      	sxtb	r3, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	719a      	strb	r2, [r3, #6]
	return CBUFFER_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <cBuffer_GetString>:

/* Looks for a string within the buffer and fills the provided buffer with the string
 *
 */
CBUFFER_ERR cBuffer_GetString(cBuffer_t* cbuffer,uint8_t *string, uint8_t sTerminator, uint8_t* len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t found = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	75bb      	strb	r3, [r7, #22]
	uint8_t chr;
	CBUFFER_ERR err = CBUFFER_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	757b      	strb	r3, [r7, #21]
	uint8_t length;
	uint8_t read = cbuffer->read;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	74bb      	strb	r3, [r7, #18]
	uint8_t ch;
	length = cBuffer_Length(cbuffer);
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f89a 	bl	8001198 <cBuffer_Length>
 8001064:	4603      	mov	r3, r0
 8001066:	753b      	strb	r3, [r7, #20]

	for (i=0; i < length;i++)
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]
 800106c:	e012      	b.n	8001094 <cBuffer_GetString+0x54>
	{
		err = cBuffer_Peek(cbuffer, &ch, &read);
 800106e:	f107 0212 	add.w	r2, r7, #18
 8001072:	f107 0311 	add.w	r3, r7, #17
 8001076:	4619      	mov	r1, r3
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 f863 	bl	8001144 <cBuffer_Peek>
 800107e:	4603      	mov	r3, r0
 8001080:	757b      	strb	r3, [r7, #21]

		if (ch == '\r') // A string is found - copy it to the outgoing buffer
 8001082:	7c7b      	ldrb	r3, [r7, #17]
 8001084:	2b0d      	cmp	r3, #13
 8001086:	d102      	bne.n	800108e <cBuffer_GetString+0x4e>
		{
			found = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	75bb      	strb	r3, [r7, #22]
			break;
 800108c:	e006      	b.n	800109c <cBuffer_GetString+0x5c>
	for (i=0; i < length;i++)
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	3301      	adds	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
 8001094:	7dfa      	ldrb	r2, [r7, #23]
 8001096:	7d3b      	ldrb	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	d3e8      	bcc.n	800106e <cBuffer_GetString+0x2e>
		}
	}
	if (found)
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d020      	beq.n	80010e4 <cBuffer_GetString+0xa4>
	{
		// Get length of string
		*len = cBuffer_LengthCustom	(cbuffer, cbuffer->read, read);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	795b      	ldrb	r3, [r3, #5]
 80010a6:	7cba      	ldrb	r2, [r7, #18]
 80010a8:	4619      	mov	r1, r3
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 f88d 	bl	80011ca <cBuffer_LengthCustom>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	701a      	strb	r2, [r3, #0]
		do{
			err = cBuffer_Read(cbuffer, &chr);
 80010b8:	f107 0313 	add.w	r3, r7, #19
 80010bc:	4619      	mov	r1, r3
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 f817 	bl	80010f2 <cBuffer_Read>
 80010c4:	4603      	mov	r3, r0
 80010c6:	757b      	strb	r3, [r7, #21]
			*string = chr;
 80010c8:	7cfa      	ldrb	r2, [r7, #19]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	701a      	strb	r2, [r3, #0]
			string++;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
		} while (chr != sTerminator || err != CBUFFER_OK);
 80010d4:	7cfb      	ldrb	r3, [r7, #19]
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d1ed      	bne.n	80010b8 <cBuffer_GetString+0x78>
 80010dc:	7d7b      	ldrb	r3, [r7, #21]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1ea      	bne.n	80010b8 <cBuffer_GetString+0x78>
 80010e2:	e001      	b.n	80010e8 <cBuffer_GetString+0xa8>
	}
	else
		err = CBUFFER_NO_STRING;
 80010e4:	2303      	movs	r3, #3
 80010e6:	757b      	strb	r3, [r7, #21]


	return err;
 80010e8:	7d7b      	ldrb	r3, [r7, #21]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <cBuffer_Read>:

CBUFFER_ERR cBuffer_Read(cBuffer_t* cbuffer,uint8_t* data)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
	if (cBuffer_Length(cbuffer) == 0)
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f84b 	bl	8001198 <cBuffer_Length>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <cBuffer_Read+0x1a>
	{
		return CBUFFER_EMPTY;
 8001108:	2302      	movs	r3, #2
 800110a:	e017      	b.n	800113c <cBuffer_Read+0x4a>
	}
	*data = cbuffer->buffer[cbuffer->read];
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	7952      	ldrb	r2, [r2, #5]
 8001114:	4413      	add	r3, r2
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	701a      	strb	r2, [r3, #0]
	cbuffer->read = (cbuffer->read+1) & (cbuffer->size-1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	795b      	ldrb	r3, [r3, #5]
 8001120:	3301      	adds	r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	b25a      	sxtb	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	b25b      	sxtb	r3, r3
 8001130:	4013      	ands	r3, r2
 8001132:	b25b      	sxtb	r3, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	715a      	strb	r2, [r3, #5]
	return CBUFFER_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <cBuffer_Peek>:

CBUFFER_ERR cBuffer_Peek(cBuffer_t* cbuffer,uint8_t* data, uint8_t*read)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	if (cBuffer_Length(cbuffer) == 0)
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 f821 	bl	8001198 <cBuffer_Length>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <cBuffer_Peek+0x1c>
	{
		return CBUFFER_EMPTY;
 800115c:	2302      	movs	r3, #2
 800115e:	e017      	b.n	8001190 <cBuffer_Peek+0x4c>
	}
	*data = cbuffer->buffer[*read];
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	4413      	add	r3, r2
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	701a      	strb	r2, [r3, #0]
	*read = ((*read)+1) & (cbuffer->size-1);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	b25a      	sxtb	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	b25b      	sxtb	r3, r3
 8001184:	4013      	ands	r3, r2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	701a      	strb	r2, [r3, #0]
	return CBUFFER_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <cBuffer_Length>:

uint8_t cBuffer_Length(cBuffer_t* cbuffer)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	return (cbuffer->write - cbuffer->read) & (cbuffer->size-1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	799a      	ldrb	r2, [r3, #6]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	795b      	ldrb	r3, [r3, #5]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	4013      	ands	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	b2db      	uxtb	r3, r3

}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <cBuffer_LengthCustom>:

uint8_t cBuffer_LengthCustom(cBuffer_t* cbuffer,uint8_t start, uint8_t end)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	70fb      	strb	r3, [r7, #3]
 80011d6:	4613      	mov	r3, r2
 80011d8:	70bb      	strb	r3, [r7, #2]
	return (end - start) & (cbuffer->size-1);
 80011da:	78ba      	ldrb	r2, [r7, #2]
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	791b      	ldrb	r3, [r3, #4]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4013      	ands	r3, r2
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	int r;
	char *cmdEnd =strchr(buffer, ' '); // look for first space
 800120a:	2120      	movs	r1, #32
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f00b fafc 	bl	800c80a <strchr>
 8001212:	60b8      	str	r0, [r7, #8]
	if (cmdEnd == 0x0 || cmdEnd-buffer != strlen(name))
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <ConsoleCommandMatch+0x2e>
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	461c      	mov	r4, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7fe ffe6 	bl	80001f4 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	429c      	cmp	r4, r3
 800122c:	d00b      	beq.n	8001246 <ConsoleCommandMatch+0x46>
	{
			r =  strcmp(name,buffer) == 0;
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe ffd5 	bl	80001e0 <strcmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e00f      	b.n	8001266 <ConsoleCommandMatch+0x66>
	}
	else
	{
		r =  strncmp(name,buffer,strlen(name)) == 0;
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7fe ffd4 	bl	80001f4 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	6839      	ldr	r1, [r7, #0]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00b faee 	bl	800c834 <strncmp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	60fb      	str	r3, [r7, #12]

	}

	return r;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}

08001270 <ConsoleInit>:


// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8001276:	f001 f97d 	bl	8002574 <ConsoleIoInit>
	ConsoleIoSendString("Dodeca Timer - A Thousand Projects");
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <ConsoleInit+0x44>)
 800127c:	f001 f9b2 	bl	80025e4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <ConsoleInit+0x48>)
 8001282:	f001 f9af 	bl	80025e4 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <ConsoleInit+0x4c>)
 8001288:	f001 f9ac 	bl	80025e4 <ConsoleIoSendString>


	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	e007      	b.n	80012a2 <ConsoleInit+0x32>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <ConsoleInit+0x50>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b63      	cmp	r3, #99	; 0x63
 80012a6:	d9f4      	bls.n	8001292 <ConsoleInit+0x22>
	}

}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800ffe8 	.word	0x0800ffe8
 80012b8:	0801000c 	.word	0x0801000c
 80012bc:	08010010 	.word	0x08010010
 80012c0:	20000514 	.word	0x20000514

080012c4 <ConsolePrintPrompt>:

void ConsolePrintPrompt()
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	ConsoleIoSendString(STR_ENDLINE);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <ConsolePrintPrompt+0x14>)
 80012ca:	f001 f98b 	bl	80025e4 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <ConsolePrintPrompt+0x18>)
 80012d0:	f001 f988 	bl	80025e4 <ConsoleIoSendString>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	0801000c 	.word	0x0801000c
 80012dc:	08010010 	.word	0x08010010

080012e0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  found;
	eCommandResult_T result;
	eConsoleError consoleResult;

	consoleResult = ConsoleIoReceive(mReceiveBuffer);
 80012e6:	4841      	ldr	r0, [pc, #260]	; (80013ec <ConsoleProcess+0x10c>)
 80012e8:	f001 f95c 	bl	80025a4 <ConsoleIoReceive>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]

	switch (consoleResult)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d075      	beq.n	80013e2 <ConsoleProcess+0x102>
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	dc74      	bgt.n	80013e4 <ConsoleProcess+0x104>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <ConsoleProcess+0x28>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db70      	blt.n	80013e4 <ConsoleProcess+0x104>
 8001302:	3b01      	subs	r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	e06d      	b.n	80013e4 <ConsoleProcess+0x104>
	{
		case CONSOLE_ERROR:
		case CONSOLE_NO_STRING:
			break;
		case CONSOLE_SUCCESS:
			if ('\0' == mReceiveBuffer[0] )
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <ConsoleProcess+0x10c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <ConsoleProcess+0x3e>
			{
				ConsoleIoSendString(STR_ENDLINE);
 8001310:	4837      	ldr	r0, [pc, #220]	; (80013f0 <ConsoleProcess+0x110>)
 8001312:	f001 f967 	bl	80025e4 <ConsoleIoSendString>
				ConsoleIoSendString(CONSOLE_PROMPT);
 8001316:	4837      	ldr	r0, [pc, #220]	; (80013f4 <ConsoleProcess+0x114>)
 8001318:	f001 f964 	bl	80025e4 <ConsoleIoSendString>
				return;
 800131c:	e062      	b.n	80013e4 <ConsoleProcess+0x104>
			}
			commandTable = ConsoleCommandsGetTable();
 800131e:	f001 f901 	bl	8002524 <ConsoleCommandsGetTable>
 8001322:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	613b      	str	r3, [r7, #16]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800132e:	e03a      	b.n	80013a6 <ConsoleProcess+0xc6>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, (char*)mReceiveBuffer) )
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	226c      	movs	r2, #108	; 0x6c
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	492b      	ldr	r1, [pc, #172]	; (80013ec <ConsoleProcess+0x10c>)
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <ConsoleCommandMatch>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d029      	beq.n	80013a0 <ConsoleProcess+0xc0>
				{
					result = commandTable[cmdIndex].execute((char*)mReceiveBuffer);
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	226c      	movs	r2, #108	; 0x6c
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	4413      	add	r3, r2
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4824      	ldr	r0, [pc, #144]	; (80013ec <ConsoleProcess+0x10c>)
 800135c:	4798      	blx	r3
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d018      	beq.n	800139a <ConsoleProcess+0xba>
					{
						ConsoleIoSendString("Error: ");
 8001368:	4823      	ldr	r0, [pc, #140]	; (80013f8 <ConsoleProcess+0x118>)
 800136a:	f001 f93b 	bl	80025e4 <ConsoleIoSendString>
						ConsoleIoSendString((char*)mReceiveBuffer);
 800136e:	481f      	ldr	r0, [pc, #124]	; (80013ec <ConsoleProcess+0x10c>)
 8001370:	f001 f938 	bl	80025e4 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8001374:	481e      	ldr	r0, [pc, #120]	; (80013f0 <ConsoleProcess+0x110>)
 8001376:	f001 f935 	bl	80025e4 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800137a:	4820      	ldr	r0, [pc, #128]	; (80013fc <ConsoleProcess+0x11c>)
 800137c:	f001 f932 	bl	80025e4 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	226c      	movs	r2, #108	; 0x6c
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	3308      	adds	r3, #8
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f928 	bl	80025e4 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8001394:	4816      	ldr	r0, [pc, #88]	; (80013f0 <ConsoleProcess+0x110>)
 8001396:	f001 f925 	bl	80025e4 <ConsoleIoSendString>
					}
					found = cmdIndex;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	e002      	b.n	80013a6 <ConsoleProcess+0xc6>
				}
				else
				{
					cmdIndex++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
			while ( (   NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	226c      	movs	r2, #108	; 0x6c
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	4413      	add	r3, r2
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <ConsoleProcess+0xe0>
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	d0b7      	beq.n	8001330 <ConsoleProcess+0x50>
				}
			}
			if (found == NOT_FOUND)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c6:	d105      	bne.n	80013d4 <ConsoleProcess+0xf4>
			{
				ConsoleIoSendString("Command not found: ");
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <ConsoleProcess+0x120>)
 80013ca:	f001 f90b 	bl	80025e4 <ConsoleIoSendString>
				ConsoleIoSendString((char*)mReceiveBuffer);
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <ConsoleProcess+0x10c>)
 80013d0:	f001 f908 	bl	80025e4 <ConsoleIoSendString>

			}
			ConsoleIoSendString(STR_ENDLINE);
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <ConsoleProcess+0x110>)
 80013d6:	f001 f905 	bl	80025e4 <ConsoleIoSendString>
			ConsoleIoSendString(CONSOLE_PROMPT);
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <ConsoleProcess+0x114>)
 80013dc:	f001 f902 	bl	80025e4 <ConsoleIoSendString>

			break;
 80013e0:	e000      	b.n	80013e4 <ConsoleProcess+0x104>
		case CONSOLE_BUFFER_FULL:

		break;
 80013e2:	bf00      	nop
	}

}
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000514 	.word	0x20000514
 80013f0:	0801000c 	.word	0x0801000c
 80013f4:	08010010 	.word	0x08010010
 80013f8:	08010014 	.word	0x08010014
 80013fc:	0801001c 	.word	0x0801001c
 8001400:	08010024 	.word	0x08010024

08001404 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	460b      	mov	r3, r1
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800141e:	e00b      	b.n	8001438 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b20      	cmp	r3, #32
 800142a:	d102      	bne.n	8001432 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3301      	adds	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	429a      	cmp	r2, r3
 800143e:	d002      	beq.n	8001446 <ConsoleParamFindN+0x42>
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b63      	cmp	r3, #99	; 0x63
 8001444:	d9ec      	bls.n	8001420 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d102      	bne.n	8001452 <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 800144c:	2310      	movs	r3, #16
 800144e:	75fb      	strb	r3, [r7, #23]
 8001450:	e002      	b.n	8001458 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	601a      	str	r2, [r3, #0]
	}
	return result;
 8001458:	7dfb      	ldrb	r3, [r7, #23]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <ConsoleReceiveParamString>:

// Assume the string is the last parameter and the the end is a null
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char* string, uint32_t maxLen)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	460b      	mov	r3, r1
 8001474:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
	eCommandResult_T result;
	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800147a:	f107 0210 	add.w	r2, r7, #16
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	4619      	mov	r1, r3
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff ffbe 	bl	8001404 <ConsoleParamFindN>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <ConsoleReceiveParamString+0x30>
		return result;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	e013      	b.n	80014be <ConsoleReceiveParamString+0x58>



	// Check the length of the string
	if (strlen(&buffer[startIndex]) > maxLen)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fea9 	bl	80001f4 <strlen>
 80014a2:	4602      	mov	r2, r0
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d201      	bcs.n	80014ae <ConsoleReceiveParamString+0x48>
	{
		return COMMAND_ERROR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	e007      	b.n	80014be <ConsoleReceiveParamString+0x58>
	}

	// set the end of the string to a NULL for string termination
	strcpy(string,&buffer[startIndex]);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f00b f9b4 	bl	800c824 <strcpy>

	return COMMAND_SUCCESS;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b08a      	sub	sp, #40	; 0x28
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	460b      	mov	r3, r1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80014d8:	f107 021c 	add.w	r2, r7, #28
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	4619      	mov	r1, r3
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff ff8f 	bl	8001404 <ConsoleParamFindN>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	4413      	add	r3, r2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	//while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
	while ( ( '\0' != charVal )
 8001500:	e011      	b.n	8001526 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8001502:	f107 0214 	add.w	r2, r7, #20
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	4413      	add	r3, r2
 800150a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800150e:	701a      	strb	r2, [r3, #0]
		i++;
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3301      	adds	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	4413      	add	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( '\0' != charVal )
 8001526:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <ConsoleReceiveParamInt16+0x76>
			&& ( PARAMETER_SEPARATER != charVal )
 800152e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001532:	2b20      	cmp	r3, #32
 8001534:	d002      	beq.n	800153c <ConsoleReceiveParamInt16+0x76>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	2b07      	cmp	r3, #7
 800153a:	d9e2      	bls.n	8001502 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	2b08      	cmp	r3, #8
 8001540:	d102      	bne.n	8001548 <ConsoleReceiveParamInt16+0x82>
	{
		result = COMMAND_PARAMETER_ERROR;
 8001542:	2310      	movs	r3, #16
 8001544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8001548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11a      	bne.n	8001586 <ConsoleReceiveParamInt16+0xc0>
	{
		str[i] = NULL_CHAR;
 8001550:	f107 0214 	add.w	r2, r7, #20
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	4413      	add	r3, r2
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
		if (isNumber((uint8_t*)str))
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f8b5 	bl	80036d0 <isNumber>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <ConsoleReceiveParamInt16+0xba>
				*parameterInt = atoi(str);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4618      	mov	r0, r3
 8001572:	f009 ffd3 	bl	800b51c <atoi>
 8001576:	4603      	mov	r3, r0
 8001578:	b21a      	sxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	e002      	b.n	8001586 <ConsoleReceiveParamInt16+0xc0>
		else
			result =  COMMAND_PARAMETER_ERROR;
 8001580:	2310      	movs	r3, #16
 8001582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	return result;
 8001586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800158a:	4618      	mov	r0, r3
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b08a      	sub	sp, #40	; 0x28
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	460b      	mov	r3, r1
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80015a8:	f107 0218 	add.w	r2, r7, #24
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	4619      	mov	r1, r3
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff ff27 	bl	8001404 <ConsoleParamFindN>
 80015b6:	4603      	mov	r3, r0
 80015b8:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d12c      	bne.n	800161a <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	e01e      	b.n	8001604 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10d      	bne.n	80015e8 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	4413      	add	r3, r2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f107 0217 	add.w	r2, r7, #23
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f820 	bl	8001624 <ConsoleUtilHexCharToInt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d107      	bne.n	80015fe <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 80015ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015fa:	4413      	add	r3, r2
 80015fc:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	3301      	adds	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d9dd      	bls.n	80015c6 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 800160a:	7ffb      	ldrb	r3, [r7, #31]
 800160c:	2b11      	cmp	r3, #17
 800160e:	d101      	bne.n	8001614 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8001610:	2300      	movs	r3, #0
 8001612:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001618:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800161a:	7ffb      	ldrb	r3, [r7, #31]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b2f      	cmp	r3, #47	; 0x2f
 8001638:	d908      	bls.n	800164c <ConsoleUtilHexCharToInt+0x28>
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b39      	cmp	r3, #57	; 0x39
 800163e:	d805      	bhi.n	800164c <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3b30      	subs	r3, #48	; 0x30
 8001644:	b2da      	uxtb	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e025      	b.n	8001698 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b40      	cmp	r3, #64	; 0x40
 8001650:	d908      	bls.n	8001664 <ConsoleUtilHexCharToInt+0x40>
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b46      	cmp	r3, #70	; 0x46
 8001656:	d805      	bhi.n	8001664 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	3b37      	subs	r3, #55	; 0x37
 800165c:	b2da      	uxtb	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	e019      	b.n	8001698 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b60      	cmp	r3, #96	; 0x60
 8001668:	d908      	bls.n	800167c <ConsoleUtilHexCharToInt+0x58>
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b66      	cmp	r3, #102	; 0x66
 800166e:	d805      	bhi.n	800167c <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	3b57      	subs	r3, #87	; 0x57
 8001674:	b2da      	uxtb	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e00d      	b.n	8001698 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b0a      	cmp	r3, #10
 8001680:	d105      	bne.n	800168e <ConsoleUtilHexCharToInt+0x6a>
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b0d      	cmp	r3, #13
 8001686:	d102      	bne.n	800168e <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b20      	cmp	r3, #32
 800168c:	d102      	bne.n	8001694 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 800168e:	2311      	movs	r3, #17
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	e001      	b.n	8001698 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8001694:	2310      	movs	r3, #16
 8001696:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs
// while exposing this functionality at the top level so
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 ff98 	bl	80025e4 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <ConsoleSendLine>:

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 ff8b 	bl	80025e4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <ConsoleSendLine+0x20>)
 80016d0:	f000 ff88 	bl	80025e4 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	0801000c 	.word	0x0801000c

080016e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016e8:	f3bf 8f4f 	dsb	sy
}
 80016ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <__NVIC_SystemReset+0x24>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016f6:	4904      	ldr	r1, [pc, #16]	; (8001708 <__NVIC_SystemReset+0x24>)
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_SystemReset+0x28>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016fe:	f3bf 8f4f 	dsb	sy
}
 8001702:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <__NVIC_SystemReset+0x20>
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0004 	.word	0x05fa0004

08001710 <displayDodeca>:




static void displayDodeca(uint8_t id)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b098      	sub	sp, #96	; 0x60
 8001714:	af02      	add	r7, sp, #8
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	char msg[50];
	char statename[20];
	colour_t *colour;
	dodecaItem_t *dodeca;

	dodeca = dodecaGet(id);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f001 f903 	bl	8002928 <dodecaGet>
 8001722:	6578      	str	r0, [r7, #84]	; 0x54


	dodecaGetStateName(dodeca->state,statename);
 8001724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f001 f972 	bl	8002a18 <dodecaGetStateName>
	colour = colourFindByCode(dodeca->colour);
 8001734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 ff69 	bl	8002610 <colourFindByCode>
 800173e:	6538      	str	r0, [r7, #80]	; 0x50
	sprintf(msg, "Dodeca: %i - %s",id,dodeca->name);
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001744:	3302      	adds	r3, #2
 8001746:	f107 001c 	add.w	r0, r7, #28
 800174a:	4919      	ldr	r1, [pc, #100]	; (80017b0 <displayDodeca+0xa0>)
 800174c:	f00a ffcc 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffb3 	bl	80016c0 <ConsoleSendLine>
	sprintf(msg,"\tEnabled: %s\n\tState: %s",dodeca->enabled==1?"Yes":"No",statename);
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <displayDodeca+0x56>
 8001762:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <displayDodeca+0xa4>)
 8001764:	e000      	b.n	8001768 <displayDodeca+0x58>
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <displayDodeca+0xa8>)
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	f107 001c 	add.w	r0, r7, #28
 8001770:	4912      	ldr	r1, [pc, #72]	; (80017bc <displayDodeca+0xac>)
 8001772:	f00a ffb9 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ffa0 	bl	80016c0 <ConsoleSendLine>
	sprintf(msg,"Colour: %s\n\tMin Time: %d\n\tMax Time: %d\n", colour->name ,dodeca->minTimeMins,dodeca->maxTimeMins);
 8001780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	7f1b      	ldrb	r3, [r3, #28]
 8001788:	4619      	mov	r1, r3
 800178a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178c:	7f5b      	ldrb	r3, [r3, #29]
 800178e:	f107 001c 	add.w	r0, r7, #28
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	460b      	mov	r3, r1
 8001796:	490a      	ldr	r1, [pc, #40]	; (80017c0 <displayDodeca+0xb0>)
 8001798:	f00a ffa6 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff8d 	bl	80016c0 <ConsoleSendLine>
}
 80017a6:	bf00      	nop
 80017a8:	3758      	adds	r7, #88	; 0x58
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	080100c8 	.word	0x080100c8
 80017b4:	080100d8 	.word	0x080100d8
 80017b8:	080100dc 	.word	0x080100dc
 80017bc:	080100e0 	.word	0x080100e0
 80017c0:	080100f8 	.word	0x080100f8

080017c4 <ConsoleCommandDumpData>:


static eCommandResult_T ConsoleCommandDumpData(const char buffer[])
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	b0b5      	sub	sp, #212	; 0xd4
 80017c8:	af0c      	add	r7, sp, #48	; 0x30
 80017ca:	61f8      	str	r0, [r7, #28]
	char msg[100];
	uint8_t recordCount;
	uint8_t recordFound = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	recordDodeca_t *record;

	dataStoreGetCurrentPosition(&recordCount);
 80017d2:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 ffce 	bl	8002778 <dataStoreGetCurrentPosition>
	ConsoleSendLine("\n*** Data Storage Dump ***\n");
 80017dc:	485c      	ldr	r0, [pc, #368]	; (8001950 <ConsoleCommandDumpData+0x18c>)
 80017de:	f7ff ff6f 	bl	80016c0 <ConsoleSendLine>
	sprintf(msg,"Task,Start Date, Start Time, End Date, End Time, Total Mins");
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	495b      	ldr	r1, [pc, #364]	; (8001954 <ConsoleCommandDumpData+0x190>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00a ff7d 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff64 	bl	80016c0 <ConsoleSendLine>
	for (uint8_t i=0;i<DATASTORE_MAX_RECORDS;i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80017fe:	e095      	b.n	800192c <ConsoleCommandDumpData+0x168>
	{
		record = dataStoreGet(i);
 8001800:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001804:	4618      	mov	r0, r3
 8001806:	f000 ffc9 	bl	800279c <dataStoreGet>
 800180a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98


		if (RECORD_STORE_USED ==  record->status)
 800180e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001812:	7e1b      	ldrb	r3, [r3, #24]
 8001814:	2b01      	cmp	r3, #1
 8001816:	f040 8084 	bne.w	8001922 <ConsoleCommandDumpData+0x15e>
		{
			recordFound = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			dodecaItem_t *dodeca;
			dodeca = dodecaGet(record->dodecaId);
 8001820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f87e 	bl	8002928 <dodecaGet>
 800182c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			struct tm *startTime;
			struct tm *endTime;
			startTime = gmtime(&record->startTime);
 8001830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001834:	3308      	adds	r3, #8
 8001836:	4618      	mov	r0, r3
 8001838:	f009 fe84 	bl	800b544 <gmtime>
 800183c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			endTime = gmtime(&record->endTime);
 8001840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001844:	3310      	adds	r3, #16
 8001846:	4618      	mov	r0, r3
 8001848:	f009 fe7c 	bl	800b544 <gmtime>
 800184c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			uint16_t diff = difftime(record->endTime, record->startTime);
 8001850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001854:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800185c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001860:	f009 fe60 	bl	800b524 <difftime>
 8001864:	ec53 2b10 	vmov	r2, r3, d0
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f9b4 	bl	8000bd8 <__aeabi_d2uiz>
 8001870:	4603      	mov	r3, r0
 8001872:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			sprintf(msg,"%s,%i-%i-%i, %i:%i:%i,%i-%i-%i, %i:%i:%i,%i ",dodeca->name,startTime->tm_mday,startTime->tm_mon+1,startTime->tm_year+1900,startTime->tm_hour,startTime->tm_min,startTime->tm_sec,endTime->tm_mday,endTime->tm_mon + 1,endTime->tm_year+1900,endTime->tm_hour,endTime->tm_min,endTime->tm_sec,diff);
 8001876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800187a:	f103 0c02 	add.w	ip, r3, #2
 800187e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 8001898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800189c:	689c      	ldr	r4, [r3, #8]
 800189e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018a2:	685d      	ldr	r5, [r3, #4]
 80018a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018a8:	681e      	ldr	r6, [r3, #0]
 80018aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ae:	68d8      	ldr	r0, [r3, #12]
 80018b0:	6178      	str	r0, [r7, #20]
 80018b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	1c58      	adds	r0, r3, #1
 80018ba:	6138      	str	r0, [r7, #16]
 80018bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f203 7e6c 	addw	lr, r3, #1900	; 0x76c
 80018c6:	4670      	mov	r0, lr
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ce:	6898      	ldr	r0, [r3, #8]
 80018d0:	60b8      	str	r0, [r7, #8]
 80018d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018d6:	6858      	ldr	r0, [r3, #4]
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	6038      	str	r0, [r7, #0]
 80018e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80018e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80018ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	930a      	str	r3, [sp, #40]	; 0x28
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	9309      	str	r3, [sp, #36]	; 0x24
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	9308      	str	r3, [sp, #32]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	9307      	str	r3, [sp, #28]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	9306      	str	r3, [sp, #24]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	9305      	str	r3, [sp, #20]
 8001904:	9604      	str	r6, [sp, #16]
 8001906:	9503      	str	r5, [sp, #12]
 8001908:	9402      	str	r4, [sp, #8]
 800190a:	9101      	str	r1, [sp, #4]
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4662      	mov	r2, ip
 8001912:	4911      	ldr	r1, [pc, #68]	; (8001958 <ConsoleCommandDumpData+0x194>)
 8001914:	f00a fee8 	bl	800c6e8 <siprintf>
			ConsoleSendLine(msg);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fecf 	bl	80016c0 <ConsoleSendLine>
	for (uint8_t i=0;i<DATASTORE_MAX_RECORDS;i++)
 8001922:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001926:	3301      	adds	r3, #1
 8001928:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800192c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001930:	2b1d      	cmp	r3, #29
 8001932:	f67f af65 	bls.w	8001800 <ConsoleCommandDumpData+0x3c>
		}

	}

	if (!recordFound)
 8001936:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <ConsoleCommandDumpData+0x180>
		ConsoleSendLine("No records have been logged");
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <ConsoleCommandDumpData+0x198>)
 8001940:	f7ff febe 	bl	80016c0 <ConsoleSendLine>

	return COMMAND_SUCCESS;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	37a4      	adds	r7, #164	; 0xa4
 800194a:	46bd      	mov	sp, r7
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194e:	bf00      	nop
 8001950:	08010120 	.word	0x08010120
 8001954:	0801013c 	.word	0x0801013c
 8001958:	08010178 	.word	0x08010178
 800195c:	080101a8 	.word	0x080101a8

08001960 <ConsoleCommandClearData>:

static eCommandResult_T ConsoleCommandClearData(const char buffer[])
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	dataStoreInit();
 8001968:	f000 fea6 	bl	80026b8 <dataStoreInit>


	return COMMAND_SUCCESS;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <ConsoleCommandConfig>:


static eCommandResult_T ConsoleCommandConfig(const char buffer[])
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	setStateControllerMode(STATE_CONT_MODE_CONFIG);
 800197e:	2001      	movs	r0, #1
 8001980:	f003 f848 	bl	8004a14 <setStateControllerMode>
	return COMMAND_SUCCESS;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <ConsoleCommandExitConfig>:
static eCommandResult_T ConsoleCommandExitConfig(const char buffer[])
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	setStateControllerMode(STATE_CONT_MODE_RUN);
 8001996:	2000      	movs	r0, #0
 8001998:	f003 f83c 	bl	8004a14 <setStateControllerMode>
	return COMMAND_SUCCESS;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <ConsoleCommandReboot>:

static eCommandResult_T ConsoleCommandReboot(const char buffer[])
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	NVIC_SystemReset();
 80019ae:	f7ff fe99 	bl	80016e4 <__NVIC_SystemReset>
	...

080019b4 <ConsoleCommandReset>:
	return COMMAND_SUCCESS;
}

static eCommandResult_T ConsoleCommandReset(const char buffer[])
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	ConsoleSendLine("Resetting Configuration to factory default");
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <ConsoleCommandReset+0x28>)
 80019be:	f7ff fe7f 	bl	80016c0 <ConsoleSendLine>
	dodecaReset();
 80019c2:	f000 ff15 	bl	80027f0 <dodecaReset>
	sysConfigSave();
 80019c6:	f003 faff 	bl	8004fc8 <sysConfigSave>
	ConsoleSendLine("Done");
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <ConsoleCommandReset+0x2c>)
 80019cc:	f7ff fe78 	bl	80016c0 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	080101c4 	.word	0x080101c4
 80019e0:	080101f0 	.word	0x080101f0

080019e4 <ConsoleCommandDodecaSet>:

static eCommandResult_T ConsoleCommandDodecaSet(const char buffer[])
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b098      	sub	sp, #96	; 0x60
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	// get the Dodeca Id to set
	int16_t dodecaId;
	int16_t value;
	dodecaItem_t *dodeca = 0x0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	65fb      	str	r3, [r7, #92]	; 0x5c
	char msg[50];

		// get the command
		uint32_t cmdIndex;
		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &cmdIndex))
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	461a      	mov	r2, r3
 80019f6:	2101      	movs	r1, #1
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fd03 	bl	8001404 <ConsoleParamFindN>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <ConsoleCommandDodecaSet+0x2a>
		{
			ConsoleSendLine("Please supply a command");
 8001a04:	4866      	ldr	r0, [pc, #408]	; (8001ba0 <ConsoleCommandDodecaSet+0x1bc>)
 8001a06:	f7ff fe5b 	bl	80016c0 <ConsoleSendLine>
			return COMMAND_PARAMETER_ERROR;
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	e0c3      	b.n	8001b96 <ConsoleCommandDodecaSet+0x1b2>
		}

		dodecaId = detectFaceUp();
 8001a0e:	f001 ffe1 	bl	80039d4 <detectFaceUp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


		if (dodecaId< 0)
 8001a18:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da04      	bge.n	8001a2a <ConsoleCommandDodecaSet+0x46>
		{
			ConsoleSendLine("Face not detected");
 8001a20:	4860      	ldr	r0, [pc, #384]	; (8001ba4 <ConsoleCommandDodecaSet+0x1c0>)
 8001a22:	f7ff fe4d 	bl	80016c0 <ConsoleSendLine>
			return COMMAND_ERROR;
 8001a26:	23ff      	movs	r3, #255	; 0xff
 8001a28:	e0b5      	b.n	8001b96 <ConsoleCommandDodecaSet+0x1b2>
		}
		sprintf(msg,"Detected face: %i",dodecaId);
 8001a2a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	495d      	ldr	r1, [pc, #372]	; (8001ba8 <ConsoleCommandDodecaSet+0x1c4>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a fe57 	bl	800c6e8 <siprintf>
		ConsoleSendLine(msg);
 8001a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fe3e 	bl	80016c0 <ConsoleSendLine>

		dodeca = dodecaGet(dodecaId);
 8001a44:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 ff6c 	bl	8002928 <dodecaGet>
 8001a50:	65f8      	str	r0, [r7, #92]	; 0x5c

		char name[DODECA_NAME_MAX];
		int16_t colourId;

		switch (buffer[cmdIndex])
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3b63      	subs	r3, #99	; 0x63
 8001a5c:	2b0b      	cmp	r3, #11
 8001a5e:	f200 8093 	bhi.w	8001b88 <ConsoleCommandDodecaSet+0x1a4>
 8001a62:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <ConsoleCommandDodecaSet+0x84>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001ae3 	.word	0x08001ae3
 8001a6c:	08001aa1 	.word	0x08001aa1
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	08001b89 	.word	0x08001b89
 8001a78:	08001b89 	.word	0x08001b89
 8001a7c:	08001b89 	.word	0x08001b89
 8001a80:	08001b5d 	.word	0x08001b5d
 8001a84:	08001b89 	.word	0x08001b89
 8001a88:	08001b89 	.word	0x08001b89
 8001a8c:	08001b89 	.word	0x08001b89
 8001a90:	08001b31 	.word	0x08001b31
 8001a94:	08001aa9 	.word	0x08001aa9
		{
		case 'e':
				dodeca->enabled =DODECA_ENABLED;
 8001a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	705a      	strb	r2, [r3, #1]
			break;
 8001a9e:	e073      	b.n	8001b88 <ConsoleCommandDodecaSet+0x1a4>
		case 'd':
				dodeca->enabled = DODECA_DISABLED;
 8001aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	705a      	strb	r2, [r3, #1]
			break;
 8001aa6:	e06f      	b.n	8001b88 <ConsoleCommandDodecaSet+0x1a4>
		case 'n':
					// Get the task Name
					ConsoleReceiveParamString(buffer, 3, name,DODECA_NAME_MAX );
 8001aa8:	f107 020c 	add.w	r2, r7, #12
 8001aac:	2314      	movs	r3, #20
 8001aae:	2103      	movs	r1, #3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fcd8 	bl	8001466 <ConsoleReceiveParamString>
					// Check Length
					if (strlen(name)< DODECA_NAME_MIN)
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fb9a 	bl	80001f4 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d804      	bhi.n	8001ad0 <ConsoleCommandDodecaSet+0xec>
					{
						ConsoleSendLine("Name too short");
 8001ac6:	4839      	ldr	r0, [pc, #228]	; (8001bac <ConsoleCommandDodecaSet+0x1c8>)
 8001ac8:	f7ff fdfa 	bl	80016c0 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 8001acc:	2310      	movs	r3, #16
 8001ace:	e062      	b.n	8001b96 <ConsoleCommandDodecaSet+0x1b2>
					}
					strcpy(dodeca->name,name);
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f107 020c 	add.w	r2, r7, #12
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f00a fea2 	bl	800c824 <strcpy>
					break;
 8001ae0:	e052      	b.n	8001b88 <ConsoleCommandDodecaSet+0x1a4>
		case 'c':
					// get the colour number

					ConsoleReceiveParamInt16(buffer, 3, &colourId);
 8001ae2:	f107 030a 	add.w	r3, r7, #10
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2103      	movs	r1, #3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fceb 	bl	80014c6 <ConsoleReceiveParamInt16>
					if (colourId > COLOUR_COUNT_MAX)
 8001af0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001af4:	2b0e      	cmp	r3, #14
 8001af6:	dd04      	ble.n	8001b02 <ConsoleCommandDodecaSet+0x11e>
					{
						ConsoleSendLine("Invalid Colour");
 8001af8:	482d      	ldr	r0, [pc, #180]	; (8001bb0 <ConsoleCommandDodecaSet+0x1cc>)
 8001afa:	f7ff fde1 	bl	80016c0 <ConsoleSendLine>
						return COMMAND_PARAMETER_ERROR;
 8001afe:	2310      	movs	r3, #16
 8001b00:	e049      	b.n	8001b96 <ConsoleCommandDodecaSet+0x1b2>
					}

					dodeca->colour = colourFindByid(colourId)->code;
 8001b02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fdab 	bl	8002664 <colourFindByid>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b14:	619a      	str	r2, [r3, #24]

					ConsoleSendString("Colour set : ");
 8001b16:	4827      	ldr	r0, [pc, #156]	; (8001bb4 <ConsoleCommandDodecaSet+0x1d0>)
 8001b18:	f7ff fdc5 	bl	80016a6 <ConsoleSendString>
					ConsoleSendLine(colourFindByCode(colourId)->name);
 8001b1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fd75 	bl	8002610 <colourFindByCode>
 8001b26:	4603      	mov	r3, r0
 8001b28:	3301      	adds	r3, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fdc8 	bl	80016c0 <ConsoleSendLine>

		case 'm':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001b30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b34:	461a      	mov	r2, r3
 8001b36:	2102      	movs	r1, #2
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fcc4 	bl	80014c6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001b3e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da04      	bge.n	8001b50 <ConsoleCommandDodecaSet+0x16c>
				{
					ConsoleSendLine("Invalid Max time");
 8001b46:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <ConsoleCommandDodecaSet+0x1d4>)
 8001b48:	f7ff fdba 	bl	80016c0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	e022      	b.n	8001b96 <ConsoleCommandDodecaSet+0x1b2>
				}
				dodeca->maxTimeMins = value;
 8001b50:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	775a      	strb	r2, [r3, #29]
			break;
 8001b5a:	e015      	b.n	8001b88 <ConsoleCommandDodecaSet+0x1a4>
		case 'i':
				ConsoleReceiveParamInt16(buffer, 2, &value);
 8001b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b60:	461a      	mov	r2, r3
 8001b62:	2102      	movs	r1, #2
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fcae 	bl	80014c6 <ConsoleReceiveParamInt16>
				if (value <0)
 8001b6a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da04      	bge.n	8001b7c <ConsoleCommandDodecaSet+0x198>
				{
					ConsoleSendLine("Invalid Min time");
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <ConsoleCommandDodecaSet+0x1d8>)
 8001b74:	f7ff fda4 	bl	80016c0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 8001b78:	2310      	movs	r3, #16
 8001b7a:	e00c      	b.n	8001b96 <ConsoleCommandDodecaSet+0x1b2>
				}
				dodeca->minTimeMins = value;
 8001b7c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b84:	771a      	strb	r2, [r3, #28]
			break;
 8001b86:	bf00      	nop
		}
		// Show the current face info
		displayDodeca(dodecaId);
 8001b88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fdbe 	bl	8001710 <displayDodeca>
		return COMMAND_SUCCESS;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3760      	adds	r7, #96	; 0x60
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	080101f8 	.word	0x080101f8
 8001ba4:	08010210 	.word	0x08010210
 8001ba8:	08010224 	.word	0x08010224
 8001bac:	08010238 	.word	0x08010238
 8001bb0:	08010248 	.word	0x08010248
 8001bb4:	08010258 	.word	0x08010258
 8001bb8:	08010268 	.word	0x08010268
 8001bbc:	0801027c 	.word	0x0801027c

08001bc0 <ConsoleCommandDodecaQuery>:

static eCommandResult_T ConsoleCommandDodecaQuery(const char buffer[])
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	uint32_t param1;

		if (COMMAND_SUCCESS != ConsoleParamFindN(buffer, 1, &param1))
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2101      	movs	r1, #1
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fc17 	bl	8001404 <ConsoleParamFindN>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <ConsoleCommandDodecaQuery+0x38>
		{
			// List all tasks
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	75fb      	strb	r3, [r7, #23]
 8001be0:	e006      	b.n	8001bf0 <ConsoleCommandDodecaQuery+0x30>
			{
				displayDodeca(f);
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fd93 	bl	8001710 <displayDodeca>
			for (uint8_t f=0;f<DODECA_COUNT_MAX;f++)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	3301      	adds	r3, #1
 8001bee:	75fb      	strb	r3, [r7, #23]
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b0b      	cmp	r3, #11
 8001bf4:	d9f5      	bls.n	8001be2 <ConsoleCommandDodecaQuery+0x22>
 8001bf6:	e019      	b.n	8001c2c <ConsoleCommandDodecaQuery+0x6c>
			}
		}
		else
		{
			int16_t taskId;
			ConsoleReceiveParamInt16(buffer, 1, &taskId );
 8001bf8:	f107 030e 	add.w	r3, r7, #14
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2101      	movs	r1, #1
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fc60 	bl	80014c6 <ConsoleReceiveParamInt16>

			if (taskId < 0 || taskId > DODECA_COUNT_MAX-1)
 8001c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db03      	blt.n	8001c16 <ConsoleCommandDodecaQuery+0x56>
 8001c0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c12:	2b0b      	cmp	r3, #11
 8001c14:	dd04      	ble.n	8001c20 <ConsoleCommandDodecaQuery+0x60>
			{
				ConsoleSendLine("Invalid Task number");
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <ConsoleCommandDodecaQuery+0x78>)
 8001c18:	f7ff fd52 	bl	80016c0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	e006      	b.n	8001c2e <ConsoleCommandDodecaQuery+0x6e>
			}

			displayDodeca(taskId);
 8001c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fd72 	bl	8001710 <displayDodeca>

		}
		return COMMAND_SUCCESS;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	08010290 	.word	0x08010290

08001c3c <ConsoleCommandSaveConfig>:


static eCommandResult_T ConsoleCommandSaveConfig(const char buffer[])
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	sysConfigSave();
 8001c44:	f003 f9c0 	bl	8004fc8 <sysConfigSave>
	ConsoleSendLine("Config Saved!");
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <ConsoleCommandSaveConfig+0x1c>)
 8001c4a:	f7ff fd39 	bl	80016c0 <ConsoleSendLine>
	return COMMAND_SUCCESS;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	080102a4 	.word	0x080102a4

08001c5c <ConsoleCommandFaceUpQuery>:

static eCommandResult_T ConsoleCommandFaceUpQuery(const char buffer[])
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b0a5      	sub	sp, #148	; 0x94
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	6078      	str	r0, [r7, #4]

	uint8_t face;
	char msg[30];

	MPU6050_t data;
	MPU6050ReadStable(&data);
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f937 	bl	8002edc <MPU6050ReadStable>


	sprintf(msg,"Angle X: %f Y: %f",data.KalmanAngleX, data.KalmanAngleY);
 8001c6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c76:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001c7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4926      	ldr	r1, [pc, #152]	; (8001d1c <ConsoleCommandFaceUpQuery+0xc0>)
 8001c84:	4620      	mov	r0, r4
 8001c86:	f00a fd2f 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 8001c8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fd16 	bl	80016c0 <ConsoleSendLine>

	face = detectFaceUp();
 8001c94:	f001 fe9e 	bl	80039d4 <detectFaceUp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (face < FACE_COUNT)
 8001c9e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ca2:	2b0b      	cmp	r3, #11
 8001ca4:	d827      	bhi.n	8001cf6 <ConsoleCommandFaceUpQuery+0x9a>
	{
		sprintf(msg,"Detected face %i is up",face);
 8001ca6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001caa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cae:	491c      	ldr	r1, [pc, #112]	; (8001d20 <ConsoleCommandFaceUpQuery+0xc4>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00a fd19 	bl	800c6e8 <siprintf>
		ConsoleSendLine(msg);
 8001cb6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fd00 	bl	80016c0 <ConsoleSendLine>
		uint32_t rgb_color = hsl_to_rgb((face*30), 255, 127);
 8001cc0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	227f      	movs	r2, #127	; 0x7f
 8001cd0:	21ff      	movs	r1, #255	; 0xff
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fbc8 	bl	8005468 <hsl_to_rgb>
 8001cd8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		ledAllOff();
 8001cdc:	f001 fd8e 	bl	80037fc <ledAllOff>
		ledSetFaceColour(face, rgb_color,0x0,LED_FACE_MODE_NORMAL);
 8001ce0:	f897 0087 	ldrb.w	r0, [r7, #135]	; 0x87
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001cec:	f001 fda6 	bl	800383c <ledSetFaceColour>
		ledRender();
 8001cf0:	f001 fd9b 	bl	800382a <ledRender>
 8001cf4:	e00c      	b.n	8001d10 <ConsoleCommandFaceUpQuery+0xb4>

	}
	else
	{
		sprintf(msg,"** Face NOT detected %i",face);
 8001cf6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001cfa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cfe:	4909      	ldr	r1, [pc, #36]	; (8001d24 <ConsoleCommandFaceUpQuery+0xc8>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00a fcf1 	bl	800c6e8 <siprintf>
		ConsoleSendLine(msg);
 8001d06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fcd8 	bl	80016c0 <ConsoleSendLine>





	return COMMAND_SUCCESS;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	378c      	adds	r7, #140	; 0x8c
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	080102b4 	.word	0x080102b4
 8001d20:	080102c8 	.word	0x080102c8
 8001d24:	080102e0 	.word	0x080102e0

08001d28 <ConsoleCommandLEDSet>:

static eCommandResult_T ConsoleCommandLEDSet(const char buffer[])
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	uint32_t startIndex;
	eCommandResult_T result;
	int16_t faceNumber;
	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	461a      	mov	r2, r3
 8001d36:	2101      	movs	r1, #1
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fb63 	bl	8001404 <ConsoleParamFindN>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]

	if (result != COMMAND_SUCCESS)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <ConsoleCommandLEDSet+0x24>
		return result;
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	e078      	b.n	8001e3e <ConsoleCommandLEDSet+0x116>

	uint8_t command = buffer[startIndex];
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	75bb      	strb	r3, [r7, #22]
	switch (command)
 8001d56:	7dbb      	ldrb	r3, [r7, #22]
 8001d58:	2b6f      	cmp	r3, #111	; 0x6f
 8001d5a:	d062      	beq.n	8001e22 <ConsoleCommandLEDSet+0xfa>
 8001d5c:	2b6f      	cmp	r3, #111	; 0x6f
 8001d5e:	dc6b      	bgt.n	8001e38 <ConsoleCommandLEDSet+0x110>
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d063      	beq.n	8001e2c <ConsoleCommandLEDSet+0x104>
 8001d64:	2b66      	cmp	r3, #102	; 0x66
 8001d66:	d167      	bne.n	8001e38 <ConsoleCommandLEDSet+0x110>
	{
		case 'f':

			result = ConsoleReceiveParamInt16(buffer, 2, &faceNumber);
 8001d68:	f107 030e 	add.w	r3, r7, #14
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2102      	movs	r1, #2
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fba8 	bl	80014c6 <ConsoleReceiveParamInt16>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]
			if (result != COMMAND_SUCCESS)
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <ConsoleCommandLEDSet+0x62>
			{
				ConsoleSendLine("Invalid Face ID");
 8001d80:	4831      	ldr	r0, [pc, #196]	; (8001e48 <ConsoleCommandLEDSet+0x120>)
 8001d82:	f7ff fc9d 	bl	80016c0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001d86:	2310      	movs	r3, #16
 8001d88:	e059      	b.n	8001e3e <ConsoleCommandLEDSet+0x116>
			}

			if (faceNumber >= PIXEL_RINGS)
 8001d8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d8e:	2b0b      	cmp	r3, #11
 8001d90:	dd04      	ble.n	8001d9c <ConsoleCommandLEDSet+0x74>
			{
				ConsoleSendLine("Invalid Face ID - Must be Zero Index");
 8001d92:	482e      	ldr	r0, [pc, #184]	; (8001e4c <ConsoleCommandLEDSet+0x124>)
 8001d94:	f7ff fc94 	bl	80016c0 <ConsoleSendLine>
				return COMMAND_PARAMETER_ERROR;
 8001d98:	2310      	movs	r3, #16
 8001d9a:	e050      	b.n	8001e3e <ConsoleCommandLEDSet+0x116>
			}


			result = ConsoleParamFindN(buffer,3,&startIndex);
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	461a      	mov	r2, r3
 8001da2:	2103      	movs	r1, #3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff fb2d 	bl	8001404 <ConsoleParamFindN>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]
			uint8_t colour = buffer[startIndex];
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	757b      	strb	r3, [r7, #21]
			if ('r' == colour)
 8001db8:	7d7b      	ldrb	r3, [r7, #21]
 8001dba:	2b72      	cmp	r3, #114	; 0x72
 8001dbc:	d10d      	bne.n	8001dda <ConsoleCommandLEDSet+0xb2>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_RED_ID)->code,0x0,LED_FACE_MODE_NORMAL);
 8001dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc2:	b2dc      	uxtb	r4, r3
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f000 fc4d 	bl	8002664 <colourFindByid>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6919      	ldr	r1, [r3, #16]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f001 fd32 	bl	800383c <ledSetFaceColour>
 8001dd8:	e020      	b.n	8001e1c <ConsoleCommandLEDSet+0xf4>
			else if ('g' == colour)
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	2b67      	cmp	r3, #103	; 0x67
 8001dde:	d10d      	bne.n	8001dfc <ConsoleCommandLEDSet+0xd4>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_GREEN_ID)->code,0x0,LED_FACE_MODE_NORMAL);
 8001de0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de4:	b2dc      	uxtb	r4, r3
 8001de6:	2002      	movs	r0, #2
 8001de8:	f000 fc3c 	bl	8002664 <colourFindByid>
 8001dec:	4603      	mov	r3, r0
 8001dee:	6919      	ldr	r1, [r3, #16]
 8001df0:	2300      	movs	r3, #0
 8001df2:	2200      	movs	r2, #0
 8001df4:	4620      	mov	r0, r4
 8001df6:	f001 fd21 	bl	800383c <ledSetFaceColour>
 8001dfa:	e00f      	b.n	8001e1c <ConsoleCommandLEDSet+0xf4>
			else if ('b' == colour)
 8001dfc:	7d7b      	ldrb	r3, [r7, #21]
 8001dfe:	2b62      	cmp	r3, #98	; 0x62
 8001e00:	d10c      	bne.n	8001e1c <ConsoleCommandLEDSet+0xf4>
				ledSetFaceColour(faceNumber,colourFindByid(COLOUR_BLUE_ID)->code,0x0,LED_FACE_MODE_NORMAL);
 8001e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e06:	b2dc      	uxtb	r4, r3
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f000 fc2b 	bl	8002664 <colourFindByid>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	2300      	movs	r3, #0
 8001e14:	2200      	movs	r2, #0
 8001e16:	4620      	mov	r0, r4
 8001e18:	f001 fd10 	bl	800383c <ledSetFaceColour>

			ledRender();
 8001e1c:	f001 fd05 	bl	800382a <ledRender>

			break;
 8001e20:	e00c      	b.n	8001e3c <ConsoleCommandLEDSet+0x114>
		case 'o':
			ledAllOff();
 8001e22:	f001 fceb 	bl	80037fc <ledAllOff>
			ledRender();
 8001e26:	f001 fd00 	bl	800382a <ledRender>
			break;
 8001e2a:	e007      	b.n	8001e3c <ConsoleCommandLEDSet+0x114>
		case'd':
				ledDance();
 8001e2c:	f001 fd83 	bl	8003936 <ledDance>
				ConsoleSendLine("Finished");
 8001e30:	4807      	ldr	r0, [pc, #28]	; (8001e50 <ConsoleCommandLEDSet+0x128>)
 8001e32:	f7ff fc45 	bl	80016c0 <ConsoleSendLine>
			break;
 8001e36:	e001      	b.n	8001e3c <ConsoleCommandLEDSet+0x114>
		default :
			return CONSOLE_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <ConsoleCommandLEDSet+0x116>
			break;
	}


	return CONSOLE_SUCCESS;
 8001e3c:	2300      	movs	r3, #0

}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	080102f8 	.word	0x080102f8
 8001e4c:	08010308 	.word	0x08010308
 8001e50:	08010330 	.word	0x08010330

08001e54 <ConsoleCommandDateSet>:
 * Set RTC Date
 * Paramater format : DD MM YY
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandDateSet(const char buffer[])
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	6078      	str	r0, [r7, #4]
	int month;
	int year;
	uint32_t startIndex;
	RTC_DateTypeDef sDate;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	461a      	mov	r2, r3
 8001e62:	2101      	movs	r1, #1
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff facd 	bl	8001404 <ConsoleParamFindN>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	77fb      	strb	r3, [r7, #31]
	if (result != COMMAND_SUCCESS)
 8001e6e:	7ffb      	ldrb	r3, [r7, #31]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <ConsoleCommandDateSet+0x24>
		return COMMAND_PARAMETER_ERROR;
 8001e74:	2310      	movs	r3, #16
 8001e76:	e049      	b.n	8001f0c <ConsoleCommandDateSet+0xb8>

	sscanf(&buffer[startIndex],"%d-%d-%d",&day,&month,&year);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	18d0      	adds	r0, r2, r3
 8001e7e:	f107 0114 	add.w	r1, r7, #20
 8001e82:	f107 0218 	add.w	r2, r7, #24
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4921      	ldr	r1, [pc, #132]	; (8001f14 <ConsoleCommandDateSet+0xc0>)
 8001e90:	f00a fc4a 	bl	800c728 <siscanf>

	if (!IS_RTC_DATE(day) )
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <ConsoleCommandDateSet+0x4c>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b1f      	cmp	r3, #31
 8001e9e:	d904      	bls.n	8001eaa <ConsoleCommandDateSet+0x56>
	{
		ConsoleSendLine("** ERROR *** Day value incorrect");
 8001ea0:	481d      	ldr	r0, [pc, #116]	; (8001f18 <ConsoleCommandDateSet+0xc4>)
 8001ea2:	f7ff fc0d 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	e030      	b.n	8001f0c <ConsoleCommandDateSet+0xb8>
	}



	if (!IS_RTC_MONTH(month) )
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <ConsoleCommandDateSet+0x62>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d904      	bls.n	8001ec0 <ConsoleCommandDateSet+0x6c>
	{
		ConsoleSendLine("** ERROR *** Month value incorrect");
 8001eb6:	4819      	ldr	r0, [pc, #100]	; (8001f1c <ConsoleCommandDateSet+0xc8>)
 8001eb8:	f7ff fc02 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	e025      	b.n	8001f0c <ConsoleCommandDateSet+0xb8>
	}

	if (!IS_RTC_YEAR(year) )
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b63      	cmp	r3, #99	; 0x63
 8001ec4:	d904      	bls.n	8001ed0 <ConsoleCommandDateSet+0x7c>
	{
		ConsoleSendLine("** ERROR *** Year value incorrect");
 8001ec6:	4816      	ldr	r0, [pc, #88]	; (8001f20 <ConsoleCommandDateSet+0xcc>)
 8001ec8:	f7ff fbfa 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001ecc:	2310      	movs	r3, #16
 8001ece:	e01d      	b.n	8001f0c <ConsoleCommandDateSet+0xb8>
	}


	sDate.Date = day;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	72bb      	strb	r3, [r7, #10]
	sDate.Month = month;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	727b      	strb	r3, [r7, #9]
	sDate.Year = year;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	72fb      	strb	r3, [r7, #11]
	sDate.WeekDay = 7;
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	723b      	strb	r3, [r7, #8]


	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	2200      	movs	r2, #0
 8001eec:	4619      	mov	r1, r3
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <ConsoleCommandDateSet+0xd0>)
 8001ef0:	f006 fdd8 	bl	8008aa4 <HAL_RTC_SetDate>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <ConsoleCommandDateSet+0xb0>
	{
		ConsoleSendLine("** ERROR *** Date format incorrect");
 8001efa:	480b      	ldr	r0, [pc, #44]	; (8001f28 <ConsoleCommandDateSet+0xd4>)
 8001efc:	f7ff fbe0 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001f00:	2310      	movs	r3, #16
 8001f02:	e003      	b.n	8001f0c <ConsoleCommandDateSet+0xb8>
	}
	else
	{
		ConsoleSendLine("Date Set");
 8001f04:	4809      	ldr	r0, [pc, #36]	; (8001f2c <ConsoleCommandDateSet+0xd8>)
 8001f06:	f7ff fbdb 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001f0a:	2300      	movs	r3, #0
	}
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	0801033c 	.word	0x0801033c
 8001f18:	08010348 	.word	0x08010348
 8001f1c:	0801036c 	.word	0x0801036c
 8001f20:	08010390 	.word	0x08010390
 8001f24:	20000a00 	.word	0x20000a00
 8001f28:	080103b4 	.word	0x080103b4
 8001f2c:	080103d8 	.word	0x080103d8

08001f30 <ConsoleCommandTimeSet>:
 * Set RTC Time
 * Paramater format : HH:MM:SS
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandTimeSet(const char buffer[])
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	6078      	str	r0, [r7, #4]
	int hour;
	int sec;
	uint32_t startIndex;
	RTC_TimeTypeDef sTime;

	result = ConsoleParamFindN(buffer,1,&startIndex);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2101      	movs	r1, #1
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fa5f 	bl	8001404 <ConsoleParamFindN>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (result != COMMAND_SUCCESS)
 8001f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <ConsoleCommandTimeSet+0x28>
		return COMMAND_PARAMETER_ERROR;
 8001f54:	2310      	movs	r3, #16
 8001f56:	e041      	b.n	8001fdc <ConsoleCommandTimeSet+0xac>

	sscanf(&buffer[startIndex],"%d:%d:%d",&hour,&min,&sec);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	18d0      	adds	r0, r2, r3
 8001f5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	491d      	ldr	r1, [pc, #116]	; (8001fe4 <ConsoleCommandTimeSet+0xb4>)
 8001f70:	f00a fbda 	bl	800c728 <siscanf>

	if (!IS_RTC_MINUTES(min) )
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	2b3b      	cmp	r3, #59	; 0x3b
 8001f78:	d904      	bls.n	8001f84 <ConsoleCommandTimeSet+0x54>
	{
		ConsoleSendLine("** ERROR *** Minute value incorrect");
 8001f7a:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <ConsoleCommandTimeSet+0xb8>)
 8001f7c:	f7ff fba0 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001f80:	2310      	movs	r3, #16
 8001f82:	e02b      	b.n	8001fdc <ConsoleCommandTimeSet+0xac>
	}



	if (!IS_RTC_SECONDS(sec) )
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	2b3b      	cmp	r3, #59	; 0x3b
 8001f88:	d904      	bls.n	8001f94 <ConsoleCommandTimeSet+0x64>
	{
		ConsoleSendLine("** ERROR *** Seconds value incorrect");
 8001f8a:	4818      	ldr	r0, [pc, #96]	; (8001fec <ConsoleCommandTimeSet+0xbc>)
 8001f8c:	f7ff fb98 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001f90:	2310      	movs	r3, #16
 8001f92:	e023      	b.n	8001fdc <ConsoleCommandTimeSet+0xac>
	}

	if (!IS_RTC_HOUR24(hour) )
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	2b17      	cmp	r3, #23
 8001f98:	d904      	bls.n	8001fa4 <ConsoleCommandTimeSet+0x74>
	{
		ConsoleSendLine("** ERROR *** Hour value incorrect");
 8001f9a:	4815      	ldr	r0, [pc, #84]	; (8001ff0 <ConsoleCommandTimeSet+0xc0>)
 8001f9c:	f7ff fb90 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	e01b      	b.n	8001fdc <ConsoleCommandTimeSet+0xac>
	}


	sTime.Hours = hour;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = min;
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = sec;
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	72bb      	strb	r3, [r7, #10]
	//sTime.TimeFormat = RTC_FORMAT_B


	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) // Must Set using BIN else Year is incorrect!
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <ConsoleCommandTimeSet+0xc4>)
 8001fc0:	f006 fc78 	bl	80088b4 <HAL_RTC_SetTime>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <ConsoleCommandTimeSet+0xa4>
	{
		ConsoleSendLine("** ERROR *** Time format incorrect");
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <ConsoleCommandTimeSet+0xc8>)
 8001fcc:	f7ff fb78 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_PARAMETER_ERROR;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	e003      	b.n	8001fdc <ConsoleCommandTimeSet+0xac>
	}
	else
	{
		ConsoleSendLine("Time Set");
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <ConsoleCommandTimeSet+0xcc>)
 8001fd6:	f7ff fb73 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8001fda:	2300      	movs	r3, #0
	}
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3730      	adds	r7, #48	; 0x30
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	080103e4 	.word	0x080103e4
 8001fe8:	080103f0 	.word	0x080103f0
 8001fec:	08010414 	.word	0x08010414
 8001ff0:	0801043c 	.word	0x0801043c
 8001ff4:	20000a00 	.word	0x20000a00
 8001ff8:	08010460 	.word	0x08010460
 8001ffc:	08010484 	.word	0x08010484

08002000 <ConsoleCommandLipoQuery>:


static eCommandResult_T ConsoleCommandLipoQuery(const char buffer[])
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b090      	sub	sp, #64	; 0x40
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	uint16_t voltage;
	uint16_t temp;
	uint16_t version;
	char msg[50];
	lc709203_getCellVoltage(&voltage);
 8002008:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fbac 	bl	800376a <lc709203_getCellVoltage>
	lc709203_getCellTemp(&temp);
 8002012:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fbb4 	bl	8003784 <lc709203_getCellTemp>
	lc709203_getId(&version);
 800201c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8002020:	4618      	mov	r0, r3
 8002022:	f001 fbbc 	bl	800379e <lc709203_getId>

	sprintf(msg,"-- Lipo Cell Details --");
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	4922      	ldr	r1, [pc, #136]	; (80020b4 <ConsoleCommandLipoQuery+0xb4>)
 800202c:	4618      	mov	r0, r3
 800202e:	f00a fb5b 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fb42 	bl	80016c0 <ConsoleSendLine>

	sprintf(msg,"Monitor Version: %d",version);
 800203c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800203e:	461a      	mov	r2, r3
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	491c      	ldr	r1, [pc, #112]	; (80020b8 <ConsoleCommandLipoQuery+0xb8>)
 8002046:	4618      	mov	r0, r3
 8002048:	f00a fb4e 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb35 	bl	80016c0 <ConsoleSendLine>

	sprintf(msg,"Cell Voltage: %1.4f v",((double)voltage/1000));
 8002056:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa6b 	bl	8000534 <__aeabi_ui2d>
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <ConsoleCommandLipoQuery+0xbc>)
 8002064:	f7fe fc0a 	bl	800087c <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	f107 0008 	add.w	r0, r7, #8
 8002070:	4913      	ldr	r1, [pc, #76]	; (80020c0 <ConsoleCommandLipoQuery+0xc0>)
 8002072:	f00a fb39 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fb20 	bl	80016c0 <ConsoleSendLine>

	sprintf(msg,"Cell Temp: %1.2f v",((double)temp/100));
 8002080:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa56 	bl	8000534 <__aeabi_ui2d>
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <ConsoleCommandLipoQuery+0xc4>)
 800208e:	f7fe fbf5 	bl	800087c <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	f107 0008 	add.w	r0, r7, #8
 800209a:	490b      	ldr	r1, [pc, #44]	; (80020c8 <ConsoleCommandLipoQuery+0xc8>)
 800209c:	f00a fb24 	bl	800c6e8 <siprintf>
	ConsoleSendLine(msg);
 80020a0:	f107 0308 	add.w	r3, r7, #8
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fb0b 	bl	80016c0 <ConsoleSendLine>



	return COMMAND_SUCCESS;
 80020aa:	2300      	movs	r3, #0

}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3740      	adds	r7, #64	; 0x40
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	08010490 	.word	0x08010490
 80020b8:	080104a8 	.word	0x080104a8
 80020bc:	408f4000 	.word	0x408f4000
 80020c0:	080104bc 	.word	0x080104bc
 80020c4:	40590000 	.word	0x40590000
 80020c8:	080104d4 	.word	0x080104d4

080020cc <ConsoleCommandAccelQuery>:
 * @param: Buffer
 * @return: eCommandResult_T
 *
 ***********************************************************/
static eCommandResult_T ConsoleCommandAccelQuery(const char buffer[])
{
 80020cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020d0:	b0c3      	sub	sp, #268	; 0x10c
 80020d2:	af08      	add	r7, sp, #32
 80020d4:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	char binStr[9];
	MPU6050_t data;
	char msg[100];
	uint32_t paramIndex;
	float rawAveX = 0;
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float rawAveY = 0;
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float rawAveZ = 0;
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	ConsoleParamFindN(buffer, 1 , &paramIndex);
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	461a      	mov	r2, r3
 80020f4:	2101      	movs	r1, #1
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff f984 	bl	8001404 <ConsoleParamFindN>

	if (0 == paramIndex)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d11a      	bne.n	8002138 <ConsoleCommandAccelQuery+0x6c>
	{
		MPU6050_Read_All(&I2C_MPU6050, &data);
 8002102:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002106:	4619      	mov	r1, r3
 8002108:	48bd      	ldr	r0, [pc, #756]	; (8002400 <ConsoleCommandAccelQuery+0x334>)
 800210a:	f000 ff05 	bl	8002f18 <MPU6050_Read_All>
		sprintf(msg,"X Angle\t: %f \t\t Y Angle\t: %f\n",data.KalmanAngleX, data.KalmanAngleY);
 800210e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002112:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002116:	f107 040c 	add.w	r4, r7, #12
 800211a:	e9cd 2300 	strd	r2, r3, [sp]
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	49b8      	ldr	r1, [pc, #736]	; (8002404 <ConsoleCommandAccelQuery+0x338>)
 8002124:	4620      	mov	r0, r4
 8002126:	f00a fadf 	bl	800c6e8 <siprintf>
		ConsoleSendLine(msg);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fac6 	bl	80016c0 <ConsoleSendLine>
		return COMMAND_SUCCESS;
 8002134:	2300      	movs	r3, #0
 8002136:	e15d      	b.n	80023f4 <ConsoleCommandAccelQuery+0x328>
	}


	// Read Raw n Times (Param r n where n = number of reads
	switch (buffer[paramIndex])
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3b67      	subs	r3, #103	; 0x67
 8002142:	2b10      	cmp	r3, #16
 8002144:	d824      	bhi.n	8002190 <ConsoleCommandAccelQuery+0xc4>
 8002146:	a201      	add	r2, pc, #4	; (adr r2, 800214c <ConsoleCommandAccelQuery+0x80>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	0800233f 	.word	0x0800233f
 8002150:	08002191 	.word	0x08002191
 8002154:	08002191 	.word	0x08002191
 8002158:	08002191 	.word	0x08002191
 800215c:	080022eb 	.word	0x080022eb
 8002160:	08002191 	.word	0x08002191
 8002164:	08002191 	.word	0x08002191
 8002168:	08002191 	.word	0x08002191
 800216c:	08002191 	.word	0x08002191
 8002170:	08002191 	.word	0x08002191
 8002174:	08002191 	.word	0x08002191
 8002178:	08002195 	.word	0x08002195
 800217c:	08002191 	.word	0x08002191
 8002180:	08002191 	.word	0x08002191
 8002184:	08002191 	.word	0x08002191
 8002188:	08002191 	.word	0x08002191
 800218c:	0800239d 	.word	0x0800239d
	{
		default:
				return COMMAND_PARAMETER_ERROR;
 8002190:	2310      	movs	r3, #16
 8002192:	e12f      	b.n	80023f4 <ConsoleCommandAccelQuery+0x328>
		case 'r':
				ConsoleReceiveParamInt16(buffer, 2, &n);
 8002194:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002198:	461a      	mov	r2, r3
 800219a:	2102      	movs	r1, #2
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff f992 	bl	80014c6 <ConsoleReceiveParamInt16>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80021a8:	e052      	b.n	8002250 <ConsoleCommandAccelQuery+0x184>
				{
					MPU6050_Read_Accel(&I2C_MPU6050, &data);
 80021aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021ae:	4619      	mov	r1, r3
 80021b0:	4893      	ldr	r0, [pc, #588]	; (8002400 <ConsoleCommandAccelQuery+0x334>)
 80021b2:	f000 fdc1 	bl	8002d38 <MPU6050_Read_Accel>
					rawAveX += data.Accel_X_RAW;
 80021b6:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
					rawAveY += data.Accel_Y_RAW;
 80021ce:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80021de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e2:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
					rawAveZ += data.Accel_Z_RAW;
 80021e6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80021f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fa:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
					sprintf(msg,"RAW:[X:%5i Y:%5i Z:5%i] G:[X:%2f Y:%2f Z:%2f]",data.Accel_X_RAW, data.Accel_Y_RAW,data.Accel_Z_RAW, data.Ax,data.Ay,data.Az);
 80021fe:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8002202:	469c      	mov	ip, r3
 8002204:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8002208:	469e      	mov	lr, r3
 800220a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002214:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002218:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800221c:	f107 060c 	add.w	r6, r7, #12
 8002220:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002228:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	4673      	mov	r3, lr
 8002232:	4662      	mov	r2, ip
 8002234:	4974      	ldr	r1, [pc, #464]	; (8002408 <ConsoleCommandAccelQuery+0x33c>)
 8002236:	4630      	mov	r0, r6
 8002238:	f00a fa56 	bl	800c6e8 <siprintf>
					ConsoleSendLine(msg);
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fa3d 	bl	80016c0 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<n;cnt++)
 8002246:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800224a:	3301      	adds	r3, #1
 800224c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8002250:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002254:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8002258:	4293      	cmp	r3, r2
 800225a:	dba6      	blt.n	80021aa <ConsoleCommandAccelQuery+0xde>
				}
				rawAveX = rawAveX/n;
 800225c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002268:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 800226c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002270:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				rawAveY = rawAveY/n;
 8002274:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002280:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8002284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002288:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				rawAveZ = rawAveZ/n;
 800228c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002298:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 800229c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a0:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				sprintf(msg,"\nRAW Average :[X:%5f Y:%5f Z:5%f]\n",rawAveX,rawAveY,rawAveZ);
 80022a4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80022a8:	f7fe f966 	bl	8000578 <__aeabi_f2d>
 80022ac:	4680      	mov	r8, r0
 80022ae:	4689      	mov	r9, r1
 80022b0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80022b4:	f7fe f960 	bl	8000578 <__aeabi_f2d>
 80022b8:	4604      	mov	r4, r0
 80022ba:	460d      	mov	r5, r1
 80022bc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80022c0:	f7fe f95a 	bl	8000578 <__aeabi_f2d>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	f107 000c 	add.w	r0, r7, #12
 80022cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022d0:	e9cd 4500 	strd	r4, r5, [sp]
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	494c      	ldr	r1, [pc, #304]	; (800240c <ConsoleCommandAccelQuery+0x340>)
 80022da:	f00a fa05 	bl	800c6e8 <siprintf>
				ConsoleSendLine(msg);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f9ec 	bl	80016c0 <ConsoleSendLine>
				break;
 80022e8:	e083      	b.n	80023f2 <ConsoleCommandAccelQuery+0x326>

		case 'k':
				ConsoleSendLine("--* Kalman Angle *--");
 80022ea:	4849      	ldr	r0, [pc, #292]	; (8002410 <ConsoleCommandAccelQuery+0x344>)
 80022ec:	f7ff f9e8 	bl	80016c0 <ConsoleSendLine>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80022f6:	e00a      	b.n	800230e <ConsoleCommandAccelQuery+0x242>
				{
					MPU6050_Read_All(&I2C_MPU6050, &data);
 80022f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022fc:	4619      	mov	r1, r3
 80022fe:	4840      	ldr	r0, [pc, #256]	; (8002400 <ConsoleCommandAccelQuery+0x334>)
 8002300:	f000 fe0a 	bl	8002f18 <MPU6050_Read_All>
				for (uint8_t cnt = 0;cnt<50;cnt++)
 8002304:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8002308:	3301      	adds	r3, #1
 800230a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800230e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8002312:	2b31      	cmp	r3, #49	; 0x31
 8002314:	d9f0      	bls.n	80022f8 <ConsoleCommandAccelQuery+0x22c>
				}
				sprintf(msg,"[X:%2f Y:%2f]\n",data.KalmanAngleX, data.KalmanAngleY);
 8002316:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800231a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800231e:	f107 040c 	add.w	r4, r7, #12
 8002322:	e9cd 2300 	strd	r2, r3, [sp]
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	493a      	ldr	r1, [pc, #232]	; (8002414 <ConsoleCommandAccelQuery+0x348>)
 800232c:	4620      	mov	r0, r4
 800232e:	f00a f9db 	bl	800c6e8 <siprintf>
				ConsoleSendLine(msg);
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f9c2 	bl	80016c0 <ConsoleSendLine>
			break;
 800233c:	e059      	b.n	80023f2 <ConsoleCommandAccelQuery+0x326>
		case 'g':
			ConsoleReceiveParamHexUint16(buffer, 2, &reg);
 800233e:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 8002342:	461a      	mov	r2, r3
 8002344:	2102      	movs	r1, #2
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff f923 	bl	8001592 <ConsoleReceiveParamHexUint16>
			regData =  MPU6050_ReadReg(&I2C_MPU6050,reg);
 800234c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002350:	4619      	mov	r1, r3
 8002352:	482b      	ldr	r0, [pc, #172]	; (8002400 <ConsoleCommandAccelQuery+0x334>)
 8002354:	f000 fd92 	bl	8002e7c <MPU6050_ReadReg>
 8002358:	4603      	mov	r3, r0
 800235a:	b29b      	uxth	r3, r3
 800235c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			byteToBin(regData, binStr);
 8002360:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f001 f9cc 	bl	800370a <byteToBin>
			sprintf(msg,"Reg [0x%x] = %x, %s",reg,regData,binStr);
 8002372:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002376:	461a      	mov	r2, r3
 8002378:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800237c:	4619      	mov	r1, r3
 800237e:	f107 000c 	add.w	r0, r7, #12
 8002382:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	460b      	mov	r3, r1
 800238a:	4923      	ldr	r1, [pc, #140]	; (8002418 <ConsoleCommandAccelQuery+0x34c>)
 800238c:	f00a f9ac 	bl	800c6e8 <siprintf>
			ConsoleSendLine(msg);
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff f993 	bl	80016c0 <ConsoleSendLine>
		break;
 800239a:	e02a      	b.n	80023f2 <ConsoleCommandAccelQuery+0x326>
		case 'w':
				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 2, &reg))
 800239c:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 80023a0:	461a      	mov	r2, r3
 80023a2:	2102      	movs	r1, #2
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff f8f4 	bl	8001592 <ConsoleReceiveParamHexUint16>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <ConsoleCommandAccelQuery+0x2ee>
				{
					ConsoleSendLine("Register missing");
 80023b0:	481a      	ldr	r0, [pc, #104]	; (800241c <ConsoleCommandAccelQuery+0x350>)
 80023b2:	f7ff f985 	bl	80016c0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80023b6:	2310      	movs	r3, #16
 80023b8:	e01c      	b.n	80023f4 <ConsoleCommandAccelQuery+0x328>
				};

				if (COMMAND_SUCCESS != ConsoleReceiveParamHexUint16(buffer, 3, &regData))
 80023ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023be:	461a      	mov	r2, r3
 80023c0:	2103      	movs	r1, #3
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff f8e5 	bl	8001592 <ConsoleReceiveParamHexUint16>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <ConsoleCommandAccelQuery+0x30c>
				{
					ConsoleSendLine("Register Data missing");
 80023ce:	4814      	ldr	r0, [pc, #80]	; (8002420 <ConsoleCommandAccelQuery+0x354>)
 80023d0:	f7ff f976 	bl	80016c0 <ConsoleSendLine>
					return COMMAND_PARAMETER_ERROR;
 80023d4:	2310      	movs	r3, #16
 80023d6:	e00d      	b.n	80023f4 <ConsoleCommandAccelQuery+0x328>
				};
				MPU6050_WriteReg(&I2C_MPU6050,reg,regData );
 80023d8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80023dc:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	4806      	ldr	r0, [pc, #24]	; (8002400 <ConsoleCommandAccelQuery+0x334>)
 80023e6:	f000 fd61 	bl	8002eac <MPU6050_WriteReg>

				ConsoleSendLine("done.");
 80023ea:	480e      	ldr	r0, [pc, #56]	; (8002424 <ConsoleCommandAccelQuery+0x358>)
 80023ec:	f7ff f968 	bl	80016c0 <ConsoleSendLine>
				break;
 80023f0:	bf00      	nop
	}

	return COMMAND_SUCCESS;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	37ec      	adds	r7, #236	; 0xec
 80023f8:	46bd      	mov	sp, r7
 80023fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023fe:	bf00      	nop
 8002400:	200009ac 	.word	0x200009ac
 8002404:	080104e8 	.word	0x080104e8
 8002408:	08010508 	.word	0x08010508
 800240c:	08010538 	.word	0x08010538
 8002410:	0801055c 	.word	0x0801055c
 8002414:	08010574 	.word	0x08010574
 8002418:	08010584 	.word	0x08010584
 800241c:	08010598 	.word	0x08010598
 8002420:	080105ac 	.word	0x080105ac
 8002424:	080105c4 	.word	0x080105c4

08002428 <ConsoleCommandTimeQuery>:


static eCommandResult_T ConsoleCommandTimeQuery(const char buffer[])
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	char time[30];
	rtcGetTimeString(time);
 8002430:	f107 0308 	add.w	r3, r7, #8
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fb59 	bl	8003aec <rtcGetTimeString>
	ConsoleSendString("Time: ");
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <ConsoleCommandTimeQuery+0x2c>)
 800243c:	f7ff f933 	bl	80016a6 <ConsoleSendString>
	ConsoleSendString(time);
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff f92e 	bl	80016a6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	080105cc 	.word	0x080105cc

08002458 <ConsoleCommandDateQuery>:


static eCommandResult_T ConsoleCommandDateQuery(const char buffer[])
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	char date[30];
	ConsoleSendString("Date: ");
 8002460:	4808      	ldr	r0, [pc, #32]	; (8002484 <ConsoleCommandDateQuery+0x2c>)
 8002462:	f7ff f920 	bl	80016a6 <ConsoleSendString>
	rtcGetDateString(date);
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	4618      	mov	r0, r3
 800246c:	f001 fb64 	bl	8003b38 <rtcGetDateString>
	ConsoleSendString(date);
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f916 	bl	80016a6 <ConsoleSendString>
	return COMMAND_SUCCESS;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	080105d4 	.word	0x080105d4

08002488 <ConsoleCommandHelp>:


static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8002490:	2300      	movs	r3, #0
 8002492:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8002494:	2314      	movs	r3, #20
 8002496:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e01c      	b.n	80024d8 <ConsoleCommandHelp+0x50>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 800249e:	4a13      	ldr	r2, [pc, #76]	; (80024ec <ConsoleCommandHelp+0x64>)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	216c      	movs	r1, #108	; 0x6c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f899 	bl	80025e4 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80024b2:	480f      	ldr	r0, [pc, #60]	; (80024f0 <ConsoleCommandHelp+0x68>)
 80024b4:	f000 f896 	bl	80025e4 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	226c      	movs	r2, #108	; 0x6c
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	3308      	adds	r3, #8
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <ConsoleCommandHelp+0x64>)
 80024c4:	4413      	add	r3, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f88c 	bl	80025e4 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 80024cc:	4809      	ldr	r0, [pc, #36]	; (80024f4 <ConsoleCommandHelp+0x6c>)
 80024ce:	f000 f889 	bl	80025e4 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3b01      	subs	r3, #1
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3dd      	bcc.n	800249e <ConsoleCommandHelp+0x16>
	}
	return result;
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	08010748 	.word	0x08010748
 80024f0:	080105dc 	.word	0x080105dc
 80024f4:	080105e0 	.word	0x080105e0

080024f8 <ConsoleCommandVer>:
	return result;
}
*/

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <ConsoleCommandVer+0x24>)
 8002506:	f000 f86d 	bl	80025e4 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <ConsoleCommandVer+0x28>)
 800250c:	f000 f86a 	bl	80025e4 <ConsoleIoSendString>
	return result;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	080105e4 	.word	0x080105e4
 8002520:	080105e0 	.word	0x080105e0

08002524 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8002528:	4b02      	ldr	r3, [pc, #8]	; (8002534 <ConsoleCommandsGetTable+0x10>)
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	08010748 	.word	0x08010748

08002538 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8002540:	2201      	movs	r2, #1
 8002542:	4909      	ldr	r1, [pc, #36]	; (8002568 <HAL_UART_RxCpltCallback+0x30>)
 8002544:	4809      	ldr	r0, [pc, #36]	; (800256c <HAL_UART_RxCpltCallback+0x34>)
 8002546:	f008 f850 	bl	800a5ea <HAL_UART_Receive_IT>
    }



    // TODO : This is not a great solution!
    if (cliRX != '\n') // ignore a 'new line'
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_UART_RxCpltCallback+0x30>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b0a      	cmp	r3, #10
 8002550:	d005      	beq.n	800255e <HAL_UART_RxCpltCallback+0x26>
    {
    	cBuffer_Write(&cliCB, cliRX);
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_UART_RxCpltCallback+0x30>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <HAL_UART_RxCpltCallback+0x38>)
 800255a:	f7fe fd4e 	bl	8000ffa <cBuffer_Write>

    }
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200005c0 	.word	0x200005c0
 800256c:	20000b70 	.word	0x20000b70
 8002570:	200005b8 	.word	0x200005b8

08002574 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	cBuffer_init(&cliCB,cliBuffer, CLI_BUFFER_LENGTH);
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4906      	ldr	r1, [pc, #24]	; (8002594 <ConsoleIoInit+0x20>)
 800257c:	4806      	ldr	r0, [pc, #24]	; (8002598 <ConsoleIoInit+0x24>)
 800257e:	f7fe fd1d 	bl	8000fbc <cBuffer_init>
	HAL_UART_Receive_IT(&huart1, &cliRX, 1);
 8002582:	2201      	movs	r2, #1
 8002584:	4905      	ldr	r1, [pc, #20]	; (800259c <ConsoleIoInit+0x28>)
 8002586:	4806      	ldr	r0, [pc, #24]	; (80025a0 <ConsoleIoInit+0x2c>)
 8002588:	f008 f82f 	bl	800a5ea <HAL_UART_Receive_IT>

	return CONSOLE_SUCCESS;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000578 	.word	0x20000578
 8002598:	200005b8 	.word	0x200005b8
 800259c:	200005c0 	.word	0x200005c0
 80025a0:	20000b70 	.word	0x20000b70

080025a4 <ConsoleIoReceive>:



eConsoleError ConsoleIoReceive(uint8_t *buffer)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	uint8_t len;




	if (cBuffer_GetString(&cliCB, buffer, '\r',&len) == CBUFFER_OK)
 80025ac:	f107 030f 	add.w	r3, r7, #15
 80025b0:	220d      	movs	r2, #13
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	480a      	ldr	r0, [pc, #40]	; (80025e0 <ConsoleIoReceive+0x3c>)
 80025b6:	f7fe fd43 	bl	8001040 <cBuffer_GetString>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <ConsoleIoReceive+0x32>
	{
		// clean up string
		buffer[len-1]  = 0x0; //Terminate String in C Style
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
		manageBackSpace((char*)buffer);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f001 f840 	bl	8003652 <manageBackSpace>
		return CONSOLE_SUCCESS;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <ConsoleIoReceive+0x34>
	}
	return CONSOLE_NO_STRING;
 80025d6:	2302      	movs	r3, #2

}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200005b8 	.word	0x200005b8

080025e4 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)buffer, strlen(buffer), 100);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7fd fe01 	bl	80001f4 <strlen>
 80025f2:	4603      	mov	r3, r0
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	2364      	movs	r3, #100	; 0x64
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4804      	ldr	r0, [pc, #16]	; (800260c <ConsoleIoSendString+0x28>)
 80025fc:	f007 ff63 	bl	800a4c6 <HAL_UART_Transmit>
	return CONSOLE_SUCCESS;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000b70 	.word	0x20000b70

08002610 <colourFindByCode>:
			{COLOUR_ERROR_ID,"BLACK",0xFA0000}

};

colour_t * colourFindByCode(const uint32_t code)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e016      	b.n	800264c <colourFindByCode+0x3c>
	{
		if (code == colours[i].code)
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	490f      	ldr	r1, [pc, #60]	; (8002660 <colourFindByCode+0x50>)
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3310      	adds	r3, #16
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	d107      	bne.n	8002646 <colourFindByCode+0x36>
		{
			return &colours[i];
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <colourFindByCode+0x50>)
 8002642:	4413      	add	r3, r2
 8002644:	e006      	b.n	8002654 <colourFindByCode+0x44>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3301      	adds	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b0d      	cmp	r3, #13
 8002650:	d9e5      	bls.n	800261e <colourFindByCode+0xe>
		}
	}
	return NULL;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	20000000 	.word	0x20000000

08002664 <colourFindByid>:

	return NULL;
}

colour_t *colourFindByid(const uint8_t id )
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	e015      	b.n	80026a0 <colourFindByid+0x3c>
	{
		if (id == colours[i].id)
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	490f      	ldr	r1, [pc, #60]	; (80026b4 <colourFindByid+0x50>)
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	79fa      	ldrb	r2, [r7, #7]
 8002686:	429a      	cmp	r2, r3
 8002688:	d107      	bne.n	800269a <colourFindByid+0x36>
		{
			return &colours[i];
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <colourFindByid+0x50>)
 8002696:	4413      	add	r3, r2
 8002698:	e006      	b.n	80026a8 <colourFindByid+0x44>
	for (uint8_t i = 0 ;i<COLOUR_COUNT_MAX;i++)
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3301      	adds	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d9e6      	bls.n	8002674 <colourFindByid+0x10>
		}
	}

	return NULL;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	20000000 	.word	0x20000000

080026b8 <dataStoreInit>:
recordDodeca_t storage[DATASTORE_MAX_RECORDS];



eDataStorage_t dataStoreInit()
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<DATASTORE_MAX_RECORDS;i++)
 80026be:	2300      	movs	r3, #0
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	e009      	b.n	80026d8 <dataStoreInit+0x20>
	{
		storage[i].status = RECORD_STORE_EMPTY;
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <dataStoreInit+0x34>)
 80026c8:	015b      	lsls	r3, r3, #5
 80026ca:	4413      	add	r3, r2
 80026cc:	3318      	adds	r3, #24
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<DATASTORE_MAX_RECORDS;i++)
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	3301      	adds	r3, #1
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2b1d      	cmp	r3, #29
 80026dc:	d9f2      	bls.n	80026c4 <dataStoreInit+0xc>
	}
	return DATA_STORAGE_ERR_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	200005c8 	.word	0x200005c8

080026f0 <dataStoreAdd>:


eDataStorage_t dataStoreAdd(recordDodeca_t record)
{
 80026f0:	b084      	sub	sp, #16
 80026f2:	b490      	push	{r4, r7}
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	f107 0408 	add.w	r4, r7, #8
 80026fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (DATASTORE_MAX_RECORDS-1 == recordPosition )
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <dataStoreAdd+0x80>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b1d      	cmp	r3, #29
 8002704:	d101      	bne.n	800270a <dataStoreAdd+0x1a>
		return DATA_STORAGE_ERR_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e02c      	b.n	8002764 <dataStoreAdd+0x74>

	storage[recordPosition].dodecaId = record.dodecaId;
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <dataStoreAdd+0x80>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	7a39      	ldrb	r1, [r7, #8]
 8002710:	4a18      	ldr	r2, [pc, #96]	; (8002774 <dataStoreAdd+0x84>)
 8002712:	015b      	lsls	r3, r3, #5
 8002714:	4413      	add	r3, r2
 8002716:	460a      	mov	r2, r1
 8002718:	701a      	strb	r2, [r3, #0]
	storage[recordPosition].endTime = record.endTime;
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <dataStoreAdd+0x80>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4619      	mov	r1, r3
 8002720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002724:	4813      	ldr	r0, [pc, #76]	; (8002774 <dataStoreAdd+0x84>)
 8002726:	0149      	lsls	r1, r1, #5
 8002728:	4401      	add	r1, r0
 800272a:	3110      	adds	r1, #16
 800272c:	e9c1 2300 	strd	r2, r3, [r1]
	storage[recordPosition].startTime = record.startTime;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <dataStoreAdd+0x80>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800273a:	480e      	ldr	r0, [pc, #56]	; (8002774 <dataStoreAdd+0x84>)
 800273c:	0149      	lsls	r1, r1, #5
 800273e:	4401      	add	r1, r0
 8002740:	3108      	adds	r1, #8
 8002742:	e9c1 2300 	strd	r2, r3, [r1]
	storage[recordPosition].status = RECORD_STORE_USED;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <dataStoreAdd+0x80>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <dataStoreAdd+0x84>)
 800274c:	015b      	lsls	r3, r3, #5
 800274e:	4413      	add	r3, r2
 8002750:	3318      	adds	r3, #24
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
	recordPosition++;
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <dataStoreAdd+0x80>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <dataStoreAdd+0x80>)
 8002760:	701a      	strb	r2, [r3, #0]
	return DATA_STORAGE_ERR_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bc90      	pop	{r4, r7}
 800276a:	b004      	add	sp, #16
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	200005c1 	.word	0x200005c1
 8002774:	200005c8 	.word	0x200005c8

08002778 <dataStoreGetCurrentPosition>:

eDataStorage_t dataStoreGetCurrentPosition(uint8_t *position)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	*position = recordPosition;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <dataStoreGetCurrentPosition+0x20>)
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	701a      	strb	r2, [r3, #0]
	return DATA_STORAGE_ERR_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	200005c1 	.word	0x200005c1

0800279c <dataStoreGet>:

recordDodeca_t * dataStoreGet( uint8_t id)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
	if (id > recordPosition)
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <dataStoreGet+0x2c>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	79fa      	ldrb	r2, [r7, #7]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d901      	bls.n	80027b4 <dataStoreGet+0x18>
		return NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e003      	b.n	80027bc <dataStoreGet+0x20>
	else
		return &storage[id];
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	015b      	lsls	r3, r3, #5
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <dataStoreGet+0x30>)
 80027ba:	4413      	add	r3, r2

}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	200005c1 	.word	0x200005c1
 80027cc:	200005c8 	.word	0x200005c8

080027d0 <dodecaInit>:
		}
};


eDodecaErr_t dodecaInit(dodecaItems_t * items)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	dodecaItems = items;
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <dodecaInit+0x1c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
	return DODECA_ERR_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	20000988 	.word	0x20000988

080027f0 <dodecaReset>:

eDodecaErr_t dodecaReset()
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	e088      	b.n	800290e <dodecaReset+0x11e>
	{
		dodecaItems->items[i].id = i;
 80027fc:	4b48      	ldr	r3, [pc, #288]	; (8002920 <dodecaReset+0x130>)
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	79fa      	ldrb	r2, [r7, #7]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	440b      	add	r3, r1
 800280c:	79fa      	ldrb	r2, [r7, #7]
 800280e:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].colour = colourFindByid(defaultDoceca.items[i].colour)->code;
 8002810:	79fa      	ldrb	r2, [r7, #7]
 8002812:	4944      	ldr	r1, [pc, #272]	; (8002924 <dodecaReset+0x134>)
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	3318      	adds	r3, #24
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff1d 	bl	8002664 <colourFindByid>
 800282a:	4603      	mov	r3, r0
 800282c:	4a3c      	ldr	r2, [pc, #240]	; (8002920 <dodecaReset+0x130>)
 800282e:	6810      	ldr	r0, [r2, #0]
 8002830:	79fa      	ldrb	r2, [r7, #7]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4403      	add	r3, r0
 800283e:	3318      	adds	r3, #24
 8002840:	6019      	str	r1, [r3, #0]
		dodecaItems->items[i].maxTimeMins = defaultDoceca.items[i].maxTimeMins;
 8002842:	79f9      	ldrb	r1, [r7, #7]
 8002844:	4b36      	ldr	r3, [pc, #216]	; (8002920 <dodecaReset+0x130>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	79fa      	ldrb	r2, [r7, #7]
 800284a:	4c36      	ldr	r4, [pc, #216]	; (8002924 <dodecaReset+0x134>)
 800284c:	460b      	mov	r3, r1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	440b      	add	r3, r1
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	4423      	add	r3, r4
 8002856:	331d      	adds	r3, #29
 8002858:	7819      	ldrb	r1, [r3, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4403      	add	r3, r0
 8002864:	331d      	adds	r3, #29
 8002866:	460a      	mov	r2, r1
 8002868:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].minTimeMins = defaultDoceca.items[i].minTimeMins;
 800286a:	79f9      	ldrb	r1, [r7, #7]
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <dodecaReset+0x130>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	79fa      	ldrb	r2, [r7, #7]
 8002872:	4c2c      	ldr	r4, [pc, #176]	; (8002924 <dodecaReset+0x134>)
 8002874:	460b      	mov	r3, r1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	440b      	add	r3, r1
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	4423      	add	r3, r4
 800287e:	331c      	adds	r3, #28
 8002880:	7819      	ldrb	r1, [r3, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	4403      	add	r3, r0
 800288c:	331c      	adds	r3, #28
 800288e:	460a      	mov	r2, r1
 8002890:	701a      	strb	r2, [r3, #0]
		dodecaItems->items[i].state = defaultDoceca.items[i].state;
 8002892:	79f9      	ldrb	r1, [r7, #7]
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <dodecaReset+0x130>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	79fa      	ldrb	r2, [r7, #7]
 800289a:	4c22      	ldr	r4, [pc, #136]	; (8002924 <dodecaReset+0x134>)
 800289c:	460b      	mov	r3, r1
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	440b      	add	r3, r1
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	4423      	add	r3, r4
 80028a6:	3328      	adds	r3, #40	; 0x28
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	4403      	add	r3, r0
 80028b4:	3328      	adds	r3, #40	; 0x28
 80028b6:	6019      	str	r1, [r3, #0]
		dodecaItems->items[i].enabled = defaultDoceca.items[i].enabled;
 80028b8:	79f9      	ldrb	r1, [r7, #7]
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <dodecaReset+0x130>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	79fa      	ldrb	r2, [r7, #7]
 80028c0:	4c18      	ldr	r4, [pc, #96]	; (8002924 <dodecaReset+0x134>)
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	4423      	add	r3, r4
 80028cc:	3301      	adds	r3, #1
 80028ce:	7819      	ldrb	r1, [r3, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4403      	add	r3, r0
 80028da:	3301      	adds	r3, #1
 80028dc:	460a      	mov	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
		strcpy(dodecaItems->items[i].name,defaultDoceca.items[i].name);
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <dodecaReset+0x130>)
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	79fa      	ldrb	r2, [r7, #7]
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	440b      	add	r3, r1
 80028f0:	1c98      	adds	r0, r3, #2
 80028f2:	79fa      	ldrb	r2, [r7, #7]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	4a09      	ldr	r2, [pc, #36]	; (8002924 <dodecaReset+0x134>)
 80028fe:	4413      	add	r3, r2
 8002900:	3302      	adds	r3, #2
 8002902:	4619      	mov	r1, r3
 8002904:	f009 ff8e 	bl	800c824 <strcpy>
	for (uint8_t i=0;i<DODECA_COUNT_MAX;i++)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	3301      	adds	r3, #1
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	2b0b      	cmp	r3, #11
 8002912:	f67f af73 	bls.w	80027fc <dodecaReset+0xc>
	}
	return DODECA_ERR_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	20000988 	.word	0x20000988
 8002924:	08010fb8 	.word	0x08010fb8

08002928 <dodecaGet>:

dodecaItem_t * dodecaGet(uint8_t id)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
	if (id > DODECA_COUNT_MAX )
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d901      	bls.n	800293c <dodecaGet+0x14>
	{
		return NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	e007      	b.n	800294c <dodecaGet+0x24>
	}

	return   &dodecaItems->items[id];
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <dodecaGet+0x30>)
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	440b      	add	r3, r1
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	20000988 	.word	0x20000988

0800295c <dodecaStart>:

eDodecaErr_t dodecaStart(uint8_t id)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	dodecaItem_t * dodeca ;
	dodeca = dodecaGet(id);
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ffdd 	bl	8002928 <dodecaGet>
 800296e:	60f8      	str	r0, [r7, #12]
	dodeca->state = DODECA_STATE_ACTIVE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
	dodeca->startTime = rtcGetTimeStamp();
 8002976:	f001 f8fd 	bl	8003b74 <rtcGetTimeStamp>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	68f9      	ldr	r1, [r7, #12]
 8002980:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ledSetFaceColour(id, dodeca->colour,0x0,LED_FACE_MODE_NORMAL );
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6999      	ldr	r1, [r3, #24]
 8002988:	79f8      	ldrb	r0, [r7, #7]
 800298a:	2300      	movs	r3, #0
 800298c:	2200      	movs	r2, #0
 800298e:	f000 ff55 	bl	800383c <ledSetFaceColour>
	ledRender();
 8002992:	f000 ff4a 	bl	800382a <ledRender>
	return DODECA_ERR_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <dodecaStop>:

eDodecaErr_t dodecaStop(uint8_t id)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b091      	sub	sp, #68	; 0x44
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	dodecaItem_t * dodeca ;
	dodeca = dodecaGet(id);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ffbb 	bl	8002928 <dodecaGet>
 80029b2:	62f8      	str	r0, [r7, #44]	; 0x2c
	dodeca->state = DODECA_STATE_STOPPED;
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2202      	movs	r2, #2
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
	ledSetFaceColour(id, colourFindByid(COLOUR_BLACK_ID)->code,0x0,LED_FACE_MODE_NORMAL );
 80029ba:	200c      	movs	r0, #12
 80029bc:	f7ff fe52 	bl	8002664 <colourFindByid>
 80029c0:	4603      	mov	r3, r0
 80029c2:	6919      	ldr	r1, [r3, #16]
 80029c4:	79f8      	ldrb	r0, [r7, #7]
 80029c6:	2300      	movs	r3, #0
 80029c8:	2200      	movs	r2, #0
 80029ca:	f000 ff37 	bl	800383c <ledSetFaceColour>
	ledRender();
 80029ce:	f000 ff2c 	bl	800382a <ledRender>

	// Create a Dodeca record st store
	recordDodeca_t record;
	record.dodecaId = id;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	723b      	strb	r3, [r7, #8]
	record.startTime = dodeca->startTime;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	record.endTime = rtcGetTimeStamp();
 80029e0:	f001 f8c8 	bl	8003b74 <rtcGetTimeStamp>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (DATA_STORAGE_ERR_OK != dataStoreAdd(record))
 80029ec:	466c      	mov	r4, sp
 80029ee:	f107 0318 	add.w	r3, r7, #24
 80029f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fe:	f7ff fe77 	bl	80026f0 <dataStoreAdd>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <dodecaStop+0x6c>
	{
		return DODECA_ERR_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <dodecaStop+0x6e>
	}
	return DODECA_ERR_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3734      	adds	r7, #52	; 0x34
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}
	...

08002a18 <dodecaGetStateName>:
}



eDodecaErr_t dodecaGetStateName(eDodecaState_t state,char* name)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

	switch (state)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00a      	beq.n	8002a3e <dodecaGetStateName+0x26>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d110      	bne.n	8002a50 <dodecaGetStateName+0x38>
	{
		case DODECA_STATE_STOPPED : strcpy(name,"Stopped"); break;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4910      	ldr	r1, [pc, #64]	; (8002a74 <dodecaGetStateName+0x5c>)
 8002a32:	461a      	mov	r2, r3
 8002a34:	460b      	mov	r3, r1
 8002a36:	cb03      	ldmia	r3!, {r0, r1}
 8002a38:	6010      	str	r0, [r2, #0]
 8002a3a:	6051      	str	r1, [r2, #4]
 8002a3c:	e012      	b.n	8002a64 <dodecaGetStateName+0x4c>
		case DODECA_STATE_ACTIVE : strcpy(name,"Active"); break;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <dodecaGetStateName+0x60>)
 8002a42:	6810      	ldr	r0, [r2, #0]
 8002a44:	6018      	str	r0, [r3, #0]
 8002a46:	8891      	ldrh	r1, [r2, #4]
 8002a48:	7992      	ldrb	r2, [r2, #6]
 8002a4a:	8099      	strh	r1, [r3, #4]
 8002a4c:	719a      	strb	r2, [r3, #6]
 8002a4e:	e009      	b.n	8002a64 <dodecaGetStateName+0x4c>
		default: strcpy(name,"undefined"); break;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	490a      	ldr	r1, [pc, #40]	; (8002a7c <dodecaGetStateName+0x64>)
 8002a54:	461a      	mov	r2, r3
 8002a56:	460b      	mov	r3, r1
 8002a58:	cb03      	ldmia	r3!, {r0, r1}
 8002a5a:	6010      	str	r0, [r2, #0]
 8002a5c:	6051      	str	r1, [r2, #4]
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	8113      	strh	r3, [r2, #8]
 8002a62:	bf00      	nop
	}

	return DODECA_ERR_OK;
 8002a64:	2300      	movs	r3, #0


}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	080105f0 	.word	0x080105f0
 8002a78:	080105f8 	.word	0x080105f8
 8002a7c:	08010600 	.word	0x08010600

08002a80 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <GetSector+0xc8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d806      	bhi.n	8002aa2 <GetSector+0x22>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9a:	d302      	bcc.n	8002aa2 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e04b      	b.n	8002b3a <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <GetSector+0xcc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d806      	bhi.n	8002ab8 <GetSector+0x38>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a28      	ldr	r2, [pc, #160]	; (8002b50 <GetSector+0xd0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d302      	bcc.n	8002ab8 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e040      	b.n	8002b3a <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <GetSector+0xd4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d806      	bhi.n	8002ace <GetSector+0x4e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a25      	ldr	r2, [pc, #148]	; (8002b58 <GetSector+0xd8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d302      	bcc.n	8002ace <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e035      	b.n	8002b3a <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <GetSector+0xdc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d206      	bcs.n	8002ae4 <GetSector+0x64>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <GetSector+0xe0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d302      	bcc.n	8002ae4 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e02a      	b.n	8002b3a <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <GetSector+0xe4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d206      	bcs.n	8002afa <GetSector+0x7a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <GetSector+0xdc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d902      	bls.n	8002afa <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8002af4:	2304      	movs	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e01f      	b.n	8002b3a <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <GetSector+0xe8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d206      	bcs.n	8002b10 <GetSector+0x90>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <GetSector+0xe4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d902      	bls.n	8002b10 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e014      	b.n	8002b3a <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <GetSector+0xec>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d206      	bcs.n	8002b26 <GetSector+0xa6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <GetSector+0xe8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d902      	bls.n	8002b26 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8002b20:	2306      	movs	r3, #6
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e009      	b.n	8002b3a <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <GetSector+0xf0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d205      	bcs.n	8002b3a <GetSector+0xba>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <GetSector+0xec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8002b36:	2307      	movs	r3, #7
 8002b38:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	08003ffe 	.word	0x08003ffe
 8002b4c:	08007ffe 	.word	0x08007ffe
 8002b50:	08004000 	.word	0x08004000
 8002b54:	0800bffe 	.word	0x0800bffe
 8002b58:	08008000 	.word	0x08008000
 8002b5c:	0800ffff 	.word	0x0800ffff
 8002b60:	0800c000 	.word	0x0800c000
 8002b64:	0801ffff 	.word	0x0801ffff
 8002b68:	0803ffff 	.word	0x0803ffff
 8002b6c:	0805ffff 	.word	0x0805ffff
 8002b70:	0807ffff 	.word	0x0807ffff

08002b74 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, const uint16_t numberofwords)
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8002b86:	f003 fba1 	bl	80062cc <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff ff78 	bl	8002a80 <GetSector>
 8002b90:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8002b9e:	69f8      	ldr	r0, [r7, #28]
 8002ba0:	f7ff ff6e 	bl	8002a80 <GetSector>
 8002ba4:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8002ba6:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <Flash_Write_Data+0xb8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8002bac:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <Flash_Write_Data+0xb8>)
 8002bae:	2202      	movs	r2, #2
 8002bb0:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <Flash_Write_Data+0xb8>)
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	4a1a      	ldr	r2, [pc, #104]	; (8002c2c <Flash_Write_Data+0xb8>)
 8002bc2:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4818      	ldr	r0, [pc, #96]	; (8002c2c <Flash_Write_Data+0xb8>)
 8002bcc:	f003 fcfc 	bl	80065c8 <HAL_FLASHEx_Erase>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01f      	beq.n	8002c16 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8002bd6:	f003 fbab 	bl	8006330 <HAL_FLASH_GetError>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	e022      	b.n	8002c24 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	4413      	add	r3, r2
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	461c      	mov	r4, r3
 8002bec:	4615      	mov	r5, r2
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	68f9      	ldr	r1, [r7, #12]
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f003 fb15 	bl	8006224 <HAL_FLASH_Program>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3304      	adds	r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	3301      	adds	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0c:	e003      	b.n	8002c16 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8002c0e:	f003 fb8f 	bl	8006330 <HAL_FLASH_GetError>
 8002c12:	4603      	mov	r3, r0
 8002c14:	e006      	b.n	8002c24 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbdf      	blt.n	8002bde <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8002c1e:	f003 fb77 	bl	8006310 <HAL_FLASH_Lock>

	   return 0;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2c:	2000098c 	.word	0x2000098c

08002c30 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, const uint16_t numberofwords)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
	uint32_t sofar = numberofwords;
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	617b      	str	r3, [r7, #20]
	while (sofar)
 8002c42:	e00c      	b.n	8002c5e <Flash_Read_Data+0x2e>
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3304      	adds	r3, #4
 8002c56:	60bb      	str	r3, [r7, #8]
		sofar--;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
	while (sofar)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ef      	bne.n	8002c44 <Flash_Read_Data+0x14>
	}
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_GPIO_EXTI_Callback>:
};



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	80fb      	strh	r3, [r7, #6]

}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <MPU6050_Init>:



uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af04      	add	r7, sp, #16
 8002c8e:	6078      	str	r0, [r7, #4]
    uint8_t check;

    // power management register 0X6B we should write all 0's to wake the sensor up


    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002c90:	2364      	movs	r3, #100	; 0x64
 8002c92:	9302      	str	r3, [sp, #8]
 8002c94:	2301      	movs	r3, #1
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	f107 030e 	add.w	r3, r7, #14
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	2275      	movs	r2, #117	; 0x75
 8002ca2:	21d0      	movs	r1, #208	; 0xd0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f004 fa89 	bl	80071bc <HAL_I2C_Mem_Read>


       if (check == 114)  // 0x68 will be returned by the sensor if everything goes well
 8002caa:	7bbb      	ldrb	r3, [r7, #14]
 8002cac:	2b72      	cmp	r3, #114	; 0x72
 8002cae:	d13d      	bne.n	8002d2c <MPU6050_Init+0xa4>
       {
           // power management register 0X6B we should write all 0's to wake the sensor up
           Data = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002cb4:	2364      	movs	r3, #100	; 0x64
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	f107 030f 	add.w	r3, r7, #15
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	226b      	movs	r2, #107	; 0x6b
 8002cc6:	21d0      	movs	r1, #208	; 0xd0
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f004 f97d 	bl	8006fc8 <HAL_I2C_Mem_Write>

           // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
           Data = 0x07;
 8002cce:	2307      	movs	r3, #7
 8002cd0:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002cd2:	2364      	movs	r3, #100	; 0x64
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	f107 030f 	add.w	r3, r7, #15
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	2219      	movs	r2, #25
 8002ce4:	21d0      	movs	r1, #208	; 0xd0
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f004 f96e 	bl	8006fc8 <HAL_I2C_Mem_Write>

           // Set accelerometer configuration in ACCEL_CONFIG Register
           // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
           Data = 0x00;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cf0:	2364      	movs	r3, #100	; 0x64
 8002cf2:	9302      	str	r3, [sp, #8]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	f107 030f 	add.w	r3, r7, #15
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	221c      	movs	r2, #28
 8002d02:	21d0      	movs	r1, #208	; 0xd0
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f004 f95f 	bl	8006fc8 <HAL_I2C_Mem_Write>

           // Set Gyroscopic configuration in GYRO_CONFIG Register
           // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
           Data = 0x00;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
           HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002d0e:	2364      	movs	r3, #100	; 0x64
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	2301      	movs	r3, #1
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	f107 030f 	add.w	r3, r7, #15
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	221b      	movs	r2, #27
 8002d20:	21d0      	movs	r1, #208	; 0xd0
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f004 f950 	bl	8006fc8 <HAL_I2C_Mem_Write>
           return 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <MPU6050_Init+0xa6>
       }


    return 1;
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af04      	add	r7, sp, #16
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002d42:	2364      	movs	r3, #100	; 0x64
 8002d44:	9302      	str	r3, [sp, #8]
 8002d46:	2306      	movs	r3, #6
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	f107 0308 	add.w	r3, r7, #8
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2301      	movs	r3, #1
 8002d52:	223b      	movs	r2, #59	; 0x3b
 8002d54:	21d0      	movs	r1, #208	; 0xd0
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f004 fa30 	bl	80071bc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002d5c:	7a3b      	ldrb	r3, [r7, #8]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	b21a      	sxth	r2, r3
 8002d62:	7a7b      	ldrb	r3, [r7, #9]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002d6e:	7abb      	ldrb	r3, [r7, #10]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	b21a      	sxth	r2, r3
 8002d74:	7afb      	ldrb	r3, [r7, #11]
 8002d76:	b21b      	sxth	r3, r3
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	b21a      	sxth	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002d80:	7b3b      	ldrb	r3, [r7, #12]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	7b7b      	ldrb	r3, [r7, #13]
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	809a      	strh	r2, [r3, #4]
   // DataStruct->Accel_X_RAW += CAL_X;
   // DataStruct->Accel_Y_RAW += CAL_Y;
  //  DataStruct->Accel_Z_RAW += CAL_Y;


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fbdb 	bl	8000554 <__aeabi_i2d>
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <MPU6050_Read_Accel+0x140>)
 8002da4:	f7fd fd6a 	bl	800087c <__aeabi_ddiv>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	6839      	ldr	r1, [r7, #0]
 8002dae:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fbcb 	bl	8000554 <__aeabi_i2d>
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <MPU6050_Read_Accel+0x140>)
 8002dc4:	f7fd fd5a 	bl	800087c <__aeabi_ddiv>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fbbb 	bl	8000554 <__aeabi_i2d>
 8002dde:	a322      	add	r3, pc, #136	; (adr r3, 8002e68 <MPU6050_Read_Accel+0x130>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fd4a 	bl	800087c <__aeabi_ddiv>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	e9c1 2306 	strd	r2, r3, [r1, #24]


    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002df8:	a31d      	add	r3, pc, #116	; (adr r3, 8002e70 <MPU6050_Read_Accel+0x138>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fe85 	bl	8000b0c <__aeabi_dcmplt>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d006      	beq.n	8002e16 <MPU6050_Read_Accel+0xde>
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e1c:	a314      	add	r3, pc, #80	; (adr r3, 8002e70 <MPU6050_Read_Accel+0x138>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd fe73 	bl	8000b0c <__aeabi_dcmplt>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <MPU6050_Read_Accel+0x102>
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9c1 2304 	strd	r2, r3, [r1, #16]
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e40:	a30b      	add	r3, pc, #44	; (adr r3, 8002e70 <MPU6050_Read_Accel+0x138>)
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f7fd fe61 	bl	8000b0c <__aeabi_dcmplt>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <MPU6050_Read_Accel+0x11a>


}
 8002e50:	e006      	b.n	8002e60 <MPU6050_Read_Accel+0x128>
	if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	40cc2900 	.word	0x40cc2900
 8002e70:	70a3d70a 	.word	0x70a3d70a
 8002e74:	3fb70a3d 	.word	0x3fb70a3d
 8002e78:	40d00000 	.word	0x40d00000

08002e7c <MPU6050_ReadReg>:


uint8_t  MPU6050_ReadReg(I2C_HandleTypeDef *I2Cx,uint16_t reg) // NOTE : Only for 1 Byte Reg at the moment
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af04      	add	r7, sp, #16
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
	uint8_t result;


	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, reg, 1, &result, 1, i2c_timeout);
 8002e88:	2364      	movs	r3, #100	; 0x64
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	9302      	str	r3, [sp, #8]
 8002e8e:	2301      	movs	r3, #1
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f107 030f 	add.w	r3, r7, #15
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	21d0      	movs	r1, #208	; 0xd0
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f004 f98d 	bl	80071bc <HAL_I2C_Mem_Read>
	return result;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <MPU6050_WriteReg>:

void MPU6050_WriteReg(I2C_HandleTypeDef *I2Cx,uint16_t reg, uint8_t data) // NOTE : Only for 1 Byte Reg at the moment
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af04      	add	r7, sp, #16
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, reg, 1, &data, 1, i2c_timeout);
 8002ebc:	2364      	movs	r3, #100	; 0x64
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	9302      	str	r3, [sp, #8]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	1c7b      	adds	r3, r7, #1
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	2301      	movs	r3, #1
 8002ecc:	21d0      	movs	r1, #208	; 0xd0
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f004 f87a 	bl	8006fc8 <HAL_I2C_Mem_Write>

}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <MPU6050ReadStable>:
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}


void MPU6050ReadStable(MPU6050_t *data)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8002ee4:	200a      	movs	r0, #10
 8002ee6:	f002 fbf7 	bl	80056d8 <HAL_Delay>
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e009      	b.n	8002f04 <MPU6050ReadStable+0x28>
		{
			MPU6050_Read_All(&I2C_MPU6050, data);
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <MPU6050ReadStable+0x38>)
 8002ef4:	f000 f810 	bl	8002f18 <MPU6050_Read_All>
			HAL_Delay(5);
 8002ef8:	2005      	movs	r0, #5
 8002efa:	f002 fbed 	bl	80056d8 <HAL_Delay>
	for (uint8_t cnt=0;cnt<30;cnt++)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	3301      	adds	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b1d      	cmp	r3, #29
 8002f08:	d9f2      	bls.n	8002ef0 <MPU6050ReadStable+0x14>
		}
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200009ac 	.word	0x200009ac

08002f18 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b094      	sub	sp, #80	; 0x50
 8002f1e:	af04      	add	r7, sp, #16
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002f24:	2364      	movs	r3, #100	; 0x64
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	230e      	movs	r3, #14
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	f107 0308 	add.w	r3, r7, #8
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2301      	movs	r3, #1
 8002f34:	223b      	movs	r2, #59	; 0x3b
 8002f36:	21d0      	movs	r1, #208	; 0xd0
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f004 f93f 	bl	80071bc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002f3e:	7a3b      	ldrb	r3, [r7, #8]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	7a7b      	ldrb	r3, [r7, #9]
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b21a      	sxth	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002f50:	7abb      	ldrb	r3, [r7, #10]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	b21a      	sxth	r2, r3
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	b21b      	sxth	r3, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	b21a      	sxth	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002f62:	7b3b      	ldrb	r3, [r7, #12]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	b21a      	sxth	r2, r3
 8002f68:	7b7b      	ldrb	r3, [r7, #13]
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b21a      	sxth	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002f74:	7bbb      	ldrb	r3, [r7, #14]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	b21b      	sxth	r3, r3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002f82:	7c3b      	ldrb	r3, [r7, #16]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	b21a      	sxth	r2, r3
 8002f88:	7c7b      	ldrb	r3, [r7, #17]
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b21a      	sxth	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002f94:	7cbb      	ldrb	r3, [r7, #18]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002fa6:	7d3b      	ldrb	r3, [r7, #20]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	7d7b      	ldrb	r3, [r7, #21]
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b21a      	sxth	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	849a      	strh	r2, [r3, #36]	; 0x24

    // Callibrate
	DataStruct->Accel_X_RAW += CAL_X;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	b21a      	sxth	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW += CAL_Y;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b21a      	sxth	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW += CAL_Y;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f2a3 5371 	subw	r3, r3, #1393	; 0x571
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	809a      	strh	r2, [r3, #4]


    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd faaa 	bl	8000554 <__aeabi_i2d>
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	4bb6      	ldr	r3, [pc, #728]	; (80032e0 <MPU6050_Read_All+0x3c8>)
 8003006:	f7fd fc39 	bl	800087c <__aeabi_ddiv>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	6839      	ldr	r1, [r7, #0]
 8003010:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fa9a 	bl	8000554 <__aeabi_i2d>
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	4bae      	ldr	r3, [pc, #696]	; (80032e0 <MPU6050_Read_All+0x3c8>)
 8003026:	f7fd fc29 	bl	800087c <__aeabi_ddiv>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa8a 	bl	8000554 <__aeabi_i2d>
 8003040:	a39f      	add	r3, pc, #636	; (adr r3, 80032c0 <MPU6050_Read_All+0x3a8>)
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f7fd fc19 	bl	800087c <__aeabi_ddiv>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	6839      	ldr	r1, [r7, #0]
 8003050:	e9c1 2306 	strd	r2, r3, [r1, #24]





    if (DataStruct->Ax < 0.09) DataStruct->Ax = 0;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800305a:	a39b      	add	r3, pc, #620	; (adr r3, 80032c8 <MPU6050_Read_All+0x3b0>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd fd54 	bl	8000b0c <__aeabi_dcmplt>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <MPU6050_Read_All+0x160>
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (DataStruct->Ay < 0.09) DataStruct->Ay= 0;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800307e:	a392      	add	r3, pc, #584	; (adr r3, 80032c8 <MPU6050_Read_All+0x3b0>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd fd42 	bl	8000b0c <__aeabi_dcmplt>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <MPU6050_Read_All+0x184>
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (DataStruct->Az < 0.09) DataStruct->Az = 0;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80030a2:	a389      	add	r3, pc, #548	; (adr r3, 80032c8 <MPU6050_Read_All+0x3b0>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f7fd fd30 	bl	8000b0c <__aeabi_dcmplt>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <MPU6050_Read_All+0x1a8>
 80030b2:	6839      	ldr	r1, [r7, #0]
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9c1 2306 	strd	r2, r3, [r1, #24]


    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80030c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030cc:	eddf 6a85 	vldr	s13, [pc, #532]	; 80032e4 <MPU6050_Read_All+0x3cc>
 80030d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80032e8 <MPU6050_Read_All+0x3d0>
 80030d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fa33 	bl	8000554 <__aeabi_i2d>
 80030ee:	a378      	add	r3, pc, #480	; (adr r3, 80032d0 <MPU6050_Read_All+0x3b8>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f7fd fbc2 	bl	800087c <__aeabi_ddiv>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fa23 	bl	8000554 <__aeabi_i2d>
 800310e:	a370      	add	r3, pc, #448	; (adr r3, 80032d0 <MPU6050_Read_All+0x3b8>)
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f7fd fbb2 	bl	800087c <__aeabi_ddiv>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd fa13 	bl	8000554 <__aeabi_i2d>
 800312e:	a368      	add	r3, pc, #416	; (adr r3, 80032d0 <MPU6050_Read_All+0x3b8>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	f7fd fba2 	bl	800087c <__aeabi_ddiv>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8003142:	f002 fabd 	bl	80056c0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <MPU6050_Read_All+0x3d4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f9f0 	bl	8000534 <__aeabi_ui2d>
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <MPU6050_Read_All+0x3d8>)
 800315a:	f7fd fb8f 	bl	800087c <__aeabi_ddiv>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8003166:	f002 faab 	bl	80056c0 <HAL_GetTick>
 800316a:	4603      	mov	r3, r0
 800316c:	4a5f      	ldr	r2, [pc, #380]	; (80032ec <MPU6050_Read_All+0x3d4>)
 800316e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003176:	461a      	mov	r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317e:	fb03 f202 	mul.w	r2, r3, r2
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003188:	4619      	mov	r1, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f9dc 	bl	8000554 <__aeabi_i2d>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	ec43 2b10 	vmov	d0, r2, r3
 80031a4:	f00c fd6b 	bl	800fc7e <sqrt>
 80031a8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031b8:	f7fd fc9e 	bl	8000af8 <__aeabi_dcmpeq>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11f      	bne.n	8003202 <MPU6050_Read_All+0x2ea>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9c3 	bl	8000554 <__aeabi_i2d>
 80031ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d2:	f7fd fb53 	bl	800087c <__aeabi_ddiv>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	ec43 2b17 	vmov	d7, r2, r3
 80031de:	eeb0 0a47 	vmov.f32	s0, s14
 80031e2:	eef0 0a67 	vmov.f32	s1, s15
 80031e6:	f00c fb9f 	bl	800f928 <atan>
 80031ea:	ec51 0b10 	vmov	r0, r1, d0
 80031ee:	a33a      	add	r3, pc, #232	; (adr r3, 80032d8 <MPU6050_Read_All+0x3c0>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd fa18 	bl	8000628 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003200:	e005      	b.n	800320e <MPU6050_Read_All+0x2f6>
    } else {
        roll = 0.0;
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003214:	425b      	negs	r3, r3
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f99c 	bl	8000554 <__aeabi_i2d>
 800321c:	4682      	mov	sl, r0
 800321e:	468b      	mov	fp, r1
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f994 	bl	8000554 <__aeabi_i2d>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	ec43 2b11 	vmov	d1, r2, r3
 8003234:	ec4b ab10 	vmov	d0, sl, fp
 8003238:	f00c fd1f 	bl	800fc7a <atan2>
 800323c:	ec51 0b10 	vmov	r0, r1, d0
 8003240:	a325      	add	r3, pc, #148	; (adr r3, 80032d8 <MPU6050_Read_All+0x3c0>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd f9ef 	bl	8000628 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <MPU6050_Read_All+0x3dc>)
 8003258:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800325c:	f7fd fc56 	bl	8000b0c <__aeabi_dcmplt>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <MPU6050_Read_All+0x364>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <MPU6050_Read_All+0x3e0>)
 8003272:	f7fd fc69 	bl	8000b48 <__aeabi_dcmpgt>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d114      	bne.n	80032a6 <MPU6050_Read_All+0x38e>
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <MPU6050_Read_All+0x3e0>)
 8003282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003286:	f7fd fc5f 	bl	8000b48 <__aeabi_dcmpgt>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d037      	beq.n	8003300 <MPU6050_Read_All+0x3e8>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <MPU6050_Read_All+0x3dc>)
 800329c:	f7fd fc36 	bl	8000b0c <__aeabi_dcmplt>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02c      	beq.n	8003300 <MPU6050_Read_All+0x3e8>
        KalmanY.angle = pitch;
 80032a6:	4915      	ldr	r1, [pc, #84]	; (80032fc <MPU6050_Read_All+0x3e4>)
 80032a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80032ba:	e036      	b.n	800332a <MPU6050_Read_All+0x412>
 80032bc:	f3af 8000 	nop.w
 80032c0:	00000000 	.word	0x00000000
 80032c4:	40cc2900 	.word	0x40cc2900
 80032c8:	70a3d70a 	.word	0x70a3d70a
 80032cc:	3fb70a3d 	.word	0x3fb70a3d
 80032d0:	00000000 	.word	0x00000000
 80032d4:	40606000 	.word	0x40606000
 80032d8:	1a63c1f8 	.word	0x1a63c1f8
 80032dc:	404ca5dc 	.word	0x404ca5dc
 80032e0:	40d00000 	.word	0x40d00000
 80032e4:	43aa0000 	.word	0x43aa0000
 80032e8:	42121eb8 	.word	0x42121eb8
 80032ec:	200009a0 	.word	0x200009a0
 80032f0:	408f4000 	.word	0x408f4000
 80032f4:	c0568000 	.word	0xc0568000
 80032f8:	40568000 	.word	0x40568000
 80032fc:	20000160 	.word	0x20000160
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003306:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800330a:	eeb0 1a47 	vmov.f32	s2, s14
 800330e:	eef0 1a67 	vmov.f32	s3, s15
 8003312:	ed97 0b06 	vldr	d0, [r7, #24]
 8003316:	481e      	ldr	r0, [pc, #120]	; (8003390 <MPU6050_Read_All+0x478>)
 8003318:	f000 f840 	bl	800339c <Kalman_getAngle>
 800331c:	eeb0 7a40 	vmov.f32	s14, s0
 8003320:	eef0 7a60 	vmov.f32	s15, s1
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003330:	4690      	mov	r8, r2
 8003332:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <MPU6050_Read_All+0x47c>)
 800333c:	4640      	mov	r0, r8
 800333e:	4649      	mov	r1, r9
 8003340:	f7fd fc02 	bl	8000b48 <__aeabi_dcmpgt>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <MPU6050_Read_All+0x444>
        DataStruct->Gx = -DataStruct->Gx;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003350:	4614      	mov	r4, r2
 8003352:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003362:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003366:	eeb0 1a47 	vmov.f32	s2, s14
 800336a:	eef0 1a67 	vmov.f32	s3, s15
 800336e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003372:	4809      	ldr	r0, [pc, #36]	; (8003398 <MPU6050_Read_All+0x480>)
 8003374:	f000 f812 	bl	800339c <Kalman_getAngle>
 8003378:	eeb0 7a40 	vmov.f32	s14, s0
 800337c:	eef0 7a60 	vmov.f32	s15, s1
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8003386:	bf00      	nop
 8003388:	3740      	adds	r7, #64	; 0x40
 800338a:	46bd      	mov	sp, r7
 800338c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003390:	20000160 	.word	0x20000160
 8003394:	40568000 	.word	0x40568000
 8003398:	20000118 	.word	0x20000118

0800339c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b096      	sub	sp, #88	; 0x58
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	61f8      	str	r0, [r7, #28]
 80033a4:	ed87 0b04 	vstr	d0, [r7, #16]
 80033a8:	ed87 1b02 	vstr	d1, [r7, #8]
 80033ac:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033ba:	f7fc ff7d 	bl	80002b8 <__aeabi_dsub>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80033cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033d4:	f7fd f928 	bl	8000628 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4620      	mov	r0, r4
 80033de:	4629      	mov	r1, r5
 80033e0:	f7fc ff6c 	bl	80002bc <__adddf3>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	69f9      	ldr	r1, [r7, #28]
 80033ea:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	f7fd f913 	bl	8000628 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003410:	f7fc ff52 	bl	80002b8 <__aeabi_dsub>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003422:	f7fc ff49 	bl	80002b8 <__aeabi_dsub>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fc ff42 	bl	80002bc <__adddf3>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003444:	f7fd f8f0 	bl	8000628 <__aeabi_dmul>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fc ff34 	bl	80002bc <__adddf3>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	69f9      	ldr	r1, [r7, #28]
 800345a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800346a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800346e:	f7fd f8db 	bl	8000628 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	f7fc ff1d 	bl	80002b8 <__aeabi_dsub>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	69f9      	ldr	r1, [r7, #28]
 8003484:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003498:	f7fd f8c6 	bl	8000628 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7fc ff08 	bl	80002b8 <__aeabi_dsub>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80034be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c2:	f7fd f8b1 	bl	8000628 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4620      	mov	r0, r4
 80034cc:	4629      	mov	r1, r5
 80034ce:	f7fc fef5 	bl	80002bc <__adddf3>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	69f9      	ldr	r1, [r7, #28]
 80034d8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034e8:	f7fc fee8 	bl	80002bc <__adddf3>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80034fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034fe:	f7fd f9bd 	bl	800087c <__aeabi_ddiv>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003510:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003514:	f7fd f9b2 	bl	800087c <__aeabi_ddiv>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800352a:	f7fc fec5 	bl	80002b8 <__aeabi_dsub>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800353c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003540:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003544:	f7fd f870 	bl	8000628 <__aeabi_dmul>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4620      	mov	r0, r4
 800354e:	4629      	mov	r1, r5
 8003550:	f7fc feb4 	bl	80002bc <__adddf3>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	69f9      	ldr	r1, [r7, #28]
 800355a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003564:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003568:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800356c:	f7fd f85c 	bl	8000628 <__aeabi_dmul>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4620      	mov	r0, r4
 8003576:	4629      	mov	r1, r5
 8003578:	f7fc fea0 	bl	80002bc <__adddf3>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	69f9      	ldr	r1, [r7, #28]
 8003582:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800358c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003596:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80035a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a8:	f7fd f83e 	bl	8000628 <__aeabi_dmul>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4620      	mov	r0, r4
 80035b2:	4629      	mov	r1, r5
 80035b4:	f7fc fe80 	bl	80002b8 <__aeabi_dsub>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	69f9      	ldr	r1, [r7, #28]
 80035be:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80035c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035d0:	f7fd f82a 	bl	8000628 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4620      	mov	r0, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	f7fc fe6c 	bl	80002b8 <__aeabi_dsub>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	69f9      	ldr	r1, [r7, #28]
 80035e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80035f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f8:	f7fd f816 	bl	8000628 <__aeabi_dmul>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4620      	mov	r0, r4
 8003602:	4629      	mov	r1, r5
 8003604:	f7fc fe58 	bl	80002b8 <__aeabi_dsub>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	69f9      	ldr	r1, [r7, #28]
 800360e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003618:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800361c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003620:	f7fd f802 	bl	8000628 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4620      	mov	r0, r4
 800362a:	4629      	mov	r1, r5
 800362c:	f7fc fe44 	bl	80002b8 <__aeabi_dsub>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	69f9      	ldr	r1, [r7, #28]
 8003636:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003640:	ec43 2b17 	vmov	d7, r2, r3
};
 8003644:	eeb0 0a47 	vmov.f32	s0, s14
 8003648:	eef0 0a67 	vmov.f32	s1, s15
 800364c:	3758      	adds	r7, #88	; 0x58
 800364e:	46bd      	mov	sp, r7
 8003650:	bdb0      	pop	{r4, r5, r7, pc}

08003652 <manageBackSpace>:
#include "main.h"
#include "string.h"
#include "stringHelpers.h"

void manageBackSpace(char* string)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
		char *sPtr = string;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60fb      	str	r3, [r7, #12]
		sPtr = strchr(string,BKSP);
 800365e:	217f      	movs	r1, #127	; 0x7f
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f009 f8d2 	bl	800c80a <strchr>
 8003666:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 8003668:	e029      	b.n	80036be <manageBackSpace+0x6c>
		{
			// Handle if first Char is a BackSpace
			if (string[0] == BKSP)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b7f      	cmp	r3, #127	; 0x7f
 8003670:	d106      	bne.n	8003680 <manageBackSpace+0x2e>
			{
				strcpy(sPtr,sPtr+1);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3301      	adds	r3, #1
 8003676:	4619      	mov	r1, r3
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f009 f8d3 	bl	800c824 <strcpy>
 800367e:	e019      	b.n	80036b4 <manageBackSpace+0x62>
			}
			// handle if char is a backspace and is at the end ont he string
			else if (*sPtr == BKSP && *(sPtr+1) == '\0')
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b7f      	cmp	r3, #127	; 0x7f
 8003686:	d109      	bne.n	800369c <manageBackSpace+0x4a>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3301      	adds	r3, #1
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <manageBackSpace+0x4a>
			{
				//Just delete last character
				*(sPtr-1) = '\0';
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3b01      	subs	r3, #1
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e00b      	b.n	80036b4 <manageBackSpace+0x62>
			}
			else if (*sPtr == BKSP )
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b7f      	cmp	r3, #127	; 0x7f
 80036a2:	d107      	bne.n	80036b4 <manageBackSpace+0x62>
			{
				strcpy(sPtr-1,sPtr+1);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e5a      	subs	r2, r3, #1
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3301      	adds	r3, #1
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f009 f8b8 	bl	800c824 <strcpy>
			}
			// handle is char is a backspace and IS at the end
			sPtr = strchr(string,BKSP);
 80036b4:	217f      	movs	r1, #127	; 0x7f
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f009 f8a7 	bl	800c80a <strchr>
 80036bc:	60f8      	str	r0, [r7, #12]
		while (*sPtr != 0)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1d1      	bne.n	800366a <manageBackSpace+0x18>
		}
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <isNumber>:

uint8_t isNumber(uint8_t *string)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	while (*string != 0x0)
 80036d8:	e00c      	b.n	80036f4 <isNumber+0x24>
	{
		if ((*string) < '0' || (*string) > '9' )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b2f      	cmp	r3, #47	; 0x2f
 80036e0:	d903      	bls.n	80036ea <isNumber+0x1a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b39      	cmp	r3, #57	; 0x39
 80036e8:	d901      	bls.n	80036ee <isNumber+0x1e>
			return 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e007      	b.n	80036fe <isNumber+0x2e>
		string++;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3301      	adds	r3, #1
 80036f2:	607b      	str	r3, [r7, #4]
	while (*string != 0x0)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <isNumber+0xa>
	}
	return 1;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <byteToBin>:


void byteToBin(uint8_t b, char*text)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	4603      	mov	r3, r0
 8003712:	6039      	str	r1, [r7, #0]
 8003714:	71fb      	strb	r3, [r7, #7]
	uint8_t pos;
	for (uint8_t cnt = 0;cnt<8;cnt++)
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	e019      	b.n	8003750 <byteToBin+0x46>
	{
		pos = 7-cnt;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	f1c3 0307 	rsb	r3, r3, #7
 8003722:	73bb      	strb	r3, [r7, #14]
		if (b & 1<< cnt)
 8003724:	79fa      	ldrb	r2, [r7, #7]
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	fa42 f303 	asr.w	r3, r2, r3
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <byteToBin+0x36>
			text[pos] = '1';
 8003734:	7bbb      	ldrb	r3, [r7, #14]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4413      	add	r3, r2
 800373a:	2231      	movs	r2, #49	; 0x31
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e004      	b.n	800374a <byteToBin+0x40>
		else
			text[pos] = '0';
 8003740:	7bbb      	ldrb	r3, [r7, #14]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	4413      	add	r3, r2
 8003746:	2230      	movs	r2, #48	; 0x30
 8003748:	701a      	strb	r2, [r3, #0]
	for (uint8_t cnt = 0;cnt<8;cnt++)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	3301      	adds	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b07      	cmp	r3, #7
 8003754:	d9e2      	bls.n	800371c <byteToBin+0x12>

	}
	text[8] = 0x0;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <lc709203_getCellVoltage>:
 * @param: 16bit pointer to value
 * @return: Error Code
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getCellVoltage(uint16_t *voltage)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_VOLTAGE,voltage);
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	2009      	movs	r0, #9
 8003776:	f000 f81f 	bl	80037b8 <lc709203_getRegisterValue>
 800377a:	4603      	mov	r3, r0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <lc709203_getCellTemp>:

eLC709203_Error_t lc709203_getCellTemp(uint16_t *voltage)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_CELL_TEMP,voltage);
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	2008      	movs	r0, #8
 8003790:	f000 f812 	bl	80037b8 <lc709203_getRegisterValue>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <lc709203_getId>:

eLC709203_Error_t lc709203_getId(uint16_t *version)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
	return lc709203_getRegisterValue (LC709302_REG_IC_VERSION,version);
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	2011      	movs	r0, #17
 80037aa:	f000 f805 	bl	80037b8 <lc709203_getRegisterValue>
 80037ae:	4603      	mov	r3, r0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <lc709203_getRegisterValue>:
 * @param: value - a 16 bit pointer to the value to be used
 * @return: Error code foe the function
 *
 ***********************************************************/
eLC709203_Error_t lc709203_getRegisterValue (uint8_t reg,uint16_t *value)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af04      	add	r7, sp, #16
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c1, LC709302_ADRESS, reg, 1, (uint8_t*)value, 2, 100);
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	2364      	movs	r3, #100	; 0x64
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	2302      	movs	r3, #2
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2301      	movs	r3, #1
 80037d6:	2116      	movs	r1, #22
 80037d8:	4807      	ldr	r0, [pc, #28]	; (80037f8 <lc709203_getRegisterValue+0x40>)
 80037da:	f003 fcef 	bl	80071bc <HAL_I2C_Mem_Read>
 80037de:	4603      	mov	r3, r0
 80037e0:	73fb      	strb	r3, [r7, #15]

	if (result != HAL_OK)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <lc709203_getRegisterValue+0x34>
	{
		return LC798_COMM_ERROR;
 80037e8:	2302      	movs	r3, #2
 80037ea:	e000      	b.n	80037ee <lc709203_getRegisterValue+0x36>
	}
	else
		return LC798_OK;
 80037ec:	2301      	movs	r3, #1

}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200009ac 	.word	0x200009ac

080037fc <ledAllOff>:




void ledAllOff()
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 8003802:	2300      	movs	r3, #0
 8003804:	71fb      	strb	r3, [r7, #7]
 8003806:	e008      	b.n	800381a <ledAllOff+0x1e>
	{
		led_set_RGB(i,0x0,0,0);
 8003808:	79f8      	ldrb	r0, [r7, #7]
 800380a:	2300      	movs	r3, #0
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	f001 fc0a 	bl	8005028 <led_set_RGB>
	for (uint8_t i=0;i<NUM_PIXELS;i++)
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	3301      	adds	r3, #1
 8003818:	71fb      	strb	r3, [r7, #7]
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	2b8f      	cmp	r3, #143	; 0x8f
 800381e:	d9f3      	bls.n	8003808 <ledAllOff+0xc>
	}
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <ledRender>:


void ledRender()
{
 800382a:	b580      	push	{r7, lr}
 800382c:	af00      	add	r7, sp, #0
	led_render();
 800382e:	f001 fc63 	bl	80050f8 <led_render>
	HAL_Delay(10);
 8003832:	200a      	movs	r0, #10
 8003834:	f001 ff50 	bl	80056d8 <HAL_Delay>
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}

0800383c <ledSetFaceColour>:

void ledSetFaceColour(uint8_t face, uint32_t colour, uint32_t colour2,eLedFaceMode_t mode)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	461a      	mov	r2, r3
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	4613      	mov	r3, r2
 800384e:	73bb      	strb	r3, [r7, #14]
	uint16_t offset = face * 12;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	b29b      	uxth	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	0052      	lsls	r2, r2, #1
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	82bb      	strh	r3, [r7, #20]



		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 800385e:	8abb      	ldrh	r3, [r7, #20]
 8003860:	82fb      	strh	r3, [r7, #22]
 8003862:	e05d      	b.n	8003920 <ledSetFaceColour+0xe4>
		{
			if (mode == LED_FACE_MODE_ERROR)
 8003864:	7bbb      	ldrb	r3, [r7, #14]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d125      	bne.n	80038b6 <ledSetFaceColour+0x7a>
			{
				uint32_t errorColour = colourFindByid(COLOUR_ERROR_ID)->code;
 800386a:	200d      	movs	r0, #13
 800386c:	f7fe fefa 	bl	8002664 <colourFindByid>
 8003870:	4603      	mov	r3, r0
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	613b      	str	r3, [r7, #16]
				if ((i+1)%2)
 8003876:	8afb      	ldrh	r3, [r7, #22]
 8003878:	3301      	adds	r3, #1
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <ledSetFaceColour+0x60>
					led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 8003882:	8afb      	ldrh	r3, [r7, #22]
 8003884:	b2d8      	uxtb	r0, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	b2d9      	uxtb	r1, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f001 fbc7 	bl	8005028 <led_set_RGB>
 800389a:	e03e      	b.n	800391a <ledSetFaceColour+0xde>
				else
					led_set_RGB(i,(errorColour >> 16) & 0xFF, (errorColour >> 8) & 0xFF, errorColour & 0xFF);
 800389c:	8afb      	ldrh	r3, [r7, #22]
 800389e:	b2d8      	uxtb	r0, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	b2d9      	uxtb	r1, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f001 fbba 	bl	8005028 <led_set_RGB>
 80038b4:	e031      	b.n	800391a <ledSetFaceColour+0xde>
			}
			else if (mode == LED_FACE_MODE_NORMAL)
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10c      	bne.n	80038d6 <ledSetFaceColour+0x9a>
			{
				led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 80038bc:	8afb      	ldrh	r3, [r7, #22]
 80038be:	b2d8      	uxtb	r0, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	b2d9      	uxtb	r1, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f001 fbaa 	bl	8005028 <led_set_RGB>
 80038d4:	e021      	b.n	800391a <ledSetFaceColour+0xde>
			}
			else if (mode == LED_FACE_MODE_HALF)
 80038d6:	7bbb      	ldrb	r3, [r7, #14]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d11e      	bne.n	800391a <ledSetFaceColour+0xde>
			{

				if ((i+1)%2)
 80038dc:	8afb      	ldrh	r3, [r7, #22]
 80038de:	3301      	adds	r3, #1
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <ledSetFaceColour+0xc6>
					led_set_RGB(i,(colour >> 16) & 0xFF, (colour >> 8) & 0xFF, colour & 0xFF);
 80038e8:	8afb      	ldrh	r3, [r7, #22]
 80038ea:	b2d8      	uxtb	r0, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	b2d9      	uxtb	r1, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f001 fb94 	bl	8005028 <led_set_RGB>
 8003900:	e00b      	b.n	800391a <ledSetFaceColour+0xde>
				else
					led_set_RGB(i,(colour2 >> 16) & 0xFF, (colour2 >> 8) & 0xFF, colour2 & 0xFF);
 8003902:	8afb      	ldrh	r3, [r7, #22]
 8003904:	b2d8      	uxtb	r0, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	b2d9      	uxtb	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	b2da      	uxtb	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f001 fb87 	bl	8005028 <led_set_RGB>
		for (uint16_t i=offset;i<offset + PIXELS_PER_FACE;i++)
 800391a:	8afb      	ldrh	r3, [r7, #22]
 800391c:	3301      	adds	r3, #1
 800391e:	82fb      	strh	r3, [r7, #22]
 8003920:	8abb      	ldrh	r3, [r7, #20]
 8003922:	f103 020b 	add.w	r2, r3, #11
 8003926:	8afb      	ldrh	r3, [r7, #22]
 8003928:	429a      	cmp	r2, r3
 800392a:	da9b      	bge.n	8003864 <ledSetFaceColour+0x28>
			}
	}


}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <ledDance>:


void ledDance()
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
	int i=0;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
	while (i<1){
 8003940:	e040      	b.n	80039c4 <ledDance+0x8e>
	 uint8_t angle = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	72fb      	strb	r3, [r7, #11]
	 const uint8_t angle_difference = 11;
 8003946:	230b      	movs	r3, #11
 8003948:	727b      	strb	r3, [r7, #9]
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 800394a:	2300      	movs	r3, #0
 800394c:	72bb      	strb	r3, [r7, #10]
 800394e:	e02e      	b.n	80039ae <ledDance+0x78>
		  // Calculate color
			 HAL_Delay(100);
 8003950:	2064      	movs	r0, #100	; 0x64
 8003952:	f001 fec1 	bl	80056d8 <HAL_Delay>
			uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 127);
 8003956:	7aba      	ldrb	r2, [r7, #10]
 8003958:	7a7b      	ldrb	r3, [r7, #9]
 800395a:	fb12 f303 	smulbb	r3, r2, r3
 800395e:	b2da      	uxtb	r2, r3
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	4413      	add	r3, r2
 8003964:	b2db      	uxtb	r3, r3
 8003966:	227f      	movs	r2, #127	; 0x7f
 8003968:	21ff      	movs	r1, #255	; 0xff
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fd7c 	bl	8005468 <hsl_to_rgb>
 8003970:	6078      	str	r0, [r7, #4]
			// Set color
			led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	b2d9      	uxtb	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b2da      	uxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	7ab8      	ldrb	r0, [r7, #10]
 8003984:	f001 fb50 	bl	8005028 <led_set_RGB>
			if (i>6)
 8003988:	7abb      	ldrb	r3, [r7, #10]
 800398a:	2b06      	cmp	r3, #6
 800398c:	d907      	bls.n	800399e <ledDance+0x68>
				led_set_RGB(i-6, 0,0,0);
 800398e:	7abb      	ldrb	r3, [r7, #10]
 8003990:	3b06      	subs	r3, #6
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	2300      	movs	r3, #0
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	f001 fb45 	bl	8005028 <led_set_RGB>
			++angle;
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	3301      	adds	r3, #1
 80039a2:	72fb      	strb	r3, [r7, #11]
			led_render();
 80039a4:	f001 fba8 	bl	80050f8 <led_render>
	  for(uint8_t i = 0; i < NUM_PIXELS /* Change that to your amount of LEDs */; i++) {
 80039a8:	7abb      	ldrb	r3, [r7, #10]
 80039aa:	3301      	adds	r3, #1
 80039ac:	72bb      	strb	r3, [r7, #10]
 80039ae:	7abb      	ldrb	r3, [r7, #10]
 80039b0:	2b8f      	cmp	r3, #143	; 0x8f
 80039b2:	d9cd      	bls.n	8003950 <ledDance+0x1a>

		}
	  HAL_Delay(10);
 80039b4:	200a      	movs	r0, #10
 80039b6:	f001 fe8f 	bl	80056d8 <HAL_Delay>
		// Write to LED
	  ledAllOff();
 80039ba:	f7ff ff1f 	bl	80037fc <ledAllOff>
	  i++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
	while (i<1){
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	ddbb      	ble.n	8003942 <ledDance+0xc>
	}
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <detectFaceUp>:




int8_t detectFaceUp()
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b09c      	sub	sp, #112	; 0x70
 80039d8:	af00      	add	r7, sp, #0
	MPU6050_t imuData;

	MPU6050ReadStable(&imuData);
 80039da:	463b      	mov	r3, r7
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fa7d 	bl	8002edc <MPU6050ReadStable>
	double x = imuData.KalmanAngleX;
 80039e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double y = imuData.KalmanAngleY;
 80039ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	uint8_t face;
	for (face=0; face<FACE_COUNT; face++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80039f8:	e06b      	b.n	8003ad2 <detectFaceUp+0xfe>
	{
		if ( x > faceTable[face].xRTop && x < faceTable[face].xRBottom && y > faceTable[face].yRTop && y < faceTable[face].yRBottom )
 80039fa:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80039fe:	493a      	ldr	r1, [pc, #232]	; (8003ae8 <detectFaceUp+0x114>)
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	440b      	add	r3, r1
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fc fd9f 	bl	8000554 <__aeabi_i2d>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a1e:	f7fd f893 	bl	8000b48 <__aeabi_dcmpgt>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d04f      	beq.n	8003ac8 <detectFaceUp+0xf4>
 8003a28:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003a2c:	492e      	ldr	r1, [pc, #184]	; (8003ae8 <detectFaceUp+0x114>)
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	440b      	add	r3, r1
 8003a38:	3304      	adds	r3, #4
 8003a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fd88 	bl	8000554 <__aeabi_i2d>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a4c:	f7fd f85e 	bl	8000b0c <__aeabi_dcmplt>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d038      	beq.n	8003ac8 <detectFaceUp+0xf4>
 8003a56:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003a5a:	4923      	ldr	r1, [pc, #140]	; (8003ae8 <detectFaceUp+0x114>)
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	440b      	add	r3, r1
 8003a66:	3306      	adds	r3, #6
 8003a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fc fd71 	bl	8000554 <__aeabi_i2d>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a7a:	f7fd f865 	bl	8000b48 <__aeabi_dcmpgt>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d021      	beq.n	8003ac8 <detectFaceUp+0xf4>
 8003a84:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003a88:	4917      	ldr	r1, [pc, #92]	; (8003ae8 <detectFaceUp+0x114>)
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	3308      	adds	r3, #8
 8003a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fc fd5a 	bl	8000554 <__aeabi_i2d>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003aa8:	f7fd f830 	bl	8000b0c <__aeabi_dcmplt>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <detectFaceUp+0xf4>
			return faceTable[face].faceId;
 8003ab2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003ab6:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <detectFaceUp+0x114>)
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	440b      	add	r3, r1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	e00a      	b.n	8003ade <detectFaceUp+0x10a>
	for (face=0; face<FACE_COUNT; face++)
 8003ac8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003acc:	3301      	adds	r3, #1
 8003ace:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003ad2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ad6:	2b0b      	cmp	r3, #11
 8003ad8:	d98f      	bls.n	80039fa <detectFaceUp+0x26>
	}
	return FACE_NOT_FOUND;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3770      	adds	r7, #112	; 0x70
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200001a8 	.word	0x200001a8

08003aec <rtcGetTimeString>:
}



void rtcGetTimeString(char* timeString)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003af4:	f107 030c 	add.w	r3, r7, #12
 8003af8:	2200      	movs	r2, #0
 8003afa:	4619      	mov	r1, r3
 8003afc:	480c      	ldr	r0, [pc, #48]	; (8003b30 <rtcGetTimeString+0x44>)
 8003afe:	f004 ff73 	bl	80089e8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // There is a bug in HAL where the time is only returned if the date is also read (even after the fact!)
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	2200      	movs	r2, #0
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4809      	ldr	r0, [pc, #36]	; (8003b30 <rtcGetTimeString+0x44>)
 8003b0c:	f005 f84e 	bl	8008bac <HAL_RTC_GetDate>
	sprintf(timeString,"%02d:%02d:%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8003b10:	7b3b      	ldrb	r3, [r7, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	7b7b      	ldrb	r3, [r7, #13]
 8003b16:	4619      	mov	r1, r3
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4905      	ldr	r1, [pc, #20]	; (8003b34 <rtcGetTimeString+0x48>)
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f008 fde1 	bl	800c6e8 <siprintf>

}
 8003b26:	bf00      	nop
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000a00 	.word	0x20000a00
 8003b34:	0801060c 	.word	0x0801060c

08003b38 <rtcGetDateString>:

void rtcGetDateString(char* dateString)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	2200      	movs	r2, #0
 8003b46:	4619      	mov	r1, r3
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <rtcGetDateString+0x34>)
 8003b4a:	f005 f82f 	bl	8008bac <HAL_RTC_GetDate>
	sprintf(dateString,"%02d-%02d-%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	461a      	mov	r2, r3
 8003b52:	7b7b      	ldrb	r3, [r7, #13]
 8003b54:	4619      	mov	r1, r3
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4904      	ldr	r1, [pc, #16]	; (8003b70 <rtcGetDateString+0x38>)
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f008 fdc2 	bl	800c6e8 <siprintf>
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000a00 	.word	0x20000a00
 8003b70:	08010620 	.word	0x08010620

08003b74 <rtcGetTimeStamp>:


time_t rtcGetTimeStamp()
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b092      	sub	sp, #72	; 0x48
 8003b78:	af00      	add	r7, sp, #0
	time_t timeResult;
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc, &time, FORMAT_BIN);
 8003b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4619      	mov	r1, r3
 8003b82:	4816      	ldr	r0, [pc, #88]	; (8003bdc <rtcGetTimeStamp+0x68>)
 8003b84:	f004 ff30 	bl	80089e8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, FORMAT_BIN);
 8003b88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4812      	ldr	r0, [pc, #72]	; (8003bdc <rtcGetTimeStamp+0x68>)
 8003b92:	f005 f80b 	bl	8008bac <HAL_RTC_GetDate>

	struct tm tm;

	tm.tm_sec =  time.Seconds;
 8003b96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003b9a:	607b      	str	r3, [r7, #4]
	tm.tm_min= time.Minutes;
 8003b9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003ba0:	60bb      	str	r3, [r7, #8]
	tm.tm_hour= time.Hours;
 8003ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ba6:	60fb      	str	r3, [r7, #12]
	tm.tm_mday= date.Date;
 8003ba8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bac:	613b      	str	r3, [r7, #16]
	tm.tm_mon= date.Month - 1;
 8003bae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
	tm.tm_year= date.Year + 100;
 8003bb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bba:	3364      	adds	r3, #100	; 0x64
 8003bbc:	61bb      	str	r3, [r7, #24]
	tm.tm_isdst= 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24

	timeResult = mktime(&tm);
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f007 fe9b 	bl	800b900 <mktime>
 8003bca:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	return timeResult;
 8003bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40

}
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	3748      	adds	r7, #72	; 0x48
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000a00 	.word	0x20000a00

08003be0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <MX_CRC_Init+0x20>)
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <MX_CRC_Init+0x24>)
 8003be8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003bea:	4805      	ldr	r0, [pc, #20]	; (8003c00 <MX_CRC_Init+0x20>)
 8003bec:	f001 fec9 	bl	8005982 <HAL_CRC_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003bf6:	f000 fa87 	bl	8004108 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200009a4 	.word	0x200009a4
 8003c04:	40023000 	.word	0x40023000

08003c08 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <HAL_CRC_MspInit+0x3c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10d      	bne.n	8003c36 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_CRC_MspInit+0x40>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <HAL_CRC_MspInit+0x40>)
 8003c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <HAL_CRC_MspInit+0x40>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40023000 	.word	0x40023000
 8003c48:	40023800 	.word	0x40023800

08003c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <MX_DMA_Init+0x3c>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <MX_DMA_Init+0x3c>)
 8003c5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <MX_DMA_Init+0x3c>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	2039      	movs	r0, #57	; 0x39
 8003c74:	f001 fe4f 	bl	8005916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003c78:	2039      	movs	r0, #57	; 0x39
 8003c7a:	f001 fe68 	bl	800594e <HAL_NVIC_EnableIRQ>

}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800

08003c8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c92:	f107 0314 	add.w	r3, r7, #20
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	4b3c      	ldr	r3, [pc, #240]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	4a3b      	ldr	r2, [pc, #236]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb2:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a34      	ldr	r2, [pc, #208]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <MX_GPIO_Init+0x10c>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003d12:	2200      	movs	r2, #0
 8003d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d18:	4820      	ldr	r0, [pc, #128]	; (8003d9c <MX_GPIO_Init+0x110>)
 8003d1a:	f002 ffdf 	bl	8006cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_MEM_CS_GPIO_Port, SPI_MEM_CS_Pin, GPIO_PIN_RESET);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2110      	movs	r1, #16
 8003d22:	481f      	ldr	r0, [pc, #124]	; (8003da0 <MX_GPIO_Init+0x114>)
 8003d24:	f002 ffda 	bl	8006cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4816      	ldr	r0, [pc, #88]	; (8003d9c <MX_GPIO_Init+0x110>)
 8003d42:	f002 fd63 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_MEM_CS_Pin;
 8003d46:	2310      	movs	r3, #16
 8003d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4810      	ldr	r0, [pc, #64]	; (8003da0 <MX_GPIO_Init+0x114>)
 8003d5e:	f002 fd55 	bl	800680c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 8003d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	4619      	mov	r1, r3
 8003d78:	480a      	ldr	r0, [pc, #40]	; (8003da4 <MX_GPIO_Init+0x118>)
 8003d7a:	f002 fd47 	bl	800680c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2100      	movs	r1, #0
 8003d82:	2017      	movs	r0, #23
 8003d84:	f001 fdc7 	bl	8005916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d88:	2017      	movs	r0, #23
 8003d8a:	f001 fde0 	bl	800594e <HAL_NVIC_EnableIRQ>

}
 8003d8e:	bf00      	nop
 8003d90:	3728      	adds	r7, #40	; 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40020800 	.word	0x40020800
 8003da0:	40020000 	.word	0x40020000
 8003da4:	40020400 	.word	0x40020400

08003da8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003dae:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <MX_I2C1_Init+0x58>)
 8003db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003db4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003db8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003dc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003de6:	4805      	ldr	r0, [pc, #20]	; (8003dfc <MX_I2C1_Init+0x54>)
 8003de8:	f002 ffaa 	bl	8006d40 <HAL_I2C_Init>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8003df2:	f000 f989 	bl	8004108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200009ac 	.word	0x200009ac
 8003e00:	40005400 	.word	0x40005400

08003e04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_I2C_MspInit+0x84>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d12b      	bne.n	8003e7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_I2C_MspInit+0x88>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_I2C_MspInit+0x88>)
 8003e30:	f043 0302 	orr.w	r3, r3, #2
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_I2C_MspInit+0x88>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e42:	23c0      	movs	r3, #192	; 0xc0
 8003e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e46:	2312      	movs	r3, #18
 8003e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e52:	2304      	movs	r3, #4
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	480c      	ldr	r0, [pc, #48]	; (8003e90 <HAL_I2C_MspInit+0x8c>)
 8003e5e:	f002 fcd5 	bl	800680c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_I2C_MspInit+0x88>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <HAL_I2C_MspInit+0x88>)
 8003e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_I2C_MspInit+0x88>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3728      	adds	r7, #40	; 0x28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40005400 	.word	0x40005400
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020400 	.word	0x40020400

08003e94 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_I2C_MspDeInit+0x38>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_I2C_MspDeInit+0x3c>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_I2C_MspDeInit+0x3c>)
 8003eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <HAL_I2C_MspDeInit+0x40>)
 8003eb6:	f002 fe2d 	bl	8006b14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <HAL_I2C_MspDeInit+0x40>)
 8003ebe:	f002 fe29 	bl	8006b14 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40005400 	.word	0x40005400
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020400 	.word	0x40020400

08003ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ede:	f001 fb89 	bl	80055f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ee2:	f000 f8a7 	bl	8004034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ee6:	f7ff fed1 	bl	8003c8c <MX_GPIO_Init>
  MX_RTC_Init();
 8003eea:	f000 f913 	bl	8004114 <MX_RTC_Init>
  MX_DMA_Init();
 8003eee:	f7ff fead 	bl	8003c4c <MX_DMA_Init>
  MX_I2C1_Init();
 8003ef2:	f7ff ff59 	bl	8003da8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003ef6:	f000 fb31 	bl	800455c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003efa:	f000 fcbd 	bl	8004878 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003efe:	f000 f95b 	bl	80041b8 <MX_SPI1_Init>
  MX_CRC_Init();
 8003f02:	f7ff fe6d 	bl	8003be0 <MX_CRC_Init>
  MX_TIM9_Init();
 8003f06:	f000 fbc9 	bl	800469c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  ledAllOff();
 8003f0a:	f7ff fc77 	bl	80037fc <ledAllOff>
  ledRender();
 8003f0e:	f7ff fc8c 	bl	800382a <ledRender>
  sysConfigInit();
 8003f12:	f000 ffef 	bl	8004ef4 <sysConfigInit>
  systemConfig_t * config = systemConfigGet();
 8003f16:	f001 f805 	bl	8004f24 <systemConfigGet>
 8003f1a:	61f8      	str	r0, [r7, #28]
  dodecaItems_t *dodecaItems = &config->configItems.dodecaConfig;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	61bb      	str	r3, [r7, #24]

  dodecaInit(dodecaItems);
 8003f20:	69b8      	ldr	r0, [r7, #24]
 8003f22:	f7fe fc55 	bl	80027d0 <dodecaInit>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
*/

  ConsoleInit();
 8003f26:	f7fd f9a3 	bl	8001270 <ConsoleInit>


  if (SYS_CONFIG_BAD_DATA == sysConfigRead())
 8003f2a:	f001 f833 	bl	8004f94 <sysConfigRead>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d106      	bne.n	8003f42 <main+0x6a>
  {
	  ConsoleSendLine("*** CONFIG INVALID ***\nResetting to default");
 8003f34:	4838      	ldr	r0, [pc, #224]	; (8004018 <main+0x140>)
 8003f36:	f7fd fbc3 	bl	80016c0 <ConsoleSendLine>
	  dodecaReset();
 8003f3a:	f7fe fc59 	bl	80027f0 <dodecaReset>
	  sysConfigSave();
 8003f3e:	f001 f843 	bl	8004fc8 <sysConfigSave>
  }



  HAL_Delay(100);
 8003f42:	2064      	movs	r0, #100	; 0x64
 8003f44:	f001 fbc8 	bl	80056d8 <HAL_Delay>
  while(1 == MPU6050_Init(&hi2c1) )
 8003f48:	e038      	b.n	8003fbc <main+0xe4>
  {
	  ConsoleSendString("** ERROR Initialising MNP6050!\n");
 8003f4a:	4834      	ldr	r0, [pc, #208]	; (800401c <main+0x144>)
 8003f4c:	f7fd fbab 	bl	80016a6 <ConsoleSendString>
	  hi2c1.Instance->CR1 &= ~(I2C_CR1_PE);
 8003f50:	4b33      	ldr	r3, [pc, #204]	; (8004020 <main+0x148>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b32      	ldr	r3, [pc, #200]	; (8004020 <main+0x148>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

	  HAL_I2C_MspDeInit(&hi2c1);
 8003f60:	482f      	ldr	r0, [pc, #188]	; (8004020 <main+0x148>)
 8003f62:	f7ff ff97 	bl	8003e94 <HAL_I2C_MspDeInit>
	  hi2c1.Instance->SR2 &=~(I2C_SR2_BUSY);
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <main+0x148>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <main+0x148>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0202 	bic.w	r2, r2, #2
 8003f74:	619a      	str	r2, [r3, #24]

	  GPIO_InitTypeDef GPIO_Init;
	  GPIO_Init.Pin = GPIO_PIN_7;
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	603b      	str	r3, [r7, #0]
	  GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	607b      	str	r3, [r7, #4]
	  GPIO_Init.Pull = GPIO_PULLUP;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
	  GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8003f86:	463b      	mov	r3, r7
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4826      	ldr	r0, [pc, #152]	; (8004024 <main+0x14c>)
 8003f8c:	f002 fc3e 	bl	800680c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003f90:	2201      	movs	r2, #1
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	4823      	ldr	r0, [pc, #140]	; (8004024 <main+0x14c>)
 8003f96:	f002 fea1 	bl	8006cdc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2180      	movs	r1, #128	; 0x80
 8003f9e:	4821      	ldr	r0, [pc, #132]	; (8004024 <main+0x14c>)
 8003fa0:	f002 fe9c 	bl	8006cdc <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8003fa4:	2032      	movs	r0, #50	; 0x32
 8003fa6:	f001 fb97 	bl	80056d8 <HAL_Delay>
	  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	481d      	ldr	r0, [pc, #116]	; (8004024 <main+0x14c>)
 8003fae:	f002 fdb1 	bl	8006b14 <HAL_GPIO_DeInit>
	  MX_I2C1_Init();
 8003fb2:	f7ff fef9 	bl	8003da8 <MX_I2C1_Init>

	  //__HAL_RCC_GPIOB_CLK_ENABLE();
	  HAL_Delay(100);
 8003fb6:	2064      	movs	r0, #100	; 0x64
 8003fb8:	f001 fb8e 	bl	80056d8 <HAL_Delay>
  while(1 == MPU6050_Init(&hi2c1) )
 8003fbc:	4818      	ldr	r0, [pc, #96]	; (8004020 <main+0x148>)
 8003fbe:	f7fe fe63 	bl	8002c88 <MPU6050_Init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d0c0      	beq.n	8003f4a <main+0x72>

  }
  // run the Accel To get initial angle ready. Seems to need to be run a numerb of times for the karman angle to settle???

  detectFaceUp(); // Just to start the cals off
 8003fc8:	f7ff fd04 	bl	80039d4 <detectFaceUp>
  dataStoreInit();
 8003fcc:	f7fe fb74 	bl	80026b8 <dataStoreInit>
  ConsoleSendString("MPU6050 Initialised\n");
 8003fd0:	4815      	ldr	r0, [pc, #84]	; (8004028 <main+0x150>)
 8003fd2:	f7fd fb68 	bl	80016a6 <ConsoleSendString>

  //HAL_TIM_Base_Start_IT(&htim9);
  ConsolePrintPrompt();
 8003fd6:	f7fd f975 	bl	80012c4 <ConsolePrintPrompt>



  RTC_DateTypeDef date;
    HAL_RTC_GetDate(&hrtc, &date,RTC_FORMAT_BIN);
 8003fda:	f107 0314 	add.w	r3, r7, #20
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4812      	ldr	r0, [pc, #72]	; (800402c <main+0x154>)
 8003fe4:	f004 fde2 	bl	8008bac <HAL_RTC_GetDate>
    if (date.Year < 22)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b15      	cmp	r3, #21
 8003fec:	d806      	bhi.n	8003ffc <main+0x124>
    {
    	ConsoleSendLine("**** DATE & TIME NOT SET ******\n\n");
 8003fee:	4810      	ldr	r0, [pc, #64]	; (8004030 <main+0x158>)
 8003ff0:	f7fd fb66 	bl	80016c0 <ConsoleSendLine>
    	stateContollerInit(STATE_CONFIG);
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f000 fd1d 	bl	8004a34 <stateContollerInit>
 8003ffa:	e002      	b.n	8004002 <main+0x12a>
    }
    else
  	  stateContollerInit(STATE_BEGIN);
 8003ffc:	2008      	movs	r0, #8
 8003ffe:	f000 fd19 	bl	8004a34 <stateContollerInit>

    ledAllOff();
 8004002:	f7ff fbfb 	bl	80037fc <ledAllOff>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ConsoleProcess();
 8004006:	f7fd f96b 	bl	80012e0 <ConsoleProcess>
	  stateController();
 800400a:	f000 fd73 	bl	8004af4 <stateController>
		sprintf(msg,"Detected face %i is up",face);
		ConsoleSendLine(msg);
	}

	*/
	 HAL_Delay(200);
 800400e:	20c8      	movs	r0, #200	; 0xc8
 8004010:	f001 fb62 	bl	80056d8 <HAL_Delay>
	  ConsoleProcess();
 8004014:	e7f7      	b.n	8004006 <main+0x12e>
 8004016:	bf00      	nop
 8004018:	08010630 	.word	0x08010630
 800401c:	0801065c 	.word	0x0801065c
 8004020:	200009ac 	.word	0x200009ac
 8004024:	40020400 	.word	0x40020400
 8004028:	0801067c 	.word	0x0801067c
 800402c:	20000a00 	.word	0x20000a00
 8004030:	08010694 	.word	0x08010694

08004034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b094      	sub	sp, #80	; 0x50
 8004038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800403a:	f107 0320 	add.w	r3, r7, #32
 800403e:	2230      	movs	r2, #48	; 0x30
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f007 fb7c 	bl	800b740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	4b28      	ldr	r3, [pc, #160]	; (8004100 <SystemClock_Config+0xcc>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	4a27      	ldr	r2, [pc, #156]	; (8004100 <SystemClock_Config+0xcc>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6413      	str	r3, [r2, #64]	; 0x40
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <SystemClock_Config+0xcc>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004074:	2300      	movs	r3, #0
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <SystemClock_Config+0xd0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a21      	ldr	r2, [pc, #132]	; (8004104 <SystemClock_Config+0xd0>)
 800407e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <SystemClock_Config+0xd0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004090:	2305      	movs	r3, #5
 8004092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800409a:	2301      	movs	r3, #1
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800409e:	2302      	movs	r3, #2
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80040a8:	230c      	movs	r3, #12
 80040aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80040ac:	2360      	movs	r3, #96	; 0x60
 80040ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040b0:	2302      	movs	r3, #2
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040b4:	2304      	movs	r3, #4
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040b8:	f107 0320 	add.w	r3, r7, #32
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 fe3b 	bl	8007d38 <HAL_RCC_OscConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80040c8:	f000 f81e 	bl	8004108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040cc:	230f      	movs	r3, #15
 80040ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040d0:	2302      	movs	r3, #2
 80040d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80040e2:	f107 030c 	add.w	r3, r7, #12
 80040e6:	2103      	movs	r1, #3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 f89d 	bl	8008228 <HAL_RCC_ClockConfig>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80040f4:	f000 f808 	bl	8004108 <Error_Handler>
  }
}
 80040f8:	bf00      	nop
 80040fa:	3750      	adds	r7, #80	; 0x50
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	40007000 	.word	0x40007000

08004108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800410c:	b672      	cpsid	i
}
 800410e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004110:	e7fe      	b.n	8004110 <Error_Handler+0x8>
	...

08004114 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <MX_RTC_Init+0x44>)
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <MX_RTC_Init+0x48>)
 800411c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <MX_RTC_Init+0x44>)
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <MX_RTC_Init+0x44>)
 8004126:	227f      	movs	r2, #127	; 0x7f
 8004128:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <MX_RTC_Init+0x44>)
 800412c:	22ff      	movs	r2, #255	; 0xff
 800412e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <MX_RTC_Init+0x44>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <MX_RTC_Init+0x44>)
 8004138:	2200      	movs	r2, #0
 800413a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <MX_RTC_Init+0x44>)
 800413e:	2200      	movs	r2, #0
 8004140:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004142:	4805      	ldr	r0, [pc, #20]	; (8004158 <MX_RTC_Init+0x44>)
 8004144:	f004 fb40 	bl	80087c8 <HAL_RTC_Init>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800414e:	f7ff ffdb 	bl	8004108 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000a00 	.word	0x20000a00
 800415c:	40002800 	.word	0x40002800

08004160 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
 8004178:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <HAL_RTC_MspInit+0x50>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d111      	bne.n	80041a8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004184:	2302      	movs	r3, #2
 8004186:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800418c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	4618      	mov	r0, r3
 8004194:	f004 fa28 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800419e:	f7ff ffb3 	bl	8004108 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041a2:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <HAL_RTC_MspInit+0x54>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80041a8:	bf00      	nop
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40002800 	.word	0x40002800
 80041b4:	42470e3c 	.word	0x42470e3c

080041b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <MX_SPI1_Init+0x64>)
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <MX_SPI1_Init+0x68>)
 80041c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <MX_SPI1_Init+0x64>)
 80041c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <MX_SPI1_Init+0x64>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <MX_SPI1_Init+0x64>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <MX_SPI1_Init+0x64>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <MX_SPI1_Init+0x64>)
 80041de:	2200      	movs	r2, #0
 80041e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <MX_SPI1_Init+0x64>)
 80041e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <MX_SPI1_Init+0x64>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <MX_SPI1_Init+0x64>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <MX_SPI1_Init+0x64>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <MX_SPI1_Init+0x64>)
 80041fe:	2200      	movs	r2, #0
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <MX_SPI1_Init+0x64>)
 8004204:	220a      	movs	r2, #10
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004208:	4804      	ldr	r0, [pc, #16]	; (800421c <MX_SPI1_Init+0x64>)
 800420a:	f004 fddb 	bl	8008dc4 <HAL_SPI_Init>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004214:	f7ff ff78 	bl	8004108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000a20 	.word	0x20000a20
 8004220:	40013000 	.word	0x40013000

08004224 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_SPI_MspInit+0x84>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d12b      	bne.n	800429e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	4b18      	ldr	r3, [pc, #96]	; (80042ac <HAL_SPI_MspInit+0x88>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <HAL_SPI_MspInit+0x88>)
 8004250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004254:	6453      	str	r3, [r2, #68]	; 0x44
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <HAL_SPI_MspInit+0x88>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_SPI_MspInit+0x88>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_SPI_MspInit+0x88>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_SPI_MspInit+0x88>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_MEM_SCK_Pin|SPI_MEM_MISO_Pin|SPI_MEM_MOSI_Pin;
 800427e:	23e0      	movs	r3, #224	; 0xe0
 8004280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428a:	2303      	movs	r3, #3
 800428c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800428e:	2305      	movs	r3, #5
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4619      	mov	r1, r3
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <HAL_SPI_MspInit+0x8c>)
 800429a:	f002 fab7 	bl	800680c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800429e:	bf00      	nop
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40013000 	.word	0x40013000
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40020000 	.word	0x40020000

080042b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_MspInit+0x4c>)
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_MspInit+0x4c>)
 80042c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <HAL_MspInit+0x4c>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_MspInit+0x4c>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	4a08      	ldr	r2, [pc, #32]	; (8004300 <HAL_MspInit+0x4c>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e4:	6413      	str	r3, [r2, #64]	; 0x40
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_MspInit+0x4c>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800

08004304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004308:	e7fe      	b.n	8004308 <NMI_Handler+0x4>

0800430a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800430e:	e7fe      	b.n	800430e <HardFault_Handler+0x4>

08004310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004314:	e7fe      	b.n	8004314 <MemManage_Handler+0x4>

08004316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800431a:	e7fe      	b.n	800431a <BusFault_Handler+0x4>

0800431c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004320:	e7fe      	b.n	8004320 <UsageFault_Handler+0x4>

08004322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004350:	f001 f9a2 	bl	8005698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}

08004358 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 800435c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004360:	f002 fcd6 	bl	8006d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}

08004368 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800436c:	4803      	ldr	r0, [pc, #12]	; (800437c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800436e:	f005 f933 	bl	80095d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004372:	4803      	ldr	r0, [pc, #12]	; (8004380 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004374:	f005 f930 	bl	80095d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000a80 	.word	0x20000a80
 8004380:	20000ac8 	.word	0x20000ac8

08004384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <USART1_IRQHandler+0x10>)
 800438a:	f006 f95f 	bl	800a64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000b70 	.word	0x20000b70

08004398 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <DMA2_Stream1_IRQHandler+0x10>)
 800439e:	f001 fcd7 	bl	8005d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000b10 	.word	0x20000b10

080043ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
	return 1;
 80043b0:	2301      	movs	r3, #1
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_kill>:

int _kill(int pid, int sig)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043c6:	f007 f8b7 	bl	800b538 <__errno>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2216      	movs	r2, #22
 80043ce:	601a      	str	r2, [r3, #0]
	return -1;
 80043d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <_exit>:

void _exit (int status)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ffe7 	bl	80043bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80043ee:	e7fe      	b.n	80043ee <_exit+0x12>

080043f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	e00a      	b.n	8004418 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004402:	f3af 8000 	nop.w
 8004406:	4601      	mov	r1, r0
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	60ba      	str	r2, [r7, #8]
 800440e:	b2ca      	uxtb	r2, r1
 8004410:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	3301      	adds	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	dbf0      	blt.n	8004402 <_read+0x12>
	}

return len;
 8004420:	687b      	ldr	r3, [r7, #4]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e009      	b.n	8004450 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	60ba      	str	r2, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	3301      	adds	r3, #1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	dbf1      	blt.n	800443c <_write+0x12>
	}
	return len;
 8004458:	687b      	ldr	r3, [r7, #4]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <_close>:

int _close(int file)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
	return -1;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800448a:	605a      	str	r2, [r3, #4]
	return 0;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <_isatty>:

int _isatty(int file)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
	return 1;
 80044a2:	2301      	movs	r3, #1
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
	return 0;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <_sbrk+0x5c>)
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <_sbrk+0x60>)
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <_sbrk+0x64>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <_sbrk+0x64>)
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <_sbrk+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <_sbrk+0x64>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d207      	bcs.n	800450c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044fc:	f007 f81c 	bl	800b538 <__errno>
 8004500:	4603      	mov	r3, r0
 8004502:	220c      	movs	r2, #12
 8004504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	e009      	b.n	8004520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <_sbrk+0x64>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <_sbrk+0x64>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <_sbrk+0x64>)
 800451c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20020000 	.word	0x20020000
 800452c:	00000400 	.word	0x00000400
 8004530:	20000a7c 	.word	0x20000a7c
 8004534:	20001090 	.word	0x20001090

08004538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <SystemInit+0x20>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <SystemInit+0x20>)
 8004544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b096      	sub	sp, #88	; 0x58
 8004560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800457a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	611a      	str	r2, [r3, #16]
 800458a:	615a      	str	r2, [r3, #20]
 800458c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	2220      	movs	r2, #32
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f007 f8d3 	bl	800b740 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800459a:	4b3e      	ldr	r3, [pc, #248]	; (8004694 <MX_TIM1_Init+0x138>)
 800459c:	4a3e      	ldr	r2, [pc, #248]	; (8004698 <MX_TIM1_Init+0x13c>)
 800459e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80045a0:	4b3c      	ldr	r3, [pc, #240]	; (8004694 <MX_TIM1_Init+0x138>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a6:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <MX_TIM1_Init+0x138>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 125-1;
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <MX_TIM1_Init+0x138>)
 80045ae:	227c      	movs	r2, #124	; 0x7c
 80045b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b2:	4b38      	ldr	r3, [pc, #224]	; (8004694 <MX_TIM1_Init+0x138>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045b8:	4b36      	ldr	r3, [pc, #216]	; (8004694 <MX_TIM1_Init+0x138>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045be:	4b35      	ldr	r3, [pc, #212]	; (8004694 <MX_TIM1_Init+0x138>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045c4:	4833      	ldr	r0, [pc, #204]	; (8004694 <MX_TIM1_Init+0x138>)
 80045c6:	f004 fc86 	bl	8008ed6 <HAL_TIM_Base_Init>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80045d0:	f7ff fd9a 	bl	8004108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80045da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045de:	4619      	mov	r1, r3
 80045e0:	482c      	ldr	r0, [pc, #176]	; (8004694 <MX_TIM1_Init+0x138>)
 80045e2:	f005 f9c3 	bl	800996c <HAL_TIM_ConfigClockSource>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80045ec:	f7ff fd8c 	bl	8004108 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80045f0:	4828      	ldr	r0, [pc, #160]	; (8004694 <MX_TIM1_Init+0x138>)
 80045f2:	f004 fd21 	bl	8009038 <HAL_TIM_PWM_Init>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80045fc:	f7ff fd84 	bl	8004108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004600:	2300      	movs	r3, #0
 8004602:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800460c:	4619      	mov	r1, r3
 800460e:	4821      	ldr	r0, [pc, #132]	; (8004694 <MX_TIM1_Init+0x138>)
 8004610:	f005 fe38 	bl	800a284 <HAL_TIMEx_MasterConfigSynchronization>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800461a:	f7ff fd75 	bl	8004108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800461e:	2360      	movs	r3, #96	; 0x60
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004626:	2300      	movs	r3, #0
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800462a:	2300      	movs	r3, #0
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800462e:	2300      	movs	r3, #0
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004636:	2300      	movs	r3, #0
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800463a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800463e:	2200      	movs	r2, #0
 8004640:	4619      	mov	r1, r3
 8004642:	4814      	ldr	r0, [pc, #80]	; (8004694 <MX_TIM1_Init+0x138>)
 8004644:	f005 f8d0 	bl	80097e8 <HAL_TIM_PWM_ConfigChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800464e:	f7ff fd5b 	bl	8004108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800466a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800466c:	2300      	movs	r3, #0
 800466e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4807      	ldr	r0, [pc, #28]	; (8004694 <MX_TIM1_Init+0x138>)
 8004676:	f005 fe73 	bl	800a360 <HAL_TIMEx_ConfigBreakDeadTime>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004680:	f7ff fd42 	bl	8004108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004684:	4803      	ldr	r0, [pc, #12]	; (8004694 <MX_TIM1_Init+0x138>)
 8004686:	f000 f8bd 	bl	8004804 <HAL_TIM_MspPostInit>

}
 800468a:	bf00      	nop
 800468c:	3758      	adds	r7, #88	; 0x58
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000a80 	.word	0x20000a80
 8004698:	40010000 	.word	0x40010000

0800469c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046a2:	463b      	mov	r3, r7
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046b0:	4a16      	ldr	r2, [pc, #88]	; (800470c <MX_TIM9_Init+0x70>)
 80046b2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 80046b4:	4b14      	ldr	r3, [pc, #80]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80046ba:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 40000-1;
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046c4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80046c8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80046d6:	480c      	ldr	r0, [pc, #48]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046d8:	f004 fbfd 	bl	8008ed6 <HAL_TIM_Base_Init>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80046e2:	f7ff fd11 	bl	8004108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ea:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80046ec:	463b      	mov	r3, r7
 80046ee:	4619      	mov	r1, r3
 80046f0:	4805      	ldr	r0, [pc, #20]	; (8004708 <MX_TIM9_Init+0x6c>)
 80046f2:	f005 f93b 	bl	800996c <HAL_TIM_ConfigClockSource>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80046fc:	f7ff fd04 	bl	8004108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000ac8 	.word	0x20000ac8
 800470c:	40014000 	.word	0x40014000

08004710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a34      	ldr	r2, [pc, #208]	; (80047f0 <HAL_TIM_Base_MspInit+0xe0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d147      	bne.n	80047b2 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <HAL_TIM_Base_MspInit+0xe4>)
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	4a32      	ldr	r2, [pc, #200]	; (80047f4 <HAL_TIM_Base_MspInit+0xe4>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6453      	str	r3, [r2, #68]	; 0x44
 8004732:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <HAL_TIM_Base_MspInit+0xe4>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800473e:	4b2e      	ldr	r3, [pc, #184]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004740:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <HAL_TIM_Base_MspInit+0xec>)
 8004742:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004746:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800474a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 800474e:	2240      	movs	r2, #64	; 0x40
 8004750:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004752:	4b29      	ldr	r3, [pc, #164]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004754:	2200      	movs	r2, #0
 8004756:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 800475a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800475e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004760:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004766:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 800476a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800476e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8004770:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004776:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 800477a:	2200      	movs	r2, #0
 800477c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004780:	2200      	movs	r2, #0
 8004782:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004784:	481c      	ldr	r0, [pc, #112]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004786:	f001 f94b 	bl	8005a20 <HAL_DMA_Init>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8004790:	f7ff fcba 	bl	8004108 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 8004798:	625a      	str	r2, [r3, #36]	; 0x24
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <HAL_TIM_Base_MspInit+0xe8>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	2018      	movs	r0, #24
 80047a6:	f001 f8b6 	bl	8005916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80047aa:	2018      	movs	r0, #24
 80047ac:	f001 f8cf 	bl	800594e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80047b0:	e01a      	b.n	80047e8 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM9)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <HAL_TIM_Base_MspInit+0xf0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d115      	bne.n	80047e8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80047bc:	2300      	movs	r3, #0
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_TIM_Base_MspInit+0xe4>)
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <HAL_TIM_Base_MspInit+0xe4>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	6453      	str	r3, [r2, #68]	; 0x44
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_TIM_Base_MspInit+0xe4>)
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80047d8:	2200      	movs	r2, #0
 80047da:	2100      	movs	r1, #0
 80047dc:	2018      	movs	r0, #24
 80047de:	f001 f89a 	bl	8005916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80047e2:	2018      	movs	r0, #24
 80047e4:	f001 f8b3 	bl	800594e <HAL_NVIC_EnableIRQ>
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40023800 	.word	0x40023800
 80047f8:	20000b10 	.word	0x20000b10
 80047fc:	40026428 	.word	0x40026428
 8004800:	40014000 	.word	0x40014000

08004804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480c:	f107 030c 	add.w	r3, r7, #12
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a12      	ldr	r2, [pc, #72]	; (800486c <HAL_TIM_MspPostInit+0x68>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d11e      	bne.n	8004864 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_TIM_MspPostInit+0x6c>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_TIM_MspPostInit+0x6c>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6313      	str	r3, [r2, #48]	; 0x30
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <HAL_TIM_MspPostInit+0x6c>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = NEO_OUT_Pin;
 8004842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004846:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004848:	2302      	movs	r3, #2
 800484a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004854:	2301      	movs	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NEO_OUT_GPIO_Port, &GPIO_InitStruct);
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	4619      	mov	r1, r3
 800485e:	4805      	ldr	r0, [pc, #20]	; (8004874 <HAL_TIM_MspPostInit+0x70>)
 8004860:	f001 ffd4 	bl	800680c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40010000 	.word	0x40010000
 8004870:	40023800 	.word	0x40023800
 8004874:	40020000 	.word	0x40020000

08004878 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 800487e:	4a12      	ldr	r2, [pc, #72]	; (80048c8 <MX_USART1_UART_Init+0x50>)
 8004880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 8004884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800488a:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 800489e:	220c      	movs	r2, #12
 80048a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048ae:	4805      	ldr	r0, [pc, #20]	; (80048c4 <MX_USART1_UART_Init+0x4c>)
 80048b0:	f005 fdbc 	bl	800a42c <HAL_UART_Init>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80048ba:	f7ff fc25 	bl	8004108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000b70 	.word	0x20000b70
 80048c8:	40011000 	.word	0x40011000

080048cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08a      	sub	sp, #40	; 0x28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <HAL_UART_MspInit+0x94>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d134      	bne.n	8004958 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <HAL_UART_MspInit+0x98>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <HAL_UART_MspInit+0x98>)
 80048f8:	f043 0310 	orr.w	r3, r3, #16
 80048fc:	6453      	str	r3, [r2, #68]	; 0x44
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_UART_MspInit+0x98>)
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_UART_MspInit+0x98>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4a14      	ldr	r2, [pc, #80]	; (8004964 <HAL_UART_MspInit+0x98>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6313      	str	r3, [r2, #48]	; 0x30
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_UART_MspInit+0x98>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004926:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800492a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492c:	2302      	movs	r3, #2
 800492e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004934:	2303      	movs	r3, #3
 8004936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004938:	2307      	movs	r3, #7
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4619      	mov	r1, r3
 8004942:	4809      	ldr	r0, [pc, #36]	; (8004968 <HAL_UART_MspInit+0x9c>)
 8004944:	f001 ff62 	bl	800680c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004948:	2200      	movs	r2, #0
 800494a:	2100      	movs	r1, #0
 800494c:	2025      	movs	r0, #37	; 0x25
 800494e:	f000 ffe2 	bl	8005916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004952:	2025      	movs	r0, #37	; 0x25
 8004954:	f000 fffb 	bl	800594e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004958:	bf00      	nop
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40011000 	.word	0x40011000
 8004964:	40023800 	.word	0x40023800
 8004968:	40020000 	.word	0x40020000

0800496c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 800496c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004970:	480d      	ldr	r0, [pc, #52]	; (80049a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004972:	490e      	ldr	r1, [pc, #56]	; (80049ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004974:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004978:	e002      	b.n	8004980 <LoopCopyDataInit>

0800497a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800497a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800497c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800497e:	3304      	adds	r3, #4

08004980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004984:	d3f9      	bcc.n	800497a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004986:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004988:	4c0b      	ldr	r4, [pc, #44]	; (80049b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800498a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800498c:	e001      	b.n	8004992 <LoopFillZerobss>

0800498e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800498e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004990:	3204      	adds	r2, #4

08004992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004994:	d3fb      	bcc.n	800498e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004996:	f7ff fdcf 	bl	8004538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800499a:	f006 fe9d 	bl	800b6d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800499e:	f7ff fa9b 	bl	8003ed8 <main>
  bx  lr    
 80049a2:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 80049a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049ac:	200004f4 	.word	0x200004f4
  ldr r2, =_sidata
 80049b0:	080117f0 	.word	0x080117f0
  ldr r2, =_sbss
 80049b4:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 80049b8:	20001090 	.word	0x20001090

080049bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049bc:	e7fe      	b.n	80049bc <ADC_IRQHandler>
	...

080049c0 <findState>:
static void displayState();



static stateControl_t *findState(const eState_t state)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
	eState_t stateLoop = 0xff;
 80049ca:	23ff      	movs	r3, #255	; 0xff
 80049cc:	73bb      	strb	r3, [r7, #14]
	uint8_t cnt = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
	while (STATE_NULL != stateLoop)
 80049d2:	e00f      	b.n	80049f4 <findState+0x34>
	{
		if (state == stateTable[cnt].state)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <findState+0x50>)
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	4413      	add	r3, r2
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	79fa      	ldrb	r2, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d104      	bne.n	80049ee <findState+0x2e>
			return &stateTable[cnt];
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <findState+0x50>)
 80049ea:	4413      	add	r3, r2
 80049ec:	e009      	b.n	8004a02 <findState+0x42>
		cnt++;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	3301      	adds	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
	while (STATE_NULL != stateLoop)
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ec      	bne.n	80049d4 <findState+0x14>
	}
	return &stateTable[cnt];
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <findState+0x50>)
 8004a00:	4413      	add	r3, r2
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000228 	.word	0x20000228

08004a14 <setStateControllerMode>:

void setStateControllerMode(eStateControllerMode_t mode)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
	stateControllerMode = mode;
 8004a1e:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <setStateControllerMode+0x1c>)
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	7013      	strb	r3, [r2, #0]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20000bc1 	.word	0x20000bc1

08004a34 <stateContollerInit>:


void stateContollerInit(eState_t state)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	71fb      	strb	r3, [r7, #7]
	if (state == STATE_CONFIG)
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d106      	bne.n	8004a52 <stateContollerInit+0x1e>
	{
		stateControllerMode = STATE_CONT_MODE_CONFIG;
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <stateContollerInit+0x50>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
		lastState = STATE_NULL;
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <stateContollerInit+0x54>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e002      	b.n	8004a58 <stateContollerInit+0x24>
	}else
	{
		stateControllerMode  = STATE_CONT_MODE_RUN;
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <stateContollerInit+0x50>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
	}
	currentDodeca = dodecaGet(DODECA_STOP_FACE);
 8004a58:	200b      	movs	r0, #11
 8004a5a:	f7fd ff65 	bl	8002928 <dodecaGet>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <stateContollerInit+0x58>)
 8004a62:	6013      	str	r3, [r2, #0]
	currentDodeca->state = DODECA_STATE_STOPPED;
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <stateContollerInit+0x58>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
	currentState = findState(state);
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ffa6 	bl	80049c0 <findState>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4a06      	ldr	r2, [pc, #24]	; (8004a90 <stateContollerInit+0x5c>)
 8004a78:	6013      	str	r3, [r2, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000bc1 	.word	0x20000bc1
 8004a88:	20000bb5 	.word	0x20000bb5
 8004a8c:	20000bc4 	.word	0x20000bc4
 8004a90:	20000bb8 	.word	0x20000bb8

08004a94 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		HAL_PWR_DisableSleepOnExit ();
 8004aa4:	f003 f938 	bl	8007d18 <HAL_PWR_DisableSleepOnExit>
	}
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000ac8 	.word	0x20000ac8

08004ab4 <displayState>:




static void displayState()
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
	if (oldState == currentState->state) return;
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <displayState+0x34>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <displayState+0x38>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d00e      	beq.n	8004ae4 <displayState+0x30>
	oldState = currentState->state;
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <displayState+0x34>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <displayState+0x38>)
 8004ace:	701a      	strb	r2, [r3, #0]
	ConsoleSendString("State :-> ");
 8004ad0:	4807      	ldr	r0, [pc, #28]	; (8004af0 <displayState+0x3c>)
 8004ad2:	f7fc fde8 	bl	80016a6 <ConsoleSendString>
	ConsoleSendLine(currentState->debugName);
 8004ad6:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <displayState+0x34>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fc fdef 	bl	80016c0 <ConsoleSendLine>
 8004ae2:	e000      	b.n	8004ae6 <displayState+0x32>
	if (oldState == currentState->state) return;
 8004ae4:	bf00      	nop
}
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000bb8 	.word	0x20000bb8
 8004aec:	20000bc9 	.word	0x20000bc9
 8004af0:	08010714 	.word	0x08010714

08004af4 <stateController>:


void stateController()
{
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	af00      	add	r7, sp, #0



	switch (currentState->state)
 8004af8:	4b94      	ldr	r3, [pc, #592]	; (8004d4c <stateController+0x258>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	f200 81ea 	bhi.w	8004ed8 <stateController+0x3e4>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <stateController+0x18>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004ecd 	.word	0x08004ecd
 8004b10:	08004c19 	.word	0x08004c19
 8004b14:	08004c4f 	.word	0x08004c4f
 8004b18:	08004e95 	.word	0x08004e95
 8004b1c:	08004d1d 	.word	0x08004d1d
 8004b20:	08004c89 	.word	0x08004c89
 8004b24:	08004e89 	.word	0x08004e89
 8004b28:	08004e27 	.word	0x08004e27
 8004b2c:	08004b31 	.word	0x08004b31
	{
	case STATE_BEGIN:
			lastState = STATE_BEGIN;
 8004b30:	4b87      	ldr	r3, [pc, #540]	; (8004d50 <stateController+0x25c>)
 8004b32:	2208      	movs	r2, #8
 8004b34:	701a      	strb	r2, [r3, #0]
			displayState();
 8004b36:	f7ff ffbd 	bl	8004ab4 <displayState>
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 8004b3a:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <stateController+0x260>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d109      	bne.n	8004b56 <stateController+0x62>
			{
				currentState = findState(STATE_CONFIG);
 8004b42:	2001      	movs	r0, #1
 8004b44:	f7ff ff3c 	bl	80049c0 <findState>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4a80      	ldr	r2, [pc, #512]	; (8004d4c <stateController+0x258>)
 8004b4c:	6013      	str	r3, [r2, #0]
				breakState(STATE_BEGIN);
 8004b4e:	4b80      	ldr	r3, [pc, #512]	; (8004d50 <stateController+0x25c>)
 8004b50:	2208      	movs	r2, #8
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e1c0      	b.n	8004ed8 <stateController+0x3e4>
			}
			currentFaceUp = detectFaceUp();
 8004b56:	f7fe ff3d 	bl	80039d4 <detectFaceUp>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4b7e      	ldr	r3, [pc, #504]	; (8004d58 <stateController+0x264>)
 8004b60:	701a      	strb	r2, [r3, #0]
			if (0xff == currentFaceUp )
 8004b62:	4b7d      	ldr	r3, [pc, #500]	; (8004d58 <stateController+0x264>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2bff      	cmp	r3, #255	; 0xff
 8004b68:	d113      	bne.n	8004b92 <stateController+0x9e>
			{
				// TODO Set Error reason
				currentState = findState(currentState->error);
 8004b6a:	4b78      	ldr	r3, [pc, #480]	; (8004d4c <stateController+0x258>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	7b5b      	ldrb	r3, [r3, #13]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff ff25 	bl	80049c0 <findState>
 8004b76:	4603      	mov	r3, r0
 8004b78:	4a74      	ldr	r2, [pc, #464]	; (8004d4c <stateController+0x258>)
 8004b7a:	6013      	str	r3, [r2, #0]
				errorFlags |= STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL;
 8004b7c:	4b77      	ldr	r3, [pc, #476]	; (8004d5c <stateController+0x268>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	4b75      	ldr	r3, [pc, #468]	; (8004d5c <stateController+0x268>)
 8004b88:	701a      	strb	r2, [r3, #0]
				breakState(STATE_BEGIN);
 8004b8a:	4b71      	ldr	r3, [pc, #452]	; (8004d50 <stateController+0x25c>)
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e1a2      	b.n	8004ed8 <stateController+0x3e4>
			}
			currentDodeca = dodecaGet(currentFaceUp);
 8004b92:	4b71      	ldr	r3, [pc, #452]	; (8004d58 <stateController+0x264>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fd fec6 	bl	8002928 <dodecaGet>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4a70      	ldr	r2, [pc, #448]	; (8004d60 <stateController+0x26c>)
 8004ba0:	6013      	str	r3, [r2, #0]
			if (DODECA_DISABLED == currentDodeca->enabled)
 8004ba2:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <stateController+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d112      	bne.n	8004bd2 <stateController+0xde>
			{
				ledSetFaceColour(currentDodeca->id, currentDodeca->colour,colourFindByid(COLOUR_RED_ID)->code,LED_FACE_MODE_HALF);
 8004bac:	4b6c      	ldr	r3, [pc, #432]	; (8004d60 <stateController+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	781c      	ldrb	r4, [r3, #0]
 8004bb2:	4b6b      	ldr	r3, [pc, #428]	; (8004d60 <stateController+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699d      	ldr	r5, [r3, #24]
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f7fd fd53 	bl	8002664 <colourFindByid>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7fe fe38 	bl	800383c <ledSetFaceColour>
				ledRender();
 8004bcc:	f7fe fe2d 	bl	800382a <ledRender>
 8004bd0:	e015      	b.n	8004bfe <stateController+0x10a>
			}
			else
			{
				currentDodeca->state = DODECA_STATE_STOPPED;
 8004bd2:	4b63      	ldr	r3, [pc, #396]	; (8004d60 <stateController+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
				ledSetFaceColour(currentDodeca->id, currentDodeca->colour,colourFindByid(COLOUR_WHITE_ID)->code,LED_FACE_MODE_HALF);
 8004bda:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <stateController+0x26c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	781c      	ldrb	r4, [r3, #0]
 8004be0:	4b5f      	ldr	r3, [pc, #380]	; (8004d60 <stateController+0x26c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699d      	ldr	r5, [r3, #24]
 8004be6:	2009      	movs	r0, #9
 8004be8:	f7fd fd3c 	bl	8002664 <colourFindByid>
 8004bec:	4603      	mov	r3, r0
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7fe fe21 	bl	800383c <ledSetFaceColour>

				ledRender();
 8004bfa:	f7fe fe16 	bl	800382a <ledRender>
			}
			currentState = findState(currentState->done);
 8004bfe:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <stateController+0x258>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	7b1b      	ldrb	r3, [r3, #12]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fedb 	bl	80049c0 <findState>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4a4f      	ldr	r2, [pc, #316]	; (8004d4c <stateController+0x258>)
 8004c0e:	6013      	str	r3, [r2, #0]
			breakState(STATE_BEGIN);;
 8004c10:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <stateController+0x25c>)
 8004c12:	2208      	movs	r2, #8
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e15f      	b.n	8004ed8 <stateController+0x3e4>

	case STATE_CONFIG:
		displayState();
 8004c18:	f7ff ff4c 	bl	8004ab4 <displayState>
		if (STATE_CONT_MODE_RUN ==  stateControllerMode)
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <stateController+0x260>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <stateController+0x152>
		{
			if (lastState == STATE_NULL)
 8004c24:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <stateController+0x25c>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <stateController+0x146>
				currentState = findState(STATE_BEGIN);
 8004c2c:	2008      	movs	r0, #8
 8004c2e:	f7ff fec7 	bl	80049c0 <findState>
 8004c32:	4603      	mov	r3, r0
 8004c34:	4a45      	ldr	r2, [pc, #276]	; (8004d4c <stateController+0x258>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e005      	b.n	8004c46 <stateController+0x152>
			else
				currentState = findState(STATE_IDLE);
 8004c3a:	2002      	movs	r0, #2
 8004c3c:	f7ff fec0 	bl	80049c0 <findState>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4a42      	ldr	r2, [pc, #264]	; (8004d4c <stateController+0x258>)
 8004c44:	6013      	str	r3, [r2, #0]
		}
		breakState(STATE_CONFIG);
 8004c46:	4b42      	ldr	r3, [pc, #264]	; (8004d50 <stateController+0x25c>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e144      	b.n	8004ed8 <stateController+0x3e4>
	case STATE_IDLE:
		lastState = STATE_IDLE;
 8004c4e:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <stateController+0x25c>)
 8004c50:	2202      	movs	r2, #2
 8004c52:	701a      	strb	r2, [r3, #0]
			displayState();
 8004c54:	f7ff ff2e 	bl	8004ab4 <displayState>
			if (STATE_CONT_MODE_CONFIG ==  stateControllerMode)
 8004c58:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <stateController+0x260>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d106      	bne.n	8004c6e <stateController+0x17a>
				currentState = findState(STATE_CONFIG);
 8004c60:	2001      	movs	r0, #1
 8004c62:	f7ff fead 	bl	80049c0 <findState>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4a38      	ldr	r2, [pc, #224]	; (8004d4c <stateController+0x258>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	e008      	b.n	8004c80 <stateController+0x18c>
			else
				currentState = findState(currentState->done);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <stateController+0x258>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	7b1b      	ldrb	r3, [r3, #12]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff fea3 	bl	80049c0 <findState>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <stateController+0x258>)
 8004c7e:	6013      	str	r3, [r2, #0]
		breakState(STATE_IDLE);
 8004c80:	4b33      	ldr	r3, [pc, #204]	; (8004d50 <stateController+0x25c>)
 8004c82:	2202      	movs	r2, #2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e127      	b.n	8004ed8 <stateController+0x3e4>
	case STATE_CHECK_OREN:

			displayState();
 8004c88:	f7ff ff14 	bl	8004ab4 <displayState>
			detectedFace = detectFaceUp();
 8004c8c:	f7fe fea2 	bl	80039d4 <detectFaceUp>
 8004c90:	4603      	mov	r3, r0
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	4b33      	ldr	r3, [pc, #204]	; (8004d64 <stateController+0x270>)
 8004c96:	701a      	strb	r2, [r3, #0]
			if (detectedFace == 0xff)
 8004c98:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <stateController+0x270>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2bff      	cmp	r3, #255	; 0xff
 8004c9e:	d116      	bne.n	8004cce <stateController+0x1da>
			{
				ConsoleSendLine("ERROR - Face not detected");
 8004ca0:	4831      	ldr	r0, [pc, #196]	; (8004d68 <stateController+0x274>)
 8004ca2:	f7fc fd0d 	bl	80016c0 <ConsoleSendLine>
				currentState =  findState(currentState->error);
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <stateController+0x258>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	7b5b      	ldrb	r3, [r3, #13]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fe87 	bl	80049c0 <findState>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <stateController+0x258>)
 8004cb6:	6013      	str	r3, [r2, #0]
				errorFlags |= STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL;
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <stateController+0x268>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <stateController+0x268>)
 8004cc4:	701a      	strb	r2, [r3, #0]

				breakState(STATE_CHECK_OREN);
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <stateController+0x25c>)
 8004cc8:	2205      	movs	r2, #5
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	e104      	b.n	8004ed8 <stateController+0x3e4>
			}

			newDodecaDetected = dodecaGet(detectedFace);
 8004cce:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <stateController+0x270>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fe28 	bl	8002928 <dodecaGet>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4a24      	ldr	r2, [pc, #144]	; (8004d6c <stateController+0x278>)
 8004cdc:	6013      	str	r3, [r2, #0]


			if (newDodecaDetected->id == currentDodeca->id) // If its the same face then exit
 8004cde:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <stateController+0x278>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <stateController+0x26c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d109      	bne.n	8004d02 <stateController+0x20e>
			{
				currentState =  findState(currentState->done);
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <stateController+0x258>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	7b1b      	ldrb	r3, [r3, #12]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fe63 	bl	80049c0 <findState>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <stateController+0x258>)
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e008      	b.n	8004d14 <stateController+0x220>

			}
			else
			{
				currentState = findState(currentState->newFaceDetect);
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <stateController+0x258>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	7a1b      	ldrb	r3, [r3, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fe59 	bl	80049c0 <findState>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4a0e      	ldr	r2, [pc, #56]	; (8004d4c <stateController+0x258>)
 8004d12:	6013      	str	r3, [r2, #0]
			}
			breakState(STATE_CHECK_OREN);
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <stateController+0x25c>)
 8004d16:	2205      	movs	r2, #5
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e0dd      	b.n	8004ed8 <stateController+0x3e4>

	case STATE_CHANGE_TASK: // Chnage Task only happens if there is a Valid new face
		displayState();
 8004d1c:	f7ff feca 	bl	8004ab4 <displayState>
		currentState = findState(currentState->done);
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <stateController+0x258>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	7b1b      	ldrb	r3, [r3, #12]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fe4a 	bl	80049c0 <findState>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <stateController+0x258>)
 8004d30:	6013      	str	r3, [r2, #0]

		// Deal with the Current Dodeca

		if (currentDodeca->state == DODECA_STATE_ACTIVE)
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <stateController+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <stateController+0x27c>
		{
			dodecaStop(currentDodeca->id);
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <stateController+0x26c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fe2c 	bl	80029a0 <dodecaStop>
 8004d48:	e026      	b.n	8004d98 <stateController+0x2a4>
 8004d4a:	bf00      	nop
 8004d4c:	20000bb8 	.word	0x20000bb8
 8004d50:	20000bb5 	.word	0x20000bb5
 8004d54:	20000bc1 	.word	0x20000bc1
 8004d58:	20000bc8 	.word	0x20000bc8
 8004d5c:	20000bb4 	.word	0x20000bb4
 8004d60:	20000bc4 	.word	0x20000bc4
 8004d64:	20000bc0 	.word	0x20000bc0
 8004d68:	08010720 	.word	0x08010720
 8004d6c:	20000bbc 	.word	0x20000bbc
		}
		else if (currentDodeca->state == DODECA_STATE_STOPPED)
 8004d70:	4b5a      	ldr	r3, [pc, #360]	; (8004edc <stateController+0x3e8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d10e      	bne.n	8004d98 <stateController+0x2a4>
		{
			ledSetFaceColour(currentDodeca->id, colourFindByid(COLOUR_BLACK_ID)->code,0x0, LED_FACE_MODE_NORMAL);
 8004d7a:	4b58      	ldr	r3, [pc, #352]	; (8004edc <stateController+0x3e8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	781c      	ldrb	r4, [r3, #0]
 8004d80:	200c      	movs	r0, #12
 8004d82:	f7fd fc6f 	bl	8002664 <colourFindByid>
 8004d86:	4603      	mov	r3, r0
 8004d88:	6919      	ldr	r1, [r3, #16]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7fe fd54 	bl	800383c <ledSetFaceColour>
			ledRender();
 8004d94:	f7fe fd49 	bl	800382a <ledRender>
		}

		// Change the current Dodeca for the new Dodeca
		currentDodeca = newDodecaDetected;
 8004d98:	4b51      	ldr	r3, [pc, #324]	; (8004ee0 <stateController+0x3ec>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a4f      	ldr	r2, [pc, #316]	; (8004edc <stateController+0x3e8>)
 8004d9e:	6013      	str	r3, [r2, #0]

		// Now deal with the new DoDeca
		if (DODECA_DISABLED == currentDodeca->enabled)
 8004da0:	4b4e      	ldr	r3, [pc, #312]	; (8004edc <stateController+0x3e8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d116      	bne.n	8004dd8 <stateController+0x2e4>
		{
			currentDodeca->state = DODECA_STATE_STOPPED;
 8004daa:	4b4c      	ldr	r3, [pc, #304]	; (8004edc <stateController+0x3e8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2202      	movs	r2, #2
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28
			ledSetFaceColour(currentDodeca->id, currentDodeca->colour, colourFindByid(COLOUR_ERROR_ID)->code, LED_FACE_MODE_HALF);
 8004db2:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <stateController+0x3e8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	781c      	ldrb	r4, [r3, #0]
 8004db8:	4b48      	ldr	r3, [pc, #288]	; (8004edc <stateController+0x3e8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699d      	ldr	r5, [r3, #24]
 8004dbe:	200d      	movs	r0, #13
 8004dc0:	f7fd fc50 	bl	8002664 <colourFindByid>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	2302      	movs	r3, #2
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f7fe fd35 	bl	800383c <ledSetFaceColour>
			ledRender();
 8004dd2:	f7fe fd2a 	bl	800382a <ledRender>
 8004dd6:	e022      	b.n	8004e1e <stateController+0x32a>
		}
		else if (currentDodeca->id == DODECA_STOP_FACE)
 8004dd8:	4b40      	ldr	r3, [pc, #256]	; (8004edc <stateController+0x3e8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b0b      	cmp	r3, #11
 8004de0:	d112      	bne.n	8004e08 <stateController+0x314>
		{
			ledSetFaceColour(currentDodeca->id, currentDodeca->colour, colourFindByid(COLOUR_BLACK_ID)->code, LED_FACE_MODE_HALF);
 8004de2:	4b3e      	ldr	r3, [pc, #248]	; (8004edc <stateController+0x3e8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	781c      	ldrb	r4, [r3, #0]
 8004de8:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <stateController+0x3e8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699d      	ldr	r5, [r3, #24]
 8004dee:	200c      	movs	r0, #12
 8004df0:	f7fd fc38 	bl	8002664 <colourFindByid>
 8004df4:	4603      	mov	r3, r0
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	2302      	movs	r3, #2
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7fe fd1d 	bl	800383c <ledSetFaceColour>
			ledRender();
 8004e02:	f7fe fd12 	bl	800382a <ledRender>
 8004e06:	e00a      	b.n	8004e1e <stateController+0x32a>
		}
		else if (currentDodeca->state == DODECA_STATE_STOPPED)
 8004e08:	4b34      	ldr	r3, [pc, #208]	; (8004edc <stateController+0x3e8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d105      	bne.n	8004e1e <stateController+0x32a>
		{
			dodecaStart(currentDodeca->id);
 8004e12:	4b32      	ldr	r3, [pc, #200]	; (8004edc <stateController+0x3e8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fd fd9f 	bl	800295c <dodecaStart>

		}


		breakState(STATE_CHANGE_TASK);
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <stateController+0x3f0>)
 8004e20:	2204      	movs	r2, #4
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e058      	b.n	8004ed8 <stateController+0x3e4>
	case STATE_ERROR:
			displayState();
 8004e26:	f7ff fe45 	bl	8004ab4 <displayState>
			currentState = findState(currentState->done);
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <stateController+0x3f4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	7b1b      	ldrb	r3, [r3, #12]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fdc5 	bl	80049c0 <findState>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4a2b      	ldr	r2, [pc, #172]	; (8004ee8 <stateController+0x3f4>)
 8004e3a:	6013      	str	r3, [r2, #0]
			if (STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL && errorFlags )
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <stateController+0x3f8>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d011      	beq.n	8004e68 <stateController+0x374>
			{
				errorFlags &= ~ STATE_CONTROLLER_ERROR_FACE_DETECT_FAIL; // Clear the error flag
 8004e44:	4b29      	ldr	r3, [pc, #164]	; (8004eec <stateController+0x3f8>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4b27      	ldr	r3, [pc, #156]	; (8004eec <stateController+0x3f8>)
 8004e50:	701a      	strb	r2, [r3, #0]
				if (STATE_BEGIN == lastState)
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <stateController+0x3f0>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d112      	bne.n	8004e80 <stateController+0x38c>
				{
					currentState = findState(STATE_BEGIN);
 8004e5a:	2008      	movs	r0, #8
 8004e5c:	f7ff fdb0 	bl	80049c0 <findState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <stateController+0x3f4>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e00b      	b.n	8004e80 <stateController+0x38c>
				}
			}
			else
			{
				ledSetFaceColour(currentDodeca->id,currentDodeca->colour,0x0,LED_FACE_MODE_ERROR);
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <stateController+0x3e8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	7818      	ldrb	r0, [r3, #0]
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <stateController+0x3e8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6999      	ldr	r1, [r3, #24]
 8004e74:	2301      	movs	r3, #1
 8004e76:	2200      	movs	r2, #0
 8004e78:	f7fe fce0 	bl	800383c <ledSetFaceColour>
				ledRender();
 8004e7c:	f7fe fcd5 	bl	800382a <ledRender>
			}
			breakState(STATE_ERROR);
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <stateController+0x3f0>)
 8004e82:	2207      	movs	r2, #7
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e027      	b.n	8004ed8 <stateController+0x3e4>
	case STATE_BATTERY_TEST:

			displayState();
 8004e88:	f7ff fe14 	bl	8004ab4 <displayState>
			breakState(STATE_ERROR);
 8004e8c:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <stateController+0x3f0>)
 8004e8e:	2207      	movs	r2, #7
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	e021      	b.n	8004ed8 <stateController+0x3e4>

	case STATE_SLEEP:
			displayState();
 8004e94:	f7ff fe0e 	bl	8004ab4 <displayState>
			currentState = findState(currentState->done);
 8004e98:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <stateController+0x3f4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	7b1b      	ldrb	r3, [r3, #12]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fd8e 	bl	80049c0 <findState>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <stateController+0x3f4>)
 8004ea8:	6013      	str	r3, [r2, #0]
			// TODO : Goto Sleep
			HAL_SuspendTick();
 8004eaa:	f000 fc39 	bl	8005720 <HAL_SuspendTick>
			HAL_TIM_Base_Start_IT(&htim9);
 8004eae:	4810      	ldr	r0, [pc, #64]	; (8004ef0 <stateController+0x3fc>)
 8004eb0:	f004 f860 	bl	8008f74 <HAL_TIM_Base_Start_IT>
			HAL_PWR_EnableSleepOnExit();
 8004eb4:	f002 ff20 	bl	8007cf8 <HAL_PWR_EnableSleepOnExit>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004eb8:	2101      	movs	r1, #1
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f002 ff00 	bl	8007cc0 <HAL_PWR_EnterSLEEPMode>
			 HAL_ResumeTick();
 8004ec0:	f000 fc3e 	bl	8005740 <HAL_ResumeTick>
			breakState(STATE_SLEEP);
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <stateController+0x3f0>)
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e005      	b.n	8004ed8 <stateController+0x3e4>
	case STATE_NULL:

		displayState();
 8004ecc:	f7ff fdf2 	bl	8004ab4 <displayState>
		breakState(STATE_NULL);
 8004ed0:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <stateController+0x3f0>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	bf00      	nop
	}


}
 8004ed8:	bf00      	nop
 8004eda:	bdb0      	pop	{r4, r5, r7, pc}
 8004edc:	20000bc4 	.word	0x20000bc4
 8004ee0:	20000bbc 	.word	0x20000bbc
 8004ee4:	20000bb5 	.word	0x20000bb5
 8004ee8:	20000bb8 	.word	0x20000bb8
 8004eec:	20000bb4 	.word	0x20000bb4
 8004ef0:	20000ac8 	.word	0x20000ac8

08004ef4 <sysConfigInit>:
static uint16_t SYS_CONFIG_SIZE_DODEC;



void sysConfigInit()
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
	SYS_CONFIG_SIZE = sizeof(systemConfig.configItems)/4;
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <sysConfigInit+0x24>)
 8004efa:	2290      	movs	r2, #144	; 0x90
 8004efc:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_ALL_SIZE = sizeof(systemConfig)/4;
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <sysConfigInit+0x28>)
 8004f00:	2292      	movs	r2, #146	; 0x92
 8004f02:	801a      	strh	r2, [r3, #0]
	SYS_CONFIG_SIZE_DODEC = sizeof(systemConfig.configItems.dodecaConfig);
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <sysConfigInit+0x2c>)
 8004f06:	f44f 7210 	mov.w	r2, #576	; 0x240
 8004f0a:	801a      	strh	r2, [r3, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000e18 	.word	0x20000e18
 8004f1c:	20000e1a 	.word	0x20000e1a
 8004f20:	20000e1c 	.word	0x20000e1c

08004f24 <systemConfigGet>:

systemConfig_t *systemConfigGet()
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
	return &systemConfig;
 8004f28:	4b02      	ldr	r3, [pc, #8]	; (8004f34 <systemConfigGet+0x10>)
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000bd0 	.word	0x20000bd0

08004f38 <sysConfigValidateConfig>:

static eSYSConfig_t sysConfigValidateConfig()
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8004f3e:	f000 f813 	bl	8004f68 <sysConfigCalcChecksum>
 8004f42:	6078      	str	r0, [r7, #4]
	uint32_t crcRO = systemConfigRO->checksum;
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <sysConfigValidateConfig+0x2c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8004f4c:	603b      	str	r3, [r7, #0]
	if (crc == crcRO)
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d101      	bne.n	8004f5a <sysConfigValidateConfig+0x22>
		return SYS_CONFIG_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <sysConfigValidateConfig+0x24>
	else
		return SYS_CONFIG_BAD_CHECKSUM;
 8004f5a:	2301      	movs	r3, #1
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	200002b8 	.word	0x200002b8

08004f68 <sysConfigCalcChecksum>:

uint32_t sysConfigCalcChecksum()
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
	uint32_t crc;
	crc =  HAL_CRC_Calculate(&hcrc,  (uint32_t*)&systemConfig.configItems, SYS_CONFIG_SIZE);
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <sysConfigCalcChecksum+0x20>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	4905      	ldr	r1, [pc, #20]	; (8004f8c <sysConfigCalcChecksum+0x24>)
 8004f76:	4806      	ldr	r0, [pc, #24]	; (8004f90 <sysConfigCalcChecksum+0x28>)
 8004f78:	f000 fd1f 	bl	80059ba <HAL_CRC_Calculate>
 8004f7c:	6078      	str	r0, [r7, #4]
	return crc;
 8004f7e:	687b      	ldr	r3, [r7, #4]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000e18 	.word	0x20000e18
 8004f8c:	20000bd0 	.word	0x20000bd0
 8004f90:	200009a4 	.word	0x200009a4

08004f94 <sysConfigRead>:




eSYSConfig_t sysConfigRead()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,SYS_CONFIG_ALL_SIZE );
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <sysConfigRead+0x28>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <sysConfigRead+0x2c>)
 8004f9e:	8812      	ldrh	r2, [r2, #0]
 8004fa0:	4908      	ldr	r1, [pc, #32]	; (8004fc4 <sysConfigRead+0x30>)
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fe44 	bl	8002c30 <Flash_Read_Data>
	//Flash_Read_Data(SYSTEM_CONFIG_ADDRESS,(uint32_t*) &systemConfig,5 );
	if (SYS_CONFIG_BAD_CHECKSUM == sysConfigValidateConfig())
 8004fa8:	f7ff ffc6 	bl	8004f38 <sysConfigValidateConfig>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <sysConfigRead+0x22>
		return SYS_CONFIG_BAD_DATA;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e000      	b.n	8004fb8 <sysConfigRead+0x24>
	else
		return SYS_CONFIG_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	08011210 	.word	0x08011210
 8004fc0:	20000e1a 	.word	0x20000e1a
 8004fc4:	20000bd0 	.word	0x20000bd0

08004fc8 <sysConfigSave>:

void sysConfigSave()
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
	uint32_t crc = sysConfigCalcChecksum();
 8004fce:	f7ff ffcb 	bl	8004f68 <sysConfigCalcChecksum>
 8004fd2:	6078      	str	r0, [r7, #4]
	systemConfig.checksum = crc;
 8004fd4:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <sysConfigSave+0x2c>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

	Flash_Write_Data(SYSTEM_CONFIG_ADDRESS, (uint32_t *)&systemConfig, SYS_CONFIG_ALL_SIZE);
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <sysConfigSave+0x30>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <sysConfigSave+0x34>)
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	4903      	ldr	r1, [pc, #12]	; (8004ff4 <sysConfigSave+0x2c>)
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fd fdc4 	bl	8002b74 <Flash_Write_Data>
	//TODO: Handle a Confug Save Error - Hard Fault!
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20000bd0 	.word	0x20000bd0
 8004ff8:	08011210 	.word	0x08011210
 8004ffc:	20000e1a 	.word	0x20000e1a

08005000 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint16_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	460a      	mov	r2, r1
 800500a:	71fb      	strb	r3, [r7, #7]
 800500c:	4613      	mov	r3, r2
 800500e:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	79ba      	ldrb	r2, [r7, #6]
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	121b      	asrs	r3, r3, #8
 800501a:	b2db      	uxtb	r3, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	461a      	mov	r2, r3
 8005036:	4623      	mov	r3, r4
 8005038:	71fb      	strb	r3, [r7, #7]
 800503a:	4603      	mov	r3, r0
 800503c:	71bb      	strb	r3, [r7, #6]
 800503e:	460b      	mov	r3, r1
 8005040:	717b      	strb	r3, [r7, #5]
 8005042:	4613      	mov	r3, r2
 8005044:	713b      	strb	r3, [r7, #4]

	r = r * ((float)LED_BRIGHTNESS/100);
 8005046:	79bb      	ldrb	r3, [r7, #6]
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005050:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80050f0 <led_set_RGB+0xc8>
 8005054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505c:	edc7 7a00 	vstr	s15, [r7]
 8005060:	783b      	ldrb	r3, [r7, #0]
 8005062:	71bb      	strb	r3, [r7, #6]
	g = g * ((float)LED_BRIGHTNESS/100);
 8005064:	797b      	ldrb	r3, [r7, #5]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800506e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80050f0 <led_set_RGB+0xc8>
 8005072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507a:	edc7 7a00 	vstr	s15, [r7]
 800507e:	783b      	ldrb	r3, [r7, #0]
 8005080:	717b      	strb	r3, [r7, #5]
	b = b * ((float)LED_BRIGHTNESS/100);
 8005082:	793b      	ldrb	r3, [r7, #4]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800508c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80050f0 <led_set_RGB+0xc8>
 8005090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005098:	edc7 7a00 	vstr	s15, [r7]
 800509c:	783b      	ldrb	r3, [r7, #0]
 800509e:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80050a0:	79fa      	ldrb	r2, [r7, #7]
 80050a2:	4613      	mov	r3, r2
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	189c      	adds	r4, r3, r2
 80050a8:	797b      	ldrb	r3, [r7, #5]
 80050aa:	21b0      	movs	r1, #176	; 0xb0
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff ffa7 	bl	8005000 <scale8>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <led_set_RGB+0xcc>)
 80050b8:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80050ba:	79fa      	ldrb	r2, [r7, #7]
 80050bc:	4613      	mov	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4413      	add	r3, r2
 80050c2:	3301      	adds	r3, #1
 80050c4:	490b      	ldr	r1, [pc, #44]	; (80050f4 <led_set_RGB+0xcc>)
 80050c6:	79ba      	ldrb	r2, [r7, #6]
 80050c8:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80050ca:	79fa      	ldrb	r2, [r7, #7]
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	1c9c      	adds	r4, r3, #2
 80050d4:	793b      	ldrb	r3, [r7, #4]
 80050d6:	21f0      	movs	r1, #240	; 0xf0
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ff91 	bl	8005000 <scale8>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <led_set_RGB+0xcc>)
 80050e4:	551a      	strb	r2, [r3, r4]

}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}
 80050ee:	bf00      	nop
 80050f0:	3e99999a 	.word	0x3e99999a
 80050f4:	20000e20 	.word	0x20000e20

080050f8 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80050fe:	4b50      	ldr	r3, [pc, #320]	; (8005240 <led_render+0x148>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d105      	bne.n	8005112 <led_render+0x1a>
 8005106:	4b4f      	ldr	r3, [pc, #316]	; (8005244 <led_render+0x14c>)
 8005108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d015      	beq.n	800513e <led_render+0x46>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	71fb      	strb	r3, [r7, #7]
 8005116:	e007      	b.n	8005128 <led_render+0x30>
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	4a4b      	ldr	r2, [pc, #300]	; (8005248 <led_render+0x150>)
 800511c:	2100      	movs	r1, #0
 800511e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	3301      	adds	r3, #1
 8005126:	71fb      	strb	r3, [r7, #7]
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b2f      	cmp	r3, #47	; 0x2f
 800512c:	d9f4      	bls.n	8005118 <led_render+0x20>
    wr_buf_p = 0;
 800512e:	4b44      	ldr	r3, [pc, #272]	; (8005240 <led_render+0x148>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8005134:	2100      	movs	r1, #0
 8005136:	4845      	ldr	r0, [pc, #276]	; (800524c <led_render+0x154>)
 8005138:	f004 f988 	bl	800944c <HAL_TIM_PWM_Stop_DMA>
    return;
 800513c:	e07c      	b.n	8005238 <led_render+0x140>
  }
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800513e:	2300      	movs	r3, #0
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	e06d      	b.n	8005220 <led_render+0x128>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <led_render+0x158>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	2b00      	cmp	r3, #0
 8005156:	dd01      	ble.n	800515c <led_render+0x64>
 8005158:	2150      	movs	r1, #80	; 0x50
 800515a:	e000      	b.n	800515e <led_render+0x66>
 800515c:	2128      	movs	r1, #40	; 0x28
 800515e:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <led_render+0x150>)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8005166:	4b3a      	ldr	r3, [pc, #232]	; (8005250 <led_render+0x158>)
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	461a      	mov	r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	dd01      	ble.n	800517e <led_render+0x86>
 800517a:	2150      	movs	r1, #80	; 0x50
 800517c:	e000      	b.n	8005180 <led_render+0x88>
 800517e:	2128      	movs	r1, #40	; 0x28
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	3308      	adds	r3, #8
 8005184:	4a30      	ldr	r2, [pc, #192]	; (8005248 <led_render+0x150>)
 8005186:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <led_render+0x158>)
 800518c:	789b      	ldrb	r3, [r3, #2]
 800518e:	461a      	mov	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	dd01      	ble.n	80051a2 <led_render+0xaa>
 800519e:	2150      	movs	r1, #80	; 0x50
 80051a0:	e000      	b.n	80051a4 <led_render+0xac>
 80051a2:	2128      	movs	r1, #40	; 0x28
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	3310      	adds	r3, #16
 80051a8:	4a27      	ldr	r2, [pc, #156]	; (8005248 <led_render+0x150>)
 80051aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80051ae:	4b28      	ldr	r3, [pc, #160]	; (8005250 <led_render+0x158>)
 80051b0:	78db      	ldrb	r3, [r3, #3]
 80051b2:	461a      	mov	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dd01      	ble.n	80051c6 <led_render+0xce>
 80051c2:	2150      	movs	r1, #80	; 0x50
 80051c4:	e000      	b.n	80051c8 <led_render+0xd0>
 80051c6:	2128      	movs	r1, #40	; 0x28
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	3318      	adds	r3, #24
 80051cc:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <led_render+0x150>)
 80051ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 80051d2:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <led_render+0x158>)
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	461a      	mov	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	dd01      	ble.n	80051ea <led_render+0xf2>
 80051e6:	2150      	movs	r1, #80	; 0x50
 80051e8:	e000      	b.n	80051ec <led_render+0xf4>
 80051ea:	2128      	movs	r1, #40	; 0x28
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	3320      	adds	r3, #32
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <led_render+0x150>)
 80051f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80051f6:	4b16      	ldr	r3, [pc, #88]	; (8005250 <led_render+0x158>)
 80051f8:	795b      	ldrb	r3, [r3, #5]
 80051fa:	461a      	mov	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	dd01      	ble.n	800520e <led_render+0x116>
 800520a:	2150      	movs	r1, #80	; 0x50
 800520c:	e000      	b.n	8005210 <led_render+0x118>
 800520e:	2128      	movs	r1, #40	; 0x28
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	3328      	adds	r3, #40	; 0x28
 8005214:	4a0c      	ldr	r2, [pc, #48]	; (8005248 <led_render+0x150>)
 8005216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b07      	cmp	r3, #7
 8005224:	d98e      	bls.n	8005144 <led_render+0x4c>
  }


  HAL_TIM_PWM_Start_DMA(&LED_TIMER, LED_DMA_CHANNEL, (uint32_t *)wr_buf, WR_BUF_LEN);
 8005226:	2330      	movs	r3, #48	; 0x30
 8005228:	4a07      	ldr	r2, [pc, #28]	; (8005248 <led_render+0x150>)
 800522a:	2100      	movs	r1, #0
 800522c:	4807      	ldr	r0, [pc, #28]	; (800524c <led_render+0x154>)
 800522e:	f003 ff5d 	bl	80090ec <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8005232:	4b03      	ldr	r3, [pc, #12]	; (8005240 <led_render+0x148>)
 8005234:	2202      	movs	r2, #2
 8005236:	601a      	str	r2, [r3, #0]
}
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20001030 	.word	0x20001030
 8005244:	20000b10 	.word	0x20000b10
 8005248:	20000fd0 	.word	0x20000fd0
 800524c:	20000a80 	.word	0x20000a80
 8005250:	20000e20 	.word	0x20000e20

08005254 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800525c:	4b3a      	ldr	r3, [pc, #232]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b8f      	cmp	r3, #143	; 0x8f
 8005262:	d854      	bhi.n	800530e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xba>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e048      	b.n	80052fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800526a:	4b37      	ldr	r3, [pc, #220]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4613      	mov	r3, r2
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4413      	add	r3, r2
 8005274:	4a35      	ldr	r2, [pc, #212]	; (800534c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	461a      	mov	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	dd01      	ble.n	800528c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8005288:	2150      	movs	r1, #80	; 0x50
 800528a:	e000      	b.n	800528e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 800528c:	2128      	movs	r1, #40	; 0x28
 800528e:	4a30      	ldr	r2, [pc, #192]	; (8005350 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8005296:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	3301      	adds	r3, #1
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80052a4:	5cd3      	ldrb	r3, [r2, r3]
 80052a6:	461a      	mov	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dd01      	ble.n	80052ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x66>
 80052b6:	2150      	movs	r1, #80	; 0x50
 80052b8:	e000      	b.n	80052bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80052ba:	2128      	movs	r1, #40	; 0x28
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3308      	adds	r3, #8
 80052c0:	4a23      	ldr	r2, [pc, #140]	; (8005350 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80052c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	3302      	adds	r3, #2
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80052d4:	5cd3      	ldrb	r3, [r2, r3]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd01      	ble.n	80052ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 80052e6:	2150      	movs	r1, #80	; 0x50
 80052e8:	e000      	b.n	80052ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80052ea:	2128      	movs	r1, #40	; 0x28
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3310      	adds	r3, #16
 80052f0:	4a17      	ldr	r2, [pc, #92]	; (8005350 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80052f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3301      	adds	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b07      	cmp	r3, #7
 8005300:	d9b3      	bls.n	800526a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }

    wr_buf_p++;
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3301      	adds	r3, #1
 8005308:	4a0f      	ldr	r2, [pc, #60]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800530a:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 800530c:	e016      	b.n	800533c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b91      	cmp	r3, #145	; 0x91
 8005314:	d812      	bhi.n	800533c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	72fb      	strb	r3, [r7, #11]
 800531a:	e007      	b.n	800532c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
 800531c:	7afb      	ldrb	r3, [r7, #11]
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8005320:	2100      	movs	r1, #0
 8005322:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005326:	7afb      	ldrb	r3, [r7, #11]
 8005328:	3301      	adds	r3, #1
 800532a:	72fb      	strb	r3, [r7, #11]
 800532c:	7afb      	ldrb	r3, [r7, #11]
 800532e:	2b17      	cmp	r3, #23
 8005330:	d9f4      	bls.n	800531c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>
    wr_buf_p++;
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a03      	ldr	r2, [pc, #12]	; (8005348 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	20001030 	.word	0x20001030
 800534c:	20000e20 	.word	0x20000e20
 8005350:	20000fd0 	.word	0x20000fd0

08005354 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800535c:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b8f      	cmp	r3, #143	; 0x8f
 8005362:	d855      	bhi.n	8005410 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e049      	b.n	80053fe <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800536a:	4b3b      	ldr	r3, [pc, #236]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	4a39      	ldr	r2, [pc, #228]	; (800545c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8005376:	5cd3      	ldrb	r3, [r2, r3]
 8005378:	461a      	mov	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b00      	cmp	r3, #0
 8005386:	dd01      	ble.n	800538c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8005388:	2150      	movs	r1, #80	; 0x50
 800538a:	e000      	b.n	800538e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800538c:	2128      	movs	r1, #40	; 0x28
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3318      	adds	r3, #24
 8005392:	4a33      	ldr	r2, [pc, #204]	; (8005460 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8005394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8005398:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a2d      	ldr	r2, [pc, #180]	; (800545c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80053a6:	5cd3      	ldrb	r3, [r2, r3]
 80053a8:	461a      	mov	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dd01      	ble.n	80053bc <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80053b8:	2150      	movs	r1, #80	; 0x50
 80053ba:	e000      	b.n	80053be <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 80053bc:	2128      	movs	r1, #40	; 0x28
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3320      	adds	r3, #32
 80053c2:	4a27      	ldr	r2, [pc, #156]	; (8005460 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80053c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80053c8:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	4413      	add	r3, r2
 80053d2:	3302      	adds	r3, #2
 80053d4:	4a21      	ldr	r2, [pc, #132]	; (800545c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	461a      	mov	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd01      	ble.n	80053ec <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 80053e8:	2150      	movs	r1, #80	; 0x50
 80053ea:	e000      	b.n	80053ee <HAL_TIM_PWM_PulseFinishedCallback+0x9a>
 80053ec:	2128      	movs	r1, #40	; 0x28
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3328      	adds	r3, #40	; 0x28
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80053f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b07      	cmp	r3, #7
 8005402:	d9b2      	bls.n	800536a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 8005404:	4b14      	ldr	r3, [pc, #80]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	4a13      	ldr	r2, [pc, #76]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800540c:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 800540e:	e01e      	b.n	800544e <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b91      	cmp	r3, #145	; 0x91
 8005416:	d813      	bhi.n	8005440 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8005418:	2318      	movs	r3, #24
 800541a:	72fb      	strb	r3, [r7, #11]
 800541c:	e007      	b.n	800542e <HAL_TIM_PWM_PulseFinishedCallback+0xda>
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	4a0f      	ldr	r2, [pc, #60]	; (8005460 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8005422:	2100      	movs	r1, #0
 8005424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005428:	7afb      	ldrb	r3, [r7, #11]
 800542a:	3301      	adds	r3, #1
 800542c:	72fb      	strb	r3, [r7, #11]
 800542e:	7afb      	ldrb	r3, [r7, #11]
 8005430:	2b2f      	cmp	r3, #47	; 0x2f
 8005432:	d9f4      	bls.n	800541e <HAL_TIM_PWM_PulseFinishedCallback+0xca>
    ++wr_buf_p;
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	4a07      	ldr	r2, [pc, #28]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800543c:	6013      	str	r3, [r2, #0]
}
 800543e:	e006      	b.n	800544e <HAL_TIM_PWM_PulseFinishedCallback+0xfa>
    wr_buf_p = 0;
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8005446:	2100      	movs	r1, #0
 8005448:	4806      	ldr	r0, [pc, #24]	; (8005464 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800544a:	f003 ffff 	bl	800944c <HAL_TIM_PWM_Stop_DMA>
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20001030 	.word	0x20001030
 800545c:	20000e20 	.word	0x20000e20
 8005460:	20000fd0 	.word	0x20000fd0
 8005464:	20000a80 	.word	0x20000a80

08005468 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
 8005472:	460b      	mov	r3, r1
 8005474:	71bb      	strb	r3, [r7, #6]
 8005476:	4613      	mov	r3, r2
 8005478:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800547a:	797b      	ldrb	r3, [r7, #5]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <hsl_to_rgb+0x1c>
 8005480:	2300      	movs	r3, #0
 8005482:	e0b1      	b.n	80055e8 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8005484:	797b      	ldrb	r3, [r7, #5]
 8005486:	b29b      	uxth	r3, r3
 8005488:	3301      	adds	r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 800548e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005492:	2b00      	cmp	r3, #0
 8005494:	db09      	blt.n	80054aa <hsl_to_rgb+0x42>
 8005496:	89bb      	ldrh	r3, [r7, #12]
 8005498:	b29b      	uxth	r3, r3
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	79ba      	ldrb	r2, [r7, #6]
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	121b      	asrs	r3, r3, #8
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	74fb      	strb	r3, [r7, #19]
 80054a8:	e00a      	b.n	80054c0 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80054aa:	89bb      	ldrh	r3, [r7, #12]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80054b4:	79ba      	ldrb	r2, [r7, #6]
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	121b      	asrs	r3, r3, #8
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	0052      	lsls	r2, r2, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80054d0:	897b      	ldrh	r3, [r7, #10]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80054d8:	7d3b      	ldrb	r3, [r7, #20]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <hsl_to_rgb+0x9c>
 80054f0:	89fb      	ldrh	r3, [r7, #14]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	7cfa      	ldrb	r2, [r7, #19]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	fb02 f303 	mul.w	r3, r2, r3
 80054fc:	121b      	asrs	r3, r3, #8
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	74bb      	strb	r3, [r7, #18]
 8005502:	e00a      	b.n	800551a <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8005504:	89fb      	ldrh	r3, [r7, #14]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800550c:	7cfa      	ldrb	r2, [r7, #19]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	fb02 f303 	mul.w	r3, r2, r3
 8005514:	121b      	asrs	r3, r3, #8
 8005516:	b2db      	uxtb	r3, r3
 8005518:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	797a      	ldrb	r2, [r7, #5]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800552a:	897b      	ldrh	r3, [r7, #10]
 800552c:	b29b      	uxth	r3, r3
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b04      	cmp	r3, #4
 8005534:	d839      	bhi.n	80055aa <hsl_to_rgb+0x142>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <hsl_to_rgb+0xd4>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005551 	.word	0x08005551
 8005540:	08005563 	.word	0x08005563
 8005544:	08005575 	.word	0x08005575
 8005548:	08005587 	.word	0x08005587
 800554c:	08005599 	.word	0x08005599
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	75fb      	strb	r3, [r7, #23]
 8005556:	7cbb      	ldrb	r3, [r7, #18]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	75bb      	strb	r3, [r7, #22]
 800555c:	2300      	movs	r3, #0
 800555e:	757b      	strb	r3, [r7, #21]
 8005560:	e02c      	b.n	80055bc <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8005562:	7cbb      	ldrb	r3, [r7, #18]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	75fb      	strb	r3, [r7, #23]
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	75bb      	strb	r3, [r7, #22]
 800556e:	2300      	movs	r3, #0
 8005570:	757b      	strb	r3, [r7, #21]
 8005572:	e023      	b.n	80055bc <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]
 8005578:	7cfb      	ldrb	r3, [r7, #19]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	75bb      	strb	r3, [r7, #22]
 800557e:	7cbb      	ldrb	r3, [r7, #18]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	757b      	strb	r3, [r7, #21]
 8005584:	e01a      	b.n	80055bc <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
 800558a:	7cbb      	ldrb	r3, [r7, #18]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	75bb      	strb	r3, [r7, #22]
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	757b      	strb	r3, [r7, #21]
 8005596:	e011      	b.n	80055bc <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8005598:	7cbb      	ldrb	r3, [r7, #18]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	75fb      	strb	r3, [r7, #23]
 800559e:	2300      	movs	r3, #0
 80055a0:	75bb      	strb	r3, [r7, #22]
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	757b      	strb	r3, [r7, #21]
 80055a8:	e008      	b.n	80055bc <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	75fb      	strb	r3, [r7, #23]
 80055b0:	2300      	movs	r3, #0
 80055b2:	75bb      	strb	r3, [r7, #22]
 80055b4:	7cbb      	ldrb	r3, [r7, #18]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	757b      	strb	r3, [r7, #21]
 80055ba:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	7c7b      	ldrb	r3, [r7, #17]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	041a      	lsls	r2, r3, #16
 80055ca:	7dbb      	ldrb	r3, [r7, #22]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	7c7b      	ldrb	r3, [r7, #17]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	440b      	add	r3, r1
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	431a      	orrs	r2, r3
 80055da:	7d7b      	ldrb	r3, [r7, #21]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	4619      	mov	r1, r3
 80055e0:	7c7b      	ldrb	r3, [r7, #17]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	440b      	add	r3, r1
 80055e6:	4313      	orrs	r3, r2
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <HAL_Init+0x40>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a0d      	ldr	r2, [pc, #52]	; (8005634 <HAL_Init+0x40>)
 80055fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <HAL_Init+0x40>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <HAL_Init+0x40>)
 800560a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800560e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <HAL_Init+0x40>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a07      	ldr	r2, [pc, #28]	; (8005634 <HAL_Init+0x40>)
 8005616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800561c:	2003      	movs	r0, #3
 800561e:	f000 f96f 	bl	8005900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005622:	200f      	movs	r0, #15
 8005624:	f000 f808 	bl	8005638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005628:	f7fe fe44 	bl	80042b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40023c00 	.word	0x40023c00

08005638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_InitTick+0x54>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b12      	ldr	r3, [pc, #72]	; (8005690 <HAL_InitTick+0x58>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800564e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f987 	bl	800596a <HAL_SYSTICK_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e00e      	b.n	8005684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b0f      	cmp	r3, #15
 800566a:	d80a      	bhi.n	8005682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800566c:	2200      	movs	r2, #0
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	f000 f94f 	bl	8005916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005678:	4a06      	ldr	r2, [pc, #24]	; (8005694 <HAL_InitTick+0x5c>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e000      	b.n	8005684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000224 	.word	0x20000224
 8005690:	200002c0 	.word	0x200002c0
 8005694:	200002bc 	.word	0x200002bc

08005698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_IncTick+0x20>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_IncTick+0x24>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <HAL_IncTick+0x24>)
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	200002c0 	.word	0x200002c0
 80056bc:	20001034 	.word	0x20001034

080056c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
 {
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
return uwTick;
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <HAL_GetTick+0x14>)
 80056c6:	681b      	ldr	r3, [r3, #0]

}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20001034 	.word	0x20001034

080056d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056e0:	f7ff ffee 	bl	80056c0 <HAL_GetTick>
 80056e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d005      	beq.n	80056fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <HAL_Delay+0x44>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056fe:	bf00      	nop
 8005700:	f7ff ffde 	bl	80056c0 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	429a      	cmp	r2, r3
 800570e:	d8f7      	bhi.n	8005700 <HAL_Delay+0x28>
  {
  }
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200002c0 	.word	0x200002c0

08005720 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_SuspendTick+0x1c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a04      	ldr	r2, [pc, #16]	; (800573c <HAL_SuspendTick+0x1c>)
 800572a:	f023 0302 	bic.w	r3, r3, #2
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e010 	.word	0xe000e010

08005740 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_ResumeTick+0x1c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a04      	ldr	r2, [pc, #16]	; (800575c <HAL_ResumeTick+0x1c>)
 800574a:	f043 0302 	orr.w	r3, r3, #2
 800574e:	6013      	str	r3, [r2, #0]
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	e000e010 	.word	0xe000e010

08005760 <__NVIC_SetPriorityGrouping>:
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800577c:	4013      	ands	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800578c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005792:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	60d3      	str	r3, [r2, #12]
}
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	e000ed00 	.word	0xe000ed00

080057a8 <__NVIC_GetPriorityGrouping>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <__NVIC_GetPriorityGrouping+0x18>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	f003 0307 	and.w	r3, r3, #7
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	e000ed00 	.word	0xe000ed00

080057c4 <__NVIC_EnableIRQ>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	db0b      	blt.n	80057ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	f003 021f 	and.w	r2, r3, #31
 80057dc:	4907      	ldr	r1, [pc, #28]	; (80057fc <__NVIC_EnableIRQ+0x38>)
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	2001      	movs	r0, #1
 80057e6:	fa00 f202 	lsl.w	r2, r0, r2
 80057ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	e000e100 	.word	0xe000e100

08005800 <__NVIC_SetPriority>:
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	6039      	str	r1, [r7, #0]
 800580a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800580c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005810:	2b00      	cmp	r3, #0
 8005812:	db0a      	blt.n	800582a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	b2da      	uxtb	r2, r3
 8005818:	490c      	ldr	r1, [pc, #48]	; (800584c <__NVIC_SetPriority+0x4c>)
 800581a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581e:	0112      	lsls	r2, r2, #4
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	440b      	add	r3, r1
 8005824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005828:	e00a      	b.n	8005840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4908      	ldr	r1, [pc, #32]	; (8005850 <__NVIC_SetPriority+0x50>)
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	3b04      	subs	r3, #4
 8005838:	0112      	lsls	r2, r2, #4
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	440b      	add	r3, r1
 800583e:	761a      	strb	r2, [r3, #24]
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	e000e100 	.word	0xe000e100
 8005850:	e000ed00 	.word	0xe000ed00

08005854 <NVIC_EncodePriority>:
{
 8005854:	b480      	push	{r7}
 8005856:	b089      	sub	sp, #36	; 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f1c3 0307 	rsb	r3, r3, #7
 800586e:	2b04      	cmp	r3, #4
 8005870:	bf28      	it	cs
 8005872:	2304      	movcs	r3, #4
 8005874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3304      	adds	r3, #4
 800587a:	2b06      	cmp	r3, #6
 800587c:	d902      	bls.n	8005884 <NVIC_EncodePriority+0x30>
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3b03      	subs	r3, #3
 8005882:	e000      	b.n	8005886 <NVIC_EncodePriority+0x32>
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005888:	f04f 32ff 	mov.w	r2, #4294967295
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	43da      	mvns	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	401a      	ands	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800589c:	f04f 31ff 	mov.w	r1, #4294967295
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	43d9      	mvns	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058ac:	4313      	orrs	r3, r2
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3724      	adds	r7, #36	; 0x24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058cc:	d301      	bcc.n	80058d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ce:	2301      	movs	r3, #1
 80058d0:	e00f      	b.n	80058f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058d2:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <SysTick_Config+0x40>)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058da:	210f      	movs	r1, #15
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	f7ff ff8e 	bl	8005800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <SysTick_Config+0x40>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ea:	4b04      	ldr	r3, [pc, #16]	; (80058fc <SysTick_Config+0x40>)
 80058ec:	2207      	movs	r2, #7
 80058ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	e000e010 	.word	0xe000e010

08005900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff29 	bl	8005760 <__NVIC_SetPriorityGrouping>
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005916:	b580      	push	{r7, lr}
 8005918:	b086      	sub	sp, #24
 800591a:	af00      	add	r7, sp, #0
 800591c:	4603      	mov	r3, r0
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005928:	f7ff ff3e 	bl	80057a8 <__NVIC_GetPriorityGrouping>
 800592c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	6978      	ldr	r0, [r7, #20]
 8005934:	f7ff ff8e 	bl	8005854 <NVIC_EncodePriority>
 8005938:	4602      	mov	r2, r0
 800593a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800593e:	4611      	mov	r1, r2
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff ff5d 	bl	8005800 <__NVIC_SetPriority>
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	4603      	mov	r3, r0
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff ff31 	bl	80057c4 <__NVIC_EnableIRQ>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff ffa2 	bl	80058bc <SysTick_Config>
 8005978:	4603      	mov	r3, r0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e00e      	b.n	80059b2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	795b      	ldrb	r3, [r3, #5]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7fe f92f 	bl	8003c08 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2202      	movs	r2, #2
 80059ce:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e00a      	b.n	80059fc <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	441a      	add	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3301      	adds	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d3f0      	bcc.n	80059e6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8005a12:	693b      	ldr	r3, [r7, #16]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a2c:	f7ff fe48 	bl	80056c0 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e099      	b.n	8005b70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a5c:	e00f      	b.n	8005a7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a5e:	f7ff fe2f 	bl	80056c0 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b05      	cmp	r3, #5
 8005a6a:	d908      	bls.n	8005a7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2203      	movs	r2, #3
 8005a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e078      	b.n	8005b70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e8      	bne.n	8005a5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4b38      	ldr	r3, [pc, #224]	; (8005b78 <HAL_DMA_Init+0x158>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d107      	bne.n	8005ae8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0307 	bic.w	r3, r3, #7
 8005afe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d117      	bne.n	8005b42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00e      	beq.n	8005b42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb01 	bl	800612c <DMA_CheckFifoParam>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2240      	movs	r2, #64	; 0x40
 8005b34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e016      	b.n	8005b70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fab8 	bl	80060c0 <DMA_CalcBaseAndBitshift>
 8005b50:	4603      	mov	r3, r0
 8005b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	223f      	movs	r2, #63	; 0x3f
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	f010803f 	.word	0xf010803f

08005b7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_DMA_Start_IT+0x26>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e040      	b.n	8005c24 <HAL_DMA_Start_IT+0xa8>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d12f      	bne.n	8005c16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fa4a 	bl	8006064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	223f      	movs	r2, #63	; 0x3f
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0216 	orr.w	r2, r2, #22
 8005bea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0208 	orr.w	r2, r2, #8
 8005c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e005      	b.n	8005c22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c3a:	f7ff fd41 	bl	80056c0 <HAL_GetTick>
 8005c3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d008      	beq.n	8005c5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2280      	movs	r2, #128	; 0x80
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e052      	b.n	8005d04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0216 	bic.w	r2, r2, #22
 8005c6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_DMA_Abort+0x62>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0208 	bic.w	r2, r2, #8
 8005c9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cae:	e013      	b.n	8005cd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cb0:	f7ff fd06 	bl	80056c0 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d90c      	bls.n	8005cd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2203      	movs	r2, #3
 8005cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e015      	b.n	8005d04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e4      	bne.n	8005cb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cea:	223f      	movs	r2, #63	; 0x3f
 8005cec:	409a      	lsls	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d004      	beq.n	8005d2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e00c      	b.n	8005d44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d5c:	4b8e      	ldr	r3, [pc, #568]	; (8005f98 <HAL_DMA_IRQHandler+0x248>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a8e      	ldr	r2, [pc, #568]	; (8005f9c <HAL_DMA_IRQHandler+0x24c>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0a9b      	lsrs	r3, r3, #10
 8005d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	409a      	lsls	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01a      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0204 	bic.w	r2, r2, #4
 8005da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da8:	2208      	movs	r2, #8
 8005daa:	409a      	lsls	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db4:	f043 0201 	orr.w	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d012      	beq.n	8005df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dde:	2201      	movs	r2, #1
 8005de0:	409a      	lsls	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f043 0202 	orr.w	r2, r3, #2
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	2204      	movs	r2, #4
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d012      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	2204      	movs	r2, #4
 8005e16:	409a      	lsls	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	f043 0204 	orr.w	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4013      	ands	r3, r2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d043      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d03c      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d018      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d108      	bne.n	8005e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d024      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
 8005e7e:	e01f      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
 8005e90:	e016      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0208 	bic.w	r2, r2, #8
 8005eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 808f 	beq.w	8005ff0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8087 	beq.w	8005ff0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	409a      	lsls	r2, r3
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	d136      	bne.n	8005f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0216 	bic.w	r2, r2, #22
 8005f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695a      	ldr	r2, [r3, #20]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <HAL_DMA_IRQHandler+0x1da>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0208 	bic.w	r2, r2, #8
 8005f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3e:	223f      	movs	r2, #63	; 0x3f
 8005f40:	409a      	lsls	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d07e      	beq.n	800605c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
        }
        return;
 8005f66:	e079      	b.n	800605c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01d      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10d      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d031      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
 8005f94:	e02c      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x2a0>
 8005f96:	bf00      	nop
 8005f98:	20000224 	.word	0x20000224
 8005f9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d023      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
 8005fb0:	e01e      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0210 	bic.w	r2, r2, #16
 8005fce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d032      	beq.n	800605e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d022      	beq.n	800604a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2205      	movs	r2, #5
 8006008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	3301      	adds	r3, #1
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	429a      	cmp	r2, r3
 8006026:	d307      	bcc.n	8006038 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f2      	bne.n	800601c <HAL_DMA_IRQHandler+0x2cc>
 8006036:	e000      	b.n	800603a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006038:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
 800605a:	e000      	b.n	800605e <HAL_DMA_IRQHandler+0x30e>
        return;
 800605c:	bf00      	nop
    }
  }
}
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d108      	bne.n	80060a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060a2:	e007      	b.n	80060b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	3b10      	subs	r3, #16
 80060d0:	4a14      	ldr	r2, [pc, #80]	; (8006124 <DMA_CalcBaseAndBitshift+0x64>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	091b      	lsrs	r3, r3, #4
 80060d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060da:	4a13      	ldr	r2, [pc, #76]	; (8006128 <DMA_CalcBaseAndBitshift+0x68>)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d909      	bls.n	8006102 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	659a      	str	r2, [r3, #88]	; 0x58
 8006100:	e007      	b.n	8006112 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	aaaaaaab 	.word	0xaaaaaaab
 8006128:	08011214 	.word	0x08011214

0800612c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11f      	bne.n	8006186 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d856      	bhi.n	80061fa <DMA_CheckFifoParam+0xce>
 800614c:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <DMA_CheckFifoParam+0x28>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	08006165 	.word	0x08006165
 8006158:	08006177 	.word	0x08006177
 800615c:	08006165 	.word	0x08006165
 8006160:	080061fb 	.word	0x080061fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d046      	beq.n	80061fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006174:	e043      	b.n	80061fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800617e:	d140      	bne.n	8006202 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006184:	e03d      	b.n	8006202 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618e:	d121      	bne.n	80061d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d837      	bhi.n	8006206 <DMA_CheckFifoParam+0xda>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <DMA_CheckFifoParam+0x70>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061ad 	.word	0x080061ad
 80061a0:	080061b3 	.word	0x080061b3
 80061a4:	080061ad 	.word	0x080061ad
 80061a8:	080061c5 	.word	0x080061c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
      break;
 80061b0:	e030      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d025      	beq.n	800620a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061c2:	e022      	b.n	800620a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061cc:	d11f      	bne.n	800620e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061d2:	e01c      	b.n	800620e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d903      	bls.n	80061e2 <DMA_CheckFifoParam+0xb6>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d003      	beq.n	80061e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061e0:	e018      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
      break;
 80061e6:	e015      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00e      	beq.n	8006212 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e00b      	b.n	8006212 <DMA_CheckFifoParam+0xe6>
      break;
 80061fa:	bf00      	nop
 80061fc:	e00a      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      break;
 80061fe:	bf00      	nop
 8006200:	e008      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      break;
 8006202:	bf00      	nop
 8006204:	e006      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      break;
 8006206:	bf00      	nop
 8006208:	e004      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      break;
 800620a:	bf00      	nop
 800620c:	e002      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      break;   
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <DMA_CheckFifoParam+0xe8>
      break;
 8006212:	bf00      	nop
    }
  } 
  
  return status; 
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop

08006224 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006236:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <HAL_FLASH_Program+0xa0>)
 8006238:	7e1b      	ldrb	r3, [r3, #24]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_FLASH_Program+0x1e>
 800623e:	2302      	movs	r3, #2
 8006240:	e03b      	b.n	80062ba <HAL_FLASH_Program+0x96>
 8006242:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <HAL_FLASH_Program+0xa0>)
 8006244:	2201      	movs	r2, #1
 8006246:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006248:	f24c 3050 	movw	r0, #50000	; 0xc350
 800624c:	f000 f87c 	bl	8006348 <FLASH_WaitForLastOperation>
 8006250:	4603      	mov	r3, r0
 8006252:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d12b      	bne.n	80062b2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006260:	783b      	ldrb	r3, [r7, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	68b8      	ldr	r0, [r7, #8]
 8006266:	f000 f927 	bl	80064b8 <FLASH_Program_Byte>
 800626a:	e016      	b.n	800629a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d105      	bne.n	800627e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006272:	883b      	ldrh	r3, [r7, #0]
 8006274:	4619      	mov	r1, r3
 8006276:	68b8      	ldr	r0, [r7, #8]
 8006278:	f000 f8fa 	bl	8006470 <FLASH_Program_HalfWord>
 800627c:	e00d      	b.n	800629a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d105      	bne.n	8006290 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	4619      	mov	r1, r3
 8006288:	68b8      	ldr	r0, [r7, #8]
 800628a:	f000 f8cf 	bl	800642c <FLASH_Program_Word>
 800628e:	e004      	b.n	800629a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006294:	68b8      	ldr	r0, [r7, #8]
 8006296:	f000 f897 	bl	80063c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800629a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800629e:	f000 f853 	bl	8006348 <FLASH_WaitForLastOperation>
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <HAL_FLASH_Program+0xa4>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <HAL_FLASH_Program+0xa4>)
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80062b2:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <HAL_FLASH_Program+0xa0>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20001038 	.word	0x20001038
 80062c8:	40023c00 	.word	0x40023c00

080062cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <HAL_FLASH_Unlock+0x38>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da0b      	bge.n	80062f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_FLASH_Unlock+0x38>)
 80062e0:	4a09      	ldr	r2, [pc, #36]	; (8006308 <HAL_FLASH_Unlock+0x3c>)
 80062e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80062e4:	4b07      	ldr	r3, [pc, #28]	; (8006304 <HAL_FLASH_Unlock+0x38>)
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <HAL_FLASH_Unlock+0x40>)
 80062e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_FLASH_Unlock+0x38>)
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da01      	bge.n	80062f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80062f6:	79fb      	ldrb	r3, [r7, #7]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	40023c00 	.word	0x40023c00
 8006308:	45670123 	.word	0x45670123
 800630c:	cdef89ab 	.word	0xcdef89ab

08006310 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_FLASH_Lock+0x1c>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <HAL_FLASH_Lock+0x1c>)
 800631a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800631e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40023c00 	.word	0x40023c00

08006330 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <HAL_FLASH_GetError+0x14>)
 8006336:	69db      	ldr	r3, [r3, #28]
}  
 8006338:	4618      	mov	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20001038 	.word	0x20001038

08006348 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <FLASH_WaitForLastOperation+0x78>)
 8006356:	2200      	movs	r2, #0
 8006358:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800635a:	f7ff f9b1 	bl	80056c0 <HAL_GetTick>
 800635e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006360:	e010      	b.n	8006384 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d00c      	beq.n	8006384 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <FLASH_WaitForLastOperation+0x38>
 8006370:	f7ff f9a6 	bl	80056c0 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d201      	bcs.n	8006384 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e019      	b.n	80063b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <FLASH_WaitForLastOperation+0x7c>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e8      	bne.n	8006362 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <FLASH_WaitForLastOperation+0x7c>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <FLASH_WaitForLastOperation+0x7c>)
 800639e:	2201      	movs	r2, #1
 80063a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <FLASH_WaitForLastOperation+0x7c>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80063ae:	f000 f8a5 	bl	80064fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
  
}  
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20001038 	.word	0x20001038
 80063c4:	40023c00 	.word	0x40023c00

080063c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063d4:	4b14      	ldr	r3, [pc, #80]	; (8006428 <FLASH_Program_DoubleWord+0x60>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <FLASH_Program_DoubleWord+0x60>)
 80063da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <FLASH_Program_DoubleWord+0x60>)
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	4a10      	ldr	r2, [pc, #64]	; (8006428 <FLASH_Program_DoubleWord+0x60>)
 80063e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80063ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80063ec:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <FLASH_Program_DoubleWord+0x60>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <FLASH_Program_DoubleWord+0x60>)
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80063fe:	f3bf 8f6f 	isb	sy
}
 8006402:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	000a      	movs	r2, r1
 8006412:	2300      	movs	r3, #0
 8006414:	68f9      	ldr	r1, [r7, #12]
 8006416:	3104      	adds	r1, #4
 8006418:	4613      	mov	r3, r2
 800641a:	600b      	str	r3, [r1, #0]
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40023c00 	.word	0x40023c00

0800642c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <FLASH_Program_Word+0x40>)
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	4a0c      	ldr	r2, [pc, #48]	; (800646c <FLASH_Program_Word+0x40>)
 800643c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006440:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006442:	4b0a      	ldr	r3, [pc, #40]	; (800646c <FLASH_Program_Word+0x40>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <FLASH_Program_Word+0x40>)
 8006448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800644c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <FLASH_Program_Word+0x40>)
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	4a06      	ldr	r2, [pc, #24]	; (800646c <FLASH_Program_Word+0x40>)
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40023c00 	.word	0x40023c00

08006470 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <FLASH_Program_HalfWord+0x44>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <FLASH_Program_HalfWord+0x44>)
 8006482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <FLASH_Program_HalfWord+0x44>)
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <FLASH_Program_HalfWord+0x44>)
 800648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <FLASH_Program_HalfWord+0x44>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	4a06      	ldr	r2, [pc, #24]	; (80064b4 <FLASH_Program_HalfWord+0x44>)
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	887a      	ldrh	r2, [r7, #2]
 80064a4:	801a      	strh	r2, [r3, #0]
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40023c00 	.word	0x40023c00

080064b8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <FLASH_Program_Byte+0x40>)
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	4a0b      	ldr	r2, [pc, #44]	; (80064f8 <FLASH_Program_Byte+0x40>)
 80064ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80064d0:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <FLASH_Program_Byte+0x40>)
 80064d2:	4a09      	ldr	r2, [pc, #36]	; (80064f8 <FLASH_Program_Byte+0x40>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80064d8:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <FLASH_Program_Byte+0x40>)
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <FLASH_Program_Byte+0x40>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	701a      	strb	r2, [r3, #0]
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40023c00 	.word	0x40023c00

080064fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006500:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800650c:	4b2d      	ldr	r3, [pc, #180]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f043 0310 	orr.w	r3, r3, #16
 8006514:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 8006516:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006518:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 800651a:	2210      	movs	r2, #16
 800651c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800651e:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800652a:	4b26      	ldr	r3, [pc, #152]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f043 0308 	orr.w	r3, r3, #8
 8006532:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 8006534:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006536:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 8006538:	2220      	movs	r2, #32
 800653a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006548:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f043 0304 	orr.w	r3, r3, #4
 8006550:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 8006552:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800655a:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006566:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f043 0302 	orr.w	r3, r3, #2
 800656e:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 8006570:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006572:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 8006574:	2280      	movs	r2, #128	; 0x80
 8006576:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d009      	beq.n	8006598 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006584:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 800658e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 8006592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006596:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006598:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f043 0320 	orr.w	r3, r3, #32
 80065ac:	4a05      	ldr	r2, [pc, #20]	; (80065c4 <FLASH_SetErrorCode+0xc8>)
 80065ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <FLASH_SetErrorCode+0xc4>)
 80065b2:	2202      	movs	r2, #2
 80065b4:	60da      	str	r2, [r3, #12]
  }
}
 80065b6:	bf00      	nop
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	40023c00 	.word	0x40023c00
 80065c4:	20001038 	.word	0x20001038

080065c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80065da:	4b31      	ldr	r3, [pc, #196]	; (80066a0 <HAL_FLASHEx_Erase+0xd8>)
 80065dc:	7e1b      	ldrb	r3, [r3, #24]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_FLASHEx_Erase+0x1e>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e058      	b.n	8006698 <HAL_FLASHEx_Erase+0xd0>
 80065e6:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <HAL_FLASHEx_Erase+0xd8>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80065ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065f0:	f7ff feaa 	bl	8006348 <FLASH_WaitForLastOperation>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d148      	bne.n	8006690 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d115      	bne.n	800663a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	b2da      	uxtb	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f000 f844 	bl	80066a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006620:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006624:	f7ff fe90 	bl	8006348 <FLASH_WaitForLastOperation>
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800662c:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <HAL_FLASHEx_Erase+0xdc>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <HAL_FLASHEx_Erase+0xdc>)
 8006632:	f023 0304 	bic.w	r3, r3, #4
 8006636:	6113      	str	r3, [r2, #16]
 8006638:	e028      	b.n	800668c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	60bb      	str	r3, [r7, #8]
 8006640:	e01c      	b.n	800667c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	4619      	mov	r1, r3
 800664a:	68b8      	ldr	r0, [r7, #8]
 800664c:	f000 f850 	bl	80066f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006650:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006654:	f7ff fe78 	bl	8006348 <FLASH_WaitForLastOperation>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800665c:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_FLASHEx_Erase+0xdc>)
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <HAL_FLASHEx_Erase+0xdc>)
 8006662:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006666:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	601a      	str	r2, [r3, #0]
          break;
 8006674:	e00a      	b.n	800668c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3301      	adds	r3, #1
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4413      	add	r3, r2
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	429a      	cmp	r2, r3
 800668a:	d3da      	bcc.n	8006642 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800668c:	f000 f878 	bl	8006780 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006690:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <HAL_FLASHEx_Erase+0xd8>)
 8006692:	2200      	movs	r2, #0
 8006694:	761a      	strb	r2, [r3, #24]

  return status;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20001038 	.word	0x20001038
 80066a4:	40023c00 	.word	0x40023c00

080066a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	6039      	str	r1, [r7, #0]
 80066b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066b4:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <FLASH_MassErase+0x44>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	4a0c      	ldr	r2, [pc, #48]	; (80066ec <FLASH_MassErase+0x44>)
 80066ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <FLASH_MassErase+0x44>)
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	4a09      	ldr	r2, [pc, #36]	; (80066ec <FLASH_MassErase+0x44>)
 80066c6:	f043 0304 	orr.w	r3, r3, #4
 80066ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <FLASH_MassErase+0x44>)
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	4313      	orrs	r3, r2
 80066d6:	4a05      	ldr	r2, [pc, #20]	; (80066ec <FLASH_MassErase+0x44>)
 80066d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066dc:	6113      	str	r3, [r2, #16]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40023c00 	.word	0x40023c00

080066f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	e010      	b.n	800672e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d103      	bne.n	800671a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e009      	b.n	800672e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d103      	bne.n	8006728 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e002      	b.n	800672e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800672c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <FLASH_Erase_Sector+0x8c>)
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	4a12      	ldr	r2, [pc, #72]	; (800677c <FLASH_Erase_Sector+0x8c>)
 8006734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006738:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <FLASH_Erase_Sector+0x8c>)
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	490f      	ldr	r1, [pc, #60]	; (800677c <FLASH_Erase_Sector+0x8c>)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <FLASH_Erase_Sector+0x8c>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	4a0c      	ldr	r2, [pc, #48]	; (800677c <FLASH_Erase_Sector+0x8c>)
 800674c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006750:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <FLASH_Erase_Sector+0x8c>)
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4313      	orrs	r3, r2
 800675c:	4a07      	ldr	r2, [pc, #28]	; (800677c <FLASH_Erase_Sector+0x8c>)
 800675e:	f043 0302 	orr.w	r3, r3, #2
 8006762:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <FLASH_Erase_Sector+0x8c>)
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <FLASH_Erase_Sector+0x8c>)
 800676a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676e:	6113      	str	r3, [r2, #16]
}
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40023c00 	.word	0x40023c00

08006780 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <FLASH_FlushCaches+0x88>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800678c:	2b00      	cmp	r3, #0
 800678e:	d017      	beq.n	80067c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <FLASH_FlushCaches+0x88>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <FLASH_FlushCaches+0x88>)
 8006796:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800679a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800679c:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <FLASH_FlushCaches+0x88>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a19      	ldr	r2, [pc, #100]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	4b17      	ldr	r3, [pc, #92]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a16      	ldr	r2, [pc, #88]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80067b4:	4b14      	ldr	r3, [pc, #80]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a13      	ldr	r2, [pc, #76]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d017      	beq.n	80067fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0d      	ldr	r2, [pc, #52]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b08      	ldr	r3, [pc, #32]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a07      	ldr	r2, [pc, #28]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a04      	ldr	r2, [pc, #16]	; (8006808 <FLASH_FlushCaches+0x88>)
 80067f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067fa:	6013      	str	r3, [r2, #0]
  }
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40023c00 	.word	0x40023c00

0800680c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	; 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006822:	2300      	movs	r3, #0
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	e159      	b.n	8006adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006828:	2201      	movs	r2, #1
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4013      	ands	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	429a      	cmp	r2, r3
 8006842:	f040 8148 	bne.w	8006ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b01      	cmp	r3, #1
 8006850:	d005      	beq.n	800685e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800685a:	2b02      	cmp	r3, #2
 800685c:	d130      	bne.n	80068c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	2203      	movs	r2, #3
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	4313      	orrs	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006894:	2201      	movs	r2, #1
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4013      	ands	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	f003 0201 	and.w	r2, r3, #1
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d017      	beq.n	80068fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	2203      	movs	r2, #3
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	43db      	mvns	r3, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d123      	bne.n	8006950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	08da      	lsrs	r2, r3, #3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3208      	adds	r2, #8
 8006910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	220f      	movs	r2, #15
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	43db      	mvns	r3, r3
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	4013      	ands	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4313      	orrs	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	08da      	lsrs	r2, r3, #3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3208      	adds	r2, #8
 800694a:	69b9      	ldr	r1, [r7, #24]
 800694c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	2203      	movs	r2, #3
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	43db      	mvns	r3, r3
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	4013      	ands	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 0203 	and.w	r2, r3, #3
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	4313      	orrs	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80a2 	beq.w	8006ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	4b57      	ldr	r3, [pc, #348]	; (8006af4 <HAL_GPIO_Init+0x2e8>)
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	4a56      	ldr	r2, [pc, #344]	; (8006af4 <HAL_GPIO_Init+0x2e8>)
 800699c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069a0:	6453      	str	r3, [r2, #68]	; 0x44
 80069a2:	4b54      	ldr	r3, [pc, #336]	; (8006af4 <HAL_GPIO_Init+0x2e8>)
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069ae:	4a52      	ldr	r2, [pc, #328]	; (8006af8 <HAL_GPIO_Init+0x2ec>)
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	089b      	lsrs	r3, r3, #2
 80069b4:	3302      	adds	r3, #2
 80069b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	220f      	movs	r2, #15
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4013      	ands	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a49      	ldr	r2, [pc, #292]	; (8006afc <HAL_GPIO_Init+0x2f0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d019      	beq.n	8006a0e <HAL_GPIO_Init+0x202>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a48      	ldr	r2, [pc, #288]	; (8006b00 <HAL_GPIO_Init+0x2f4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d013      	beq.n	8006a0a <HAL_GPIO_Init+0x1fe>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a47      	ldr	r2, [pc, #284]	; (8006b04 <HAL_GPIO_Init+0x2f8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00d      	beq.n	8006a06 <HAL_GPIO_Init+0x1fa>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a46      	ldr	r2, [pc, #280]	; (8006b08 <HAL_GPIO_Init+0x2fc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <HAL_GPIO_Init+0x1f6>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a45      	ldr	r2, [pc, #276]	; (8006b0c <HAL_GPIO_Init+0x300>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d101      	bne.n	80069fe <HAL_GPIO_Init+0x1f2>
 80069fa:	2304      	movs	r3, #4
 80069fc:	e008      	b.n	8006a10 <HAL_GPIO_Init+0x204>
 80069fe:	2307      	movs	r3, #7
 8006a00:	e006      	b.n	8006a10 <HAL_GPIO_Init+0x204>
 8006a02:	2303      	movs	r3, #3
 8006a04:	e004      	b.n	8006a10 <HAL_GPIO_Init+0x204>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e002      	b.n	8006a10 <HAL_GPIO_Init+0x204>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <HAL_GPIO_Init+0x204>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	f002 0203 	and.w	r2, r2, #3
 8006a16:	0092      	lsls	r2, r2, #2
 8006a18:	4093      	lsls	r3, r2
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a20:	4935      	ldr	r1, [pc, #212]	; (8006af8 <HAL_GPIO_Init+0x2ec>)
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	089b      	lsrs	r3, r3, #2
 8006a26:	3302      	adds	r3, #2
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a2e:	4b38      	ldr	r3, [pc, #224]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a52:	4a2f      	ldr	r2, [pc, #188]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a58:	4b2d      	ldr	r3, [pc, #180]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a7c:	4a24      	ldr	r2, [pc, #144]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a82:	4b23      	ldr	r3, [pc, #140]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006aa6:	4a1a      	ldr	r2, [pc, #104]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006aac:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ad0:	4a0f      	ldr	r2, [pc, #60]	; (8006b10 <HAL_GPIO_Init+0x304>)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	2b0f      	cmp	r3, #15
 8006ae0:	f67f aea2 	bls.w	8006828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	3724      	adds	r7, #36	; 0x24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40023800 	.word	0x40023800
 8006af8:	40013800 	.word	0x40013800
 8006afc:	40020000 	.word	0x40020000
 8006b00:	40020400 	.word	0x40020400
 8006b04:	40020800 	.word	0x40020800
 8006b08:	40020c00 	.word	0x40020c00
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	40013c00 	.word	0x40013c00

08006b14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e0bb      	b.n	8006ca8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b30:	2201      	movs	r2, #1
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	f040 80ab 	bne.w	8006ca2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006b4c:	4a5c      	ldr	r2, [pc, #368]	; (8006cc0 <HAL_GPIO_DeInit+0x1ac>)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	089b      	lsrs	r3, r3, #2
 8006b52:	3302      	adds	r3, #2
 8006b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	220f      	movs	r2, #15
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a54      	ldr	r2, [pc, #336]	; (8006cc4 <HAL_GPIO_DeInit+0x1b0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d019      	beq.n	8006baa <HAL_GPIO_DeInit+0x96>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a53      	ldr	r2, [pc, #332]	; (8006cc8 <HAL_GPIO_DeInit+0x1b4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_GPIO_DeInit+0x92>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a52      	ldr	r2, [pc, #328]	; (8006ccc <HAL_GPIO_DeInit+0x1b8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00d      	beq.n	8006ba2 <HAL_GPIO_DeInit+0x8e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a51      	ldr	r2, [pc, #324]	; (8006cd0 <HAL_GPIO_DeInit+0x1bc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <HAL_GPIO_DeInit+0x8a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a50      	ldr	r2, [pc, #320]	; (8006cd4 <HAL_GPIO_DeInit+0x1c0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <HAL_GPIO_DeInit+0x86>
 8006b96:	2304      	movs	r3, #4
 8006b98:	e008      	b.n	8006bac <HAL_GPIO_DeInit+0x98>
 8006b9a:	2307      	movs	r3, #7
 8006b9c:	e006      	b.n	8006bac <HAL_GPIO_DeInit+0x98>
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e004      	b.n	8006bac <HAL_GPIO_DeInit+0x98>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e002      	b.n	8006bac <HAL_GPIO_DeInit+0x98>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <HAL_GPIO_DeInit+0x98>
 8006baa:	2300      	movs	r3, #0
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	f002 0203 	and.w	r2, r2, #3
 8006bb2:	0092      	lsls	r2, r2, #2
 8006bb4:	4093      	lsls	r3, r2
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d132      	bne.n	8006c22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006bbc:	4b46      	ldr	r3, [pc, #280]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	4944      	ldr	r1, [pc, #272]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006bca:	4b43      	ldr	r3, [pc, #268]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	4941      	ldr	r1, [pc, #260]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	493d      	ldr	r1, [pc, #244]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006be6:	4b3c      	ldr	r3, [pc, #240]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	493a      	ldr	r1, [pc, #232]	; (8006cd8 <HAL_GPIO_DeInit+0x1c4>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	220f      	movs	r2, #15
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006c04:	4a2e      	ldr	r2, [pc, #184]	; (8006cc0 <HAL_GPIO_DeInit+0x1ac>)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	43da      	mvns	r2, r3
 8006c14:	482a      	ldr	r0, [pc, #168]	; (8006cc0 <HAL_GPIO_DeInit+0x1ac>)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	089b      	lsrs	r3, r3, #2
 8006c1a:	400a      	ands	r2, r1
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	2103      	movs	r1, #3
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	43db      	mvns	r3, r3
 8006c32:	401a      	ands	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	08da      	lsrs	r2, r3, #3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3208      	adds	r2, #8
 8006c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	220f      	movs	r2, #15
 8006c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c52:	43db      	mvns	r3, r3
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	08d2      	lsrs	r2, r2, #3
 8006c58:	4019      	ands	r1, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3208      	adds	r2, #8
 8006c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	2103      	movs	r1, #3
 8006c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	401a      	ands	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	2103      	movs	r1, #3
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	401a      	ands	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2b0f      	cmp	r3, #15
 8006cac:	f67f af40 	bls.w	8006b30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40013800 	.word	0x40013800
 8006cc4:	40020000 	.word	0x40020000
 8006cc8:	40020400 	.word	0x40020400
 8006ccc:	40020800 	.word	0x40020800
 8006cd0:	40020c00 	.word	0x40020c00
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	40013c00 	.word	0x40013c00

08006cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	807b      	strh	r3, [r7, #2]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cec:	787b      	ldrb	r3, [r7, #1]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cf2:	887a      	ldrh	r2, [r7, #2]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006cf8:	e003      	b.n	8006d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cfa:	887b      	ldrh	r3, [r7, #2]
 8006cfc:	041a      	lsls	r2, r3, #16
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	619a      	str	r2, [r3, #24]
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d1c:	695a      	ldr	r2, [r3, #20]
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d26:	4a05      	ldr	r2, [pc, #20]	; (8006d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fb ff9f 	bl	8002c72 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40013c00 	.word	0x40013c00

08006d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e12b      	b.n	8006faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d106      	bne.n	8006d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fd f84c 	bl	8003e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2224      	movs	r2, #36	; 0x24
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006da4:	f001 fbf8 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 8006da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	4a81      	ldr	r2, [pc, #516]	; (8006fb4 <HAL_I2C_Init+0x274>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d807      	bhi.n	8006dc4 <HAL_I2C_Init+0x84>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a80      	ldr	r2, [pc, #512]	; (8006fb8 <HAL_I2C_Init+0x278>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	bf94      	ite	ls
 8006dbc:	2301      	movls	r3, #1
 8006dbe:	2300      	movhi	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	e006      	b.n	8006dd2 <HAL_I2C_Init+0x92>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4a7d      	ldr	r2, [pc, #500]	; (8006fbc <HAL_I2C_Init+0x27c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	bf94      	ite	ls
 8006dcc:	2301      	movls	r3, #1
 8006dce:	2300      	movhi	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e0e7      	b.n	8006faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a78      	ldr	r2, [pc, #480]	; (8006fc0 <HAL_I2C_Init+0x280>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	0c9b      	lsrs	r3, r3, #18
 8006de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4a6a      	ldr	r2, [pc, #424]	; (8006fb4 <HAL_I2C_Init+0x274>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d802      	bhi.n	8006e14 <HAL_I2C_Init+0xd4>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3301      	adds	r3, #1
 8006e12:	e009      	b.n	8006e28 <HAL_I2C_Init+0xe8>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	4a69      	ldr	r2, [pc, #420]	; (8006fc4 <HAL_I2C_Init+0x284>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	099b      	lsrs	r3, r3, #6
 8006e26:	3301      	adds	r3, #1
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	495c      	ldr	r1, [pc, #368]	; (8006fb4 <HAL_I2C_Init+0x274>)
 8006e44:	428b      	cmp	r3, r1
 8006e46:	d819      	bhi.n	8006e7c <HAL_I2C_Init+0x13c>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1e59      	subs	r1, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e5c:	400b      	ands	r3, r1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <HAL_I2C_Init+0x138>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1e59      	subs	r1, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e70:	3301      	adds	r3, #1
 8006e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e76:	e051      	b.n	8006f1c <HAL_I2C_Init+0x1dc>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	e04f      	b.n	8006f1c <HAL_I2C_Init+0x1dc>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d111      	bne.n	8006ea8 <HAL_I2C_Init+0x168>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	1e58      	subs	r0, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6859      	ldr	r1, [r3, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	440b      	add	r3, r1
 8006e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e96:	3301      	adds	r3, #1
 8006e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2301      	moveq	r3, #1
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e012      	b.n	8006ece <HAL_I2C_Init+0x18e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	1e58      	subs	r0, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6859      	ldr	r1, [r3, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	0099      	lsls	r1, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2301      	moveq	r3, #1
 8006eca:	2300      	movne	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_I2C_Init+0x196>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e022      	b.n	8006f1c <HAL_I2C_Init+0x1dc>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10e      	bne.n	8006efc <HAL_I2C_Init+0x1bc>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1e58      	subs	r0, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6859      	ldr	r1, [r3, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	440b      	add	r3, r1
 8006eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efa:	e00f      	b.n	8006f1c <HAL_I2C_Init+0x1dc>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	1e58      	subs	r0, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	0099      	lsls	r1, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f12:	3301      	adds	r3, #1
 8006f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	6809      	ldr	r1, [r1, #0]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69da      	ldr	r2, [r3, #28]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6911      	ldr	r1, [r2, #16]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68d2      	ldr	r2, [r2, #12]
 8006f56:	4311      	orrs	r1, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	695a      	ldr	r2, [r3, #20]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	000186a0 	.word	0x000186a0
 8006fb8:	001e847f 	.word	0x001e847f
 8006fbc:	003d08ff 	.word	0x003d08ff
 8006fc0:	431bde83 	.word	0x431bde83
 8006fc4:	10624dd3 	.word	0x10624dd3

08006fc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	817b      	strh	r3, [r7, #10]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	813b      	strh	r3, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fe2:	f7fe fb6d 	bl	80056c0 <HAL_GetTick>
 8006fe6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	f040 80d9 	bne.w	80071a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	2319      	movs	r3, #25
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	496d      	ldr	r1, [pc, #436]	; (80071b4 <HAL_I2C_Mem_Write+0x1ec>)
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fc7f 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
 800700e:	e0cc      	b.n	80071aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_I2C_Mem_Write+0x56>
 800701a:	2302      	movs	r3, #2
 800701c:	e0c5      	b.n	80071aa <HAL_I2C_Mem_Write+0x1e2>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b01      	cmp	r3, #1
 8007032:	d007      	beq.n	8007044 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007052:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2221      	movs	r2, #33	; 0x21
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2240      	movs	r2, #64	; 0x40
 8007060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a3a      	ldr	r2, [r7, #32]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a4d      	ldr	r2, [pc, #308]	; (80071b8 <HAL_I2C_Mem_Write+0x1f0>)
 8007084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007086:	88f8      	ldrh	r0, [r7, #6]
 8007088:	893a      	ldrh	r2, [r7, #8]
 800708a:	8979      	ldrh	r1, [r7, #10]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4603      	mov	r3, r0
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fab6 	bl	8007608 <I2C_RequestMemoryWrite>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d052      	beq.n	8007148 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e081      	b.n	80071aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fd00 	bl	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d107      	bne.n	80070ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e06b      	b.n	80071aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b04      	cmp	r3, #4
 800710e:	d11b      	bne.n	8007148 <HAL_I2C_Mem_Write+0x180>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d017      	beq.n	8007148 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007132:	3b01      	subs	r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1aa      	bne.n	80070a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fcec 	bl	8007b32 <I2C_WaitOnBTFFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	2b04      	cmp	r3, #4
 8007166:	d107      	bne.n	8007178 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007176:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e016      	b.n	80071aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e000      	b.n	80071aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071a8:	2302      	movs	r3, #2
  }
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	00100002 	.word	0x00100002
 80071b8:	ffff0000 	.word	0xffff0000

080071bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08c      	sub	sp, #48	; 0x30
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	4608      	mov	r0, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	4603      	mov	r3, r0
 80071cc:	817b      	strh	r3, [r7, #10]
 80071ce:	460b      	mov	r3, r1
 80071d0:	813b      	strh	r3, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071d6:	f7fe fa73 	bl	80056c0 <HAL_GetTick>
 80071da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	f040 8208 	bne.w	80075fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	2319      	movs	r3, #25
 80071f0:	2201      	movs	r2, #1
 80071f2:	497b      	ldr	r1, [pc, #492]	; (80073e0 <HAL_I2C_Mem_Read+0x224>)
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fb85 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
 8007202:	e1fb      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_I2C_Mem_Read+0x56>
 800720e:	2302      	movs	r3, #2
 8007210:	e1f4      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b01      	cmp	r3, #1
 8007226:	d007      	beq.n	8007238 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007246:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2222      	movs	r2, #34	; 0x22
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2240      	movs	r2, #64	; 0x40
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a5b      	ldr	r2, [pc, #364]	; (80073e4 <HAL_I2C_Mem_Read+0x228>)
 8007278:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800727a:	88f8      	ldrh	r0, [r7, #6]
 800727c:	893a      	ldrh	r2, [r7, #8]
 800727e:	8979      	ldrh	r1, [r7, #10]
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	4603      	mov	r3, r0
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fa52 	bl	8007734 <I2C_RequestMemoryRead>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e1b0      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d113      	bne.n	80072ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072a2:	2300      	movs	r3, #0
 80072a4:	623b      	str	r3, [r7, #32]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	623b      	str	r3, [r7, #32]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	623b      	str	r3, [r7, #32]
 80072b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	e184      	b.n	80075d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d11b      	bne.n	800730a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e164      	b.n	80075d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730e:	2b02      	cmp	r3, #2
 8007310:	d11b      	bne.n	800734a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007320:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007330:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	e144      	b.n	80075d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007360:	e138      	b.n	80075d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007366:	2b03      	cmp	r3, #3
 8007368:	f200 80f1 	bhi.w	800754e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007370:	2b01      	cmp	r3, #1
 8007372:	d123      	bne.n	80073bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fc1b 	bl	8007bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e139      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ba:	e10b      	b.n	80075d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d14e      	bne.n	8007462 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	2200      	movs	r2, #0
 80073cc:	4906      	ldr	r1, [pc, #24]	; (80073e8 <HAL_I2C_Mem_Read+0x22c>)
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fa98 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e10e      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
 80073de:	bf00      	nop
 80073e0:	00100002 	.word	0x00100002
 80073e4:	ffff0000 	.word	0xffff0000
 80073e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007460:	e0b8      	b.n	80075d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	2200      	movs	r2, #0
 800746a:	4966      	ldr	r1, [pc, #408]	; (8007604 <HAL_I2C_Mem_Read+0x448>)
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fa49 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e0bf      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	2200      	movs	r2, #0
 80074c6:	494f      	ldr	r1, [pc, #316]	; (8007604 <HAL_I2C_Mem_Read+0x448>)
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fa1b 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e091      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800754c:	e042      	b.n	80075d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800754e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 fb2e 	bl	8007bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e04c      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d118      	bne.n	80075d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f47f aec2 	bne.w	8007362 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	e000      	b.n	80075fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80075fa:	2302      	movs	r3, #2
  }
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3728      	adds	r7, #40	; 0x28
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	00010004 	.word	0x00010004

08007608 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	817b      	strh	r3, [r7, #10]
 800761a:	460b      	mov	r3, r1
 800761c:	813b      	strh	r3, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	2200      	movs	r2, #0
 800763a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 f960 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00d      	beq.n	8007666 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007658:	d103      	bne.n	8007662 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e05f      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007666:	897b      	ldrh	r3, [r7, #10]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	6a3a      	ldr	r2, [r7, #32]
 800767a:	492d      	ldr	r1, [pc, #180]	; (8007730 <I2C_RequestMemoryWrite+0x128>)
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f998 	bl	80079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e04c      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a4:	6a39      	ldr	r1, [r7, #32]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fa02 	bl	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d107      	bne.n	80076ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e02b      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d105      	bne.n	80076e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076d4:	893b      	ldrh	r3, [r7, #8]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	611a      	str	r2, [r3, #16]
 80076de:	e021      	b.n	8007724 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076e0:	893b      	ldrh	r3, [r7, #8]
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	6a39      	ldr	r1, [r7, #32]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f9dc 	bl	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b04      	cmp	r3, #4
 8007704:	d107      	bne.n	8007716 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e005      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800771a:	893b      	ldrh	r3, [r7, #8]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	00010002 	.word	0x00010002

08007734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	461a      	mov	r2, r3
 8007742:	4603      	mov	r3, r0
 8007744:	817b      	strh	r3, [r7, #10]
 8007746:	460b      	mov	r3, r1
 8007748:	813b      	strh	r3, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800775c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800776c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	2200      	movs	r2, #0
 8007776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f8c2 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00d      	beq.n	80077a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007794:	d103      	bne.n	800779e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800779c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e0aa      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077a2:	897b      	ldrh	r3, [r7, #10]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	461a      	mov	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	6a3a      	ldr	r2, [r7, #32]
 80077b6:	4952      	ldr	r1, [pc, #328]	; (8007900 <I2C_RequestMemoryRead+0x1cc>)
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f8fa 	bl	80079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e097      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e0:	6a39      	ldr	r1, [r7, #32]
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f964 	bl	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00d      	beq.n	800780a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d107      	bne.n	8007806 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e076      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d105      	bne.n	800781c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007810:	893b      	ldrh	r3, [r7, #8]
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	611a      	str	r2, [r3, #16]
 800781a:	e021      	b.n	8007860 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800781c:	893b      	ldrh	r3, [r7, #8]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	b29b      	uxth	r3, r3
 8007822:	b2da      	uxtb	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800782a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782c:	6a39      	ldr	r1, [r7, #32]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f93e 	bl	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00d      	beq.n	8007856 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	2b04      	cmp	r3, #4
 8007840:	d107      	bne.n	8007852 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e050      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	6a39      	ldr	r1, [r7, #32]
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f923 	bl	8007ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00d      	beq.n	800788c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	2b04      	cmp	r3, #4
 8007876:	d107      	bne.n	8007888 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007886:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e035      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800789a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f82b 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00d      	beq.n	80078d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c2:	d103      	bne.n	80078cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e013      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078d0:	897b      	ldrh	r3, [r7, #10]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	6a3a      	ldr	r2, [r7, #32]
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <I2C_RequestMemoryRead+0x1cc>)
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f863 	bl	80079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	00010002 	.word	0x00010002

08007904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007914:	e025      	b.n	8007962 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d021      	beq.n	8007962 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fd fecf 	bl	80056c0 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d116      	bne.n	8007962 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	f043 0220 	orr.w	r2, r3, #32
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e023      	b.n	80079aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d10d      	bne.n	8007988 <I2C_WaitOnFlagUntilTimeout+0x84>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	43da      	mvns	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4013      	ands	r3, r2
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	e00c      	b.n	80079a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	43da      	mvns	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4013      	ands	r3, r2
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	bf0c      	ite	eq
 800799a:	2301      	moveq	r3, #1
 800799c:	2300      	movne	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d0b6      	beq.n	8007916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079c0:	e051      	b.n	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d0:	d123      	bne.n	8007a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	f043 0204 	orr.w	r2, r3, #4
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e046      	b.n	8007aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d021      	beq.n	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a22:	f7fd fe4d 	bl	80056c0 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d302      	bcc.n	8007a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d116      	bne.n	8007a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f043 0220 	orr.w	r2, r3, #32
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e020      	b.n	8007aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d10c      	bne.n	8007a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	43da      	mvns	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bf14      	ite	ne
 8007a82:	2301      	movne	r3, #1
 8007a84:	2300      	moveq	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	e00b      	b.n	8007aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	43da      	mvns	r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	4013      	ands	r3, r2
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bf14      	ite	ne
 8007a9c:	2301      	movne	r3, #1
 8007a9e:	2300      	moveq	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d18d      	bne.n	80079c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007abc:	e02d      	b.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f8ce 	bl	8007c60 <I2C_IsAcknowledgeFailed>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e02d      	b.n	8007b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d021      	beq.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad6:	f7fd fdf3 	bl	80056c0 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d116      	bne.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e007      	b.n	8007b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	d1ca      	bne.n	8007abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b3e:	e02d      	b.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f88d 	bl	8007c60 <I2C_IsAcknowledgeFailed>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e02d      	b.n	8007bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b56:	d021      	beq.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b58:	f7fd fdb2 	bl	80056c0 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d302      	bcc.n	8007b6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d116      	bne.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	f043 0220 	orr.w	r2, r3, #32
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e007      	b.n	8007bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d1ca      	bne.n	8007b40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bc0:	e042      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d119      	bne.n	8007c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0210 	mvn.w	r2, #16
 8007bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e029      	b.n	8007c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c04:	f7fd fd5c 	bl	80056c0 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d302      	bcc.n	8007c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d116      	bne.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	f043 0220 	orr.w	r2, r3, #32
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e007      	b.n	8007c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d1b5      	bne.n	8007bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c76:	d11b      	bne.n	8007cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	f043 0204 	orr.w	r2, r3, #4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007cd2:	f023 0304 	bic.w	r3, r3, #4
 8007cd6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8007cde:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8007ce0:	e002      	b.n	8007ce8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8007ce2:	bf40      	sev
    __WFE();
 8007ce4:	bf20      	wfe
    __WFE();
 8007ce6:	bf20      	wfe
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	e000ed00 	.word	0xe000ed00

08007cf8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	4a04      	ldr	r2, [pc, #16]	; (8007d14 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8007d02:	f043 0302 	orr.w	r3, r3, #2
 8007d06:	6113      	str	r3, [r2, #16]
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	e000ed00 	.word	0xe000ed00

08007d18 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007d1c:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	4a04      	ldr	r2, [pc, #16]	; (8007d34 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8007d22:	f023 0302 	bic.w	r3, r3, #2
 8007d26:	6113      	str	r3, [r2, #16]
}
 8007d28:	bf00      	nop
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	e000ed00 	.word	0xe000ed00

08007d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e267      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d075      	beq.n	8007e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d56:	4b88      	ldr	r3, [pc, #544]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f003 030c 	and.w	r3, r3, #12
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d00c      	beq.n	8007d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d62:	4b85      	ldr	r3, [pc, #532]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d112      	bne.n	8007d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d6e:	4b82      	ldr	r3, [pc, #520]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d7a:	d10b      	bne.n	8007d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d7c:	4b7e      	ldr	r3, [pc, #504]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d05b      	beq.n	8007e40 <HAL_RCC_OscConfig+0x108>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d157      	bne.n	8007e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e242      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9c:	d106      	bne.n	8007dac <HAL_RCC_OscConfig+0x74>
 8007d9e:	4b76      	ldr	r3, [pc, #472]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a75      	ldr	r2, [pc, #468]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	e01d      	b.n	8007de8 <HAL_RCC_OscConfig+0xb0>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007db4:	d10c      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x98>
 8007db6:	4b70      	ldr	r3, [pc, #448]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a6f      	ldr	r2, [pc, #444]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	4b6d      	ldr	r3, [pc, #436]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a6c      	ldr	r2, [pc, #432]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	e00b      	b.n	8007de8 <HAL_RCC_OscConfig+0xb0>
 8007dd0:	4b69      	ldr	r3, [pc, #420]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a68      	ldr	r2, [pc, #416]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	4b66      	ldr	r3, [pc, #408]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a65      	ldr	r2, [pc, #404]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d013      	beq.n	8007e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df0:	f7fd fc66 	bl	80056c0 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007df8:	f7fd fc62 	bl	80056c0 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b64      	cmp	r3, #100	; 0x64
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e207      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e0a:	4b5b      	ldr	r3, [pc, #364]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0f0      	beq.n	8007df8 <HAL_RCC_OscConfig+0xc0>
 8007e16:	e014      	b.n	8007e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e18:	f7fd fc52 	bl	80056c0 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e20:	f7fd fc4e 	bl	80056c0 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b64      	cmp	r3, #100	; 0x64
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e1f3      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e32:	4b51      	ldr	r3, [pc, #324]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <HAL_RCC_OscConfig+0xe8>
 8007e3e:	e000      	b.n	8007e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d063      	beq.n	8007f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e4e:	4b4a      	ldr	r3, [pc, #296]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 030c 	and.w	r3, r3, #12
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e5a:	4b47      	ldr	r3, [pc, #284]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d11c      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e66:	4b44      	ldr	r3, [pc, #272]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d116      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e72:	4b41      	ldr	r3, [pc, #260]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_RCC_OscConfig+0x152>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d001      	beq.n	8007e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e1c7      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8a:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	4937      	ldr	r1, [pc, #220]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9e:	e03a      	b.n	8007f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d020      	beq.n	8007eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ea8:	4b34      	ldr	r3, [pc, #208]	; (8007f7c <HAL_RCC_OscConfig+0x244>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eae:	f7fd fc07 	bl	80056c0 <HAL_GetTick>
 8007eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb4:	e008      	b.n	8007ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eb6:	f7fd fc03 	bl	80056c0 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e1a8      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ec8:	4b2b      	ldr	r3, [pc, #172]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0f0      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed4:	4b28      	ldr	r3, [pc, #160]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	4925      	ldr	r1, [pc, #148]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	600b      	str	r3, [r1, #0]
 8007ee8:	e015      	b.n	8007f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eea:	4b24      	ldr	r3, [pc, #144]	; (8007f7c <HAL_RCC_OscConfig+0x244>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef0:	f7fd fbe6 	bl	80056c0 <HAL_GetTick>
 8007ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ef6:	e008      	b.n	8007f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ef8:	f7fd fbe2 	bl	80056c0 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e187      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1f0      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d036      	beq.n	8007f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d016      	beq.n	8007f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f2a:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <HAL_RCC_OscConfig+0x248>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f30:	f7fd fbc6 	bl	80056c0 <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f38:	f7fd fbc2 	bl	80056c0 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e167      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <HAL_RCC_OscConfig+0x240>)
 8007f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0f0      	beq.n	8007f38 <HAL_RCC_OscConfig+0x200>
 8007f56:	e01b      	b.n	8007f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f58:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <HAL_RCC_OscConfig+0x248>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f5e:	f7fd fbaf 	bl	80056c0 <HAL_GetTick>
 8007f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f64:	e00e      	b.n	8007f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f66:	f7fd fbab 	bl	80056c0 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d907      	bls.n	8007f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e150      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	42470000 	.word	0x42470000
 8007f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f84:	4b88      	ldr	r3, [pc, #544]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8007f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ea      	bne.n	8007f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 8097 	beq.w	80080cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fa2:	4b81      	ldr	r3, [pc, #516]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10f      	bne.n	8007fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60bb      	str	r3, [r7, #8]
 8007fb2:	4b7d      	ldr	r3, [pc, #500]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	4a7c      	ldr	r2, [pc, #496]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8007fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8007fbe:	4b7a      	ldr	r3, [pc, #488]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc6:	60bb      	str	r3, [r7, #8]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fce:	4b77      	ldr	r3, [pc, #476]	; (80081ac <HAL_RCC_OscConfig+0x474>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d118      	bne.n	800800c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fda:	4b74      	ldr	r3, [pc, #464]	; (80081ac <HAL_RCC_OscConfig+0x474>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a73      	ldr	r2, [pc, #460]	; (80081ac <HAL_RCC_OscConfig+0x474>)
 8007fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fe6:	f7fd fb6b 	bl	80056c0 <HAL_GetTick>
 8007fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fee:	f7fd fb67 	bl	80056c0 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e10c      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008000:	4b6a      	ldr	r3, [pc, #424]	; (80081ac <HAL_RCC_OscConfig+0x474>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0f0      	beq.n	8007fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d106      	bne.n	8008022 <HAL_RCC_OscConfig+0x2ea>
 8008014:	4b64      	ldr	r3, [pc, #400]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008018:	4a63      	ldr	r2, [pc, #396]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 800801a:	f043 0301 	orr.w	r3, r3, #1
 800801e:	6713      	str	r3, [r2, #112]	; 0x70
 8008020:	e01c      	b.n	800805c <HAL_RCC_OscConfig+0x324>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b05      	cmp	r3, #5
 8008028:	d10c      	bne.n	8008044 <HAL_RCC_OscConfig+0x30c>
 800802a:	4b5f      	ldr	r3, [pc, #380]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 800802c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802e:	4a5e      	ldr	r2, [pc, #376]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008030:	f043 0304 	orr.w	r3, r3, #4
 8008034:	6713      	str	r3, [r2, #112]	; 0x70
 8008036:	4b5c      	ldr	r3, [pc, #368]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	4a5b      	ldr	r2, [pc, #364]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6713      	str	r3, [r2, #112]	; 0x70
 8008042:	e00b      	b.n	800805c <HAL_RCC_OscConfig+0x324>
 8008044:	4b58      	ldr	r3, [pc, #352]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008048:	4a57      	ldr	r2, [pc, #348]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	6713      	str	r3, [r2, #112]	; 0x70
 8008050:	4b55      	ldr	r3, [pc, #340]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	4a54      	ldr	r2, [pc, #336]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008056:	f023 0304 	bic.w	r3, r3, #4
 800805a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d015      	beq.n	8008090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008064:	f7fd fb2c 	bl	80056c0 <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800806a:	e00a      	b.n	8008082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800806c:	f7fd fb28 	bl	80056c0 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	f241 3288 	movw	r2, #5000	; 0x1388
 800807a:	4293      	cmp	r3, r2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e0cb      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008082:	4b49      	ldr	r3, [pc, #292]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0ee      	beq.n	800806c <HAL_RCC_OscConfig+0x334>
 800808e:	e014      	b.n	80080ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008090:	f7fd fb16 	bl	80056c0 <HAL_GetTick>
 8008094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008096:	e00a      	b.n	80080ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008098:	f7fd fb12 	bl	80056c0 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e0b5      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080ae:	4b3e      	ldr	r3, [pc, #248]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1ee      	bne.n	8008098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d105      	bne.n	80080cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080c0:	4b39      	ldr	r3, [pc, #228]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	4a38      	ldr	r2, [pc, #224]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 80080c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80a1 	beq.w	8008218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080d6:	4b34      	ldr	r3, [pc, #208]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 030c 	and.w	r3, r3, #12
 80080de:	2b08      	cmp	r3, #8
 80080e0:	d05c      	beq.n	800819c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d141      	bne.n	800816e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ea:	4b31      	ldr	r3, [pc, #196]	; (80081b0 <HAL_RCC_OscConfig+0x478>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f0:	f7fd fae6 	bl	80056c0 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f8:	f7fd fae2 	bl	80056c0 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e087      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800810a:	4b27      	ldr	r3, [pc, #156]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f0      	bne.n	80080f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	69da      	ldr	r2, [r3, #28]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	019b      	lsls	r3, r3, #6
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	3b01      	subs	r3, #1
 8008130:	041b      	lsls	r3, r3, #16
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	061b      	lsls	r3, r3, #24
 800813a:	491b      	ldr	r1, [pc, #108]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 800813c:	4313      	orrs	r3, r2
 800813e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008140:	4b1b      	ldr	r3, [pc, #108]	; (80081b0 <HAL_RCC_OscConfig+0x478>)
 8008142:	2201      	movs	r2, #1
 8008144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008146:	f7fd fabb 	bl	80056c0 <HAL_GetTick>
 800814a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800814c:	e008      	b.n	8008160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800814e:	f7fd fab7 	bl	80056c0 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d901      	bls.n	8008160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e05c      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008160:	4b11      	ldr	r3, [pc, #68]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0f0      	beq.n	800814e <HAL_RCC_OscConfig+0x416>
 800816c:	e054      	b.n	8008218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <HAL_RCC_OscConfig+0x478>)
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008174:	f7fd faa4 	bl	80056c0 <HAL_GetTick>
 8008178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800817a:	e008      	b.n	800818e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800817c:	f7fd faa0 	bl	80056c0 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d901      	bls.n	800818e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e045      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <HAL_RCC_OscConfig+0x470>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f0      	bne.n	800817c <HAL_RCC_OscConfig+0x444>
 800819a:	e03d      	b.n	8008218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d107      	bne.n	80081b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e038      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
 80081a8:	40023800 	.word	0x40023800
 80081ac:	40007000 	.word	0x40007000
 80081b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081b4:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <HAL_RCC_OscConfig+0x4ec>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d028      	beq.n	8008214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d121      	bne.n	8008214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081da:	429a      	cmp	r2, r3
 80081dc:	d11a      	bne.n	8008214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081e4:	4013      	ands	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d111      	bne.n	8008214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	3b01      	subs	r3, #1
 80081fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008200:	429a      	cmp	r2, r3
 8008202:	d107      	bne.n	8008214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008210:	429a      	cmp	r2, r3
 8008212:	d001      	beq.n	8008218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e000      	b.n	800821a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	40023800 	.word	0x40023800

08008228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e0cc      	b.n	80083d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800823c:	4b68      	ldr	r3, [pc, #416]	; (80083e0 <HAL_RCC_ClockConfig+0x1b8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d90c      	bls.n	8008264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800824a:	4b65      	ldr	r3, [pc, #404]	; (80083e0 <HAL_RCC_ClockConfig+0x1b8>)
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008252:	4b63      	ldr	r3, [pc, #396]	; (80083e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d001      	beq.n	8008264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e0b8      	b.n	80083d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d020      	beq.n	80082b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800827c:	4b59      	ldr	r3, [pc, #356]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	4a58      	ldr	r2, [pc, #352]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008294:	4b53      	ldr	r3, [pc, #332]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4a52      	ldr	r2, [pc, #328]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 800829a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800829e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082a0:	4b50      	ldr	r3, [pc, #320]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	494d      	ldr	r1, [pc, #308]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d044      	beq.n	8008348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d107      	bne.n	80082d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082c6:	4b47      	ldr	r3, [pc, #284]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d119      	bne.n	8008306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e07f      	b.n	80083d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d003      	beq.n	80082e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d107      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e6:	4b3f      	ldr	r3, [pc, #252]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e06f      	b.n	80083d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082f6:	4b3b      	ldr	r3, [pc, #236]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e067      	b.n	80083d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008306:	4b37      	ldr	r3, [pc, #220]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f023 0203 	bic.w	r2, r3, #3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	4934      	ldr	r1, [pc, #208]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008314:	4313      	orrs	r3, r2
 8008316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008318:	f7fd f9d2 	bl	80056c0 <HAL_GetTick>
 800831c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800831e:	e00a      	b.n	8008336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008320:	f7fd f9ce 	bl	80056c0 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	f241 3288 	movw	r2, #5000	; 0x1388
 800832e:	4293      	cmp	r3, r2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e04f      	b.n	80083d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008336:	4b2b      	ldr	r3, [pc, #172]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 020c 	and.w	r2, r3, #12
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	429a      	cmp	r2, r3
 8008346:	d1eb      	bne.n	8008320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008348:	4b25      	ldr	r3, [pc, #148]	; (80083e0 <HAL_RCC_ClockConfig+0x1b8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d20c      	bcs.n	8008370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008356:	4b22      	ldr	r3, [pc, #136]	; (80083e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	b2d2      	uxtb	r2, r2
 800835c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800835e:	4b20      	ldr	r3, [pc, #128]	; (80083e0 <HAL_RCC_ClockConfig+0x1b8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d001      	beq.n	8008370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e032      	b.n	80083d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d008      	beq.n	800838e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800837c:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	4916      	ldr	r1, [pc, #88]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 800838a:	4313      	orrs	r3, r2
 800838c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	490e      	ldr	r1, [pc, #56]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083ae:	f000 f821 	bl	80083f4 <HAL_RCC_GetSysClockFreq>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <HAL_RCC_ClockConfig+0x1bc>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	091b      	lsrs	r3, r3, #4
 80083ba:	f003 030f 	and.w	r3, r3, #15
 80083be:	490a      	ldr	r1, [pc, #40]	; (80083e8 <HAL_RCC_ClockConfig+0x1c0>)
 80083c0:	5ccb      	ldrb	r3, [r1, r3]
 80083c2:	fa22 f303 	lsr.w	r3, r2, r3
 80083c6:	4a09      	ldr	r2, [pc, #36]	; (80083ec <HAL_RCC_ClockConfig+0x1c4>)
 80083c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fd f932 	bl	8005638 <HAL_InitTick>

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	40023c00 	.word	0x40023c00
 80083e4:	40023800 	.word	0x40023800
 80083e8:	080111f8 	.word	0x080111f8
 80083ec:	20000224 	.word	0x20000224
 80083f0:	200002bc 	.word	0x200002bc

080083f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083f8:	b090      	sub	sp, #64	; 0x40
 80083fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008400:	2300      	movs	r3, #0
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008404:	2300      	movs	r3, #0
 8008406:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800840c:	4b59      	ldr	r3, [pc, #356]	; (8008574 <HAL_RCC_GetSysClockFreq+0x180>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f003 030c 	and.w	r3, r3, #12
 8008414:	2b08      	cmp	r3, #8
 8008416:	d00d      	beq.n	8008434 <HAL_RCC_GetSysClockFreq+0x40>
 8008418:	2b08      	cmp	r3, #8
 800841a:	f200 80a1 	bhi.w	8008560 <HAL_RCC_GetSysClockFreq+0x16c>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <HAL_RCC_GetSysClockFreq+0x34>
 8008422:	2b04      	cmp	r3, #4
 8008424:	d003      	beq.n	800842e <HAL_RCC_GetSysClockFreq+0x3a>
 8008426:	e09b      	b.n	8008560 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008428:	4b53      	ldr	r3, [pc, #332]	; (8008578 <HAL_RCC_GetSysClockFreq+0x184>)
 800842a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800842c:	e09b      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800842e:	4b53      	ldr	r3, [pc, #332]	; (800857c <HAL_RCC_GetSysClockFreq+0x188>)
 8008430:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008432:	e098      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008434:	4b4f      	ldr	r3, [pc, #316]	; (8008574 <HAL_RCC_GetSysClockFreq+0x180>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800843c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800843e:	4b4d      	ldr	r3, [pc, #308]	; (8008574 <HAL_RCC_GetSysClockFreq+0x180>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d028      	beq.n	800849c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800844a:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <HAL_RCC_GetSysClockFreq+0x180>)
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	099b      	lsrs	r3, r3, #6
 8008450:	2200      	movs	r2, #0
 8008452:	623b      	str	r3, [r7, #32]
 8008454:	627a      	str	r2, [r7, #36]	; 0x24
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800845c:	2100      	movs	r1, #0
 800845e:	4b47      	ldr	r3, [pc, #284]	; (800857c <HAL_RCC_GetSysClockFreq+0x188>)
 8008460:	fb03 f201 	mul.w	r2, r3, r1
 8008464:	2300      	movs	r3, #0
 8008466:	fb00 f303 	mul.w	r3, r0, r3
 800846a:	4413      	add	r3, r2
 800846c:	4a43      	ldr	r2, [pc, #268]	; (800857c <HAL_RCC_GetSysClockFreq+0x188>)
 800846e:	fba0 1202 	umull	r1, r2, r0, r2
 8008472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008474:	460a      	mov	r2, r1
 8008476:	62ba      	str	r2, [r7, #40]	; 0x28
 8008478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800847a:	4413      	add	r3, r2
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	2200      	movs	r2, #0
 8008482:	61bb      	str	r3, [r7, #24]
 8008484:	61fa      	str	r2, [r7, #28]
 8008486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800848a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800848e:	f7f8 fc13 	bl	8000cb8 <__aeabi_uldivmod>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4613      	mov	r3, r2
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800849a:	e053      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800849c:	4b35      	ldr	r3, [pc, #212]	; (8008574 <HAL_RCC_GetSysClockFreq+0x180>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	099b      	lsrs	r3, r3, #6
 80084a2:	2200      	movs	r2, #0
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	617a      	str	r2, [r7, #20]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80084ae:	f04f 0b00 	mov.w	fp, #0
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	f04f 0000 	mov.w	r0, #0
 80084ba:	f04f 0100 	mov.w	r1, #0
 80084be:	0159      	lsls	r1, r3, #5
 80084c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084c4:	0150      	lsls	r0, r2, #5
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	ebb2 080a 	subs.w	r8, r2, sl
 80084ce:	eb63 090b 	sbc.w	r9, r3, fp
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80084de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80084e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80084e6:	ebb2 0408 	subs.w	r4, r2, r8
 80084ea:	eb63 0509 	sbc.w	r5, r3, r9
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	f04f 0300 	mov.w	r3, #0
 80084f6:	00eb      	lsls	r3, r5, #3
 80084f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084fc:	00e2      	lsls	r2, r4, #3
 80084fe:	4614      	mov	r4, r2
 8008500:	461d      	mov	r5, r3
 8008502:	eb14 030a 	adds.w	r3, r4, sl
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	eb45 030b 	adc.w	r3, r5, fp
 800850c:	607b      	str	r3, [r7, #4]
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800851a:	4629      	mov	r1, r5
 800851c:	028b      	lsls	r3, r1, #10
 800851e:	4621      	mov	r1, r4
 8008520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008524:	4621      	mov	r1, r4
 8008526:	028a      	lsls	r2, r1, #10
 8008528:	4610      	mov	r0, r2
 800852a:	4619      	mov	r1, r3
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	2200      	movs	r2, #0
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	60fa      	str	r2, [r7, #12]
 8008534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008538:	f7f8 fbbe 	bl	8000cb8 <__aeabi_uldivmod>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4613      	mov	r3, r2
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_RCC_GetSysClockFreq+0x180>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	3301      	adds	r3, #1
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800855e:	e002      	b.n	8008566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008560:	4b05      	ldr	r3, [pc, #20]	; (8008578 <HAL_RCC_GetSysClockFreq+0x184>)
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008568:	4618      	mov	r0, r3
 800856a:	3740      	adds	r7, #64	; 0x40
 800856c:	46bd      	mov	sp, r7
 800856e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800
 8008578:	00f42400 	.word	0x00f42400
 800857c:	017d7840 	.word	0x017d7840

08008580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008584:	4b03      	ldr	r3, [pc, #12]	; (8008594 <HAL_RCC_GetHCLKFreq+0x14>)
 8008586:	681b      	ldr	r3, [r3, #0]
}
 8008588:	4618      	mov	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000224 	.word	0x20000224

08008598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800859c:	f7ff fff0 	bl	8008580 <HAL_RCC_GetHCLKFreq>
 80085a0:	4602      	mov	r2, r0
 80085a2:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	0a9b      	lsrs	r3, r3, #10
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	4903      	ldr	r1, [pc, #12]	; (80085bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80085ae:	5ccb      	ldrb	r3, [r1, r3]
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40023800 	.word	0x40023800
 80085bc:	08011208 	.word	0x08011208

080085c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085c4:	f7ff ffdc 	bl	8008580 <HAL_RCC_GetHCLKFreq>
 80085c8:	4602      	mov	r2, r0
 80085ca:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	0b5b      	lsrs	r3, r3, #13
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	4903      	ldr	r1, [pc, #12]	; (80085e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d6:	5ccb      	ldrb	r3, [r1, r3]
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085dc:	4618      	mov	r0, r3
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40023800 	.word	0x40023800
 80085e4:	08011208 	.word	0x08011208

080085e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800860c:	2b00      	cmp	r3, #0
 800860e:	d038      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008610:	4b68      	ldr	r3, [pc, #416]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008616:	f7fd f853 	bl	80056c0 <HAL_GetTick>
 800861a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800861c:	e008      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800861e:	f7fd f84f 	bl	80056c0 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e0bd      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008630:	4b61      	ldr	r3, [pc, #388]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	019b      	lsls	r3, r3, #6
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	071b      	lsls	r3, r3, #28
 800864e:	495a      	ldr	r1, [pc, #360]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008650:	4313      	orrs	r3, r2
 8008652:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008656:	4b57      	ldr	r3, [pc, #348]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008658:	2201      	movs	r2, #1
 800865a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800865c:	f7fd f830 	bl	80056c0 <HAL_GetTick>
 8008660:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008662:	e008      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008664:	f7fd f82c 	bl	80056c0 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d901      	bls.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e09a      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008676:	4b50      	ldr	r3, [pc, #320]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f0      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8083 	beq.w	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	4b48      	ldr	r3, [pc, #288]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008698:	4a47      	ldr	r2, [pc, #284]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800869a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800869e:	6413      	str	r3, [r2, #64]	; 0x40
 80086a0:	4b45      	ldr	r3, [pc, #276]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086ac:	4b43      	ldr	r3, [pc, #268]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a42      	ldr	r2, [pc, #264]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086b8:	f7fd f802 	bl	80056c0 <HAL_GetTick>
 80086bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086be:	e008      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80086c0:	f7fc fffe 	bl	80056c0 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d901      	bls.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e06c      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086d2:	4b3a      	ldr	r3, [pc, #232]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f0      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086de:	4b36      	ldr	r3, [pc, #216]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02f      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d028      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086fc:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008704:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008706:	4b2e      	ldr	r3, [pc, #184]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008708:	2201      	movs	r2, #1
 800870a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800870c:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008712:	4a29      	ldr	r2, [pc, #164]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008718:	4b27      	ldr	r3, [pc, #156]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800871a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d114      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008724:	f7fc ffcc 	bl	80056c0 <HAL_GetTick>
 8008728:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872a:	e00a      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800872c:	f7fc ffc8 	bl	80056c0 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	f241 3288 	movw	r2, #5000	; 0x1388
 800873a:	4293      	cmp	r3, r2
 800873c:	d901      	bls.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e034      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008742:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0ee      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875a:	d10d      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800875c:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800876c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008770:	4911      	ldr	r1, [pc, #68]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008772:	4313      	orrs	r3, r2
 8008774:	608b      	str	r3, [r1, #8]
 8008776:	e005      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008778:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	4a0e      	ldr	r2, [pc, #56]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800877e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008782:	6093      	str	r3, [r2, #8]
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008790:	4909      	ldr	r1, [pc, #36]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008792:	4313      	orrs	r3, r2
 8008794:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7d1a      	ldrb	r2, [r3, #20]
 80087a6:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80087a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	42470068 	.word	0x42470068
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40007000 	.word	0x40007000
 80087c0:	42470e40 	.word	0x42470e40
 80087c4:	424711e0 	.word	0x424711e0

080087c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e066      	b.n	80088ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7f5b      	ldrb	r3, [r3, #29]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d105      	bne.n	80087f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fb fcb6 	bl	8004160 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	22ca      	movs	r2, #202	; 0xca
 8008800:	625a      	str	r2, [r3, #36]	; 0x24
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2253      	movs	r2, #83	; 0x53
 8008808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa45 	bl	8008c9a <RTC_EnterInitMode>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d12c      	bne.n	8008874 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6899      	ldr	r1, [r3, #8]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	68d2      	ldr	r2, [r2, #12]
 8008854:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6919      	ldr	r1, [r3, #16]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	041a      	lsls	r2, r3, #16
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa4c 	bl	8008d08 <RTC_ExitInitMode>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d113      	bne.n	80088a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008888:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699a      	ldr	r2, [r3, #24]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	22ff      	movs	r2, #255	; 0xff
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	7f1b      	ldrb	r3, [r3, #28]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d101      	bne.n	80088d0 <HAL_RTC_SetTime+0x1c>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e087      	b.n	80089e0 <HAL_RTC_SetTime+0x12c>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2202      	movs	r2, #2
 80088da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d126      	bne.n	8008930 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fa29 	bl	8008d52 <RTC_ByteToBcd2>
 8008900:	4603      	mov	r3, r0
 8008902:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	785b      	ldrb	r3, [r3, #1]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fa22 	bl	8008d52 <RTC_ByteToBcd2>
 800890e:	4603      	mov	r3, r0
 8008910:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008912:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	789b      	ldrb	r3, [r3, #2]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fa1a 	bl	8008d52 <RTC_ByteToBcd2>
 800891e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008920:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	78db      	ldrb	r3, [r3, #3]
 8008928:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	e018      	b.n	8008962 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d102      	bne.n	8008944 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008950:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008956:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	78db      	ldrb	r3, [r3, #3]
 800895c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	22ca      	movs	r2, #202	; 0xca
 8008968:	625a      	str	r2, [r3, #36]	; 0x24
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2253      	movs	r2, #83	; 0x53
 8008970:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f991 	bl	8008c9a <RTC_EnterInitMode>
 8008978:	4603      	mov	r3, r0
 800897a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800897c:	7cfb      	ldrb	r3, [r7, #19]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d120      	bne.n	80089c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800898c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008990:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6899      	ldr	r1, [r3, #8]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 f9a4 	bl	8008d08 <RTC_ExitInitMode>
 80089c0:	4603      	mov	r3, r0
 80089c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80089c4:	7cfb      	ldrb	r3, [r7, #19]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2201      	movs	r2, #1
 80089ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	771a      	strb	r2, [r3, #28]

  return status;
 80089de:	7cfb      	ldrb	r3, [r7, #19]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	371c      	adds	r7, #28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd90      	pop	{r4, r7, pc}

080089e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	0c1b      	lsrs	r3, r3, #16
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	0d9b      	lsrs	r3, r3, #22
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11a      	bne.n	8008a9a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f98f 	bl	8008d8c <RTC_Bcd2ToByte>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f986 	bl	8008d8c <RTC_Bcd2ToByte>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	789b      	ldrb	r3, [r3, #2]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 f97d 	bl	8008d8c <RTC_Bcd2ToByte>
 8008a92:	4603      	mov	r3, r0
 8008a94:	461a      	mov	r2, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	7f1b      	ldrb	r3, [r3, #28]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_RTC_SetDate+0x1c>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e071      	b.n	8008ba4 <HAL_RTC_SetDate+0x100>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10e      	bne.n	8008af0 <HAL_RTC_SetDate+0x4c>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	f003 0310 	and.w	r3, r3, #16
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d008      	beq.n	8008af0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	785b      	ldrb	r3, [r3, #1]
 8008ae2:	f023 0310 	bic.w	r3, r3, #16
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	330a      	adds	r3, #10
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d11c      	bne.n	8008b30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	78db      	ldrb	r3, [r3, #3]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f929 	bl	8008d52 <RTC_ByteToBcd2>
 8008b00:	4603      	mov	r3, r0
 8008b02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 f922 	bl	8008d52 <RTC_ByteToBcd2>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	789b      	ldrb	r3, [r3, #2]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f91a 	bl	8008d52 <RTC_ByteToBcd2>
 8008b1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008b20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	e00e      	b.n	8008b4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	78db      	ldrb	r3, [r3, #3]
 8008b34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	22ca      	movs	r2, #202	; 0xca
 8008b54:	625a      	str	r2, [r3, #36]	; 0x24
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2253      	movs	r2, #83	; 0x53
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 f89b 	bl	8008c9a <RTC_EnterInitMode>
 8008b64:	4603      	mov	r3, r0
 8008b66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b68:	7cfb      	ldrb	r3, [r7, #19]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10c      	bne.n	8008b88 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f8c2 	bl	8008d08 <RTC_ExitInitMode>
 8008b84:	4603      	mov	r3, r0
 8008b86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b88:	7cfb      	ldrb	r3, [r7, #19]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	22ff      	movs	r2, #255	; 0xff
 8008b9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	771a      	strb	r2, [r3, #28]

  return status;
 8008ba2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd90      	pop	{r4, r7, pc}

08008bac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008bca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	0c1b      	lsrs	r3, r3, #16
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 031f 	and.w	r3, r3, #31
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	0b5b      	lsrs	r3, r3, #13
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11a      	bne.n	8008c40 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	78db      	ldrb	r3, [r3, #3]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f8bc 	bl	8008d8c <RTC_Bcd2ToByte>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 f8b3 	bl	8008d8c <RTC_Bcd2ToByte>
 8008c26:	4603      	mov	r3, r0
 8008c28:	461a      	mov	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	789b      	ldrb	r3, [r3, #2]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f8aa 	bl	8008d8c <RTC_Bcd2ToByte>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3718      	adds	r7, #24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c64:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c66:	f7fc fd2b 	bl	80056c0 <HAL_GetTick>
 8008c6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c6c:	e009      	b.n	8008c82 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c6e:	f7fc fd27 	bl	80056c0 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c7c:	d901      	bls.n	8008c82 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e007      	b.n	8008c92 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0ee      	beq.n	8008c6e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d122      	bne.n	8008cfe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cc8:	f7fc fcfa 	bl	80056c0 <HAL_GetTick>
 8008ccc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008cce:	e00c      	b.n	8008cea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cd0:	f7fc fcf6 	bl	80056c0 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cde:	d904      	bls.n	8008cea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <RTC_EnterInitMode+0x64>
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d1e8      	bne.n	8008cd0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68da      	ldr	r2, [r3, #12]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d22:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff ff89 	bl	8008c4a <HAL_RTC_WaitForSynchro>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d004      	beq.n	8008d48 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2204      	movs	r2, #4
 8008d42:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	4603      	mov	r3, r0
 8008d5a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008d60:	e005      	b.n	8008d6e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	3301      	adds	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	3b0a      	subs	r3, #10
 8008d6c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	2b09      	cmp	r3, #9
 8008d72:	d8f6      	bhi.n	8008d62 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	b2db      	uxtb	r3, r3
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	091b      	lsrs	r3, r3, #4
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	0092      	lsls	r2, r2, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4413      	add	r3, r2
 8008db6:	b2db      	uxtb	r3, r3
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e07b      	b.n	8008ece <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d108      	bne.n	8008df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de6:	d009      	beq.n	8008dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	61da      	str	r2, [r3, #28]
 8008dee:	e005      	b.n	8008dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7fb fa04 	bl	8004224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e44:	431a      	orrs	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e80:	ea42 0103 	orr.w	r1, r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	0c1b      	lsrs	r3, r3, #16
 8008e9a:	f003 0104 	and.w	r1, r3, #4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	f003 0210 	and.w	r2, r3, #16
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69da      	ldr	r2, [r3, #28]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e041      	b.n	8008f6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d106      	bne.n	8008f02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fb fc07 	bl	8004710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2202      	movs	r2, #2
 8008f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4619      	mov	r1, r3
 8008f14:	4610      	mov	r0, r2
 8008f16:	f000 fee9 	bl	8009cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d001      	beq.n	8008f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e044      	b.n	8009016 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68da      	ldr	r2, [r3, #12]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0201 	orr.w	r2, r2, #1
 8008fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1e      	ldr	r2, [pc, #120]	; (8009024 <HAL_TIM_Base_Start_IT+0xb0>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d018      	beq.n	8008fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb6:	d013      	beq.n	8008fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1a      	ldr	r2, [pc, #104]	; (8009028 <HAL_TIM_Base_Start_IT+0xb4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d00e      	beq.n	8008fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a19      	ldr	r2, [pc, #100]	; (800902c <HAL_TIM_Base_Start_IT+0xb8>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d009      	beq.n	8008fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a17      	ldr	r2, [pc, #92]	; (8009030 <HAL_TIM_Base_Start_IT+0xbc>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d004      	beq.n	8008fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a16      	ldr	r2, [pc, #88]	; (8009034 <HAL_TIM_Base_Start_IT+0xc0>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d111      	bne.n	8009004 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b06      	cmp	r3, #6
 8008ff0:	d010      	beq.n	8009014 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0201 	orr.w	r2, r2, #1
 8009000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009002:	e007      	b.n	8009014 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0201 	orr.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40010000 	.word	0x40010000
 8009028:	40000400 	.word	0x40000400
 800902c:	40000800 	.word	0x40000800
 8009030:	40000c00 	.word	0x40000c00
 8009034:	40014000 	.word	0x40014000

08009038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e041      	b.n	80090ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f839 	bl	80090d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3304      	adds	r3, #4
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f000 fe38 	bl	8009cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b02      	cmp	r3, #2
 800910e:	bf0c      	ite	eq
 8009110:	2301      	moveq	r3, #1
 8009112:	2300      	movne	r3, #0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	e022      	b.n	800915e <HAL_TIM_PWM_Start_DMA+0x72>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b04      	cmp	r3, #4
 800911c:	d109      	bne.n	8009132 <HAL_TIM_PWM_Start_DMA+0x46>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	bf0c      	ite	eq
 800912a:	2301      	moveq	r3, #1
 800912c:	2300      	movne	r3, #0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	e015      	b.n	800915e <HAL_TIM_PWM_Start_DMA+0x72>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b08      	cmp	r3, #8
 8009136:	d109      	bne.n	800914c <HAL_TIM_PWM_Start_DMA+0x60>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	bf0c      	ite	eq
 8009144:	2301      	moveq	r3, #1
 8009146:	2300      	movne	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	e008      	b.n	800915e <HAL_TIM_PWM_Start_DMA+0x72>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b02      	cmp	r3, #2
 8009156:	bf0c      	ite	eq
 8009158:	2301      	moveq	r3, #1
 800915a:	2300      	movne	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009162:	2302      	movs	r3, #2
 8009164:	e15d      	b.n	8009422 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d109      	bne.n	8009180 <HAL_TIM_PWM_Start_DMA+0x94>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b01      	cmp	r3, #1
 8009176:	bf0c      	ite	eq
 8009178:	2301      	moveq	r3, #1
 800917a:	2300      	movne	r3, #0
 800917c:	b2db      	uxtb	r3, r3
 800917e:	e022      	b.n	80091c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b04      	cmp	r3, #4
 8009184:	d109      	bne.n	800919a <HAL_TIM_PWM_Start_DMA+0xae>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b01      	cmp	r3, #1
 8009190:	bf0c      	ite	eq
 8009192:	2301      	moveq	r3, #1
 8009194:	2300      	movne	r3, #0
 8009196:	b2db      	uxtb	r3, r3
 8009198:	e015      	b.n	80091c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b08      	cmp	r3, #8
 800919e:	d109      	bne.n	80091b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	e008      	b.n	80091c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b01      	cmp	r3, #1
 80091be:	bf0c      	ite	eq
 80091c0:	2301      	moveq	r3, #1
 80091c2:	2300      	movne	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d024      	beq.n	8009214 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d104      	bne.n	80091da <HAL_TIM_PWM_Start_DMA+0xee>
 80091d0:	887b      	ldrh	r3, [r7, #2]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e123      	b.n	8009422 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d104      	bne.n	80091ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2202      	movs	r2, #2
 80091e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091e8:	e016      	b.n	8009218 <HAL_TIM_PWM_Start_DMA+0x12c>
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d104      	bne.n	80091fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091f8:	e00e      	b.n	8009218 <HAL_TIM_PWM_Start_DMA+0x12c>
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d104      	bne.n	800920a <HAL_TIM_PWM_Start_DMA+0x11e>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009208:	e006      	b.n	8009218 <HAL_TIM_PWM_Start_DMA+0x12c>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2202      	movs	r2, #2
 800920e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009212:	e001      	b.n	8009218 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e104      	b.n	8009422 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b0c      	cmp	r3, #12
 800921c:	f200 80ae 	bhi.w	800937c <HAL_TIM_PWM_Start_DMA+0x290>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	0800925d 	.word	0x0800925d
 800922c:	0800937d 	.word	0x0800937d
 8009230:	0800937d 	.word	0x0800937d
 8009234:	0800937d 	.word	0x0800937d
 8009238:	080092a5 	.word	0x080092a5
 800923c:	0800937d 	.word	0x0800937d
 8009240:	0800937d 	.word	0x0800937d
 8009244:	0800937d 	.word	0x0800937d
 8009248:	080092ed 	.word	0x080092ed
 800924c:	0800937d 	.word	0x0800937d
 8009250:	0800937d 	.word	0x0800937d
 8009254:	0800937d 	.word	0x0800937d
 8009258:	08009335 	.word	0x08009335
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	4a72      	ldr	r2, [pc, #456]	; (800942c <HAL_TIM_PWM_Start_DMA+0x340>)
 8009262:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	4a71      	ldr	r2, [pc, #452]	; (8009430 <HAL_TIM_PWM_Start_DMA+0x344>)
 800926a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	4a70      	ldr	r2, [pc, #448]	; (8009434 <HAL_TIM_PWM_Start_DMA+0x348>)
 8009272:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3334      	adds	r3, #52	; 0x34
 8009280:	461a      	mov	r2, r3
 8009282:	887b      	ldrh	r3, [r7, #2]
 8009284:	f7fc fc7a 	bl	8005b7c <HAL_DMA_Start_IT>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e0c7      	b.n	8009422 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092a0:	60da      	str	r2, [r3, #12]
      break;
 80092a2:	e06e      	b.n	8009382 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	4a60      	ldr	r2, [pc, #384]	; (800942c <HAL_TIM_PWM_Start_DMA+0x340>)
 80092aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	4a5f      	ldr	r2, [pc, #380]	; (8009430 <HAL_TIM_PWM_Start_DMA+0x344>)
 80092b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	4a5e      	ldr	r2, [pc, #376]	; (8009434 <HAL_TIM_PWM_Start_DMA+0x348>)
 80092ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3338      	adds	r3, #56	; 0x38
 80092c8:	461a      	mov	r2, r3
 80092ca:	887b      	ldrh	r3, [r7, #2]
 80092cc:	f7fc fc56 	bl	8005b7c <HAL_DMA_Start_IT>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e0a3      	b.n	8009422 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092e8:	60da      	str	r2, [r3, #12]
      break;
 80092ea:	e04a      	b.n	8009382 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a4e      	ldr	r2, [pc, #312]	; (800942c <HAL_TIM_PWM_Start_DMA+0x340>)
 80092f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	4a4d      	ldr	r2, [pc, #308]	; (8009430 <HAL_TIM_PWM_Start_DMA+0x344>)
 80092fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009300:	4a4c      	ldr	r2, [pc, #304]	; (8009434 <HAL_TIM_PWM_Start_DMA+0x348>)
 8009302:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	333c      	adds	r3, #60	; 0x3c
 8009310:	461a      	mov	r2, r3
 8009312:	887b      	ldrh	r3, [r7, #2]
 8009314:	f7fc fc32 	bl	8005b7c <HAL_DMA_Start_IT>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e07f      	b.n	8009422 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009330:	60da      	str	r2, [r3, #12]
      break;
 8009332:	e026      	b.n	8009382 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	4a3c      	ldr	r2, [pc, #240]	; (800942c <HAL_TIM_PWM_Start_DMA+0x340>)
 800933a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	4a3b      	ldr	r2, [pc, #236]	; (8009430 <HAL_TIM_PWM_Start_DMA+0x344>)
 8009342:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	4a3a      	ldr	r2, [pc, #232]	; (8009434 <HAL_TIM_PWM_Start_DMA+0x348>)
 800934a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3340      	adds	r3, #64	; 0x40
 8009358:	461a      	mov	r2, r3
 800935a:	887b      	ldrh	r3, [r7, #2]
 800935c:	f7fc fc0e 	bl	8005b7c <HAL_DMA_Start_IT>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e05b      	b.n	8009422 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68da      	ldr	r2, [r3, #12]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009378:	60da      	str	r2, [r3, #12]
      break;
 800937a:	e002      	b.n	8009382 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	75fb      	strb	r3, [r7, #23]
      break;
 8009380:	bf00      	nop
  }

  if (status == HAL_OK)
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d14b      	bne.n	8009420 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2201      	movs	r2, #1
 800938e:	68b9      	ldr	r1, [r7, #8]
 8009390:	4618      	mov	r0, r3
 8009392:	f000 ff51 	bl	800a238 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a27      	ldr	r2, [pc, #156]	; (8009438 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d107      	bne.n	80093b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a20      	ldr	r2, [pc, #128]	; (8009438 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d018      	beq.n	80093ec <HAL_TIM_PWM_Start_DMA+0x300>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c2:	d013      	beq.n	80093ec <HAL_TIM_PWM_Start_DMA+0x300>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a1c      	ldr	r2, [pc, #112]	; (800943c <HAL_TIM_PWM_Start_DMA+0x350>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00e      	beq.n	80093ec <HAL_TIM_PWM_Start_DMA+0x300>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a1b      	ldr	r2, [pc, #108]	; (8009440 <HAL_TIM_PWM_Start_DMA+0x354>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d009      	beq.n	80093ec <HAL_TIM_PWM_Start_DMA+0x300>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a19      	ldr	r2, [pc, #100]	; (8009444 <HAL_TIM_PWM_Start_DMA+0x358>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d004      	beq.n	80093ec <HAL_TIM_PWM_Start_DMA+0x300>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a18      	ldr	r2, [pc, #96]	; (8009448 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d111      	bne.n	8009410 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2b06      	cmp	r3, #6
 80093fc:	d010      	beq.n	8009420 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0201 	orr.w	r2, r2, #1
 800940c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800940e:	e007      	b.n	8009420 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0201 	orr.w	r2, r2, #1
 800941e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	08009bdd 	.word	0x08009bdd
 8009430:	08009c85 	.word	0x08009c85
 8009434:	08009b4b 	.word	0x08009b4b
 8009438:	40010000 	.word	0x40010000
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800
 8009444:	40000c00 	.word	0x40000c00
 8009448:	40014000 	.word	0x40014000

0800944c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b0c      	cmp	r3, #12
 800945e:	d855      	bhi.n	800950c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8009460:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8009462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009466:	bf00      	nop
 8009468:	0800949d 	.word	0x0800949d
 800946c:	0800950d 	.word	0x0800950d
 8009470:	0800950d 	.word	0x0800950d
 8009474:	0800950d 	.word	0x0800950d
 8009478:	080094b9 	.word	0x080094b9
 800947c:	0800950d 	.word	0x0800950d
 8009480:	0800950d 	.word	0x0800950d
 8009484:	0800950d 	.word	0x0800950d
 8009488:	080094d5 	.word	0x080094d5
 800948c:	0800950d 	.word	0x0800950d
 8009490:	0800950d 	.word	0x0800950d
 8009494:	0800950d 	.word	0x0800950d
 8009498:	080094f1 	.word	0x080094f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68da      	ldr	r2, [r3, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fc fc2b 	bl	8005d0c <HAL_DMA_Abort_IT>
      break;
 80094b6:	e02c      	b.n	8009512 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fc fc1d 	bl	8005d0c <HAL_DMA_Abort_IT>
      break;
 80094d2:	e01e      	b.n	8009512 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fc fc0f 	bl	8005d0c <HAL_DMA_Abort_IT>
      break;
 80094ee:	e010      	b.n	8009512 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009504:	4618      	mov	r0, r3
 8009506:	f7fc fc01 	bl	8005d0c <HAL_DMA_Abort_IT>
      break;
 800950a:	e002      	b.n	8009512 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	73fb      	strb	r3, [r7, #15]
      break;
 8009510:	bf00      	nop
  }

  if (status == HAL_OK)
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d157      	bne.n	80095c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2200      	movs	r2, #0
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fe89 	bl	800a238 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a2a      	ldr	r2, [pc, #168]	; (80095d4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d117      	bne.n	8009560 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6a1a      	ldr	r2, [r3, #32]
 8009536:	f241 1311 	movw	r3, #4369	; 0x1111
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10f      	bne.n	8009560 <HAL_TIM_PWM_Stop_DMA+0x114>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6a1a      	ldr	r2, [r3, #32]
 8009546:	f240 4344 	movw	r3, #1092	; 0x444
 800954a:	4013      	ands	r3, r2
 800954c:	2b00      	cmp	r3, #0
 800954e:	d107      	bne.n	8009560 <HAL_TIM_PWM_Stop_DMA+0x114>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800955e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6a1a      	ldr	r2, [r3, #32]
 8009566:	f241 1311 	movw	r3, #4369	; 0x1111
 800956a:	4013      	ands	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10f      	bne.n	8009590 <HAL_TIM_PWM_Stop_DMA+0x144>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	f240 4344 	movw	r3, #1092	; 0x444
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d107      	bne.n	8009590 <HAL_TIM_PWM_Stop_DMA+0x144>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0201 	bic.w	r2, r2, #1
 800958e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800959e:	e013      	b.n	80095c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d104      	bne.n	80095b0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095ae:	e00b      	b.n	80095c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b08      	cmp	r3, #8
 80095b4:	d104      	bne.n	80095c0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095be:	e003      	b.n	80095c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40010000 	.word	0x40010000

080095d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d122      	bne.n	8009634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d11b      	bne.n	8009634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f06f 0202 	mvn.w	r2, #2
 8009604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fa77 	bl	8009b0e <HAL_TIM_IC_CaptureCallback>
 8009620:	e005      	b.n	800962e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa69 	bl	8009afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7fb fe93 	bl	8005354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f003 0304 	and.w	r3, r3, #4
 800963e:	2b04      	cmp	r3, #4
 8009640:	d122      	bne.n	8009688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b04      	cmp	r3, #4
 800964e:	d11b      	bne.n	8009688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f06f 0204 	mvn.w	r2, #4
 8009658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa4d 	bl	8009b0e <HAL_TIM_IC_CaptureCallback>
 8009674:	e005      	b.n	8009682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa3f 	bl	8009afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fb fe69 	bl	8005354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f003 0308 	and.w	r3, r3, #8
 8009692:	2b08      	cmp	r3, #8
 8009694:	d122      	bne.n	80096dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d11b      	bne.n	80096dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f06f 0208 	mvn.w	r2, #8
 80096ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2204      	movs	r2, #4
 80096b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa23 	bl	8009b0e <HAL_TIM_IC_CaptureCallback>
 80096c8:	e005      	b.n	80096d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa15 	bl	8009afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7fb fe3f 	bl	8005354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0310 	and.w	r3, r3, #16
 80096e6:	2b10      	cmp	r3, #16
 80096e8:	d122      	bne.n	8009730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d11b      	bne.n	8009730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f06f 0210 	mvn.w	r2, #16
 8009700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2208      	movs	r2, #8
 8009706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f9f9 	bl	8009b0e <HAL_TIM_IC_CaptureCallback>
 800971c:	e005      	b.n	800972a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f9eb 	bl	8009afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7fb fe15 	bl	8005354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b01      	cmp	r3, #1
 800973c:	d10e      	bne.n	800975c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b01      	cmp	r3, #1
 800974a:	d107      	bne.n	800975c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f06f 0201 	mvn.w	r2, #1
 8009754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7fb f99c 	bl	8004a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009766:	2b80      	cmp	r3, #128	; 0x80
 8009768:	d10e      	bne.n	8009788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009774:	2b80      	cmp	r3, #128	; 0x80
 8009776:	d107      	bne.n	8009788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fe48 	bl	800a418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009792:	2b40      	cmp	r3, #64	; 0x40
 8009794:	d10e      	bne.n	80097b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a0:	2b40      	cmp	r3, #64	; 0x40
 80097a2:	d107      	bne.n	80097b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f9b7 	bl	8009b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	f003 0320 	and.w	r3, r3, #32
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d10e      	bne.n	80097e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b20      	cmp	r3, #32
 80097ce:	d107      	bne.n	80097e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0220 	mvn.w	r2, #32
 80097d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fe12 	bl	800a404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009802:	2302      	movs	r3, #2
 8009804:	e0ae      	b.n	8009964 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b0c      	cmp	r3, #12
 8009812:	f200 809f 	bhi.w	8009954 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009816:	a201      	add	r2, pc, #4	; (adr r2, 800981c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981c:	08009851 	.word	0x08009851
 8009820:	08009955 	.word	0x08009955
 8009824:	08009955 	.word	0x08009955
 8009828:	08009955 	.word	0x08009955
 800982c:	08009891 	.word	0x08009891
 8009830:	08009955 	.word	0x08009955
 8009834:	08009955 	.word	0x08009955
 8009838:	08009955 	.word	0x08009955
 800983c:	080098d3 	.word	0x080098d3
 8009840:	08009955 	.word	0x08009955
 8009844:	08009955 	.word	0x08009955
 8009848:	08009955 	.word	0x08009955
 800984c:	08009913 	.word	0x08009913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fac8 	bl	8009dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0208 	orr.w	r2, r2, #8
 800986a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0204 	bic.w	r2, r2, #4
 800987a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6999      	ldr	r1, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	619a      	str	r2, [r3, #24]
      break;
 800988e:	e064      	b.n	800995a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fb0e 	bl	8009eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6999      	ldr	r1, [r3, #24]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	021a      	lsls	r2, r3, #8
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	619a      	str	r2, [r3, #24]
      break;
 80098d0:	e043      	b.n	800995a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fb59 	bl	8009f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0208 	orr.w	r2, r2, #8
 80098ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0204 	bic.w	r2, r2, #4
 80098fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69d9      	ldr	r1, [r3, #28]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	61da      	str	r2, [r3, #28]
      break;
 8009910:	e023      	b.n	800995a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fba3 	bl	800a064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800992c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69da      	ldr	r2, [r3, #28]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800993c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69d9      	ldr	r1, [r3, #28]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	021a      	lsls	r2, r3, #8
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	61da      	str	r2, [r3, #28]
      break;
 8009952:	e002      	b.n	800995a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	75fb      	strb	r3, [r7, #23]
      break;
 8009958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIM_ConfigClockSource+0x1c>
 8009984:	2302      	movs	r3, #2
 8009986:	e0b4      	b.n	8009af2 <HAL_TIM_ConfigClockSource+0x186>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c0:	d03e      	beq.n	8009a40 <HAL_TIM_ConfigClockSource+0xd4>
 80099c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c6:	f200 8087 	bhi.w	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80099ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ce:	f000 8086 	beq.w	8009ade <HAL_TIM_ConfigClockSource+0x172>
 80099d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d6:	d87f      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80099d8:	2b70      	cmp	r3, #112	; 0x70
 80099da:	d01a      	beq.n	8009a12 <HAL_TIM_ConfigClockSource+0xa6>
 80099dc:	2b70      	cmp	r3, #112	; 0x70
 80099de:	d87b      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80099e0:	2b60      	cmp	r3, #96	; 0x60
 80099e2:	d050      	beq.n	8009a86 <HAL_TIM_ConfigClockSource+0x11a>
 80099e4:	2b60      	cmp	r3, #96	; 0x60
 80099e6:	d877      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80099e8:	2b50      	cmp	r3, #80	; 0x50
 80099ea:	d03c      	beq.n	8009a66 <HAL_TIM_ConfigClockSource+0xfa>
 80099ec:	2b50      	cmp	r3, #80	; 0x50
 80099ee:	d873      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d058      	beq.n	8009aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80099f4:	2b40      	cmp	r3, #64	; 0x40
 80099f6:	d86f      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	d064      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80099fc:	2b30      	cmp	r3, #48	; 0x30
 80099fe:	d86b      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d060      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d867      	bhi.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d05c      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8009a0c:	2b10      	cmp	r3, #16
 8009a0e:	d05a      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8009a10:	e062      	b.n	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	6899      	ldr	r1, [r3, #8]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f000 fbe9 	bl	800a1f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	609a      	str	r2, [r3, #8]
      break;
 8009a3e:	e04f      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6818      	ldr	r0, [r3, #0]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	6899      	ldr	r1, [r3, #8]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f000 fbd2 	bl	800a1f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a62:	609a      	str	r2, [r3, #8]
      break;
 8009a64:	e03c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	6859      	ldr	r1, [r3, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	461a      	mov	r2, r3
 8009a74:	f000 fb46 	bl	800a104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2150      	movs	r1, #80	; 0x50
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fb9f 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009a84:	e02c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6818      	ldr	r0, [r3, #0]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	6859      	ldr	r1, [r3, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f000 fb65 	bl	800a162 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2160      	movs	r1, #96	; 0x60
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fb8f 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009aa4:	e01c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	6859      	ldr	r1, [r3, #4]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f000 fb26 	bl	800a104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2140      	movs	r1, #64	; 0x40
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fb7f 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009ac4:	e00c      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f000 fb76 	bl	800a1c2 <TIM_ITRx_SetConfig>
      break;
 8009ad6:	e003      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	73fb      	strb	r3, [r7, #15]
      break;
 8009adc:	e000      	b.n	8009ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b02:	bf00      	nop
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b083      	sub	sp, #12
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b16:	bf00      	nop
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b083      	sub	sp, #12
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b083      	sub	sp, #12
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009b3e:	bf00      	nop
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d107      	bne.n	8009b72 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b70:	e02a      	b.n	8009bc8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d107      	bne.n	8009b8c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b8a:	e01d      	b.n	8009bc8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d107      	bne.n	8009ba6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2204      	movs	r2, #4
 8009b9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ba4:	e010      	b.n	8009bc8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d107      	bne.n	8009bc0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2208      	movs	r2, #8
 8009bb4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bbe:	e003      	b.n	8009bc8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff ffb4 	bl	8009b36 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	771a      	strb	r2, [r3, #28]
}
 8009bd4:	bf00      	nop
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d10b      	bne.n	8009c0c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d136      	bne.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c0a:	e031      	b.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d10b      	bne.n	8009c2e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d125      	bne.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c2c:	e020      	b.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d10b      	bne.n	8009c50 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d114      	bne.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c4e:	e00f      	b.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d10a      	bne.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2208      	movs	r2, #8
 8009c5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7fb fb6f 	bl	8005354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	771a      	strb	r2, [r3, #28]
}
 8009c7c:	bf00      	nop
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d103      	bne.n	8009ca4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	771a      	strb	r2, [r3, #28]
 8009ca2:	e019      	b.n	8009cd8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d103      	bne.n	8009cb6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	771a      	strb	r2, [r3, #28]
 8009cb4:	e010      	b.n	8009cd8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d103      	bne.n	8009cc8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2204      	movs	r2, #4
 8009cc4:	771a      	strb	r2, [r3, #28]
 8009cc6:	e007      	b.n	8009cd8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d102      	bne.n	8009cd8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7fb fabb 	bl	8005254 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	771a      	strb	r2, [r3, #28]
}
 8009ce4:	bf00      	nop
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a34      	ldr	r2, [pc, #208]	; (8009dd0 <TIM_Base_SetConfig+0xe4>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00f      	beq.n	8009d24 <TIM_Base_SetConfig+0x38>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d0a:	d00b      	beq.n	8009d24 <TIM_Base_SetConfig+0x38>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a31      	ldr	r2, [pc, #196]	; (8009dd4 <TIM_Base_SetConfig+0xe8>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d007      	beq.n	8009d24 <TIM_Base_SetConfig+0x38>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a30      	ldr	r2, [pc, #192]	; (8009dd8 <TIM_Base_SetConfig+0xec>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d003      	beq.n	8009d24 <TIM_Base_SetConfig+0x38>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a2f      	ldr	r2, [pc, #188]	; (8009ddc <TIM_Base_SetConfig+0xf0>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d108      	bne.n	8009d36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a25      	ldr	r2, [pc, #148]	; (8009dd0 <TIM_Base_SetConfig+0xe4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d01b      	beq.n	8009d76 <TIM_Base_SetConfig+0x8a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d44:	d017      	beq.n	8009d76 <TIM_Base_SetConfig+0x8a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a22      	ldr	r2, [pc, #136]	; (8009dd4 <TIM_Base_SetConfig+0xe8>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d013      	beq.n	8009d76 <TIM_Base_SetConfig+0x8a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a21      	ldr	r2, [pc, #132]	; (8009dd8 <TIM_Base_SetConfig+0xec>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00f      	beq.n	8009d76 <TIM_Base_SetConfig+0x8a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a20      	ldr	r2, [pc, #128]	; (8009ddc <TIM_Base_SetConfig+0xf0>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00b      	beq.n	8009d76 <TIM_Base_SetConfig+0x8a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a1f      	ldr	r2, [pc, #124]	; (8009de0 <TIM_Base_SetConfig+0xf4>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d007      	beq.n	8009d76 <TIM_Base_SetConfig+0x8a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a1e      	ldr	r2, [pc, #120]	; (8009de4 <TIM_Base_SetConfig+0xf8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_Base_SetConfig+0x8a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a1d      	ldr	r2, [pc, #116]	; (8009de8 <TIM_Base_SetConfig+0xfc>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d108      	bne.n	8009d88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <TIM_Base_SetConfig+0xe4>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d103      	bne.n	8009dbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	615a      	str	r2, [r3, #20]
}
 8009dc2:	bf00      	nop
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	40010000 	.word	0x40010000
 8009dd4:	40000400 	.word	0x40000400
 8009dd8:	40000800 	.word	0x40000800
 8009ddc:	40000c00 	.word	0x40000c00
 8009de0:	40014000 	.word	0x40014000
 8009de4:	40014400 	.word	0x40014400
 8009de8:	40014800 	.word	0x40014800

08009dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f023 0201 	bic.w	r2, r3, #1
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 0303 	bic.w	r3, r3, #3
 8009e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f023 0302 	bic.w	r3, r3, #2
 8009e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a1c      	ldr	r2, [pc, #112]	; (8009eb4 <TIM_OC1_SetConfig+0xc8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d10c      	bne.n	8009e62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f023 0308 	bic.w	r3, r3, #8
 8009e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f023 0304 	bic.w	r3, r3, #4
 8009e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a13      	ldr	r2, [pc, #76]	; (8009eb4 <TIM_OC1_SetConfig+0xc8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d111      	bne.n	8009e8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	621a      	str	r2, [r3, #32]
}
 8009ea8:	bf00      	nop
 8009eaa:	371c      	adds	r7, #28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	40010000 	.word	0x40010000

08009eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f023 0210 	bic.w	r2, r3, #16
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f023 0320 	bic.w	r3, r3, #32
 8009f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a1e      	ldr	r2, [pc, #120]	; (8009f8c <TIM_OC2_SetConfig+0xd4>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d10d      	bne.n	8009f34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a15      	ldr	r2, [pc, #84]	; (8009f8c <TIM_OC2_SetConfig+0xd4>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d113      	bne.n	8009f64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	40010000 	.word	0x40010000

08009f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b087      	sub	sp, #28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a1d      	ldr	r2, [pc, #116]	; (800a060 <TIM_OC3_SetConfig+0xd0>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d10d      	bne.n	800a00a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a14      	ldr	r2, [pc, #80]	; (800a060 <TIM_OC3_SetConfig+0xd0>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d113      	bne.n	800a03a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4313      	orrs	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	621a      	str	r2, [r3, #32]
}
 800a054:	bf00      	nop
 800a056:	371c      	adds	r7, #28
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	40010000 	.word	0x40010000

0800a064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	021b      	lsls	r3, r3, #8
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	031b      	lsls	r3, r3, #12
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a10      	ldr	r2, [pc, #64]	; (800a100 <TIM_OC4_SetConfig+0x9c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d109      	bne.n	800a0d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	019b      	lsls	r3, r3, #6
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	40010000 	.word	0x40010000

0800a104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a12e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f023 030a 	bic.w	r3, r3, #10
 800a140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a162:	b480      	push	{r7}
 800a164:	b087      	sub	sp, #28
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	f023 0210 	bic.w	r2, r3, #16
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a18c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	031b      	lsls	r3, r3, #12
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a19e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	621a      	str	r2, [r3, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	f043 0307 	orr.w	r3, r3, #7
 800a1e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	609a      	str	r2, [r3, #8]
}
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	021a      	lsls	r2, r3, #8
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	431a      	orrs	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	4313      	orrs	r3, r2
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	4313      	orrs	r3, r2
 800a224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	609a      	str	r2, [r3, #8]
}
 800a22c:	bf00      	nop
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f003 031f 	and.w	r3, r3, #31
 800a24a:	2201      	movs	r2, #1
 800a24c:	fa02 f303 	lsl.w	r3, r2, r3
 800a250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a1a      	ldr	r2, [r3, #32]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	43db      	mvns	r3, r3
 800a25a:	401a      	ands	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6a1a      	ldr	r2, [r3, #32]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f003 031f 	and.w	r3, r3, #31
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	fa01 f303 	lsl.w	r3, r1, r3
 800a270:	431a      	orrs	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	621a      	str	r2, [r3, #32]
}
 800a276:	bf00      	nop
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
	...

0800a284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a298:	2302      	movs	r3, #2
 800a29a:	e050      	b.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a1c      	ldr	r2, [pc, #112]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d018      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2e8:	d013      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a18      	ldr	r2, [pc, #96]	; (800a350 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00e      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a16      	ldr	r2, [pc, #88]	; (800a354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d009      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a15      	ldr	r2, [pc, #84]	; (800a358 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d004      	beq.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a13      	ldr	r2, [pc, #76]	; (800a35c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d10c      	bne.n	800a32c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	4313      	orrs	r3, r2
 800a322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	40010000 	.word	0x40010000
 800a350:	40000400 	.word	0x40000400
 800a354:	40000800 	.word	0x40000800
 800a358:	40000c00 	.word	0x40000c00
 800a35c:	40014000 	.word	0x40014000

0800a360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a374:	2b01      	cmp	r3, #1
 800a376:	d101      	bne.n	800a37c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a378:	2302      	movs	r3, #2
 800a37a:	e03d      	b.n	800a3f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	4313      	orrs	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e03f      	b.n	800a4be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7fa fa3a 	bl	80048cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2224      	movs	r2, #36	; 0x24
 800a45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a46e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fddf 	bl	800b034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	695a      	ldr	r2, [r3, #20]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2220      	movs	r2, #32
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b08a      	sub	sp, #40	; 0x28
 800a4ca:	af02      	add	r7, sp, #8
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	603b      	str	r3, [r7, #0]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	d17c      	bne.n	800a5e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <HAL_UART_Transmit+0x2c>
 800a4ec:	88fb      	ldrh	r3, [r7, #6]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e075      	b.n	800a5e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <HAL_UART_Transmit+0x3e>
 800a500:	2302      	movs	r3, #2
 800a502:	e06e      	b.n	800a5e2 <HAL_UART_Transmit+0x11c>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2221      	movs	r2, #33	; 0x21
 800a516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a51a:	f7fb f8d1 	bl	80056c0 <HAL_GetTick>
 800a51e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	88fa      	ldrh	r2, [r7, #6]
 800a524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	88fa      	ldrh	r2, [r7, #6]
 800a52a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a534:	d108      	bne.n	800a548 <HAL_UART_Transmit+0x82>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	61bb      	str	r3, [r7, #24]
 800a546:	e003      	b.n	800a550 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a54c:	2300      	movs	r3, #0
 800a54e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a558:	e02a      	b.n	800a5b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	2180      	movs	r1, #128	; 0x80
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fb1f 	bl	800aba8 <UART_WaitOnFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e036      	b.n	800a5e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10b      	bne.n	800a592 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a588:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	3302      	adds	r3, #2
 800a58e:	61bb      	str	r3, [r7, #24]
 800a590:	e007      	b.n	800a5a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1cf      	bne.n	800a55a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2140      	movs	r1, #64	; 0x40
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 faef 	bl	800aba8 <UART_WaitOnFlagUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e006      	b.n	800a5e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e000      	b.n	800a5e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a5e0:	2302      	movs	r3, #2
  }
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3720      	adds	r7, #32
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b20      	cmp	r3, #32
 800a602:	d11d      	bne.n	800a640 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <HAL_UART_Receive_IT+0x26>
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e016      	b.n	800a642 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <HAL_UART_Receive_IT+0x38>
 800a61e:	2302      	movs	r3, #2
 800a620:	e00f      	b.n	800a642 <HAL_UART_Receive_IT+0x58>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a630:	88fb      	ldrh	r3, [r7, #6]
 800a632:	461a      	mov	r2, r3
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 fb24 	bl	800ac84 <UART_Start_Receive_IT>
 800a63c:	4603      	mov	r3, r0
 800a63e:	e000      	b.n	800a642 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a640:	2302      	movs	r3, #2
  }
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b0ba      	sub	sp, #232	; 0xe8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a672:	2300      	movs	r3, #0
 800a674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a678:	2300      	movs	r3, #0
 800a67a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a68a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10f      	bne.n	800a6b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d009      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x66>
 800a69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6a2:	f003 0320 	and.w	r3, r3, #32
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fc07 	bl	800aebe <UART_Receive_IT>
      return;
 800a6b0:	e256      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 80de 	beq.w	800a878 <HAL_UART_IRQHandler+0x22c>
 800a6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80d1 	beq.w	800a878 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <HAL_UART_IRQHandler+0xae>
 800a6e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d005      	beq.n	800a6fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	f043 0201 	orr.w	r2, r3, #1
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6fe:	f003 0304 	and.w	r3, r3, #4
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <HAL_UART_IRQHandler+0xd2>
 800a706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a716:	f043 0202 	orr.w	r2, r3, #2
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00b      	beq.n	800a742 <HAL_UART_IRQHandler+0xf6>
 800a72a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d005      	beq.n	800a742 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	f043 0204 	orr.w	r2, r3, #4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a746:	f003 0308 	and.w	r3, r3, #8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d011      	beq.n	800a772 <HAL_UART_IRQHandler+0x126>
 800a74e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	d005      	beq.n	800a772 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	f043 0208 	orr.w	r2, r3, #8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 81ed 	beq.w	800ab56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a780:	f003 0320 	and.w	r3, r3, #32
 800a784:	2b00      	cmp	r3, #0
 800a786:	d008      	beq.n	800a79a <HAL_UART_IRQHandler+0x14e>
 800a788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a78c:	f003 0320 	and.w	r3, r3, #32
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fb92 	bl	800aebe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	bf0c      	ite	eq
 800a7a8:	2301      	moveq	r3, #1
 800a7aa:	2300      	movne	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <HAL_UART_IRQHandler+0x17a>
 800a7be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d04f      	beq.n	800a866 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fa9a 	bl	800ad00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d6:	2b40      	cmp	r3, #64	; 0x40
 800a7d8:	d141      	bne.n	800a85e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3314      	adds	r3, #20
 800a7e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a7f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3314      	adds	r3, #20
 800a802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a80a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a81e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1d9      	bne.n	800a7da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d013      	beq.n	800a856 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a832:	4a7d      	ldr	r2, [pc, #500]	; (800aa28 <HAL_UART_IRQHandler+0x3dc>)
 800a834:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fb fa66 	bl	8005d0c <HAL_DMA_Abort_IT>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d016      	beq.n	800a874 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a850:	4610      	mov	r0, r2
 800a852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a854:	e00e      	b.n	800a874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f990 	bl	800ab7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85c:	e00a      	b.n	800a874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f98c 	bl	800ab7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a864:	e006      	b.n	800a874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f988 	bl	800ab7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a872:	e170      	b.n	800ab56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a874:	bf00      	nop
    return;
 800a876:	e16e      	b.n	800ab56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	f040 814a 	bne.w	800ab16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a886:	f003 0310 	and.w	r3, r3, #16
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 8143 	beq.w	800ab16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a894:	f003 0310 	and.w	r3, r3, #16
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 813c 	beq.w	800ab16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	60bb      	str	r3, [r7, #8]
 800a8b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	f040 80b4 	bne.w	800aa2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8140 	beq.w	800ab5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	f080 8139 	bcs.w	800ab5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fa:	f000 8088 	beq.w	800aa0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	330c      	adds	r3, #12
 800a904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a91c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	330c      	adds	r3, #12
 800a926:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a92a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a92e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1d9      	bne.n	800a8fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3314      	adds	r3, #20
 800a950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a95a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3314      	adds	r3, #20
 800a96a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a96e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e1      	bne.n	800a94a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3314      	adds	r3, #20
 800a98c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a99c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3314      	adds	r3, #20
 800a9a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e3      	bne.n	800a986 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	330c      	adds	r3, #12
 800a9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9de:	f023 0310 	bic.w	r3, r3, #16
 800a9e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	330c      	adds	r3, #12
 800a9ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a9f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a9f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e3      	bne.n	800a9cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fb f90f 	bl	8005c2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f8b6 	bl	800ab90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa24:	e099      	b.n	800ab5a <HAL_UART_IRQHandler+0x50e>
 800aa26:	bf00      	nop
 800aa28:	0800adc7 	.word	0x0800adc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 808b 	beq.w	800ab5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 8086 	beq.w	800ab5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	330c      	adds	r3, #12
 800aa72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aa76:	647a      	str	r2, [r7, #68]	; 0x44
 800aa78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e3      	bne.n	800aa52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3314      	adds	r3, #20
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	623b      	str	r3, [r7, #32]
   return(result);
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f023 0301 	bic.w	r3, r3, #1
 800aaa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3314      	adds	r3, #20
 800aaaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaae:	633a      	str	r2, [r7, #48]	; 0x30
 800aab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1e3      	bne.n	800aa8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	330c      	adds	r3, #12
 800aad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	60fb      	str	r3, [r7, #12]
   return(result);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0310 	bic.w	r3, r3, #16
 800aae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	330c      	adds	r3, #12
 800aaf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aaf4:	61fa      	str	r2, [r7, #28]
 800aaf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	69b9      	ldr	r1, [r7, #24]
 800aafa:	69fa      	ldr	r2, [r7, #28]
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	617b      	str	r3, [r7, #20]
   return(result);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e3      	bne.n	800aad0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f83e 	bl	800ab90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab14:	e023      	b.n	800ab5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <HAL_UART_IRQHandler+0x4ea>
 800ab22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d003      	beq.n	800ab36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f95d 	bl	800adee <UART_Transmit_IT>
    return;
 800ab34:	e014      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00e      	beq.n	800ab60 <HAL_UART_IRQHandler+0x514>
 800ab42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d008      	beq.n	800ab60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f99d 	bl	800ae8e <UART_EndTransmit_IT>
    return;
 800ab54:	e004      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
    return;
 800ab56:	bf00      	nop
 800ab58:	e002      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
      return;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
      return;
 800ab5e:	bf00      	nop
  }
}
 800ab60:	37e8      	adds	r7, #232	; 0xe8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop

0800ab68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b090      	sub	sp, #64	; 0x40
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	4613      	mov	r3, r2
 800abb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abb8:	e050      	b.n	800ac5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc0:	d04c      	beq.n	800ac5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800abc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d007      	beq.n	800abd8 <UART_WaitOnFlagUntilTimeout+0x30>
 800abc8:	f7fa fd7a 	bl	80056c0 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d241      	bcs.n	800ac5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	330c      	adds	r3, #12
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	330c      	adds	r3, #12
 800abf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800abf8:	637a      	str	r2, [r7, #52]	; 0x34
 800abfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e5      	bne.n	800abd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3314      	adds	r3, #20
 800ac12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f023 0301 	bic.w	r3, r3, #1
 800ac22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3314      	adds	r3, #20
 800ac2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac2c:	623a      	str	r2, [r7, #32]
 800ac2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	69f9      	ldr	r1, [r7, #28]
 800ac32:	6a3a      	ldr	r2, [r7, #32]
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e5      	bne.n	800ac0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2220      	movs	r2, #32
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e00f      	b.n	800ac7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	4013      	ands	r3, r2
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2301      	moveq	r3, #1
 800ac6e:	2300      	movne	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	461a      	mov	r2, r3
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d09f      	beq.n	800abba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3740      	adds	r7, #64	; 0x40
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	88fa      	ldrh	r2, [r7, #6]
 800ac9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	88fa      	ldrh	r2, [r7, #6]
 800aca2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2222      	movs	r2, #34	; 0x22
 800acae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d007      	beq.n	800acd2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68da      	ldr	r2, [r3, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0201 	orr.w	r2, r2, #1
 800ace0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f042 0220 	orr.w	r2, r2, #32
 800acf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b095      	sub	sp, #84	; 0x54
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	330c      	adds	r3, #12
 800ad0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad12:	e853 3f00 	ldrex	r3, [r3]
 800ad16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	330c      	adds	r3, #12
 800ad26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad28:	643a      	str	r2, [r7, #64]	; 0x40
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e5      	bne.n	800ad08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3314      	adds	r3, #20
 800ad42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	e853 3f00 	ldrex	r3, [r3]
 800ad4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	f023 0301 	bic.w	r3, r3, #1
 800ad52:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3314      	adds	r3, #20
 800ad5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad64:	e841 2300 	strex	r3, r2, [r1]
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1e5      	bne.n	800ad3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d119      	bne.n	800adac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	e853 3f00 	ldrex	r3, [r3]
 800ad86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f023 0310 	bic.w	r3, r3, #16
 800ad8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	330c      	adds	r3, #12
 800ad96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad98:	61ba      	str	r2, [r7, #24]
 800ad9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9c:	6979      	ldr	r1, [r7, #20]
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	e841 2300 	strex	r3, r2, [r1]
 800ada4:	613b      	str	r3, [r7, #16]
   return(result);
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1e5      	bne.n	800ad78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2220      	movs	r2, #32
 800adb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800adba:	bf00      	nop
 800adbc:	3754      	adds	r7, #84	; 0x54
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff fecb 	bl	800ab7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800adee:	b480      	push	{r7}
 800adf0:	b085      	sub	sp, #20
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b21      	cmp	r3, #33	; 0x21
 800ae00:	d13e      	bne.n	800ae80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae0a:	d114      	bne.n	800ae36 <UART_Transmit_IT+0x48>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d110      	bne.n	800ae36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	1c9a      	adds	r2, r3, #2
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	621a      	str	r2, [r3, #32]
 800ae34:	e008      	b.n	800ae48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	1c59      	adds	r1, r3, #1
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	6211      	str	r1, [r2, #32]
 800ae40:	781a      	ldrb	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	4619      	mov	r1, r3
 800ae56:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10f      	bne.n	800ae7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e000      	b.n	800ae82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae80:	2302      	movs	r3, #2
  }
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b082      	sub	sp, #8
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aea4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fe5a 	bl	800ab68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b08c      	sub	sp, #48	; 0x30
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b22      	cmp	r3, #34	; 0x22
 800aed0:	f040 80ab 	bne.w	800b02a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aedc:	d117      	bne.n	800af0e <UART_Receive_IT+0x50>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d113      	bne.n	800af0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af06:	1c9a      	adds	r2, r3, #2
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	629a      	str	r2, [r3, #40]	; 0x28
 800af0c:	e026      	b.n	800af5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af20:	d007      	beq.n	800af32 <UART_Receive_IT+0x74>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10a      	bne.n	800af40 <UART_Receive_IT+0x82>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	e008      	b.n	800af52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af60:	b29b      	uxth	r3, r3
 800af62:	3b01      	subs	r3, #1
 800af64:	b29b      	uxth	r3, r3
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	4619      	mov	r1, r3
 800af6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d15a      	bne.n	800b026 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0220 	bic.w	r2, r2, #32
 800af7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	695a      	ldr	r2, [r3, #20]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f022 0201 	bic.w	r2, r2, #1
 800af9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	2b01      	cmp	r3, #1
 800afae:	d135      	bne.n	800b01c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	330c      	adds	r3, #12
 800afbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	613b      	str	r3, [r7, #16]
   return(result);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f023 0310 	bic.w	r3, r3, #16
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	330c      	adds	r3, #12
 800afd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd6:	623a      	str	r2, [r7, #32]
 800afd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	69f9      	ldr	r1, [r7, #28]
 800afdc:	6a3a      	ldr	r2, [r7, #32]
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	61bb      	str	r3, [r7, #24]
   return(result);
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e5      	bne.n	800afb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	d10a      	bne.n	800b00e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aff8:	2300      	movs	r3, #0
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff fdbb 	bl	800ab90 <HAL_UARTEx_RxEventCallback>
 800b01a:	e002      	b.n	800b022 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7f7 fa8b 	bl	8002538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	e002      	b.n	800b02c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	e000      	b.n	800b02c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b02a:	2302      	movs	r3, #2
  }
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3730      	adds	r7, #48	; 0x30
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b038:	b0c0      	sub	sp, #256	; 0x100
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b050:	68d9      	ldr	r1, [r3, #12]
 800b052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	ea40 0301 	orr.w	r3, r0, r1
 800b05c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b062:	689a      	ldr	r2, [r3, #8]
 800b064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	431a      	orrs	r2, r3
 800b06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	431a      	orrs	r2, r3
 800b074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b08c:	f021 010c 	bic.w	r1, r1, #12
 800b090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b09a:	430b      	orrs	r3, r1
 800b09c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ae:	6999      	ldr	r1, [r3, #24]
 800b0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	ea40 0301 	orr.w	r3, r0, r1
 800b0ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	4b8f      	ldr	r3, [pc, #572]	; (800b300 <UART_SetConfig+0x2cc>)
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d005      	beq.n	800b0d4 <UART_SetConfig+0xa0>
 800b0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	4b8d      	ldr	r3, [pc, #564]	; (800b304 <UART_SetConfig+0x2d0>)
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d104      	bne.n	800b0de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0d4:	f7fd fa74 	bl	80085c0 <HAL_RCC_GetPCLK2Freq>
 800b0d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b0dc:	e003      	b.n	800b0e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0de:	f7fd fa5b 	bl	8008598 <HAL_RCC_GetPCLK1Freq>
 800b0e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ea:	69db      	ldr	r3, [r3, #28]
 800b0ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0f0:	f040 810c 	bne.w	800b30c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b106:	4622      	mov	r2, r4
 800b108:	462b      	mov	r3, r5
 800b10a:	1891      	adds	r1, r2, r2
 800b10c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b10e:	415b      	adcs	r3, r3
 800b110:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b116:	4621      	mov	r1, r4
 800b118:	eb12 0801 	adds.w	r8, r2, r1
 800b11c:	4629      	mov	r1, r5
 800b11e:	eb43 0901 	adc.w	r9, r3, r1
 800b122:	f04f 0200 	mov.w	r2, #0
 800b126:	f04f 0300 	mov.w	r3, #0
 800b12a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b12e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b136:	4690      	mov	r8, r2
 800b138:	4699      	mov	r9, r3
 800b13a:	4623      	mov	r3, r4
 800b13c:	eb18 0303 	adds.w	r3, r8, r3
 800b140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b144:	462b      	mov	r3, r5
 800b146:	eb49 0303 	adc.w	r3, r9, r3
 800b14a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b15a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b15e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b162:	460b      	mov	r3, r1
 800b164:	18db      	adds	r3, r3, r3
 800b166:	653b      	str	r3, [r7, #80]	; 0x50
 800b168:	4613      	mov	r3, r2
 800b16a:	eb42 0303 	adc.w	r3, r2, r3
 800b16e:	657b      	str	r3, [r7, #84]	; 0x54
 800b170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b178:	f7f5 fd9e 	bl	8000cb8 <__aeabi_uldivmod>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4b61      	ldr	r3, [pc, #388]	; (800b308 <UART_SetConfig+0x2d4>)
 800b182:	fba3 2302 	umull	r2, r3, r3, r2
 800b186:	095b      	lsrs	r3, r3, #5
 800b188:	011c      	lsls	r4, r3, #4
 800b18a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b194:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b19c:	4642      	mov	r2, r8
 800b19e:	464b      	mov	r3, r9
 800b1a0:	1891      	adds	r1, r2, r2
 800b1a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b1a4:	415b      	adcs	r3, r3
 800b1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b1ac:	4641      	mov	r1, r8
 800b1ae:	eb12 0a01 	adds.w	sl, r2, r1
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	eb43 0b01 	adc.w	fp, r3, r1
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	f04f 0300 	mov.w	r3, #0
 800b1c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b1c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b1c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1cc:	4692      	mov	sl, r2
 800b1ce:	469b      	mov	fp, r3
 800b1d0:	4643      	mov	r3, r8
 800b1d2:	eb1a 0303 	adds.w	r3, sl, r3
 800b1d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1da:	464b      	mov	r3, r9
 800b1dc:	eb4b 0303 	adc.w	r3, fp, r3
 800b1e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b1f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	18db      	adds	r3, r3, r3
 800b1fc:	643b      	str	r3, [r7, #64]	; 0x40
 800b1fe:	4613      	mov	r3, r2
 800b200:	eb42 0303 	adc.w	r3, r2, r3
 800b204:	647b      	str	r3, [r7, #68]	; 0x44
 800b206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b20a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b20e:	f7f5 fd53 	bl	8000cb8 <__aeabi_uldivmod>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4611      	mov	r1, r2
 800b218:	4b3b      	ldr	r3, [pc, #236]	; (800b308 <UART_SetConfig+0x2d4>)
 800b21a:	fba3 2301 	umull	r2, r3, r3, r1
 800b21e:	095b      	lsrs	r3, r3, #5
 800b220:	2264      	movs	r2, #100	; 0x64
 800b222:	fb02 f303 	mul.w	r3, r2, r3
 800b226:	1acb      	subs	r3, r1, r3
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b22e:	4b36      	ldr	r3, [pc, #216]	; (800b308 <UART_SetConfig+0x2d4>)
 800b230:	fba3 2302 	umull	r2, r3, r3, r2
 800b234:	095b      	lsrs	r3, r3, #5
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b23c:	441c      	add	r4, r3
 800b23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b242:	2200      	movs	r2, #0
 800b244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b248:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b24c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b250:	4642      	mov	r2, r8
 800b252:	464b      	mov	r3, r9
 800b254:	1891      	adds	r1, r2, r2
 800b256:	63b9      	str	r1, [r7, #56]	; 0x38
 800b258:	415b      	adcs	r3, r3
 800b25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b25c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b260:	4641      	mov	r1, r8
 800b262:	1851      	adds	r1, r2, r1
 800b264:	6339      	str	r1, [r7, #48]	; 0x30
 800b266:	4649      	mov	r1, r9
 800b268:	414b      	adcs	r3, r1
 800b26a:	637b      	str	r3, [r7, #52]	; 0x34
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b278:	4659      	mov	r1, fp
 800b27a:	00cb      	lsls	r3, r1, #3
 800b27c:	4651      	mov	r1, sl
 800b27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b282:	4651      	mov	r1, sl
 800b284:	00ca      	lsls	r2, r1, #3
 800b286:	4610      	mov	r0, r2
 800b288:	4619      	mov	r1, r3
 800b28a:	4603      	mov	r3, r0
 800b28c:	4642      	mov	r2, r8
 800b28e:	189b      	adds	r3, r3, r2
 800b290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b294:	464b      	mov	r3, r9
 800b296:	460a      	mov	r2, r1
 800b298:	eb42 0303 	adc.w	r3, r2, r3
 800b29c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b2b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	18db      	adds	r3, r3, r3
 800b2b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	eb42 0303 	adc.w	r3, r2, r3
 800b2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b2ca:	f7f5 fcf5 	bl	8000cb8 <__aeabi_uldivmod>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4b0d      	ldr	r3, [pc, #52]	; (800b308 <UART_SetConfig+0x2d4>)
 800b2d4:	fba3 1302 	umull	r1, r3, r3, r2
 800b2d8:	095b      	lsrs	r3, r3, #5
 800b2da:	2164      	movs	r1, #100	; 0x64
 800b2dc:	fb01 f303 	mul.w	r3, r1, r3
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	3332      	adds	r3, #50	; 0x32
 800b2e6:	4a08      	ldr	r2, [pc, #32]	; (800b308 <UART_SetConfig+0x2d4>)
 800b2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ec:	095b      	lsrs	r3, r3, #5
 800b2ee:	f003 0207 	and.w	r2, r3, #7
 800b2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4422      	add	r2, r4
 800b2fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b2fc:	e105      	b.n	800b50a <UART_SetConfig+0x4d6>
 800b2fe:	bf00      	nop
 800b300:	40011000 	.word	0x40011000
 800b304:	40011400 	.word	0x40011400
 800b308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b30c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b310:	2200      	movs	r2, #0
 800b312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b316:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b31a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b31e:	4642      	mov	r2, r8
 800b320:	464b      	mov	r3, r9
 800b322:	1891      	adds	r1, r2, r2
 800b324:	6239      	str	r1, [r7, #32]
 800b326:	415b      	adcs	r3, r3
 800b328:	627b      	str	r3, [r7, #36]	; 0x24
 800b32a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b32e:	4641      	mov	r1, r8
 800b330:	1854      	adds	r4, r2, r1
 800b332:	4649      	mov	r1, r9
 800b334:	eb43 0501 	adc.w	r5, r3, r1
 800b338:	f04f 0200 	mov.w	r2, #0
 800b33c:	f04f 0300 	mov.w	r3, #0
 800b340:	00eb      	lsls	r3, r5, #3
 800b342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b346:	00e2      	lsls	r2, r4, #3
 800b348:	4614      	mov	r4, r2
 800b34a:	461d      	mov	r5, r3
 800b34c:	4643      	mov	r3, r8
 800b34e:	18e3      	adds	r3, r4, r3
 800b350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b354:	464b      	mov	r3, r9
 800b356:	eb45 0303 	adc.w	r3, r5, r3
 800b35a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b36a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b36e:	f04f 0200 	mov.w	r2, #0
 800b372:	f04f 0300 	mov.w	r3, #0
 800b376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b37a:	4629      	mov	r1, r5
 800b37c:	008b      	lsls	r3, r1, #2
 800b37e:	4621      	mov	r1, r4
 800b380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b384:	4621      	mov	r1, r4
 800b386:	008a      	lsls	r2, r1, #2
 800b388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b38c:	f7f5 fc94 	bl	8000cb8 <__aeabi_uldivmod>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4b60      	ldr	r3, [pc, #384]	; (800b518 <UART_SetConfig+0x4e4>)
 800b396:	fba3 2302 	umull	r2, r3, r3, r2
 800b39a:	095b      	lsrs	r3, r3, #5
 800b39c:	011c      	lsls	r4, r3, #4
 800b39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b3b0:	4642      	mov	r2, r8
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	1891      	adds	r1, r2, r2
 800b3b6:	61b9      	str	r1, [r7, #24]
 800b3b8:	415b      	adcs	r3, r3
 800b3ba:	61fb      	str	r3, [r7, #28]
 800b3bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	1851      	adds	r1, r2, r1
 800b3c4:	6139      	str	r1, [r7, #16]
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	414b      	adcs	r3, r1
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	f04f 0200 	mov.w	r2, #0
 800b3d0:	f04f 0300 	mov.w	r3, #0
 800b3d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b3d8:	4659      	mov	r1, fp
 800b3da:	00cb      	lsls	r3, r1, #3
 800b3dc:	4651      	mov	r1, sl
 800b3de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3e2:	4651      	mov	r1, sl
 800b3e4:	00ca      	lsls	r2, r1, #3
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	4642      	mov	r2, r8
 800b3ee:	189b      	adds	r3, r3, r2
 800b3f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3f4:	464b      	mov	r3, r9
 800b3f6:	460a      	mov	r2, r1
 800b3f8:	eb42 0303 	adc.w	r3, r2, r3
 800b3fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	67bb      	str	r3, [r7, #120]	; 0x78
 800b40a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b40c:	f04f 0200 	mov.w	r2, #0
 800b410:	f04f 0300 	mov.w	r3, #0
 800b414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b418:	4649      	mov	r1, r9
 800b41a:	008b      	lsls	r3, r1, #2
 800b41c:	4641      	mov	r1, r8
 800b41e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b422:	4641      	mov	r1, r8
 800b424:	008a      	lsls	r2, r1, #2
 800b426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b42a:	f7f5 fc45 	bl	8000cb8 <__aeabi_uldivmod>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4b39      	ldr	r3, [pc, #228]	; (800b518 <UART_SetConfig+0x4e4>)
 800b434:	fba3 1302 	umull	r1, r3, r3, r2
 800b438:	095b      	lsrs	r3, r3, #5
 800b43a:	2164      	movs	r1, #100	; 0x64
 800b43c:	fb01 f303 	mul.w	r3, r1, r3
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	011b      	lsls	r3, r3, #4
 800b444:	3332      	adds	r3, #50	; 0x32
 800b446:	4a34      	ldr	r2, [pc, #208]	; (800b518 <UART_SetConfig+0x4e4>)
 800b448:	fba2 2303 	umull	r2, r3, r2, r3
 800b44c:	095b      	lsrs	r3, r3, #5
 800b44e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b452:	441c      	add	r4, r3
 800b454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b458:	2200      	movs	r2, #0
 800b45a:	673b      	str	r3, [r7, #112]	; 0x70
 800b45c:	677a      	str	r2, [r7, #116]	; 0x74
 800b45e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b462:	4642      	mov	r2, r8
 800b464:	464b      	mov	r3, r9
 800b466:	1891      	adds	r1, r2, r2
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	415b      	adcs	r3, r3
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b472:	4641      	mov	r1, r8
 800b474:	1851      	adds	r1, r2, r1
 800b476:	6039      	str	r1, [r7, #0]
 800b478:	4649      	mov	r1, r9
 800b47a:	414b      	adcs	r3, r1
 800b47c:	607b      	str	r3, [r7, #4]
 800b47e:	f04f 0200 	mov.w	r2, #0
 800b482:	f04f 0300 	mov.w	r3, #0
 800b486:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b48a:	4659      	mov	r1, fp
 800b48c:	00cb      	lsls	r3, r1, #3
 800b48e:	4651      	mov	r1, sl
 800b490:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b494:	4651      	mov	r1, sl
 800b496:	00ca      	lsls	r2, r1, #3
 800b498:	4610      	mov	r0, r2
 800b49a:	4619      	mov	r1, r3
 800b49c:	4603      	mov	r3, r0
 800b49e:	4642      	mov	r2, r8
 800b4a0:	189b      	adds	r3, r3, r2
 800b4a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	460a      	mov	r2, r1
 800b4a8:	eb42 0303 	adc.w	r3, r2, r3
 800b4ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	663b      	str	r3, [r7, #96]	; 0x60
 800b4b8:	667a      	str	r2, [r7, #100]	; 0x64
 800b4ba:	f04f 0200 	mov.w	r2, #0
 800b4be:	f04f 0300 	mov.w	r3, #0
 800b4c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	008b      	lsls	r3, r1, #2
 800b4ca:	4641      	mov	r1, r8
 800b4cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4d0:	4641      	mov	r1, r8
 800b4d2:	008a      	lsls	r2, r1, #2
 800b4d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b4d8:	f7f5 fbee 	bl	8000cb8 <__aeabi_uldivmod>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	; (800b518 <UART_SetConfig+0x4e4>)
 800b4e2:	fba3 1302 	umull	r1, r3, r3, r2
 800b4e6:	095b      	lsrs	r3, r3, #5
 800b4e8:	2164      	movs	r1, #100	; 0x64
 800b4ea:	fb01 f303 	mul.w	r3, r1, r3
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	011b      	lsls	r3, r3, #4
 800b4f2:	3332      	adds	r3, #50	; 0x32
 800b4f4:	4a08      	ldr	r2, [pc, #32]	; (800b518 <UART_SetConfig+0x4e4>)
 800b4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fa:	095b      	lsrs	r3, r3, #5
 800b4fc:	f003 020f 	and.w	r2, r3, #15
 800b500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4422      	add	r2, r4
 800b508:	609a      	str	r2, [r3, #8]
}
 800b50a:	bf00      	nop
 800b50c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b510:	46bd      	mov	sp, r7
 800b512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b516:	bf00      	nop
 800b518:	51eb851f 	.word	0x51eb851f

0800b51c <atoi>:
 800b51c:	220a      	movs	r2, #10
 800b51e:	2100      	movs	r1, #0
 800b520:	f001 ba20 	b.w	800c964 <strtol>

0800b524 <difftime>:
 800b524:	1a80      	subs	r0, r0, r2
 800b526:	b508      	push	{r3, lr}
 800b528:	eb61 0103 	sbc.w	r1, r1, r3
 800b52c:	f7f5 f84e 	bl	80005cc <__aeabi_l2d>
 800b530:	ec41 0b10 	vmov	d0, r0, r1
 800b534:	bd08      	pop	{r3, pc}
	...

0800b538 <__errno>:
 800b538:	4b01      	ldr	r3, [pc, #4]	; (800b540 <__errno+0x8>)
 800b53a:	6818      	ldr	r0, [r3, #0]
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	200002c4 	.word	0x200002c4

0800b544 <gmtime>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <gmtime+0x30>)
 800b548:	681d      	ldr	r5, [r3, #0]
 800b54a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b54c:	4604      	mov	r4, r0
 800b54e:	b953      	cbnz	r3, 800b566 <gmtime+0x22>
 800b550:	2024      	movs	r0, #36	; 0x24
 800b552:	f000 f8e5 	bl	800b720 <malloc>
 800b556:	4602      	mov	r2, r0
 800b558:	63e8      	str	r0, [r5, #60]	; 0x3c
 800b55a:	b920      	cbnz	r0, 800b566 <gmtime+0x22>
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <gmtime+0x34>)
 800b55e:	4807      	ldr	r0, [pc, #28]	; (800b57c <gmtime+0x38>)
 800b560:	2139      	movs	r1, #57	; 0x39
 800b562:	f001 fc57 	bl	800ce14 <__assert_func>
 800b566:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800b568:	4620      	mov	r0, r4
 800b56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b56e:	f000 b807 	b.w	800b580 <gmtime_r>
 800b572:	bf00      	nop
 800b574:	200002c4 	.word	0x200002c4
 800b578:	0801121c 	.word	0x0801121c
 800b57c:	08011233 	.word	0x08011233

0800b580 <gmtime_r>:
 800b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b584:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b588:	460c      	mov	r4, r1
 800b58a:	4a4f      	ldr	r2, [pc, #316]	; (800b6c8 <gmtime_r+0x148>)
 800b58c:	2300      	movs	r3, #0
 800b58e:	4630      	mov	r0, r6
 800b590:	4639      	mov	r1, r7
 800b592:	f7f5 fb41 	bl	8000c18 <__aeabi_ldivmod>
 800b596:	4639      	mov	r1, r7
 800b598:	4605      	mov	r5, r0
 800b59a:	4a4b      	ldr	r2, [pc, #300]	; (800b6c8 <gmtime_r+0x148>)
 800b59c:	4630      	mov	r0, r6
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f7f5 fb3a 	bl	8000c18 <__aeabi_ldivmod>
 800b5a4:	2a00      	cmp	r2, #0
 800b5a6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800b5aa:	bfb7      	itett	lt
 800b5ac:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800b5b0:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800b5b4:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800b5b8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800b5bc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800b5c0:	fbb2 f1f0 	udiv	r1, r2, r0
 800b5c4:	fb00 2211 	mls	r2, r0, r1, r2
 800b5c8:	203c      	movs	r0, #60	; 0x3c
 800b5ca:	60a1      	str	r1, [r4, #8]
 800b5cc:	fbb2 f1f0 	udiv	r1, r2, r0
 800b5d0:	fb00 2211 	mls	r2, r0, r1, r2
 800b5d4:	6061      	str	r1, [r4, #4]
 800b5d6:	6022      	str	r2, [r4, #0]
 800b5d8:	2107      	movs	r1, #7
 800b5da:	1cda      	adds	r2, r3, #3
 800b5dc:	fb92 f1f1 	sdiv	r1, r2, r1
 800b5e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b5e4:	1a52      	subs	r2, r2, r1
 800b5e6:	bf48      	it	mi
 800b5e8:	3207      	addmi	r2, #7
 800b5ea:	4d38      	ldr	r5, [pc, #224]	; (800b6cc <gmtime_r+0x14c>)
 800b5ec:	4838      	ldr	r0, [pc, #224]	; (800b6d0 <gmtime_r+0x150>)
 800b5ee:	61a2      	str	r2, [r4, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bfb7      	itett	lt
 800b5f4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800b5f8:	fb93 f5f5 	sdivge	r5, r3, r5
 800b5fc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800b600:	fb92 f5f5 	sdivlt	r5, r2, r5
 800b604:	fb00 3005 	mla	r0, r0, r5, r3
 800b608:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800b60c:	fbb0 f2f2 	udiv	r2, r0, r2
 800b610:	4402      	add	r2, r0
 800b612:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800b616:	fbb0 f1f3 	udiv	r1, r0, r3
 800b61a:	1a52      	subs	r2, r2, r1
 800b61c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b620:	492c      	ldr	r1, [pc, #176]	; (800b6d4 <gmtime_r+0x154>)
 800b622:	fbb0 f1f1 	udiv	r1, r0, r1
 800b626:	2764      	movs	r7, #100	; 0x64
 800b628:	1a52      	subs	r2, r2, r1
 800b62a:	fbb2 f1fc 	udiv	r1, r2, ip
 800b62e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b632:	fbb1 f6f7 	udiv	r6, r1, r7
 800b636:	1af3      	subs	r3, r6, r3
 800b638:	4403      	add	r3, r0
 800b63a:	fb0c 3311 	mls	r3, ip, r1, r3
 800b63e:	2299      	movs	r2, #153	; 0x99
 800b640:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800b644:	f10e 0e02 	add.w	lr, lr, #2
 800b648:	f103 0c01 	add.w	ip, r3, #1
 800b64c:	fbbe f0f2 	udiv	r0, lr, r2
 800b650:	4342      	muls	r2, r0
 800b652:	3202      	adds	r2, #2
 800b654:	f04f 0805 	mov.w	r8, #5
 800b658:	fbb2 f2f8 	udiv	r2, r2, r8
 800b65c:	ebac 0c02 	sub.w	ip, ip, r2
 800b660:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800b664:	4596      	cmp	lr, r2
 800b666:	bf94      	ite	ls
 800b668:	2202      	movls	r2, #2
 800b66a:	f06f 0209 	mvnhi.w	r2, #9
 800b66e:	4410      	add	r0, r2
 800b670:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b674:	fb02 1505 	mla	r5, r2, r5, r1
 800b678:	2801      	cmp	r0, #1
 800b67a:	bf98      	it	ls
 800b67c:	3501      	addls	r5, #1
 800b67e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800b682:	d30d      	bcc.n	800b6a0 <gmtime_r+0x120>
 800b684:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b688:	61e3      	str	r3, [r4, #28]
 800b68a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800b68e:	2300      	movs	r3, #0
 800b690:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800b694:	f8c4 c00c 	str.w	ip, [r4, #12]
 800b698:	6223      	str	r3, [r4, #32]
 800b69a:	4620      	mov	r0, r4
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	078a      	lsls	r2, r1, #30
 800b6a2:	d102      	bne.n	800b6aa <gmtime_r+0x12a>
 800b6a4:	fb07 1616 	mls	r6, r7, r6, r1
 800b6a8:	b95e      	cbnz	r6, 800b6c2 <gmtime_r+0x142>
 800b6aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b6ae:	fbb1 f6f2 	udiv	r6, r1, r2
 800b6b2:	fb02 1216 	mls	r2, r2, r6, r1
 800b6b6:	fab2 f282 	clz	r2, r2
 800b6ba:	0952      	lsrs	r2, r2, #5
 800b6bc:	333b      	adds	r3, #59	; 0x3b
 800b6be:	4413      	add	r3, r2
 800b6c0:	e7e2      	b.n	800b688 <gmtime_r+0x108>
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	e7fa      	b.n	800b6bc <gmtime_r+0x13c>
 800b6c6:	bf00      	nop
 800b6c8:	00015180 	.word	0x00015180
 800b6cc:	00023ab1 	.word	0x00023ab1
 800b6d0:	fffdc54f 	.word	0xfffdc54f
 800b6d4:	00023ab0 	.word	0x00023ab0

0800b6d8 <__libc_init_array>:
 800b6d8:	b570      	push	{r4, r5, r6, lr}
 800b6da:	4d0d      	ldr	r5, [pc, #52]	; (800b710 <__libc_init_array+0x38>)
 800b6dc:	4c0d      	ldr	r4, [pc, #52]	; (800b714 <__libc_init_array+0x3c>)
 800b6de:	1b64      	subs	r4, r4, r5
 800b6e0:	10a4      	asrs	r4, r4, #2
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	42a6      	cmp	r6, r4
 800b6e6:	d109      	bne.n	800b6fc <__libc_init_array+0x24>
 800b6e8:	4d0b      	ldr	r5, [pc, #44]	; (800b718 <__libc_init_array+0x40>)
 800b6ea:	4c0c      	ldr	r4, [pc, #48]	; (800b71c <__libc_init_array+0x44>)
 800b6ec:	f004 fc70 	bl	800ffd0 <_init>
 800b6f0:	1b64      	subs	r4, r4, r5
 800b6f2:	10a4      	asrs	r4, r4, #2
 800b6f4:	2600      	movs	r6, #0
 800b6f6:	42a6      	cmp	r6, r4
 800b6f8:	d105      	bne.n	800b706 <__libc_init_array+0x2e>
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}
 800b6fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b700:	4798      	blx	r3
 800b702:	3601      	adds	r6, #1
 800b704:	e7ee      	b.n	800b6e4 <__libc_init_array+0xc>
 800b706:	f855 3b04 	ldr.w	r3, [r5], #4
 800b70a:	4798      	blx	r3
 800b70c:	3601      	adds	r6, #1
 800b70e:	e7f2      	b.n	800b6f6 <__libc_init_array+0x1e>
 800b710:	080117e8 	.word	0x080117e8
 800b714:	080117e8 	.word	0x080117e8
 800b718:	080117e8 	.word	0x080117e8
 800b71c:	080117ec 	.word	0x080117ec

0800b720 <malloc>:
 800b720:	4b02      	ldr	r3, [pc, #8]	; (800b72c <malloc+0xc>)
 800b722:	4601      	mov	r1, r0
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	f000 baf1 	b.w	800bd0c <_malloc_r>
 800b72a:	bf00      	nop
 800b72c:	200002c4 	.word	0x200002c4

0800b730 <free>:
 800b730:	4b02      	ldr	r3, [pc, #8]	; (800b73c <free+0xc>)
 800b732:	4601      	mov	r1, r0
 800b734:	6818      	ldr	r0, [r3, #0]
 800b736:	f000 ba7d 	b.w	800bc34 <_free_r>
 800b73a:	bf00      	nop
 800b73c:	200002c4 	.word	0x200002c4

0800b740 <memset>:
 800b740:	4402      	add	r2, r0
 800b742:	4603      	mov	r3, r0
 800b744:	4293      	cmp	r3, r2
 800b746:	d100      	bne.n	800b74a <memset+0xa>
 800b748:	4770      	bx	lr
 800b74a:	f803 1b01 	strb.w	r1, [r3], #1
 800b74e:	e7f9      	b.n	800b744 <memset+0x4>

0800b750 <validate_structure>:
 800b750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b752:	6801      	ldr	r1, [r0, #0]
 800b754:	293b      	cmp	r1, #59	; 0x3b
 800b756:	4604      	mov	r4, r0
 800b758:	d911      	bls.n	800b77e <validate_structure+0x2e>
 800b75a:	223c      	movs	r2, #60	; 0x3c
 800b75c:	4668      	mov	r0, sp
 800b75e:	f001 fb87 	bl	800ce70 <div>
 800b762:	9a01      	ldr	r2, [sp, #4]
 800b764:	6863      	ldr	r3, [r4, #4]
 800b766:	9900      	ldr	r1, [sp, #0]
 800b768:	2a00      	cmp	r2, #0
 800b76a:	440b      	add	r3, r1
 800b76c:	6063      	str	r3, [r4, #4]
 800b76e:	bfbb      	ittet	lt
 800b770:	323c      	addlt	r2, #60	; 0x3c
 800b772:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b776:	6022      	strge	r2, [r4, #0]
 800b778:	6022      	strlt	r2, [r4, #0]
 800b77a:	bfb8      	it	lt
 800b77c:	6063      	strlt	r3, [r4, #4]
 800b77e:	6861      	ldr	r1, [r4, #4]
 800b780:	293b      	cmp	r1, #59	; 0x3b
 800b782:	d911      	bls.n	800b7a8 <validate_structure+0x58>
 800b784:	223c      	movs	r2, #60	; 0x3c
 800b786:	4668      	mov	r0, sp
 800b788:	f001 fb72 	bl	800ce70 <div>
 800b78c:	9a01      	ldr	r2, [sp, #4]
 800b78e:	68a3      	ldr	r3, [r4, #8]
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	2a00      	cmp	r2, #0
 800b794:	440b      	add	r3, r1
 800b796:	60a3      	str	r3, [r4, #8]
 800b798:	bfbb      	ittet	lt
 800b79a:	323c      	addlt	r2, #60	; 0x3c
 800b79c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b7a0:	6062      	strge	r2, [r4, #4]
 800b7a2:	6062      	strlt	r2, [r4, #4]
 800b7a4:	bfb8      	it	lt
 800b7a6:	60a3      	strlt	r3, [r4, #8]
 800b7a8:	68a1      	ldr	r1, [r4, #8]
 800b7aa:	2917      	cmp	r1, #23
 800b7ac:	d911      	bls.n	800b7d2 <validate_structure+0x82>
 800b7ae:	2218      	movs	r2, #24
 800b7b0:	4668      	mov	r0, sp
 800b7b2:	f001 fb5d 	bl	800ce70 <div>
 800b7b6:	9a01      	ldr	r2, [sp, #4]
 800b7b8:	68e3      	ldr	r3, [r4, #12]
 800b7ba:	9900      	ldr	r1, [sp, #0]
 800b7bc:	2a00      	cmp	r2, #0
 800b7be:	440b      	add	r3, r1
 800b7c0:	60e3      	str	r3, [r4, #12]
 800b7c2:	bfbb      	ittet	lt
 800b7c4:	3218      	addlt	r2, #24
 800b7c6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b7ca:	60a2      	strge	r2, [r4, #8]
 800b7cc:	60a2      	strlt	r2, [r4, #8]
 800b7ce:	bfb8      	it	lt
 800b7d0:	60e3      	strlt	r3, [r4, #12]
 800b7d2:	6921      	ldr	r1, [r4, #16]
 800b7d4:	290b      	cmp	r1, #11
 800b7d6:	d911      	bls.n	800b7fc <validate_structure+0xac>
 800b7d8:	220c      	movs	r2, #12
 800b7da:	4668      	mov	r0, sp
 800b7dc:	f001 fb48 	bl	800ce70 <div>
 800b7e0:	9a01      	ldr	r2, [sp, #4]
 800b7e2:	6963      	ldr	r3, [r4, #20]
 800b7e4:	9900      	ldr	r1, [sp, #0]
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	440b      	add	r3, r1
 800b7ea:	6163      	str	r3, [r4, #20]
 800b7ec:	bfbb      	ittet	lt
 800b7ee:	320c      	addlt	r2, #12
 800b7f0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b7f4:	6122      	strge	r2, [r4, #16]
 800b7f6:	6122      	strlt	r2, [r4, #16]
 800b7f8:	bfb8      	it	lt
 800b7fa:	6163      	strlt	r3, [r4, #20]
 800b7fc:	6963      	ldr	r3, [r4, #20]
 800b7fe:	0798      	lsls	r0, r3, #30
 800b800:	d120      	bne.n	800b844 <validate_structure+0xf4>
 800b802:	2164      	movs	r1, #100	; 0x64
 800b804:	fb93 f2f1 	sdiv	r2, r3, r1
 800b808:	fb01 3212 	mls	r2, r1, r2, r3
 800b80c:	b9e2      	cbnz	r2, 800b848 <validate_structure+0xf8>
 800b80e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800b812:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b816:	fb93 f1f2 	sdiv	r1, r3, r2
 800b81a:	fb02 3311 	mls	r3, r2, r1, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bf14      	ite	ne
 800b822:	231c      	movne	r3, #28
 800b824:	231d      	moveq	r3, #29
 800b826:	68e2      	ldr	r2, [r4, #12]
 800b828:	2a00      	cmp	r2, #0
 800b82a:	dc0f      	bgt.n	800b84c <validate_structure+0xfc>
 800b82c:	4f33      	ldr	r7, [pc, #204]	; (800b8fc <validate_structure+0x1ac>)
 800b82e:	260b      	movs	r6, #11
 800b830:	2064      	movs	r0, #100	; 0x64
 800b832:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800b836:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b83a:	f1bc 0f00 	cmp.w	ip, #0
 800b83e:	dd31      	ble.n	800b8a4 <validate_structure+0x154>
 800b840:	b003      	add	sp, #12
 800b842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b844:	231c      	movs	r3, #28
 800b846:	e7ee      	b.n	800b826 <validate_structure+0xd6>
 800b848:	231d      	movs	r3, #29
 800b84a:	e7ec      	b.n	800b826 <validate_structure+0xd6>
 800b84c:	4e2b      	ldr	r6, [pc, #172]	; (800b8fc <validate_structure+0x1ac>)
 800b84e:	2700      	movs	r7, #0
 800b850:	2064      	movs	r0, #100	; 0x64
 800b852:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800b856:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b85a:	2a01      	cmp	r2, #1
 800b85c:	bf14      	ite	ne
 800b85e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800b862:	469c      	moveq	ip, r3
 800b864:	4561      	cmp	r1, ip
 800b866:	ddeb      	ble.n	800b840 <validate_structure+0xf0>
 800b868:	3201      	adds	r2, #1
 800b86a:	eba1 010c 	sub.w	r1, r1, ip
 800b86e:	2a0c      	cmp	r2, #12
 800b870:	60e1      	str	r1, [r4, #12]
 800b872:	6122      	str	r2, [r4, #16]
 800b874:	d1ef      	bne.n	800b856 <validate_structure+0x106>
 800b876:	6963      	ldr	r3, [r4, #20]
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	0791      	lsls	r1, r2, #30
 800b87c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800b880:	d137      	bne.n	800b8f2 <validate_structure+0x1a2>
 800b882:	fb92 f1f0 	sdiv	r1, r2, r0
 800b886:	fb00 2211 	mls	r2, r0, r1, r2
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	d133      	bne.n	800b8f6 <validate_structure+0x1a6>
 800b88e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800b892:	fb93 f2f5 	sdiv	r2, r3, r5
 800b896:	fb05 3312 	mls	r3, r5, r2, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	bf14      	ite	ne
 800b89e:	231c      	movne	r3, #28
 800b8a0:	231d      	moveq	r3, #29
 800b8a2:	e7d8      	b.n	800b856 <validate_structure+0x106>
 800b8a4:	6921      	ldr	r1, [r4, #16]
 800b8a6:	3901      	subs	r1, #1
 800b8a8:	6121      	str	r1, [r4, #16]
 800b8aa:	3101      	adds	r1, #1
 800b8ac:	d114      	bne.n	800b8d8 <validate_structure+0x188>
 800b8ae:	6963      	ldr	r3, [r4, #20]
 800b8b0:	1e5a      	subs	r2, r3, #1
 800b8b2:	0791      	lsls	r1, r2, #30
 800b8b4:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800b8b8:	d117      	bne.n	800b8ea <validate_structure+0x19a>
 800b8ba:	fb92 f1f0 	sdiv	r1, r2, r0
 800b8be:	fb00 2211 	mls	r2, r0, r1, r2
 800b8c2:	b9a2      	cbnz	r2, 800b8ee <validate_structure+0x19e>
 800b8c4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800b8c8:	fb93 f2f5 	sdiv	r2, r3, r5
 800b8cc:	fb05 3312 	mls	r3, r5, r2, r3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bf14      	ite	ne
 800b8d4:	231c      	movne	r3, #28
 800b8d6:	231d      	moveq	r3, #29
 800b8d8:	6922      	ldr	r2, [r4, #16]
 800b8da:	2a01      	cmp	r2, #1
 800b8dc:	bf14      	ite	ne
 800b8de:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800b8e2:	461a      	moveq	r2, r3
 800b8e4:	4462      	add	r2, ip
 800b8e6:	60e2      	str	r2, [r4, #12]
 800b8e8:	e7a5      	b.n	800b836 <validate_structure+0xe6>
 800b8ea:	231c      	movs	r3, #28
 800b8ec:	e7f4      	b.n	800b8d8 <validate_structure+0x188>
 800b8ee:	231d      	movs	r3, #29
 800b8f0:	e7f2      	b.n	800b8d8 <validate_structure+0x188>
 800b8f2:	231c      	movs	r3, #28
 800b8f4:	e7af      	b.n	800b856 <validate_structure+0x106>
 800b8f6:	231d      	movs	r3, #29
 800b8f8:	e7ad      	b.n	800b856 <validate_structure+0x106>
 800b8fa:	bf00      	nop
 800b8fc:	08011294 	.word	0x08011294

0800b900 <mktime>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	b085      	sub	sp, #20
 800b906:	4607      	mov	r7, r0
 800b908:	f002 f996 	bl	800dc38 <__gettzinfo>
 800b90c:	4681      	mov	r9, r0
 800b90e:	4638      	mov	r0, r7
 800b910:	f7ff ff1e 	bl	800b750 <validate_structure>
 800b914:	e9d7 4000 	ldrd	r4, r0, [r7]
 800b918:	233c      	movs	r3, #60	; 0x3c
 800b91a:	fb03 4400 	mla	r4, r3, r0, r4
 800b91e:	68b8      	ldr	r0, [r7, #8]
 800b920:	4abc      	ldr	r2, [pc, #752]	; (800bc14 <mktime+0x314>)
 800b922:	697e      	ldr	r6, [r7, #20]
 800b924:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b928:	fb03 4400 	mla	r4, r3, r0, r4
 800b92c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800b930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b934:	3d01      	subs	r5, #1
 800b936:	2b01      	cmp	r3, #1
 800b938:	4415      	add	r5, r2
 800b93a:	dd11      	ble.n	800b960 <mktime+0x60>
 800b93c:	07b1      	lsls	r1, r6, #30
 800b93e:	d10f      	bne.n	800b960 <mktime+0x60>
 800b940:	2264      	movs	r2, #100	; 0x64
 800b942:	fb96 f3f2 	sdiv	r3, r6, r2
 800b946:	fb02 6313 	mls	r3, r2, r3, r6
 800b94a:	b943      	cbnz	r3, 800b95e <mktime+0x5e>
 800b94c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800b950:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b954:	fb93 f1f2 	sdiv	r1, r3, r2
 800b958:	fb02 3311 	mls	r3, r2, r1, r3
 800b95c:	b903      	cbnz	r3, 800b960 <mktime+0x60>
 800b95e:	3501      	adds	r5, #1
 800b960:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800b964:	3310      	adds	r3, #16
 800b966:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b96a:	4293      	cmp	r3, r2
 800b96c:	61fd      	str	r5, [r7, #28]
 800b96e:	f200 815d 	bhi.w	800bc2c <mktime+0x32c>
 800b972:	2e46      	cmp	r6, #70	; 0x46
 800b974:	dd71      	ble.n	800ba5a <mktime+0x15a>
 800b976:	2346      	movs	r3, #70	; 0x46
 800b978:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b97c:	2164      	movs	r1, #100	; 0x64
 800b97e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b982:	079a      	lsls	r2, r3, #30
 800b984:	d163      	bne.n	800ba4e <mktime+0x14e>
 800b986:	fb93 f2f1 	sdiv	r2, r3, r1
 800b98a:	fb01 3212 	mls	r2, r1, r2, r3
 800b98e:	2a00      	cmp	r2, #0
 800b990:	d160      	bne.n	800ba54 <mktime+0x154>
 800b992:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800b996:	fb92 fef0 	sdiv	lr, r2, r0
 800b99a:	fb00 221e 	mls	r2, r0, lr, r2
 800b99e:	2a00      	cmp	r2, #0
 800b9a0:	bf14      	ite	ne
 800b9a2:	4662      	movne	r2, ip
 800b9a4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	429e      	cmp	r6, r3
 800b9ac:	4415      	add	r5, r2
 800b9ae:	d1e8      	bne.n	800b982 <mktime+0x82>
 800b9b0:	4b99      	ldr	r3, [pc, #612]	; (800bc18 <mktime+0x318>)
 800b9b2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b9b6:	fbc5 4803 	smlal	r4, r8, r5, r3
 800b9ba:	f001 f887 	bl	800cacc <__tz_lock>
 800b9be:	f001 f891 	bl	800cae4 <_tzset_unlocked>
 800b9c2:	4b96      	ldr	r3, [pc, #600]	; (800bc1c <mktime+0x31c>)
 800b9c4:	f8d3 b000 	ldr.w	fp, [r3]
 800b9c8:	f1bb 0f00 	cmp.w	fp, #0
 800b9cc:	d039      	beq.n	800ba42 <mktime+0x142>
 800b9ce:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800b9d2:	6978      	ldr	r0, [r7, #20]
 800b9d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b9d8:	f1bb 0f01 	cmp.w	fp, #1
 800b9dc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b9e0:	46da      	mov	sl, fp
 800b9e2:	bfa8      	it	ge
 800b9e4:	f04f 0a01 	movge.w	sl, #1
 800b9e8:	4283      	cmp	r3, r0
 800b9ea:	d178      	bne.n	800bade <mktime+0x1de>
 800b9ec:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800b9f0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800b9f4:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800b9f8:	1a5b      	subs	r3, r3, r1
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800ba00:	9303      	str	r3, [sp, #12]
 800ba02:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800ba06:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	ebb3 0c02 	subs.w	ip, r3, r2
 800ba10:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800ba14:	4564      	cmp	r4, ip
 800ba16:	eb78 0300 	sbcs.w	r3, r8, r0
 800ba1a:	da66      	bge.n	800baea <mktime+0x1ea>
 800ba1c:	f8d9 3000 	ldr.w	r3, [r9]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d06f      	beq.n	800bb04 <mktime+0x204>
 800ba24:	9b02      	ldr	r3, [sp, #8]
 800ba26:	429c      	cmp	r4, r3
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	eb78 0303 	sbcs.w	r3, r8, r3
 800ba2e:	db03      	blt.n	800ba38 <mktime+0x138>
 800ba30:	4564      	cmp	r4, ip
 800ba32:	eb78 0300 	sbcs.w	r3, r8, r0
 800ba36:	db6b      	blt.n	800bb10 <mktime+0x210>
 800ba38:	f1bb 0f00 	cmp.w	fp, #0
 800ba3c:	f04f 0b00 	mov.w	fp, #0
 800ba40:	da6b      	bge.n	800bb1a <mktime+0x21a>
 800ba42:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800ba46:	190c      	adds	r4, r1, r4
 800ba48:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800ba4c:	e0a9      	b.n	800bba2 <mktime+0x2a2>
 800ba4e:	f240 126d 	movw	r2, #365	; 0x16d
 800ba52:	e7a9      	b.n	800b9a8 <mktime+0xa8>
 800ba54:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800ba58:	e7a6      	b.n	800b9a8 <mktime+0xa8>
 800ba5a:	d0a9      	beq.n	800b9b0 <mktime+0xb0>
 800ba5c:	2345      	movs	r3, #69	; 0x45
 800ba5e:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ba62:	2164      	movs	r1, #100	; 0x64
 800ba64:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ba68:	e012      	b.n	800ba90 <mktime+0x190>
 800ba6a:	bb62      	cbnz	r2, 800bac6 <mktime+0x1c6>
 800ba6c:	fb93 f2f1 	sdiv	r2, r3, r1
 800ba70:	fb01 3212 	mls	r2, r1, r2, r3
 800ba74:	bb52      	cbnz	r2, 800bacc <mktime+0x1cc>
 800ba76:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800ba7a:	fb92 fef0 	sdiv	lr, r2, r0
 800ba7e:	fb00 221e 	mls	r2, r0, lr, r2
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	bf14      	ite	ne
 800ba86:	4662      	movne	r2, ip
 800ba88:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800ba8c:	1aad      	subs	r5, r5, r2
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	429e      	cmp	r6, r3
 800ba92:	f003 0203 	and.w	r2, r3, #3
 800ba96:	dbe8      	blt.n	800ba6a <mktime+0x16a>
 800ba98:	b9da      	cbnz	r2, 800bad2 <mktime+0x1d2>
 800ba9a:	2264      	movs	r2, #100	; 0x64
 800ba9c:	fb96 f3f2 	sdiv	r3, r6, r2
 800baa0:	fb02 6313 	mls	r3, r2, r3, r6
 800baa4:	b9c3      	cbnz	r3, 800bad8 <mktime+0x1d8>
 800baa6:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800baaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800baae:	fb93 f1f2 	sdiv	r1, r3, r2
 800bab2:	fb02 3311 	mls	r3, r2, r1, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f240 136d 	movw	r3, #365	; 0x16d
 800babc:	bf08      	it	eq
 800babe:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800bac2:	1aed      	subs	r5, r5, r3
 800bac4:	e774      	b.n	800b9b0 <mktime+0xb0>
 800bac6:	f240 126d 	movw	r2, #365	; 0x16d
 800baca:	e7df      	b.n	800ba8c <mktime+0x18c>
 800bacc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bad0:	e7dc      	b.n	800ba8c <mktime+0x18c>
 800bad2:	f240 136d 	movw	r3, #365	; 0x16d
 800bad6:	e7f4      	b.n	800bac2 <mktime+0x1c2>
 800bad8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800badc:	e7f1      	b.n	800bac2 <mktime+0x1c2>
 800bade:	f000 ff4b 	bl	800c978 <__tzcalc_limits>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d182      	bne.n	800b9ec <mktime+0xec>
 800bae6:	46d3      	mov	fp, sl
 800bae8:	e050      	b.n	800bb8c <mktime+0x28c>
 800baea:	9b01      	ldr	r3, [sp, #4]
 800baec:	1a5b      	subs	r3, r3, r1
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800baf4:	eb6e 0e03 	sbc.w	lr, lr, r3
 800baf8:	9b01      	ldr	r3, [sp, #4]
 800bafa:	429c      	cmp	r4, r3
 800bafc:	eb78 030e 	sbcs.w	r3, r8, lr
 800bb00:	dbf1      	blt.n	800bae6 <mktime+0x1e6>
 800bb02:	e78b      	b.n	800ba1c <mktime+0x11c>
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	429c      	cmp	r4, r3
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	eb78 0303 	sbcs.w	r3, r8, r3
 800bb0e:	db8f      	blt.n	800ba30 <mktime+0x130>
 800bb10:	f1bb 0f00 	cmp.w	fp, #0
 800bb14:	db3e      	blt.n	800bb94 <mktime+0x294>
 800bb16:	f04f 0b01 	mov.w	fp, #1
 800bb1a:	ea8a 0a0b 	eor.w	sl, sl, fp
 800bb1e:	f1ba 0f01 	cmp.w	sl, #1
 800bb22:	d133      	bne.n	800bb8c <mktime+0x28c>
 800bb24:	f1bb 0f00 	cmp.w	fp, #0
 800bb28:	d04e      	beq.n	800bbc8 <mktime+0x2c8>
 800bb2a:	1a52      	subs	r2, r2, r1
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800bb32:	4413      	add	r3, r2
 800bb34:	1914      	adds	r4, r2, r4
 800bb36:	603b      	str	r3, [r7, #0]
 800bb38:	4638      	mov	r0, r7
 800bb3a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800bb3e:	f7ff fe07 	bl	800b750 <validate_structure>
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	ebb2 020a 	subs.w	r2, r2, sl
 800bb48:	d020      	beq.n	800bb8c <mktime+0x28c>
 800bb4a:	2a01      	cmp	r2, #1
 800bb4c:	dc3e      	bgt.n	800bbcc <mktime+0x2cc>
 800bb4e:	1c90      	adds	r0, r2, #2
 800bb50:	bfd8      	it	le
 800bb52:	2201      	movle	r2, #1
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	18d3      	adds	r3, r2, r3
 800bb58:	4415      	add	r5, r2
 800bb5a:	d540      	bpl.n	800bbde <mktime+0x2de>
 800bb5c:	1e73      	subs	r3, r6, #1
 800bb5e:	0799      	lsls	r1, r3, #30
 800bb60:	d137      	bne.n	800bbd2 <mktime+0x2d2>
 800bb62:	2264      	movs	r2, #100	; 0x64
 800bb64:	fb93 f1f2 	sdiv	r1, r3, r2
 800bb68:	fb02 3311 	mls	r3, r2, r1, r3
 800bb6c:	bba3      	cbnz	r3, 800bbd8 <mktime+0x2d8>
 800bb6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800bb72:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800bb76:	fb96 f2f3 	sdiv	r2, r6, r3
 800bb7a:	fb03 6612 	mls	r6, r3, r2, r6
 800bb7e:	2e00      	cmp	r6, #0
 800bb80:	f240 136d 	movw	r3, #365	; 0x16d
 800bb84:	bf18      	it	ne
 800bb86:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	f1bb 0f01 	cmp.w	fp, #1
 800bb90:	f47f af57 	bne.w	800ba42 <mktime+0x142>
 800bb94:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800bb98:	190c      	adds	r4, r1, r4
 800bb9a:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800bb9e:	f04f 0b01 	mov.w	fp, #1
 800bba2:	f000 ff99 	bl	800cad8 <__tz_unlock>
 800bba6:	3504      	adds	r5, #4
 800bba8:	2307      	movs	r3, #7
 800bbaa:	fb95 f3f3 	sdiv	r3, r5, r3
 800bbae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bbb2:	1aed      	subs	r5, r5, r3
 800bbb4:	bf48      	it	mi
 800bbb6:	3507      	addmi	r5, #7
 800bbb8:	f8c7 b020 	str.w	fp, [r7, #32]
 800bbbc:	61bd      	str	r5, [r7, #24]
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4641      	mov	r1, r8
 800bbc2:	b005      	add	sp, #20
 800bbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc8:	1a8a      	subs	r2, r1, r2
 800bbca:	e7af      	b.n	800bb2c <mktime+0x22c>
 800bbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd0:	e7c0      	b.n	800bb54 <mktime+0x254>
 800bbd2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800bbd6:	e7d8      	b.n	800bb8a <mktime+0x28a>
 800bbd8:	f240 136d 	movw	r3, #365	; 0x16d
 800bbdc:	e7d5      	b.n	800bb8a <mktime+0x28a>
 800bbde:	07b2      	lsls	r2, r6, #30
 800bbe0:	d11e      	bne.n	800bc20 <mktime+0x320>
 800bbe2:	2164      	movs	r1, #100	; 0x64
 800bbe4:	fb96 f2f1 	sdiv	r2, r6, r1
 800bbe8:	fb01 6212 	mls	r2, r1, r2, r6
 800bbec:	b9da      	cbnz	r2, 800bc26 <mktime+0x326>
 800bbee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bbf2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800bbf6:	fb96 f1f2 	sdiv	r1, r6, r2
 800bbfa:	fb02 6611 	mls	r6, r2, r1, r6
 800bbfe:	2e00      	cmp	r6, #0
 800bc00:	f240 126d 	movw	r2, #365	; 0x16d
 800bc04:	bf08      	it	eq
 800bc06:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	bfa8      	it	ge
 800bc0e:	1a9b      	subge	r3, r3, r2
 800bc10:	e7bb      	b.n	800bb8a <mktime+0x28a>
 800bc12:	bf00      	nop
 800bc14:	080112c4 	.word	0x080112c4
 800bc18:	00015180 	.word	0x00015180
 800bc1c:	2000107c 	.word	0x2000107c
 800bc20:	f240 126d 	movw	r2, #365	; 0x16d
 800bc24:	e7f1      	b.n	800bc0a <mktime+0x30a>
 800bc26:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bc2a:	e7ee      	b.n	800bc0a <mktime+0x30a>
 800bc2c:	f04f 34ff 	mov.w	r4, #4294967295
 800bc30:	46a0      	mov	r8, r4
 800bc32:	e7c4      	b.n	800bbbe <mktime+0x2be>

0800bc34 <_free_r>:
 800bc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc36:	2900      	cmp	r1, #0
 800bc38:	d044      	beq.n	800bcc4 <_free_r+0x90>
 800bc3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc3e:	9001      	str	r0, [sp, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f1a1 0404 	sub.w	r4, r1, #4
 800bc46:	bfb8      	it	lt
 800bc48:	18e4      	addlt	r4, r4, r3
 800bc4a:	f002 f823 	bl	800dc94 <__malloc_lock>
 800bc4e:	4a1e      	ldr	r2, [pc, #120]	; (800bcc8 <_free_r+0x94>)
 800bc50:	9801      	ldr	r0, [sp, #4]
 800bc52:	6813      	ldr	r3, [r2, #0]
 800bc54:	b933      	cbnz	r3, 800bc64 <_free_r+0x30>
 800bc56:	6063      	str	r3, [r4, #4]
 800bc58:	6014      	str	r4, [r2, #0]
 800bc5a:	b003      	add	sp, #12
 800bc5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc60:	f002 b81e 	b.w	800dca0 <__malloc_unlock>
 800bc64:	42a3      	cmp	r3, r4
 800bc66:	d908      	bls.n	800bc7a <_free_r+0x46>
 800bc68:	6825      	ldr	r5, [r4, #0]
 800bc6a:	1961      	adds	r1, r4, r5
 800bc6c:	428b      	cmp	r3, r1
 800bc6e:	bf01      	itttt	eq
 800bc70:	6819      	ldreq	r1, [r3, #0]
 800bc72:	685b      	ldreq	r3, [r3, #4]
 800bc74:	1949      	addeq	r1, r1, r5
 800bc76:	6021      	streq	r1, [r4, #0]
 800bc78:	e7ed      	b.n	800bc56 <_free_r+0x22>
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	b10b      	cbz	r3, 800bc84 <_free_r+0x50>
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	d9fa      	bls.n	800bc7a <_free_r+0x46>
 800bc84:	6811      	ldr	r1, [r2, #0]
 800bc86:	1855      	adds	r5, r2, r1
 800bc88:	42a5      	cmp	r5, r4
 800bc8a:	d10b      	bne.n	800bca4 <_free_r+0x70>
 800bc8c:	6824      	ldr	r4, [r4, #0]
 800bc8e:	4421      	add	r1, r4
 800bc90:	1854      	adds	r4, r2, r1
 800bc92:	42a3      	cmp	r3, r4
 800bc94:	6011      	str	r1, [r2, #0]
 800bc96:	d1e0      	bne.n	800bc5a <_free_r+0x26>
 800bc98:	681c      	ldr	r4, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	6053      	str	r3, [r2, #4]
 800bc9e:	4421      	add	r1, r4
 800bca0:	6011      	str	r1, [r2, #0]
 800bca2:	e7da      	b.n	800bc5a <_free_r+0x26>
 800bca4:	d902      	bls.n	800bcac <_free_r+0x78>
 800bca6:	230c      	movs	r3, #12
 800bca8:	6003      	str	r3, [r0, #0]
 800bcaa:	e7d6      	b.n	800bc5a <_free_r+0x26>
 800bcac:	6825      	ldr	r5, [r4, #0]
 800bcae:	1961      	adds	r1, r4, r5
 800bcb0:	428b      	cmp	r3, r1
 800bcb2:	bf04      	itt	eq
 800bcb4:	6819      	ldreq	r1, [r3, #0]
 800bcb6:	685b      	ldreq	r3, [r3, #4]
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	bf04      	itt	eq
 800bcbc:	1949      	addeq	r1, r1, r5
 800bcbe:	6021      	streq	r1, [r4, #0]
 800bcc0:	6054      	str	r4, [r2, #4]
 800bcc2:	e7ca      	b.n	800bc5a <_free_r+0x26>
 800bcc4:	b003      	add	sp, #12
 800bcc6:	bd30      	pop	{r4, r5, pc}
 800bcc8:	20001058 	.word	0x20001058

0800bccc <sbrk_aligned>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	4e0e      	ldr	r6, [pc, #56]	; (800bd08 <sbrk_aligned+0x3c>)
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	6831      	ldr	r1, [r6, #0]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	b911      	cbnz	r1, 800bcde <sbrk_aligned+0x12>
 800bcd8:	f000 fcf6 	bl	800c6c8 <_sbrk_r>
 800bcdc:	6030      	str	r0, [r6, #0]
 800bcde:	4621      	mov	r1, r4
 800bce0:	4628      	mov	r0, r5
 800bce2:	f000 fcf1 	bl	800c6c8 <_sbrk_r>
 800bce6:	1c43      	adds	r3, r0, #1
 800bce8:	d00a      	beq.n	800bd00 <sbrk_aligned+0x34>
 800bcea:	1cc4      	adds	r4, r0, #3
 800bcec:	f024 0403 	bic.w	r4, r4, #3
 800bcf0:	42a0      	cmp	r0, r4
 800bcf2:	d007      	beq.n	800bd04 <sbrk_aligned+0x38>
 800bcf4:	1a21      	subs	r1, r4, r0
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f000 fce6 	bl	800c6c8 <_sbrk_r>
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d101      	bne.n	800bd04 <sbrk_aligned+0x38>
 800bd00:	f04f 34ff 	mov.w	r4, #4294967295
 800bd04:	4620      	mov	r0, r4
 800bd06:	bd70      	pop	{r4, r5, r6, pc}
 800bd08:	2000105c 	.word	0x2000105c

0800bd0c <_malloc_r>:
 800bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd10:	1ccd      	adds	r5, r1, #3
 800bd12:	f025 0503 	bic.w	r5, r5, #3
 800bd16:	3508      	adds	r5, #8
 800bd18:	2d0c      	cmp	r5, #12
 800bd1a:	bf38      	it	cc
 800bd1c:	250c      	movcc	r5, #12
 800bd1e:	2d00      	cmp	r5, #0
 800bd20:	4607      	mov	r7, r0
 800bd22:	db01      	blt.n	800bd28 <_malloc_r+0x1c>
 800bd24:	42a9      	cmp	r1, r5
 800bd26:	d905      	bls.n	800bd34 <_malloc_r+0x28>
 800bd28:	230c      	movs	r3, #12
 800bd2a:	603b      	str	r3, [r7, #0]
 800bd2c:	2600      	movs	r6, #0
 800bd2e:	4630      	mov	r0, r6
 800bd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd34:	4e2e      	ldr	r6, [pc, #184]	; (800bdf0 <_malloc_r+0xe4>)
 800bd36:	f001 ffad 	bl	800dc94 <__malloc_lock>
 800bd3a:	6833      	ldr	r3, [r6, #0]
 800bd3c:	461c      	mov	r4, r3
 800bd3e:	bb34      	cbnz	r4, 800bd8e <_malloc_r+0x82>
 800bd40:	4629      	mov	r1, r5
 800bd42:	4638      	mov	r0, r7
 800bd44:	f7ff ffc2 	bl	800bccc <sbrk_aligned>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	d14d      	bne.n	800bdea <_malloc_r+0xde>
 800bd4e:	6834      	ldr	r4, [r6, #0]
 800bd50:	4626      	mov	r6, r4
 800bd52:	2e00      	cmp	r6, #0
 800bd54:	d140      	bne.n	800bdd8 <_malloc_r+0xcc>
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	eb04 0803 	add.w	r8, r4, r3
 800bd60:	f000 fcb2 	bl	800c6c8 <_sbrk_r>
 800bd64:	4580      	cmp	r8, r0
 800bd66:	d13a      	bne.n	800bdde <_malloc_r+0xd2>
 800bd68:	6821      	ldr	r1, [r4, #0]
 800bd6a:	3503      	adds	r5, #3
 800bd6c:	1a6d      	subs	r5, r5, r1
 800bd6e:	f025 0503 	bic.w	r5, r5, #3
 800bd72:	3508      	adds	r5, #8
 800bd74:	2d0c      	cmp	r5, #12
 800bd76:	bf38      	it	cc
 800bd78:	250c      	movcc	r5, #12
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7ff ffa5 	bl	800bccc <sbrk_aligned>
 800bd82:	3001      	adds	r0, #1
 800bd84:	d02b      	beq.n	800bdde <_malloc_r+0xd2>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	442b      	add	r3, r5
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	e00e      	b.n	800bdac <_malloc_r+0xa0>
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	1b52      	subs	r2, r2, r5
 800bd92:	d41e      	bmi.n	800bdd2 <_malloc_r+0xc6>
 800bd94:	2a0b      	cmp	r2, #11
 800bd96:	d916      	bls.n	800bdc6 <_malloc_r+0xba>
 800bd98:	1961      	adds	r1, r4, r5
 800bd9a:	42a3      	cmp	r3, r4
 800bd9c:	6025      	str	r5, [r4, #0]
 800bd9e:	bf18      	it	ne
 800bda0:	6059      	strne	r1, [r3, #4]
 800bda2:	6863      	ldr	r3, [r4, #4]
 800bda4:	bf08      	it	eq
 800bda6:	6031      	streq	r1, [r6, #0]
 800bda8:	5162      	str	r2, [r4, r5]
 800bdaa:	604b      	str	r3, [r1, #4]
 800bdac:	4638      	mov	r0, r7
 800bdae:	f104 060b 	add.w	r6, r4, #11
 800bdb2:	f001 ff75 	bl	800dca0 <__malloc_unlock>
 800bdb6:	f026 0607 	bic.w	r6, r6, #7
 800bdba:	1d23      	adds	r3, r4, #4
 800bdbc:	1af2      	subs	r2, r6, r3
 800bdbe:	d0b6      	beq.n	800bd2e <_malloc_r+0x22>
 800bdc0:	1b9b      	subs	r3, r3, r6
 800bdc2:	50a3      	str	r3, [r4, r2]
 800bdc4:	e7b3      	b.n	800bd2e <_malloc_r+0x22>
 800bdc6:	6862      	ldr	r2, [r4, #4]
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	bf0c      	ite	eq
 800bdcc:	6032      	streq	r2, [r6, #0]
 800bdce:	605a      	strne	r2, [r3, #4]
 800bdd0:	e7ec      	b.n	800bdac <_malloc_r+0xa0>
 800bdd2:	4623      	mov	r3, r4
 800bdd4:	6864      	ldr	r4, [r4, #4]
 800bdd6:	e7b2      	b.n	800bd3e <_malloc_r+0x32>
 800bdd8:	4634      	mov	r4, r6
 800bdda:	6876      	ldr	r6, [r6, #4]
 800bddc:	e7b9      	b.n	800bd52 <_malloc_r+0x46>
 800bdde:	230c      	movs	r3, #12
 800bde0:	603b      	str	r3, [r7, #0]
 800bde2:	4638      	mov	r0, r7
 800bde4:	f001 ff5c 	bl	800dca0 <__malloc_unlock>
 800bde8:	e7a1      	b.n	800bd2e <_malloc_r+0x22>
 800bdea:	6025      	str	r5, [r4, #0]
 800bdec:	e7de      	b.n	800bdac <_malloc_r+0xa0>
 800bdee:	bf00      	nop
 800bdf0:	20001058 	.word	0x20001058

0800bdf4 <__cvt>:
 800bdf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	ec55 4b10 	vmov	r4, r5, d0
 800bdfc:	2d00      	cmp	r5, #0
 800bdfe:	460e      	mov	r6, r1
 800be00:	4619      	mov	r1, r3
 800be02:	462b      	mov	r3, r5
 800be04:	bfbb      	ittet	lt
 800be06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be0a:	461d      	movlt	r5, r3
 800be0c:	2300      	movge	r3, #0
 800be0e:	232d      	movlt	r3, #45	; 0x2d
 800be10:	700b      	strb	r3, [r1, #0]
 800be12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be18:	4691      	mov	r9, r2
 800be1a:	f023 0820 	bic.w	r8, r3, #32
 800be1e:	bfbc      	itt	lt
 800be20:	4622      	movlt	r2, r4
 800be22:	4614      	movlt	r4, r2
 800be24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be28:	d005      	beq.n	800be36 <__cvt+0x42>
 800be2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800be2e:	d100      	bne.n	800be32 <__cvt+0x3e>
 800be30:	3601      	adds	r6, #1
 800be32:	2102      	movs	r1, #2
 800be34:	e000      	b.n	800be38 <__cvt+0x44>
 800be36:	2103      	movs	r1, #3
 800be38:	ab03      	add	r3, sp, #12
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	ab02      	add	r3, sp, #8
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	ec45 4b10 	vmov	d0, r4, r5
 800be44:	4653      	mov	r3, sl
 800be46:	4632      	mov	r2, r6
 800be48:	f001 f8b2 	bl	800cfb0 <_dtoa_r>
 800be4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be50:	4607      	mov	r7, r0
 800be52:	d102      	bne.n	800be5a <__cvt+0x66>
 800be54:	f019 0f01 	tst.w	r9, #1
 800be58:	d022      	beq.n	800bea0 <__cvt+0xac>
 800be5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be5e:	eb07 0906 	add.w	r9, r7, r6
 800be62:	d110      	bne.n	800be86 <__cvt+0x92>
 800be64:	783b      	ldrb	r3, [r7, #0]
 800be66:	2b30      	cmp	r3, #48	; 0x30
 800be68:	d10a      	bne.n	800be80 <__cvt+0x8c>
 800be6a:	2200      	movs	r2, #0
 800be6c:	2300      	movs	r3, #0
 800be6e:	4620      	mov	r0, r4
 800be70:	4629      	mov	r1, r5
 800be72:	f7f4 fe41 	bl	8000af8 <__aeabi_dcmpeq>
 800be76:	b918      	cbnz	r0, 800be80 <__cvt+0x8c>
 800be78:	f1c6 0601 	rsb	r6, r6, #1
 800be7c:	f8ca 6000 	str.w	r6, [sl]
 800be80:	f8da 3000 	ldr.w	r3, [sl]
 800be84:	4499      	add	r9, r3
 800be86:	2200      	movs	r2, #0
 800be88:	2300      	movs	r3, #0
 800be8a:	4620      	mov	r0, r4
 800be8c:	4629      	mov	r1, r5
 800be8e:	f7f4 fe33 	bl	8000af8 <__aeabi_dcmpeq>
 800be92:	b108      	cbz	r0, 800be98 <__cvt+0xa4>
 800be94:	f8cd 900c 	str.w	r9, [sp, #12]
 800be98:	2230      	movs	r2, #48	; 0x30
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	454b      	cmp	r3, r9
 800be9e:	d307      	bcc.n	800beb0 <__cvt+0xbc>
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bea4:	1bdb      	subs	r3, r3, r7
 800bea6:	4638      	mov	r0, r7
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	b004      	add	sp, #16
 800beac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb0:	1c59      	adds	r1, r3, #1
 800beb2:	9103      	str	r1, [sp, #12]
 800beb4:	701a      	strb	r2, [r3, #0]
 800beb6:	e7f0      	b.n	800be9a <__cvt+0xa6>

0800beb8 <__exponent>:
 800beb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beba:	4603      	mov	r3, r0
 800bebc:	2900      	cmp	r1, #0
 800bebe:	bfb8      	it	lt
 800bec0:	4249      	neglt	r1, r1
 800bec2:	f803 2b02 	strb.w	r2, [r3], #2
 800bec6:	bfb4      	ite	lt
 800bec8:	222d      	movlt	r2, #45	; 0x2d
 800beca:	222b      	movge	r2, #43	; 0x2b
 800becc:	2909      	cmp	r1, #9
 800bece:	7042      	strb	r2, [r0, #1]
 800bed0:	dd2a      	ble.n	800bf28 <__exponent+0x70>
 800bed2:	f10d 0407 	add.w	r4, sp, #7
 800bed6:	46a4      	mov	ip, r4
 800bed8:	270a      	movs	r7, #10
 800beda:	46a6      	mov	lr, r4
 800bedc:	460a      	mov	r2, r1
 800bede:	fb91 f6f7 	sdiv	r6, r1, r7
 800bee2:	fb07 1516 	mls	r5, r7, r6, r1
 800bee6:	3530      	adds	r5, #48	; 0x30
 800bee8:	2a63      	cmp	r2, #99	; 0x63
 800beea:	f104 34ff 	add.w	r4, r4, #4294967295
 800beee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bef2:	4631      	mov	r1, r6
 800bef4:	dcf1      	bgt.n	800beda <__exponent+0x22>
 800bef6:	3130      	adds	r1, #48	; 0x30
 800bef8:	f1ae 0502 	sub.w	r5, lr, #2
 800befc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bf00:	1c44      	adds	r4, r0, #1
 800bf02:	4629      	mov	r1, r5
 800bf04:	4561      	cmp	r1, ip
 800bf06:	d30a      	bcc.n	800bf1e <__exponent+0x66>
 800bf08:	f10d 0209 	add.w	r2, sp, #9
 800bf0c:	eba2 020e 	sub.w	r2, r2, lr
 800bf10:	4565      	cmp	r5, ip
 800bf12:	bf88      	it	hi
 800bf14:	2200      	movhi	r2, #0
 800bf16:	4413      	add	r3, r2
 800bf18:	1a18      	subs	r0, r3, r0
 800bf1a:	b003      	add	sp, #12
 800bf1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bf26:	e7ed      	b.n	800bf04 <__exponent+0x4c>
 800bf28:	2330      	movs	r3, #48	; 0x30
 800bf2a:	3130      	adds	r1, #48	; 0x30
 800bf2c:	7083      	strb	r3, [r0, #2]
 800bf2e:	70c1      	strb	r1, [r0, #3]
 800bf30:	1d03      	adds	r3, r0, #4
 800bf32:	e7f1      	b.n	800bf18 <__exponent+0x60>

0800bf34 <_printf_float>:
 800bf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf38:	ed2d 8b02 	vpush	{d8}
 800bf3c:	b08d      	sub	sp, #52	; 0x34
 800bf3e:	460c      	mov	r4, r1
 800bf40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf44:	4616      	mov	r6, r2
 800bf46:	461f      	mov	r7, r3
 800bf48:	4605      	mov	r5, r0
 800bf4a:	f001 fe79 	bl	800dc40 <_localeconv_r>
 800bf4e:	f8d0 a000 	ldr.w	sl, [r0]
 800bf52:	4650      	mov	r0, sl
 800bf54:	f7f4 f94e 	bl	80001f4 <strlen>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf5c:	6823      	ldr	r3, [r4, #0]
 800bf5e:	9305      	str	r3, [sp, #20]
 800bf60:	f8d8 3000 	ldr.w	r3, [r8]
 800bf64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf68:	3307      	adds	r3, #7
 800bf6a:	f023 0307 	bic.w	r3, r3, #7
 800bf6e:	f103 0208 	add.w	r2, r3, #8
 800bf72:	f8c8 2000 	str.w	r2, [r8]
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf8c:	ee08 0a10 	vmov	s16, r0
 800bf90:	4b9f      	ldr	r3, [pc, #636]	; (800c210 <_printf_float+0x2dc>)
 800bf92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf96:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9a:	f7f4 fddf 	bl	8000b5c <__aeabi_dcmpun>
 800bf9e:	bb88      	cbnz	r0, 800c004 <_printf_float+0xd0>
 800bfa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfa4:	4b9a      	ldr	r3, [pc, #616]	; (800c210 <_printf_float+0x2dc>)
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	f7f4 fdb9 	bl	8000b20 <__aeabi_dcmple>
 800bfae:	bb48      	cbnz	r0, 800c004 <_printf_float+0xd0>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4640      	mov	r0, r8
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	f7f4 fda8 	bl	8000b0c <__aeabi_dcmplt>
 800bfbc:	b110      	cbz	r0, 800bfc4 <_printf_float+0x90>
 800bfbe:	232d      	movs	r3, #45	; 0x2d
 800bfc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfc4:	4b93      	ldr	r3, [pc, #588]	; (800c214 <_printf_float+0x2e0>)
 800bfc6:	4894      	ldr	r0, [pc, #592]	; (800c218 <_printf_float+0x2e4>)
 800bfc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bfcc:	bf94      	ite	ls
 800bfce:	4698      	movls	r8, r3
 800bfd0:	4680      	movhi	r8, r0
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	9b05      	ldr	r3, [sp, #20]
 800bfd8:	f023 0204 	bic.w	r2, r3, #4
 800bfdc:	6022      	str	r2, [r4, #0]
 800bfde:	f04f 0900 	mov.w	r9, #0
 800bfe2:	9700      	str	r7, [sp, #0]
 800bfe4:	4633      	mov	r3, r6
 800bfe6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 f9d8 	bl	800c3a0 <_printf_common>
 800bff0:	3001      	adds	r0, #1
 800bff2:	f040 8090 	bne.w	800c116 <_printf_float+0x1e2>
 800bff6:	f04f 30ff 	mov.w	r0, #4294967295
 800bffa:	b00d      	add	sp, #52	; 0x34
 800bffc:	ecbd 8b02 	vpop	{d8}
 800c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c004:	4642      	mov	r2, r8
 800c006:	464b      	mov	r3, r9
 800c008:	4640      	mov	r0, r8
 800c00a:	4649      	mov	r1, r9
 800c00c:	f7f4 fda6 	bl	8000b5c <__aeabi_dcmpun>
 800c010:	b140      	cbz	r0, 800c024 <_printf_float+0xf0>
 800c012:	464b      	mov	r3, r9
 800c014:	2b00      	cmp	r3, #0
 800c016:	bfbc      	itt	lt
 800c018:	232d      	movlt	r3, #45	; 0x2d
 800c01a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c01e:	487f      	ldr	r0, [pc, #508]	; (800c21c <_printf_float+0x2e8>)
 800c020:	4b7f      	ldr	r3, [pc, #508]	; (800c220 <_printf_float+0x2ec>)
 800c022:	e7d1      	b.n	800bfc8 <_printf_float+0x94>
 800c024:	6863      	ldr	r3, [r4, #4]
 800c026:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c02a:	9206      	str	r2, [sp, #24]
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	d13f      	bne.n	800c0b0 <_printf_float+0x17c>
 800c030:	2306      	movs	r3, #6
 800c032:	6063      	str	r3, [r4, #4]
 800c034:	9b05      	ldr	r3, [sp, #20]
 800c036:	6861      	ldr	r1, [r4, #4]
 800c038:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c03c:	2300      	movs	r3, #0
 800c03e:	9303      	str	r3, [sp, #12]
 800c040:	ab0a      	add	r3, sp, #40	; 0x28
 800c042:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c046:	ab09      	add	r3, sp, #36	; 0x24
 800c048:	ec49 8b10 	vmov	d0, r8, r9
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	6022      	str	r2, [r4, #0]
 800c050:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c054:	4628      	mov	r0, r5
 800c056:	f7ff fecd 	bl	800bdf4 <__cvt>
 800c05a:	9b06      	ldr	r3, [sp, #24]
 800c05c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c05e:	2b47      	cmp	r3, #71	; 0x47
 800c060:	4680      	mov	r8, r0
 800c062:	d108      	bne.n	800c076 <_printf_float+0x142>
 800c064:	1cc8      	adds	r0, r1, #3
 800c066:	db02      	blt.n	800c06e <_printf_float+0x13a>
 800c068:	6863      	ldr	r3, [r4, #4]
 800c06a:	4299      	cmp	r1, r3
 800c06c:	dd41      	ble.n	800c0f2 <_printf_float+0x1be>
 800c06e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c072:	fa5f fb8b 	uxtb.w	fp, fp
 800c076:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c07a:	d820      	bhi.n	800c0be <_printf_float+0x18a>
 800c07c:	3901      	subs	r1, #1
 800c07e:	465a      	mov	r2, fp
 800c080:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c084:	9109      	str	r1, [sp, #36]	; 0x24
 800c086:	f7ff ff17 	bl	800beb8 <__exponent>
 800c08a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c08c:	1813      	adds	r3, r2, r0
 800c08e:	2a01      	cmp	r2, #1
 800c090:	4681      	mov	r9, r0
 800c092:	6123      	str	r3, [r4, #16]
 800c094:	dc02      	bgt.n	800c09c <_printf_float+0x168>
 800c096:	6822      	ldr	r2, [r4, #0]
 800c098:	07d2      	lsls	r2, r2, #31
 800c09a:	d501      	bpl.n	800c0a0 <_printf_float+0x16c>
 800c09c:	3301      	adds	r3, #1
 800c09e:	6123      	str	r3, [r4, #16]
 800c0a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d09c      	beq.n	800bfe2 <_printf_float+0xae>
 800c0a8:	232d      	movs	r3, #45	; 0x2d
 800c0aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0ae:	e798      	b.n	800bfe2 <_printf_float+0xae>
 800c0b0:	9a06      	ldr	r2, [sp, #24]
 800c0b2:	2a47      	cmp	r2, #71	; 0x47
 800c0b4:	d1be      	bne.n	800c034 <_printf_float+0x100>
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1bc      	bne.n	800c034 <_printf_float+0x100>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e7b9      	b.n	800c032 <_printf_float+0xfe>
 800c0be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c0c2:	d118      	bne.n	800c0f6 <_printf_float+0x1c2>
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	dd0b      	ble.n	800c0e2 <_printf_float+0x1ae>
 800c0ca:	6121      	str	r1, [r4, #16]
 800c0cc:	b913      	cbnz	r3, 800c0d4 <_printf_float+0x1a0>
 800c0ce:	6822      	ldr	r2, [r4, #0]
 800c0d0:	07d0      	lsls	r0, r2, #31
 800c0d2:	d502      	bpl.n	800c0da <_printf_float+0x1a6>
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	440b      	add	r3, r1
 800c0d8:	6123      	str	r3, [r4, #16]
 800c0da:	65a1      	str	r1, [r4, #88]	; 0x58
 800c0dc:	f04f 0900 	mov.w	r9, #0
 800c0e0:	e7de      	b.n	800c0a0 <_printf_float+0x16c>
 800c0e2:	b913      	cbnz	r3, 800c0ea <_printf_float+0x1b6>
 800c0e4:	6822      	ldr	r2, [r4, #0]
 800c0e6:	07d2      	lsls	r2, r2, #31
 800c0e8:	d501      	bpl.n	800c0ee <_printf_float+0x1ba>
 800c0ea:	3302      	adds	r3, #2
 800c0ec:	e7f4      	b.n	800c0d8 <_printf_float+0x1a4>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e7f2      	b.n	800c0d8 <_printf_float+0x1a4>
 800c0f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	db05      	blt.n	800c108 <_printf_float+0x1d4>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	6121      	str	r1, [r4, #16]
 800c100:	07d8      	lsls	r0, r3, #31
 800c102:	d5ea      	bpl.n	800c0da <_printf_float+0x1a6>
 800c104:	1c4b      	adds	r3, r1, #1
 800c106:	e7e7      	b.n	800c0d8 <_printf_float+0x1a4>
 800c108:	2900      	cmp	r1, #0
 800c10a:	bfd4      	ite	le
 800c10c:	f1c1 0202 	rsble	r2, r1, #2
 800c110:	2201      	movgt	r2, #1
 800c112:	4413      	add	r3, r2
 800c114:	e7e0      	b.n	800c0d8 <_printf_float+0x1a4>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	055a      	lsls	r2, r3, #21
 800c11a:	d407      	bmi.n	800c12c <_printf_float+0x1f8>
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	4642      	mov	r2, r8
 800c120:	4631      	mov	r1, r6
 800c122:	4628      	mov	r0, r5
 800c124:	47b8      	blx	r7
 800c126:	3001      	adds	r0, #1
 800c128:	d12c      	bne.n	800c184 <_printf_float+0x250>
 800c12a:	e764      	b.n	800bff6 <_printf_float+0xc2>
 800c12c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c130:	f240 80e0 	bls.w	800c2f4 <_printf_float+0x3c0>
 800c134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c138:	2200      	movs	r2, #0
 800c13a:	2300      	movs	r3, #0
 800c13c:	f7f4 fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 800c140:	2800      	cmp	r0, #0
 800c142:	d034      	beq.n	800c1ae <_printf_float+0x27a>
 800c144:	4a37      	ldr	r2, [pc, #220]	; (800c224 <_printf_float+0x2f0>)
 800c146:	2301      	movs	r3, #1
 800c148:	4631      	mov	r1, r6
 800c14a:	4628      	mov	r0, r5
 800c14c:	47b8      	blx	r7
 800c14e:	3001      	adds	r0, #1
 800c150:	f43f af51 	beq.w	800bff6 <_printf_float+0xc2>
 800c154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c158:	429a      	cmp	r2, r3
 800c15a:	db02      	blt.n	800c162 <_printf_float+0x22e>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	07d8      	lsls	r0, r3, #31
 800c160:	d510      	bpl.n	800c184 <_printf_float+0x250>
 800c162:	ee18 3a10 	vmov	r3, s16
 800c166:	4652      	mov	r2, sl
 800c168:	4631      	mov	r1, r6
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	f43f af41 	beq.w	800bff6 <_printf_float+0xc2>
 800c174:	f04f 0800 	mov.w	r8, #0
 800c178:	f104 091a 	add.w	r9, r4, #26
 800c17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c17e:	3b01      	subs	r3, #1
 800c180:	4543      	cmp	r3, r8
 800c182:	dc09      	bgt.n	800c198 <_printf_float+0x264>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	079b      	lsls	r3, r3, #30
 800c188:	f100 8105 	bmi.w	800c396 <_printf_float+0x462>
 800c18c:	68e0      	ldr	r0, [r4, #12]
 800c18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c190:	4298      	cmp	r0, r3
 800c192:	bfb8      	it	lt
 800c194:	4618      	movlt	r0, r3
 800c196:	e730      	b.n	800bffa <_printf_float+0xc6>
 800c198:	2301      	movs	r3, #1
 800c19a:	464a      	mov	r2, r9
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	47b8      	blx	r7
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f43f af27 	beq.w	800bff6 <_printf_float+0xc2>
 800c1a8:	f108 0801 	add.w	r8, r8, #1
 800c1ac:	e7e6      	b.n	800c17c <_printf_float+0x248>
 800c1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	dc39      	bgt.n	800c228 <_printf_float+0x2f4>
 800c1b4:	4a1b      	ldr	r2, [pc, #108]	; (800c224 <_printf_float+0x2f0>)
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	47b8      	blx	r7
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f43f af19 	beq.w	800bff6 <_printf_float+0xc2>
 800c1c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	d102      	bne.n	800c1d2 <_printf_float+0x29e>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	07d9      	lsls	r1, r3, #31
 800c1d0:	d5d8      	bpl.n	800c184 <_printf_float+0x250>
 800c1d2:	ee18 3a10 	vmov	r3, s16
 800c1d6:	4652      	mov	r2, sl
 800c1d8:	4631      	mov	r1, r6
 800c1da:	4628      	mov	r0, r5
 800c1dc:	47b8      	blx	r7
 800c1de:	3001      	adds	r0, #1
 800c1e0:	f43f af09 	beq.w	800bff6 <_printf_float+0xc2>
 800c1e4:	f04f 0900 	mov.w	r9, #0
 800c1e8:	f104 0a1a 	add.w	sl, r4, #26
 800c1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ee:	425b      	negs	r3, r3
 800c1f0:	454b      	cmp	r3, r9
 800c1f2:	dc01      	bgt.n	800c1f8 <_printf_float+0x2c4>
 800c1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f6:	e792      	b.n	800c11e <_printf_float+0x1ea>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f aef7 	beq.w	800bff6 <_printf_float+0xc2>
 800c208:	f109 0901 	add.w	r9, r9, #1
 800c20c:	e7ee      	b.n	800c1ec <_printf_float+0x2b8>
 800c20e:	bf00      	nop
 800c210:	7fefffff 	.word	0x7fefffff
 800c214:	080112f4 	.word	0x080112f4
 800c218:	080112f8 	.word	0x080112f8
 800c21c:	08011300 	.word	0x08011300
 800c220:	080112fc 	.word	0x080112fc
 800c224:	080116e9 	.word	0x080116e9
 800c228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c22a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c22c:	429a      	cmp	r2, r3
 800c22e:	bfa8      	it	ge
 800c230:	461a      	movge	r2, r3
 800c232:	2a00      	cmp	r2, #0
 800c234:	4691      	mov	r9, r2
 800c236:	dc37      	bgt.n	800c2a8 <_printf_float+0x374>
 800c238:	f04f 0b00 	mov.w	fp, #0
 800c23c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c240:	f104 021a 	add.w	r2, r4, #26
 800c244:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c246:	9305      	str	r3, [sp, #20]
 800c248:	eba3 0309 	sub.w	r3, r3, r9
 800c24c:	455b      	cmp	r3, fp
 800c24e:	dc33      	bgt.n	800c2b8 <_printf_float+0x384>
 800c250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c254:	429a      	cmp	r2, r3
 800c256:	db3b      	blt.n	800c2d0 <_printf_float+0x39c>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	07da      	lsls	r2, r3, #31
 800c25c:	d438      	bmi.n	800c2d0 <_printf_float+0x39c>
 800c25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c260:	9a05      	ldr	r2, [sp, #20]
 800c262:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c264:	1a9a      	subs	r2, r3, r2
 800c266:	eba3 0901 	sub.w	r9, r3, r1
 800c26a:	4591      	cmp	r9, r2
 800c26c:	bfa8      	it	ge
 800c26e:	4691      	movge	r9, r2
 800c270:	f1b9 0f00 	cmp.w	r9, #0
 800c274:	dc35      	bgt.n	800c2e2 <_printf_float+0x3ae>
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c27e:	f104 0a1a 	add.w	sl, r4, #26
 800c282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c286:	1a9b      	subs	r3, r3, r2
 800c288:	eba3 0309 	sub.w	r3, r3, r9
 800c28c:	4543      	cmp	r3, r8
 800c28e:	f77f af79 	ble.w	800c184 <_printf_float+0x250>
 800c292:	2301      	movs	r3, #1
 800c294:	4652      	mov	r2, sl
 800c296:	4631      	mov	r1, r6
 800c298:	4628      	mov	r0, r5
 800c29a:	47b8      	blx	r7
 800c29c:	3001      	adds	r0, #1
 800c29e:	f43f aeaa 	beq.w	800bff6 <_printf_float+0xc2>
 800c2a2:	f108 0801 	add.w	r8, r8, #1
 800c2a6:	e7ec      	b.n	800c282 <_printf_float+0x34e>
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4642      	mov	r2, r8
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	47b8      	blx	r7
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	d1c0      	bne.n	800c238 <_printf_float+0x304>
 800c2b6:	e69e      	b.n	800bff6 <_printf_float+0xc2>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	4628      	mov	r0, r5
 800c2be:	9205      	str	r2, [sp, #20]
 800c2c0:	47b8      	blx	r7
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	f43f ae97 	beq.w	800bff6 <_printf_float+0xc2>
 800c2c8:	9a05      	ldr	r2, [sp, #20]
 800c2ca:	f10b 0b01 	add.w	fp, fp, #1
 800c2ce:	e7b9      	b.n	800c244 <_printf_float+0x310>
 800c2d0:	ee18 3a10 	vmov	r3, s16
 800c2d4:	4652      	mov	r2, sl
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	4628      	mov	r0, r5
 800c2da:	47b8      	blx	r7
 800c2dc:	3001      	adds	r0, #1
 800c2de:	d1be      	bne.n	800c25e <_printf_float+0x32a>
 800c2e0:	e689      	b.n	800bff6 <_printf_float+0xc2>
 800c2e2:	9a05      	ldr	r2, [sp, #20]
 800c2e4:	464b      	mov	r3, r9
 800c2e6:	4442      	add	r2, r8
 800c2e8:	4631      	mov	r1, r6
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	47b8      	blx	r7
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	d1c1      	bne.n	800c276 <_printf_float+0x342>
 800c2f2:	e680      	b.n	800bff6 <_printf_float+0xc2>
 800c2f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2f6:	2a01      	cmp	r2, #1
 800c2f8:	dc01      	bgt.n	800c2fe <_printf_float+0x3ca>
 800c2fa:	07db      	lsls	r3, r3, #31
 800c2fc:	d538      	bpl.n	800c370 <_printf_float+0x43c>
 800c2fe:	2301      	movs	r3, #1
 800c300:	4642      	mov	r2, r8
 800c302:	4631      	mov	r1, r6
 800c304:	4628      	mov	r0, r5
 800c306:	47b8      	blx	r7
 800c308:	3001      	adds	r0, #1
 800c30a:	f43f ae74 	beq.w	800bff6 <_printf_float+0xc2>
 800c30e:	ee18 3a10 	vmov	r3, s16
 800c312:	4652      	mov	r2, sl
 800c314:	4631      	mov	r1, r6
 800c316:	4628      	mov	r0, r5
 800c318:	47b8      	blx	r7
 800c31a:	3001      	adds	r0, #1
 800c31c:	f43f ae6b 	beq.w	800bff6 <_printf_float+0xc2>
 800c320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c324:	2200      	movs	r2, #0
 800c326:	2300      	movs	r3, #0
 800c328:	f7f4 fbe6 	bl	8000af8 <__aeabi_dcmpeq>
 800c32c:	b9d8      	cbnz	r0, 800c366 <_printf_float+0x432>
 800c32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c330:	f108 0201 	add.w	r2, r8, #1
 800c334:	3b01      	subs	r3, #1
 800c336:	4631      	mov	r1, r6
 800c338:	4628      	mov	r0, r5
 800c33a:	47b8      	blx	r7
 800c33c:	3001      	adds	r0, #1
 800c33e:	d10e      	bne.n	800c35e <_printf_float+0x42a>
 800c340:	e659      	b.n	800bff6 <_printf_float+0xc2>
 800c342:	2301      	movs	r3, #1
 800c344:	4652      	mov	r2, sl
 800c346:	4631      	mov	r1, r6
 800c348:	4628      	mov	r0, r5
 800c34a:	47b8      	blx	r7
 800c34c:	3001      	adds	r0, #1
 800c34e:	f43f ae52 	beq.w	800bff6 <_printf_float+0xc2>
 800c352:	f108 0801 	add.w	r8, r8, #1
 800c356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c358:	3b01      	subs	r3, #1
 800c35a:	4543      	cmp	r3, r8
 800c35c:	dcf1      	bgt.n	800c342 <_printf_float+0x40e>
 800c35e:	464b      	mov	r3, r9
 800c360:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c364:	e6dc      	b.n	800c120 <_printf_float+0x1ec>
 800c366:	f04f 0800 	mov.w	r8, #0
 800c36a:	f104 0a1a 	add.w	sl, r4, #26
 800c36e:	e7f2      	b.n	800c356 <_printf_float+0x422>
 800c370:	2301      	movs	r3, #1
 800c372:	4642      	mov	r2, r8
 800c374:	e7df      	b.n	800c336 <_printf_float+0x402>
 800c376:	2301      	movs	r3, #1
 800c378:	464a      	mov	r2, r9
 800c37a:	4631      	mov	r1, r6
 800c37c:	4628      	mov	r0, r5
 800c37e:	47b8      	blx	r7
 800c380:	3001      	adds	r0, #1
 800c382:	f43f ae38 	beq.w	800bff6 <_printf_float+0xc2>
 800c386:	f108 0801 	add.w	r8, r8, #1
 800c38a:	68e3      	ldr	r3, [r4, #12]
 800c38c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c38e:	1a5b      	subs	r3, r3, r1
 800c390:	4543      	cmp	r3, r8
 800c392:	dcf0      	bgt.n	800c376 <_printf_float+0x442>
 800c394:	e6fa      	b.n	800c18c <_printf_float+0x258>
 800c396:	f04f 0800 	mov.w	r8, #0
 800c39a:	f104 0919 	add.w	r9, r4, #25
 800c39e:	e7f4      	b.n	800c38a <_printf_float+0x456>

0800c3a0 <_printf_common>:
 800c3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a4:	4616      	mov	r6, r2
 800c3a6:	4699      	mov	r9, r3
 800c3a8:	688a      	ldr	r2, [r1, #8]
 800c3aa:	690b      	ldr	r3, [r1, #16]
 800c3ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	bfb8      	it	lt
 800c3b4:	4613      	movlt	r3, r2
 800c3b6:	6033      	str	r3, [r6, #0]
 800c3b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3bc:	4607      	mov	r7, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	b10a      	cbz	r2, 800c3c6 <_printf_common+0x26>
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	6033      	str	r3, [r6, #0]
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	0699      	lsls	r1, r3, #26
 800c3ca:	bf42      	ittt	mi
 800c3cc:	6833      	ldrmi	r3, [r6, #0]
 800c3ce:	3302      	addmi	r3, #2
 800c3d0:	6033      	strmi	r3, [r6, #0]
 800c3d2:	6825      	ldr	r5, [r4, #0]
 800c3d4:	f015 0506 	ands.w	r5, r5, #6
 800c3d8:	d106      	bne.n	800c3e8 <_printf_common+0x48>
 800c3da:	f104 0a19 	add.w	sl, r4, #25
 800c3de:	68e3      	ldr	r3, [r4, #12]
 800c3e0:	6832      	ldr	r2, [r6, #0]
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	42ab      	cmp	r3, r5
 800c3e6:	dc26      	bgt.n	800c436 <_printf_common+0x96>
 800c3e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3ec:	1e13      	subs	r3, r2, #0
 800c3ee:	6822      	ldr	r2, [r4, #0]
 800c3f0:	bf18      	it	ne
 800c3f2:	2301      	movne	r3, #1
 800c3f4:	0692      	lsls	r2, r2, #26
 800c3f6:	d42b      	bmi.n	800c450 <_printf_common+0xb0>
 800c3f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3fc:	4649      	mov	r1, r9
 800c3fe:	4638      	mov	r0, r7
 800c400:	47c0      	blx	r8
 800c402:	3001      	adds	r0, #1
 800c404:	d01e      	beq.n	800c444 <_printf_common+0xa4>
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	68e5      	ldr	r5, [r4, #12]
 800c40a:	6832      	ldr	r2, [r6, #0]
 800c40c:	f003 0306 	and.w	r3, r3, #6
 800c410:	2b04      	cmp	r3, #4
 800c412:	bf08      	it	eq
 800c414:	1aad      	subeq	r5, r5, r2
 800c416:	68a3      	ldr	r3, [r4, #8]
 800c418:	6922      	ldr	r2, [r4, #16]
 800c41a:	bf0c      	ite	eq
 800c41c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c420:	2500      	movne	r5, #0
 800c422:	4293      	cmp	r3, r2
 800c424:	bfc4      	itt	gt
 800c426:	1a9b      	subgt	r3, r3, r2
 800c428:	18ed      	addgt	r5, r5, r3
 800c42a:	2600      	movs	r6, #0
 800c42c:	341a      	adds	r4, #26
 800c42e:	42b5      	cmp	r5, r6
 800c430:	d11a      	bne.n	800c468 <_printf_common+0xc8>
 800c432:	2000      	movs	r0, #0
 800c434:	e008      	b.n	800c448 <_printf_common+0xa8>
 800c436:	2301      	movs	r3, #1
 800c438:	4652      	mov	r2, sl
 800c43a:	4649      	mov	r1, r9
 800c43c:	4638      	mov	r0, r7
 800c43e:	47c0      	blx	r8
 800c440:	3001      	adds	r0, #1
 800c442:	d103      	bne.n	800c44c <_printf_common+0xac>
 800c444:	f04f 30ff 	mov.w	r0, #4294967295
 800c448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c44c:	3501      	adds	r5, #1
 800c44e:	e7c6      	b.n	800c3de <_printf_common+0x3e>
 800c450:	18e1      	adds	r1, r4, r3
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	2030      	movs	r0, #48	; 0x30
 800c456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c45a:	4422      	add	r2, r4
 800c45c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c464:	3302      	adds	r3, #2
 800c466:	e7c7      	b.n	800c3f8 <_printf_common+0x58>
 800c468:	2301      	movs	r3, #1
 800c46a:	4622      	mov	r2, r4
 800c46c:	4649      	mov	r1, r9
 800c46e:	4638      	mov	r0, r7
 800c470:	47c0      	blx	r8
 800c472:	3001      	adds	r0, #1
 800c474:	d0e6      	beq.n	800c444 <_printf_common+0xa4>
 800c476:	3601      	adds	r6, #1
 800c478:	e7d9      	b.n	800c42e <_printf_common+0x8e>
	...

0800c47c <_printf_i>:
 800c47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c480:	7e0f      	ldrb	r7, [r1, #24]
 800c482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c484:	2f78      	cmp	r7, #120	; 0x78
 800c486:	4691      	mov	r9, r2
 800c488:	4680      	mov	r8, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	469a      	mov	sl, r3
 800c48e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c492:	d807      	bhi.n	800c4a4 <_printf_i+0x28>
 800c494:	2f62      	cmp	r7, #98	; 0x62
 800c496:	d80a      	bhi.n	800c4ae <_printf_i+0x32>
 800c498:	2f00      	cmp	r7, #0
 800c49a:	f000 80d8 	beq.w	800c64e <_printf_i+0x1d2>
 800c49e:	2f58      	cmp	r7, #88	; 0x58
 800c4a0:	f000 80a3 	beq.w	800c5ea <_printf_i+0x16e>
 800c4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4ac:	e03a      	b.n	800c524 <_printf_i+0xa8>
 800c4ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4b2:	2b15      	cmp	r3, #21
 800c4b4:	d8f6      	bhi.n	800c4a4 <_printf_i+0x28>
 800c4b6:	a101      	add	r1, pc, #4	; (adr r1, 800c4bc <_printf_i+0x40>)
 800c4b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4bc:	0800c515 	.word	0x0800c515
 800c4c0:	0800c529 	.word	0x0800c529
 800c4c4:	0800c4a5 	.word	0x0800c4a5
 800c4c8:	0800c4a5 	.word	0x0800c4a5
 800c4cc:	0800c4a5 	.word	0x0800c4a5
 800c4d0:	0800c4a5 	.word	0x0800c4a5
 800c4d4:	0800c529 	.word	0x0800c529
 800c4d8:	0800c4a5 	.word	0x0800c4a5
 800c4dc:	0800c4a5 	.word	0x0800c4a5
 800c4e0:	0800c4a5 	.word	0x0800c4a5
 800c4e4:	0800c4a5 	.word	0x0800c4a5
 800c4e8:	0800c635 	.word	0x0800c635
 800c4ec:	0800c559 	.word	0x0800c559
 800c4f0:	0800c617 	.word	0x0800c617
 800c4f4:	0800c4a5 	.word	0x0800c4a5
 800c4f8:	0800c4a5 	.word	0x0800c4a5
 800c4fc:	0800c657 	.word	0x0800c657
 800c500:	0800c4a5 	.word	0x0800c4a5
 800c504:	0800c559 	.word	0x0800c559
 800c508:	0800c4a5 	.word	0x0800c4a5
 800c50c:	0800c4a5 	.word	0x0800c4a5
 800c510:	0800c61f 	.word	0x0800c61f
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	1d1a      	adds	r2, r3, #4
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	602a      	str	r2, [r5, #0]
 800c51c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c524:	2301      	movs	r3, #1
 800c526:	e0a3      	b.n	800c670 <_printf_i+0x1f4>
 800c528:	6820      	ldr	r0, [r4, #0]
 800c52a:	6829      	ldr	r1, [r5, #0]
 800c52c:	0606      	lsls	r6, r0, #24
 800c52e:	f101 0304 	add.w	r3, r1, #4
 800c532:	d50a      	bpl.n	800c54a <_printf_i+0xce>
 800c534:	680e      	ldr	r6, [r1, #0]
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	2e00      	cmp	r6, #0
 800c53a:	da03      	bge.n	800c544 <_printf_i+0xc8>
 800c53c:	232d      	movs	r3, #45	; 0x2d
 800c53e:	4276      	negs	r6, r6
 800c540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c544:	485e      	ldr	r0, [pc, #376]	; (800c6c0 <_printf_i+0x244>)
 800c546:	230a      	movs	r3, #10
 800c548:	e019      	b.n	800c57e <_printf_i+0x102>
 800c54a:	680e      	ldr	r6, [r1, #0]
 800c54c:	602b      	str	r3, [r5, #0]
 800c54e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c552:	bf18      	it	ne
 800c554:	b236      	sxthne	r6, r6
 800c556:	e7ef      	b.n	800c538 <_printf_i+0xbc>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	6820      	ldr	r0, [r4, #0]
 800c55c:	1d19      	adds	r1, r3, #4
 800c55e:	6029      	str	r1, [r5, #0]
 800c560:	0601      	lsls	r1, r0, #24
 800c562:	d501      	bpl.n	800c568 <_printf_i+0xec>
 800c564:	681e      	ldr	r6, [r3, #0]
 800c566:	e002      	b.n	800c56e <_printf_i+0xf2>
 800c568:	0646      	lsls	r6, r0, #25
 800c56a:	d5fb      	bpl.n	800c564 <_printf_i+0xe8>
 800c56c:	881e      	ldrh	r6, [r3, #0]
 800c56e:	4854      	ldr	r0, [pc, #336]	; (800c6c0 <_printf_i+0x244>)
 800c570:	2f6f      	cmp	r7, #111	; 0x6f
 800c572:	bf0c      	ite	eq
 800c574:	2308      	moveq	r3, #8
 800c576:	230a      	movne	r3, #10
 800c578:	2100      	movs	r1, #0
 800c57a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c57e:	6865      	ldr	r5, [r4, #4]
 800c580:	60a5      	str	r5, [r4, #8]
 800c582:	2d00      	cmp	r5, #0
 800c584:	bfa2      	ittt	ge
 800c586:	6821      	ldrge	r1, [r4, #0]
 800c588:	f021 0104 	bicge.w	r1, r1, #4
 800c58c:	6021      	strge	r1, [r4, #0]
 800c58e:	b90e      	cbnz	r6, 800c594 <_printf_i+0x118>
 800c590:	2d00      	cmp	r5, #0
 800c592:	d04d      	beq.n	800c630 <_printf_i+0x1b4>
 800c594:	4615      	mov	r5, r2
 800c596:	fbb6 f1f3 	udiv	r1, r6, r3
 800c59a:	fb03 6711 	mls	r7, r3, r1, r6
 800c59e:	5dc7      	ldrb	r7, [r0, r7]
 800c5a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5a4:	4637      	mov	r7, r6
 800c5a6:	42bb      	cmp	r3, r7
 800c5a8:	460e      	mov	r6, r1
 800c5aa:	d9f4      	bls.n	800c596 <_printf_i+0x11a>
 800c5ac:	2b08      	cmp	r3, #8
 800c5ae:	d10b      	bne.n	800c5c8 <_printf_i+0x14c>
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	07de      	lsls	r6, r3, #31
 800c5b4:	d508      	bpl.n	800c5c8 <_printf_i+0x14c>
 800c5b6:	6923      	ldr	r3, [r4, #16]
 800c5b8:	6861      	ldr	r1, [r4, #4]
 800c5ba:	4299      	cmp	r1, r3
 800c5bc:	bfde      	ittt	le
 800c5be:	2330      	movle	r3, #48	; 0x30
 800c5c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5c8:	1b52      	subs	r2, r2, r5
 800c5ca:	6122      	str	r2, [r4, #16]
 800c5cc:	f8cd a000 	str.w	sl, [sp]
 800c5d0:	464b      	mov	r3, r9
 800c5d2:	aa03      	add	r2, sp, #12
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	f7ff fee2 	bl	800c3a0 <_printf_common>
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d14c      	bne.n	800c67a <_printf_i+0x1fe>
 800c5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e4:	b004      	add	sp, #16
 800c5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ea:	4835      	ldr	r0, [pc, #212]	; (800c6c0 <_printf_i+0x244>)
 800c5ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5f0:	6829      	ldr	r1, [r5, #0]
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5f8:	6029      	str	r1, [r5, #0]
 800c5fa:	061d      	lsls	r5, r3, #24
 800c5fc:	d514      	bpl.n	800c628 <_printf_i+0x1ac>
 800c5fe:	07df      	lsls	r7, r3, #31
 800c600:	bf44      	itt	mi
 800c602:	f043 0320 	orrmi.w	r3, r3, #32
 800c606:	6023      	strmi	r3, [r4, #0]
 800c608:	b91e      	cbnz	r6, 800c612 <_printf_i+0x196>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	f023 0320 	bic.w	r3, r3, #32
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	2310      	movs	r3, #16
 800c614:	e7b0      	b.n	800c578 <_printf_i+0xfc>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	f043 0320 	orr.w	r3, r3, #32
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	2378      	movs	r3, #120	; 0x78
 800c620:	4828      	ldr	r0, [pc, #160]	; (800c6c4 <_printf_i+0x248>)
 800c622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c626:	e7e3      	b.n	800c5f0 <_printf_i+0x174>
 800c628:	0659      	lsls	r1, r3, #25
 800c62a:	bf48      	it	mi
 800c62c:	b2b6      	uxthmi	r6, r6
 800c62e:	e7e6      	b.n	800c5fe <_printf_i+0x182>
 800c630:	4615      	mov	r5, r2
 800c632:	e7bb      	b.n	800c5ac <_printf_i+0x130>
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	6826      	ldr	r6, [r4, #0]
 800c638:	6961      	ldr	r1, [r4, #20]
 800c63a:	1d18      	adds	r0, r3, #4
 800c63c:	6028      	str	r0, [r5, #0]
 800c63e:	0635      	lsls	r5, r6, #24
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	d501      	bpl.n	800c648 <_printf_i+0x1cc>
 800c644:	6019      	str	r1, [r3, #0]
 800c646:	e002      	b.n	800c64e <_printf_i+0x1d2>
 800c648:	0670      	lsls	r0, r6, #25
 800c64a:	d5fb      	bpl.n	800c644 <_printf_i+0x1c8>
 800c64c:	8019      	strh	r1, [r3, #0]
 800c64e:	2300      	movs	r3, #0
 800c650:	6123      	str	r3, [r4, #16]
 800c652:	4615      	mov	r5, r2
 800c654:	e7ba      	b.n	800c5cc <_printf_i+0x150>
 800c656:	682b      	ldr	r3, [r5, #0]
 800c658:	1d1a      	adds	r2, r3, #4
 800c65a:	602a      	str	r2, [r5, #0]
 800c65c:	681d      	ldr	r5, [r3, #0]
 800c65e:	6862      	ldr	r2, [r4, #4]
 800c660:	2100      	movs	r1, #0
 800c662:	4628      	mov	r0, r5
 800c664:	f7f3 fdd4 	bl	8000210 <memchr>
 800c668:	b108      	cbz	r0, 800c66e <_printf_i+0x1f2>
 800c66a:	1b40      	subs	r0, r0, r5
 800c66c:	6060      	str	r0, [r4, #4]
 800c66e:	6863      	ldr	r3, [r4, #4]
 800c670:	6123      	str	r3, [r4, #16]
 800c672:	2300      	movs	r3, #0
 800c674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c678:	e7a8      	b.n	800c5cc <_printf_i+0x150>
 800c67a:	6923      	ldr	r3, [r4, #16]
 800c67c:	462a      	mov	r2, r5
 800c67e:	4649      	mov	r1, r9
 800c680:	4640      	mov	r0, r8
 800c682:	47d0      	blx	sl
 800c684:	3001      	adds	r0, #1
 800c686:	d0ab      	beq.n	800c5e0 <_printf_i+0x164>
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	079b      	lsls	r3, r3, #30
 800c68c:	d413      	bmi.n	800c6b6 <_printf_i+0x23a>
 800c68e:	68e0      	ldr	r0, [r4, #12]
 800c690:	9b03      	ldr	r3, [sp, #12]
 800c692:	4298      	cmp	r0, r3
 800c694:	bfb8      	it	lt
 800c696:	4618      	movlt	r0, r3
 800c698:	e7a4      	b.n	800c5e4 <_printf_i+0x168>
 800c69a:	2301      	movs	r3, #1
 800c69c:	4632      	mov	r2, r6
 800c69e:	4649      	mov	r1, r9
 800c6a0:	4640      	mov	r0, r8
 800c6a2:	47d0      	blx	sl
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d09b      	beq.n	800c5e0 <_printf_i+0x164>
 800c6a8:	3501      	adds	r5, #1
 800c6aa:	68e3      	ldr	r3, [r4, #12]
 800c6ac:	9903      	ldr	r1, [sp, #12]
 800c6ae:	1a5b      	subs	r3, r3, r1
 800c6b0:	42ab      	cmp	r3, r5
 800c6b2:	dcf2      	bgt.n	800c69a <_printf_i+0x21e>
 800c6b4:	e7eb      	b.n	800c68e <_printf_i+0x212>
 800c6b6:	2500      	movs	r5, #0
 800c6b8:	f104 0619 	add.w	r6, r4, #25
 800c6bc:	e7f5      	b.n	800c6aa <_printf_i+0x22e>
 800c6be:	bf00      	nop
 800c6c0:	08011304 	.word	0x08011304
 800c6c4:	08011315 	.word	0x08011315

0800c6c8 <_sbrk_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4d06      	ldr	r5, [pc, #24]	; (800c6e4 <_sbrk_r+0x1c>)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	602b      	str	r3, [r5, #0]
 800c6d4:	f7f7 fefa 	bl	80044cc <_sbrk>
 800c6d8:	1c43      	adds	r3, r0, #1
 800c6da:	d102      	bne.n	800c6e2 <_sbrk_r+0x1a>
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	b103      	cbz	r3, 800c6e2 <_sbrk_r+0x1a>
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	bd38      	pop	{r3, r4, r5, pc}
 800c6e4:	2000108c 	.word	0x2000108c

0800c6e8 <siprintf>:
 800c6e8:	b40e      	push	{r1, r2, r3}
 800c6ea:	b500      	push	{lr}
 800c6ec:	b09c      	sub	sp, #112	; 0x70
 800c6ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c6f0:	9002      	str	r0, [sp, #8]
 800c6f2:	9006      	str	r0, [sp, #24]
 800c6f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c6f8:	4809      	ldr	r0, [pc, #36]	; (800c720 <siprintf+0x38>)
 800c6fa:	9107      	str	r1, [sp, #28]
 800c6fc:	9104      	str	r1, [sp, #16]
 800c6fe:	4909      	ldr	r1, [pc, #36]	; (800c724 <siprintf+0x3c>)
 800c700:	f853 2b04 	ldr.w	r2, [r3], #4
 800c704:	9105      	str	r1, [sp, #20]
 800c706:	6800      	ldr	r0, [r0, #0]
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	a902      	add	r1, sp, #8
 800c70c:	f001 fec4 	bl	800e498 <_svfiprintf_r>
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	2200      	movs	r2, #0
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	b01c      	add	sp, #112	; 0x70
 800c718:	f85d eb04 	ldr.w	lr, [sp], #4
 800c71c:	b003      	add	sp, #12
 800c71e:	4770      	bx	lr
 800c720:	200002c4 	.word	0x200002c4
 800c724:	ffff0208 	.word	0xffff0208

0800c728 <siscanf>:
 800c728:	b40e      	push	{r1, r2, r3}
 800c72a:	b510      	push	{r4, lr}
 800c72c:	b09f      	sub	sp, #124	; 0x7c
 800c72e:	ac21      	add	r4, sp, #132	; 0x84
 800c730:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c734:	f854 2b04 	ldr.w	r2, [r4], #4
 800c738:	9201      	str	r2, [sp, #4]
 800c73a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c73e:	9004      	str	r0, [sp, #16]
 800c740:	9008      	str	r0, [sp, #32]
 800c742:	f7f3 fd57 	bl	80001f4 <strlen>
 800c746:	4b0c      	ldr	r3, [pc, #48]	; (800c778 <siscanf+0x50>)
 800c748:	9005      	str	r0, [sp, #20]
 800c74a:	9009      	str	r0, [sp, #36]	; 0x24
 800c74c:	930d      	str	r3, [sp, #52]	; 0x34
 800c74e:	480b      	ldr	r0, [pc, #44]	; (800c77c <siscanf+0x54>)
 800c750:	9a01      	ldr	r2, [sp, #4]
 800c752:	6800      	ldr	r0, [r0, #0]
 800c754:	9403      	str	r4, [sp, #12]
 800c756:	2300      	movs	r3, #0
 800c758:	9311      	str	r3, [sp, #68]	; 0x44
 800c75a:	9316      	str	r3, [sp, #88]	; 0x58
 800c75c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c760:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c764:	a904      	add	r1, sp, #16
 800c766:	4623      	mov	r3, r4
 800c768:	f001 fff0 	bl	800e74c <__ssvfiscanf_r>
 800c76c:	b01f      	add	sp, #124	; 0x7c
 800c76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c772:	b003      	add	sp, #12
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	0800c7a3 	.word	0x0800c7a3
 800c77c:	200002c4 	.word	0x200002c4

0800c780 <__sread>:
 800c780:	b510      	push	{r4, lr}
 800c782:	460c      	mov	r4, r1
 800c784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c788:	f002 fc04 	bl	800ef94 <_read_r>
 800c78c:	2800      	cmp	r0, #0
 800c78e:	bfab      	itete	ge
 800c790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c792:	89a3      	ldrhlt	r3, [r4, #12]
 800c794:	181b      	addge	r3, r3, r0
 800c796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c79a:	bfac      	ite	ge
 800c79c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c79e:	81a3      	strhlt	r3, [r4, #12]
 800c7a0:	bd10      	pop	{r4, pc}

0800c7a2 <__seofread>:
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	4770      	bx	lr

0800c7a6 <__swrite>:
 800c7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7aa:	461f      	mov	r7, r3
 800c7ac:	898b      	ldrh	r3, [r1, #12]
 800c7ae:	05db      	lsls	r3, r3, #23
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	d505      	bpl.n	800c7c4 <__swrite+0x1e>
 800c7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7bc:	2302      	movs	r3, #2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f001 fa48 	bl	800dc54 <_lseek_r>
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	463b      	mov	r3, r7
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7da:	f000 bb09 	b.w	800cdf0 <_write_r>

0800c7de <__sseek>:
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e6:	f001 fa35 	bl	800dc54 <_lseek_r>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	bf15      	itete	ne
 800c7f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7fa:	81a3      	strheq	r3, [r4, #12]
 800c7fc:	bf18      	it	ne
 800c7fe:	81a3      	strhne	r3, [r4, #12]
 800c800:	bd10      	pop	{r4, pc}

0800c802 <__sclose>:
 800c802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c806:	f000 bb23 	b.w	800ce50 <_close_r>

0800c80a <strchr>:
 800c80a:	b2c9      	uxtb	r1, r1
 800c80c:	4603      	mov	r3, r0
 800c80e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c812:	b11a      	cbz	r2, 800c81c <strchr+0x12>
 800c814:	428a      	cmp	r2, r1
 800c816:	d1f9      	bne.n	800c80c <strchr+0x2>
 800c818:	4618      	mov	r0, r3
 800c81a:	4770      	bx	lr
 800c81c:	2900      	cmp	r1, #0
 800c81e:	bf18      	it	ne
 800c820:	2300      	movne	r3, #0
 800c822:	e7f9      	b.n	800c818 <strchr+0xe>

0800c824 <strcpy>:
 800c824:	4603      	mov	r3, r0
 800c826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c82a:	f803 2b01 	strb.w	r2, [r3], #1
 800c82e:	2a00      	cmp	r2, #0
 800c830:	d1f9      	bne.n	800c826 <strcpy+0x2>
 800c832:	4770      	bx	lr

0800c834 <strncmp>:
 800c834:	b510      	push	{r4, lr}
 800c836:	b17a      	cbz	r2, 800c858 <strncmp+0x24>
 800c838:	4603      	mov	r3, r0
 800c83a:	3901      	subs	r1, #1
 800c83c:	1884      	adds	r4, r0, r2
 800c83e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c842:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c846:	4290      	cmp	r0, r2
 800c848:	d101      	bne.n	800c84e <strncmp+0x1a>
 800c84a:	42a3      	cmp	r3, r4
 800c84c:	d101      	bne.n	800c852 <strncmp+0x1e>
 800c84e:	1a80      	subs	r0, r0, r2
 800c850:	bd10      	pop	{r4, pc}
 800c852:	2800      	cmp	r0, #0
 800c854:	d1f3      	bne.n	800c83e <strncmp+0xa>
 800c856:	e7fa      	b.n	800c84e <strncmp+0x1a>
 800c858:	4610      	mov	r0, r2
 800c85a:	e7f9      	b.n	800c850 <strncmp+0x1c>

0800c85c <_strtol_l.constprop.0>:
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c862:	d001      	beq.n	800c868 <_strtol_l.constprop.0+0xc>
 800c864:	2b24      	cmp	r3, #36	; 0x24
 800c866:	d906      	bls.n	800c876 <_strtol_l.constprop.0+0x1a>
 800c868:	f7fe fe66 	bl	800b538 <__errno>
 800c86c:	2316      	movs	r3, #22
 800c86e:	6003      	str	r3, [r0, #0]
 800c870:	2000      	movs	r0, #0
 800c872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c876:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c95c <_strtol_l.constprop.0+0x100>
 800c87a:	460d      	mov	r5, r1
 800c87c:	462e      	mov	r6, r5
 800c87e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c882:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c886:	f017 0708 	ands.w	r7, r7, #8
 800c88a:	d1f7      	bne.n	800c87c <_strtol_l.constprop.0+0x20>
 800c88c:	2c2d      	cmp	r4, #45	; 0x2d
 800c88e:	d132      	bne.n	800c8f6 <_strtol_l.constprop.0+0x9a>
 800c890:	782c      	ldrb	r4, [r5, #0]
 800c892:	2701      	movs	r7, #1
 800c894:	1cb5      	adds	r5, r6, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d05b      	beq.n	800c952 <_strtol_l.constprop.0+0xf6>
 800c89a:	2b10      	cmp	r3, #16
 800c89c:	d109      	bne.n	800c8b2 <_strtol_l.constprop.0+0x56>
 800c89e:	2c30      	cmp	r4, #48	; 0x30
 800c8a0:	d107      	bne.n	800c8b2 <_strtol_l.constprop.0+0x56>
 800c8a2:	782c      	ldrb	r4, [r5, #0]
 800c8a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c8a8:	2c58      	cmp	r4, #88	; 0x58
 800c8aa:	d14d      	bne.n	800c948 <_strtol_l.constprop.0+0xec>
 800c8ac:	786c      	ldrb	r4, [r5, #1]
 800c8ae:	2310      	movs	r3, #16
 800c8b0:	3502      	adds	r5, #2
 800c8b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c8b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8ba:	f04f 0c00 	mov.w	ip, #0
 800c8be:	fbb8 f9f3 	udiv	r9, r8, r3
 800c8c2:	4666      	mov	r6, ip
 800c8c4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c8c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c8cc:	f1be 0f09 	cmp.w	lr, #9
 800c8d0:	d816      	bhi.n	800c900 <_strtol_l.constprop.0+0xa4>
 800c8d2:	4674      	mov	r4, lr
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	dd24      	ble.n	800c922 <_strtol_l.constprop.0+0xc6>
 800c8d8:	f1bc 0f00 	cmp.w	ip, #0
 800c8dc:	db1e      	blt.n	800c91c <_strtol_l.constprop.0+0xc0>
 800c8de:	45b1      	cmp	r9, r6
 800c8e0:	d31c      	bcc.n	800c91c <_strtol_l.constprop.0+0xc0>
 800c8e2:	d101      	bne.n	800c8e8 <_strtol_l.constprop.0+0x8c>
 800c8e4:	45a2      	cmp	sl, r4
 800c8e6:	db19      	blt.n	800c91c <_strtol_l.constprop.0+0xc0>
 800c8e8:	fb06 4603 	mla	r6, r6, r3, r4
 800c8ec:	f04f 0c01 	mov.w	ip, #1
 800c8f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8f4:	e7e8      	b.n	800c8c8 <_strtol_l.constprop.0+0x6c>
 800c8f6:	2c2b      	cmp	r4, #43	; 0x2b
 800c8f8:	bf04      	itt	eq
 800c8fa:	782c      	ldrbeq	r4, [r5, #0]
 800c8fc:	1cb5      	addeq	r5, r6, #2
 800c8fe:	e7ca      	b.n	800c896 <_strtol_l.constprop.0+0x3a>
 800c900:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c904:	f1be 0f19 	cmp.w	lr, #25
 800c908:	d801      	bhi.n	800c90e <_strtol_l.constprop.0+0xb2>
 800c90a:	3c37      	subs	r4, #55	; 0x37
 800c90c:	e7e2      	b.n	800c8d4 <_strtol_l.constprop.0+0x78>
 800c90e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c912:	f1be 0f19 	cmp.w	lr, #25
 800c916:	d804      	bhi.n	800c922 <_strtol_l.constprop.0+0xc6>
 800c918:	3c57      	subs	r4, #87	; 0x57
 800c91a:	e7db      	b.n	800c8d4 <_strtol_l.constprop.0+0x78>
 800c91c:	f04f 3cff 	mov.w	ip, #4294967295
 800c920:	e7e6      	b.n	800c8f0 <_strtol_l.constprop.0+0x94>
 800c922:	f1bc 0f00 	cmp.w	ip, #0
 800c926:	da05      	bge.n	800c934 <_strtol_l.constprop.0+0xd8>
 800c928:	2322      	movs	r3, #34	; 0x22
 800c92a:	6003      	str	r3, [r0, #0]
 800c92c:	4646      	mov	r6, r8
 800c92e:	b942      	cbnz	r2, 800c942 <_strtol_l.constprop.0+0xe6>
 800c930:	4630      	mov	r0, r6
 800c932:	e79e      	b.n	800c872 <_strtol_l.constprop.0+0x16>
 800c934:	b107      	cbz	r7, 800c938 <_strtol_l.constprop.0+0xdc>
 800c936:	4276      	negs	r6, r6
 800c938:	2a00      	cmp	r2, #0
 800c93a:	d0f9      	beq.n	800c930 <_strtol_l.constprop.0+0xd4>
 800c93c:	f1bc 0f00 	cmp.w	ip, #0
 800c940:	d000      	beq.n	800c944 <_strtol_l.constprop.0+0xe8>
 800c942:	1e69      	subs	r1, r5, #1
 800c944:	6011      	str	r1, [r2, #0]
 800c946:	e7f3      	b.n	800c930 <_strtol_l.constprop.0+0xd4>
 800c948:	2430      	movs	r4, #48	; 0x30
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1b1      	bne.n	800c8b2 <_strtol_l.constprop.0+0x56>
 800c94e:	2308      	movs	r3, #8
 800c950:	e7af      	b.n	800c8b2 <_strtol_l.constprop.0+0x56>
 800c952:	2c30      	cmp	r4, #48	; 0x30
 800c954:	d0a5      	beq.n	800c8a2 <_strtol_l.constprop.0+0x46>
 800c956:	230a      	movs	r3, #10
 800c958:	e7ab      	b.n	800c8b2 <_strtol_l.constprop.0+0x56>
 800c95a:	bf00      	nop
 800c95c:	0801139f 	.word	0x0801139f

0800c960 <_strtol_r>:
 800c960:	f7ff bf7c 	b.w	800c85c <_strtol_l.constprop.0>

0800c964 <strtol>:
 800c964:	4613      	mov	r3, r2
 800c966:	460a      	mov	r2, r1
 800c968:	4601      	mov	r1, r0
 800c96a:	4802      	ldr	r0, [pc, #8]	; (800c974 <strtol+0x10>)
 800c96c:	6800      	ldr	r0, [r0, #0]
 800c96e:	f7ff bf75 	b.w	800c85c <_strtol_l.constprop.0>
 800c972:	bf00      	nop
 800c974:	200002c4 	.word	0x200002c4

0800c978 <__tzcalc_limits>:
 800c978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	4605      	mov	r5, r0
 800c97e:	f001 f95b 	bl	800dc38 <__gettzinfo>
 800c982:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800c986:	429d      	cmp	r5, r3
 800c988:	f340 8099 	ble.w	800cabe <__tzcalc_limits+0x146>
 800c98c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800c990:	18ac      	adds	r4, r5, r2
 800c992:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800c996:	f240 126d 	movw	r2, #365	; 0x16d
 800c99a:	10a4      	asrs	r4, r4, #2
 800c99c:	fb02 4403 	mla	r4, r2, r3, r4
 800c9a0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800c9a4:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800c9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9ac:	441c      	add	r4, r3
 800c9ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c9b2:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800c9b6:	fb95 fcf3 	sdiv	ip, r5, r3
 800c9ba:	fb03 5c1c 	mls	ip, r3, ip, r5
 800c9be:	186a      	adds	r2, r5, r1
 800c9c0:	fabc f68c 	clz	r6, ip
 800c9c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9c8:	f005 0303 	and.w	r3, r5, #3
 800c9cc:	4414      	add	r4, r2
 800c9ce:	2264      	movs	r2, #100	; 0x64
 800c9d0:	6045      	str	r5, [r0, #4]
 800c9d2:	fb95 f7f2 	sdiv	r7, r5, r2
 800c9d6:	0976      	lsrs	r6, r6, #5
 800c9d8:	fb02 5717 	mls	r7, r2, r7, r5
 800c9dc:	4601      	mov	r1, r0
 800c9de:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	f04f 0a07 	mov.w	sl, #7
 800c9e8:	7a0d      	ldrb	r5, [r1, #8]
 800c9ea:	694b      	ldr	r3, [r1, #20]
 800c9ec:	2d4a      	cmp	r5, #74	; 0x4a
 800c9ee:	d12d      	bne.n	800ca4c <__tzcalc_limits+0xd4>
 800c9f0:	9a00      	ldr	r2, [sp, #0]
 800c9f2:	eb04 0e03 	add.w	lr, r4, r3
 800c9f6:	b902      	cbnz	r2, 800c9fa <__tzcalc_limits+0x82>
 800c9f8:	b917      	cbnz	r7, 800ca00 <__tzcalc_limits+0x88>
 800c9fa:	f1bc 0f00 	cmp.w	ip, #0
 800c9fe:	d123      	bne.n	800ca48 <__tzcalc_limits+0xd0>
 800ca00:	2b3b      	cmp	r3, #59	; 0x3b
 800ca02:	bfd4      	ite	le
 800ca04:	2300      	movle	r3, #0
 800ca06:	2301      	movgt	r3, #1
 800ca08:	4473      	add	r3, lr
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	698d      	ldr	r5, [r1, #24]
 800ca0e:	4a2d      	ldr	r2, [pc, #180]	; (800cac4 <__tzcalc_limits+0x14c>)
 800ca10:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800ca14:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800ca18:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ca1a:	18ed      	adds	r5, r5, r3
 800ca1c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800ca20:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800ca24:	3128      	adds	r1, #40	; 0x28
 800ca26:	458b      	cmp	fp, r1
 800ca28:	d1de      	bne.n	800c9e8 <__tzcalc_limits+0x70>
 800ca2a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800ca2e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800ca32:	428c      	cmp	r4, r1
 800ca34:	eb72 0303 	sbcs.w	r3, r2, r3
 800ca38:	bfb4      	ite	lt
 800ca3a:	2301      	movlt	r3, #1
 800ca3c:	2300      	movge	r3, #0
 800ca3e:	6003      	str	r3, [r0, #0]
 800ca40:	2001      	movs	r0, #1
 800ca42:	b003      	add	sp, #12
 800ca44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e7dd      	b.n	800ca08 <__tzcalc_limits+0x90>
 800ca4c:	2d44      	cmp	r5, #68	; 0x44
 800ca4e:	d101      	bne.n	800ca54 <__tzcalc_limits+0xdc>
 800ca50:	4423      	add	r3, r4
 800ca52:	e7db      	b.n	800ca0c <__tzcalc_limits+0x94>
 800ca54:	9a00      	ldr	r2, [sp, #0]
 800ca56:	bb62      	cbnz	r2, 800cab2 <__tzcalc_limits+0x13a>
 800ca58:	2f00      	cmp	r7, #0
 800ca5a:	bf0c      	ite	eq
 800ca5c:	4635      	moveq	r5, r6
 800ca5e:	2501      	movne	r5, #1
 800ca60:	68ca      	ldr	r2, [r1, #12]
 800ca62:	9201      	str	r2, [sp, #4]
 800ca64:	4a18      	ldr	r2, [pc, #96]	; (800cac8 <__tzcalc_limits+0x150>)
 800ca66:	f04f 0930 	mov.w	r9, #48	; 0x30
 800ca6a:	fb09 2505 	mla	r5, r9, r5, r2
 800ca6e:	46a6      	mov	lr, r4
 800ca70:	f04f 0800 	mov.w	r8, #0
 800ca74:	3d04      	subs	r5, #4
 800ca76:	9a01      	ldr	r2, [sp, #4]
 800ca78:	f108 0801 	add.w	r8, r8, #1
 800ca7c:	4542      	cmp	r2, r8
 800ca7e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800ca82:	dc18      	bgt.n	800cab6 <__tzcalc_limits+0x13e>
 800ca84:	f10e 0504 	add.w	r5, lr, #4
 800ca88:	fb95 f8fa 	sdiv	r8, r5, sl
 800ca8c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800ca90:	eba5 0808 	sub.w	r8, r5, r8
 800ca94:	ebb3 0808 	subs.w	r8, r3, r8
 800ca98:	690b      	ldr	r3, [r1, #16]
 800ca9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca9e:	bf48      	it	mi
 800caa0:	f108 0807 	addmi.w	r8, r8, #7
 800caa4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800caa8:	4443      	add	r3, r8
 800caaa:	454b      	cmp	r3, r9
 800caac:	da05      	bge.n	800caba <__tzcalc_limits+0x142>
 800caae:	4473      	add	r3, lr
 800cab0:	e7ac      	b.n	800ca0c <__tzcalc_limits+0x94>
 800cab2:	4635      	mov	r5, r6
 800cab4:	e7d4      	b.n	800ca60 <__tzcalc_limits+0xe8>
 800cab6:	44ce      	add	lr, r9
 800cab8:	e7dd      	b.n	800ca76 <__tzcalc_limits+0xfe>
 800caba:	3b07      	subs	r3, #7
 800cabc:	e7f5      	b.n	800caaa <__tzcalc_limits+0x132>
 800cabe:	2000      	movs	r0, #0
 800cac0:	e7bf      	b.n	800ca42 <__tzcalc_limits+0xca>
 800cac2:	bf00      	nop
 800cac4:	00015180 	.word	0x00015180
 800cac8:	08011518 	.word	0x08011518

0800cacc <__tz_lock>:
 800cacc:	4801      	ldr	r0, [pc, #4]	; (800cad4 <__tz_lock+0x8>)
 800cace:	f001 b8bc 	b.w	800dc4a <__retarget_lock_acquire>
 800cad2:	bf00      	nop
 800cad4:	20001088 	.word	0x20001088

0800cad8 <__tz_unlock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__tz_unlock+0x8>)
 800cada:	f001 b8b8 	b.w	800dc4e <__retarget_lock_release>
 800cade:	bf00      	nop
 800cae0:	20001088 	.word	0x20001088

0800cae4 <_tzset_unlocked>:
 800cae4:	4b01      	ldr	r3, [pc, #4]	; (800caec <_tzset_unlocked+0x8>)
 800cae6:	6818      	ldr	r0, [r3, #0]
 800cae8:	f000 b802 	b.w	800caf0 <_tzset_unlocked_r>
 800caec:	200002c4 	.word	0x200002c4

0800caf0 <_tzset_unlocked_r>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	b08d      	sub	sp, #52	; 0x34
 800caf6:	4607      	mov	r7, r0
 800caf8:	f001 f89e 	bl	800dc38 <__gettzinfo>
 800cafc:	49b0      	ldr	r1, [pc, #704]	; (800cdc0 <_tzset_unlocked_r+0x2d0>)
 800cafe:	4eb1      	ldr	r6, [pc, #708]	; (800cdc4 <_tzset_unlocked_r+0x2d4>)
 800cb00:	4605      	mov	r5, r0
 800cb02:	4638      	mov	r0, r7
 800cb04:	f001 f890 	bl	800dc28 <_getenv_r>
 800cb08:	4604      	mov	r4, r0
 800cb0a:	b970      	cbnz	r0, 800cb2a <_tzset_unlocked_r+0x3a>
 800cb0c:	4bae      	ldr	r3, [pc, #696]	; (800cdc8 <_tzset_unlocked_r+0x2d8>)
 800cb0e:	4aaf      	ldr	r2, [pc, #700]	; (800cdcc <_tzset_unlocked_r+0x2dc>)
 800cb10:	6018      	str	r0, [r3, #0]
 800cb12:	4baf      	ldr	r3, [pc, #700]	; (800cdd0 <_tzset_unlocked_r+0x2e0>)
 800cb14:	6018      	str	r0, [r3, #0]
 800cb16:	4baf      	ldr	r3, [pc, #700]	; (800cdd4 <_tzset_unlocked_r+0x2e4>)
 800cb18:	6830      	ldr	r0, [r6, #0]
 800cb1a:	e9c3 2200 	strd	r2, r2, [r3]
 800cb1e:	f7fe fe07 	bl	800b730 <free>
 800cb22:	6034      	str	r4, [r6, #0]
 800cb24:	b00d      	add	sp, #52	; 0x34
 800cb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2a:	6831      	ldr	r1, [r6, #0]
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	d162      	bne.n	800cbf6 <_tzset_unlocked_r+0x106>
 800cb30:	6830      	ldr	r0, [r6, #0]
 800cb32:	f7fe fdfd 	bl	800b730 <free>
 800cb36:	4620      	mov	r0, r4
 800cb38:	f7f3 fb5c 	bl	80001f4 <strlen>
 800cb3c:	1c41      	adds	r1, r0, #1
 800cb3e:	4638      	mov	r0, r7
 800cb40:	f7ff f8e4 	bl	800bd0c <_malloc_r>
 800cb44:	6030      	str	r0, [r6, #0]
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d15a      	bne.n	800cc00 <_tzset_unlocked_r+0x110>
 800cb4a:	7823      	ldrb	r3, [r4, #0]
 800cb4c:	4aa2      	ldr	r2, [pc, #648]	; (800cdd8 <_tzset_unlocked_r+0x2e8>)
 800cb4e:	49a3      	ldr	r1, [pc, #652]	; (800cddc <_tzset_unlocked_r+0x2ec>)
 800cb50:	2b3a      	cmp	r3, #58	; 0x3a
 800cb52:	bf08      	it	eq
 800cb54:	3401      	addeq	r4, #1
 800cb56:	ae0a      	add	r6, sp, #40	; 0x28
 800cb58:	4633      	mov	r3, r6
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f7ff fde4 	bl	800c728 <siscanf>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	dddf      	ble.n	800cb24 <_tzset_unlocked_r+0x34>
 800cb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb66:	18e7      	adds	r7, r4, r3
 800cb68:	5ce3      	ldrb	r3, [r4, r3]
 800cb6a:	2b2d      	cmp	r3, #45	; 0x2d
 800cb6c:	d14c      	bne.n	800cc08 <_tzset_unlocked_r+0x118>
 800cb6e:	3701      	adds	r7, #1
 800cb70:	f04f 38ff 	mov.w	r8, #4294967295
 800cb74:	f10d 0a20 	add.w	sl, sp, #32
 800cb78:	f10d 0b1e 	add.w	fp, sp, #30
 800cb7c:	2400      	movs	r4, #0
 800cb7e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800cb82:	4997      	ldr	r1, [pc, #604]	; (800cde0 <_tzset_unlocked_r+0x2f0>)
 800cb84:	9603      	str	r6, [sp, #12]
 800cb86:	f8cd b000 	str.w	fp, [sp]
 800cb8a:	4633      	mov	r3, r6
 800cb8c:	aa07      	add	r2, sp, #28
 800cb8e:	4638      	mov	r0, r7
 800cb90:	f8ad 401e 	strh.w	r4, [sp, #30]
 800cb94:	f8ad 4020 	strh.w	r4, [sp, #32]
 800cb98:	f7ff fdc6 	bl	800c728 <siscanf>
 800cb9c:	42a0      	cmp	r0, r4
 800cb9e:	ddc1      	ble.n	800cb24 <_tzset_unlocked_r+0x34>
 800cba0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cba4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cba8:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800cdec <_tzset_unlocked_r+0x2fc>
 800cbac:	213c      	movs	r1, #60	; 0x3c
 800cbae:	fb01 3302 	mla	r3, r1, r2, r3
 800cbb2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cbb6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cbba:	fb01 3302 	mla	r3, r1, r2, r3
 800cbbe:	fb08 f303 	mul.w	r3, r8, r3
 800cbc2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800cdd4 <_tzset_unlocked_r+0x2e4>
 800cbc6:	62ab      	str	r3, [r5, #40]	; 0x28
 800cbc8:	4b83      	ldr	r3, [pc, #524]	; (800cdd8 <_tzset_unlocked_r+0x2e8>)
 800cbca:	f8c8 3000 	str.w	r3, [r8]
 800cbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbd0:	4982      	ldr	r1, [pc, #520]	; (800cddc <_tzset_unlocked_r+0x2ec>)
 800cbd2:	441f      	add	r7, r3
 800cbd4:	464a      	mov	r2, r9
 800cbd6:	4633      	mov	r3, r6
 800cbd8:	4638      	mov	r0, r7
 800cbda:	f7ff fda5 	bl	800c728 <siscanf>
 800cbde:	42a0      	cmp	r0, r4
 800cbe0:	dc18      	bgt.n	800cc14 <_tzset_unlocked_r+0x124>
 800cbe2:	f8d8 3000 	ldr.w	r3, [r8]
 800cbe6:	f8c8 3004 	str.w	r3, [r8, #4]
 800cbea:	4b77      	ldr	r3, [pc, #476]	; (800cdc8 <_tzset_unlocked_r+0x2d8>)
 800cbec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	4b77      	ldr	r3, [pc, #476]	; (800cdd0 <_tzset_unlocked_r+0x2e0>)
 800cbf2:	601c      	str	r4, [r3, #0]
 800cbf4:	e796      	b.n	800cb24 <_tzset_unlocked_r+0x34>
 800cbf6:	f7f3 faf3 	bl	80001e0 <strcmp>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d198      	bne.n	800cb30 <_tzset_unlocked_r+0x40>
 800cbfe:	e791      	b.n	800cb24 <_tzset_unlocked_r+0x34>
 800cc00:	4621      	mov	r1, r4
 800cc02:	f7ff fe0f 	bl	800c824 <strcpy>
 800cc06:	e7a0      	b.n	800cb4a <_tzset_unlocked_r+0x5a>
 800cc08:	2b2b      	cmp	r3, #43	; 0x2b
 800cc0a:	bf08      	it	eq
 800cc0c:	3701      	addeq	r7, #1
 800cc0e:	f04f 0801 	mov.w	r8, #1
 800cc12:	e7af      	b.n	800cb74 <_tzset_unlocked_r+0x84>
 800cc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc16:	f8c8 9004 	str.w	r9, [r8, #4]
 800cc1a:	18fc      	adds	r4, r7, r3
 800cc1c:	5cfb      	ldrb	r3, [r7, r3]
 800cc1e:	2b2d      	cmp	r3, #45	; 0x2d
 800cc20:	f040 808b 	bne.w	800cd3a <_tzset_unlocked_r+0x24a>
 800cc24:	3401      	adds	r4, #1
 800cc26:	f04f 37ff 	mov.w	r7, #4294967295
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cc30:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cc34:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cc38:	930a      	str	r3, [sp, #40]	; 0x28
 800cc3a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cc3e:	e9cd b600 	strd	fp, r6, [sp]
 800cc42:	4967      	ldr	r1, [pc, #412]	; (800cde0 <_tzset_unlocked_r+0x2f0>)
 800cc44:	4633      	mov	r3, r6
 800cc46:	aa07      	add	r2, sp, #28
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f7ff fd6d 	bl	800c728 <siscanf>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	dc78      	bgt.n	800cd44 <_tzset_unlocked_r+0x254>
 800cc52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800cc54:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800cc58:	652b      	str	r3, [r5, #80]	; 0x50
 800cc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5c:	462f      	mov	r7, r5
 800cc5e:	441c      	add	r4, r3
 800cc60:	f04f 0900 	mov.w	r9, #0
 800cc64:	7823      	ldrb	r3, [r4, #0]
 800cc66:	2b2c      	cmp	r3, #44	; 0x2c
 800cc68:	bf08      	it	eq
 800cc6a:	3401      	addeq	r4, #1
 800cc6c:	f894 8000 	ldrb.w	r8, [r4]
 800cc70:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800cc74:	d178      	bne.n	800cd68 <_tzset_unlocked_r+0x278>
 800cc76:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800cc7a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800cc7e:	ab09      	add	r3, sp, #36	; 0x24
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	4958      	ldr	r1, [pc, #352]	; (800cde4 <_tzset_unlocked_r+0x2f4>)
 800cc84:	9603      	str	r6, [sp, #12]
 800cc86:	4633      	mov	r3, r6
 800cc88:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7ff fd4b 	bl	800c728 <siscanf>
 800cc92:	2803      	cmp	r0, #3
 800cc94:	f47f af46 	bne.w	800cb24 <_tzset_unlocked_r+0x34>
 800cc98:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800cc9c:	1e4b      	subs	r3, r1, #1
 800cc9e:	2b0b      	cmp	r3, #11
 800cca0:	f63f af40 	bhi.w	800cb24 <_tzset_unlocked_r+0x34>
 800cca4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cca8:	1e53      	subs	r3, r2, #1
 800ccaa:	2b04      	cmp	r3, #4
 800ccac:	f63f af3a 	bhi.w	800cb24 <_tzset_unlocked_r+0x34>
 800ccb0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ccb4:	2b06      	cmp	r3, #6
 800ccb6:	f63f af35 	bhi.w	800cb24 <_tzset_unlocked_r+0x34>
 800ccba:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ccbe:	f887 8008 	strb.w	r8, [r7, #8]
 800ccc2:	617b      	str	r3, [r7, #20]
 800ccc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc6:	eb04 0803 	add.w	r8, r4, r3
 800ccca:	2302      	movs	r3, #2
 800cccc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ccd6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ccda:	930a      	str	r3, [sp, #40]	; 0x28
 800ccdc:	f898 3000 	ldrb.w	r3, [r8]
 800cce0:	2b2f      	cmp	r3, #47	; 0x2f
 800cce2:	d109      	bne.n	800ccf8 <_tzset_unlocked_r+0x208>
 800cce4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cce8:	e9cd b600 	strd	fp, r6, [sp]
 800ccec:	493e      	ldr	r1, [pc, #248]	; (800cde8 <_tzset_unlocked_r+0x2f8>)
 800ccee:	4633      	mov	r3, r6
 800ccf0:	aa07      	add	r2, sp, #28
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	f7ff fd18 	bl	800c728 <siscanf>
 800ccf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ccfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cd00:	213c      	movs	r1, #60	; 0x3c
 800cd02:	fb01 3302 	mla	r3, r1, r2, r3
 800cd06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cd0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cd0e:	fb01 3302 	mla	r3, r1, r2, r3
 800cd12:	61bb      	str	r3, [r7, #24]
 800cd14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cd16:	3728      	adds	r7, #40	; 0x28
 800cd18:	4444      	add	r4, r8
 800cd1a:	f1b9 0f00 	cmp.w	r9, #0
 800cd1e:	d020      	beq.n	800cd62 <_tzset_unlocked_r+0x272>
 800cd20:	6868      	ldr	r0, [r5, #4]
 800cd22:	f7ff fe29 	bl	800c978 <__tzcalc_limits>
 800cd26:	4b28      	ldr	r3, [pc, #160]	; (800cdc8 <_tzset_unlocked_r+0x2d8>)
 800cd28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cd2e:	1a9b      	subs	r3, r3, r2
 800cd30:	4a27      	ldr	r2, [pc, #156]	; (800cdd0 <_tzset_unlocked_r+0x2e0>)
 800cd32:	bf18      	it	ne
 800cd34:	2301      	movne	r3, #1
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	e6f4      	b.n	800cb24 <_tzset_unlocked_r+0x34>
 800cd3a:	2b2b      	cmp	r3, #43	; 0x2b
 800cd3c:	bf08      	it	eq
 800cd3e:	3401      	addeq	r4, #1
 800cd40:	2701      	movs	r7, #1
 800cd42:	e772      	b.n	800cc2a <_tzset_unlocked_r+0x13a>
 800cd44:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cd48:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cd4c:	213c      	movs	r1, #60	; 0x3c
 800cd4e:	fb01 3302 	mla	r3, r1, r2, r3
 800cd52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cd56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cd5a:	fb01 3302 	mla	r3, r1, r2, r3
 800cd5e:	437b      	muls	r3, r7
 800cd60:	e77a      	b.n	800cc58 <_tzset_unlocked_r+0x168>
 800cd62:	f04f 0901 	mov.w	r9, #1
 800cd66:	e77d      	b.n	800cc64 <_tzset_unlocked_r+0x174>
 800cd68:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800cd6c:	bf06      	itte	eq
 800cd6e:	3401      	addeq	r4, #1
 800cd70:	4643      	moveq	r3, r8
 800cd72:	2344      	movne	r3, #68	; 0x44
 800cd74:	220a      	movs	r2, #10
 800cd76:	a90b      	add	r1, sp, #44	; 0x2c
 800cd78:	4620      	mov	r0, r4
 800cd7a:	9305      	str	r3, [sp, #20]
 800cd7c:	f002 f9c8 	bl	800f110 <strtoul>
 800cd80:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800cd84:	9b05      	ldr	r3, [sp, #20]
 800cd86:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800cd8a:	45a0      	cmp	r8, r4
 800cd8c:	d114      	bne.n	800cdb8 <_tzset_unlocked_r+0x2c8>
 800cd8e:	234d      	movs	r3, #77	; 0x4d
 800cd90:	f1b9 0f00 	cmp.w	r9, #0
 800cd94:	d107      	bne.n	800cda6 <_tzset_unlocked_r+0x2b6>
 800cd96:	722b      	strb	r3, [r5, #8]
 800cd98:	2103      	movs	r1, #3
 800cd9a:	2302      	movs	r3, #2
 800cd9c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800cda0:	f8c5 9014 	str.w	r9, [r5, #20]
 800cda4:	e791      	b.n	800ccca <_tzset_unlocked_r+0x1da>
 800cda6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800cdaa:	220b      	movs	r2, #11
 800cdac:	2301      	movs	r3, #1
 800cdae:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	63eb      	str	r3, [r5, #60]	; 0x3c
 800cdb6:	e788      	b.n	800ccca <_tzset_unlocked_r+0x1da>
 800cdb8:	b280      	uxth	r0, r0
 800cdba:	723b      	strb	r3, [r7, #8]
 800cdbc:	6178      	str	r0, [r7, #20]
 800cdbe:	e784      	b.n	800ccca <_tzset_unlocked_r+0x1da>
 800cdc0:	08011326 	.word	0x08011326
 800cdc4:	20001078 	.word	0x20001078
 800cdc8:	20001080 	.word	0x20001080
 800cdcc:	08011329 	.word	0x08011329
 800cdd0:	2000107c 	.word	0x2000107c
 800cdd4:	20000328 	.word	0x20000328
 800cdd8:	2000106b 	.word	0x2000106b
 800cddc:	0801132d 	.word	0x0801132d
 800cde0:	08011350 	.word	0x08011350
 800cde4:	0801133c 	.word	0x0801133c
 800cde8:	0801134f 	.word	0x0801134f
 800cdec:	20001060 	.word	0x20001060

0800cdf0 <_write_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	; (800ce10 <_write_r+0x20>)
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f7f7 fb13 	bl	800442a <_write>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_write_r+0x1e>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_write_r+0x1e>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	2000108c 	.word	0x2000108c

0800ce14 <__assert_func>:
 800ce14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce16:	4614      	mov	r4, r2
 800ce18:	461a      	mov	r2, r3
 800ce1a:	4b09      	ldr	r3, [pc, #36]	; (800ce40 <__assert_func+0x2c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4605      	mov	r5, r0
 800ce20:	68d8      	ldr	r0, [r3, #12]
 800ce22:	b14c      	cbz	r4, 800ce38 <__assert_func+0x24>
 800ce24:	4b07      	ldr	r3, [pc, #28]	; (800ce44 <__assert_func+0x30>)
 800ce26:	9100      	str	r1, [sp, #0]
 800ce28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce2c:	4906      	ldr	r1, [pc, #24]	; (800ce48 <__assert_func+0x34>)
 800ce2e:	462b      	mov	r3, r5
 800ce30:	f000 feac 	bl	800db8c <fiprintf>
 800ce34:	f002 fa70 	bl	800f318 <abort>
 800ce38:	4b04      	ldr	r3, [pc, #16]	; (800ce4c <__assert_func+0x38>)
 800ce3a:	461c      	mov	r4, r3
 800ce3c:	e7f3      	b.n	800ce26 <__assert_func+0x12>
 800ce3e:	bf00      	nop
 800ce40:	200002c4 	.word	0x200002c4
 800ce44:	08011362 	.word	0x08011362
 800ce48:	0801136f 	.word	0x0801136f
 800ce4c:	0801139d 	.word	0x0801139d

0800ce50 <_close_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	4d06      	ldr	r5, [pc, #24]	; (800ce6c <_close_r+0x1c>)
 800ce54:	2300      	movs	r3, #0
 800ce56:	4604      	mov	r4, r0
 800ce58:	4608      	mov	r0, r1
 800ce5a:	602b      	str	r3, [r5, #0]
 800ce5c:	f7f7 fb01 	bl	8004462 <_close>
 800ce60:	1c43      	adds	r3, r0, #1
 800ce62:	d102      	bne.n	800ce6a <_close_r+0x1a>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	b103      	cbz	r3, 800ce6a <_close_r+0x1a>
 800ce68:	6023      	str	r3, [r4, #0]
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	2000108c 	.word	0x2000108c

0800ce70 <div>:
 800ce70:	2900      	cmp	r1, #0
 800ce72:	b510      	push	{r4, lr}
 800ce74:	fb91 f4f2 	sdiv	r4, r1, r2
 800ce78:	fb02 1314 	mls	r3, r2, r4, r1
 800ce7c:	db06      	blt.n	800ce8c <div+0x1c>
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	da01      	bge.n	800ce86 <div+0x16>
 800ce82:	3401      	adds	r4, #1
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	e9c0 4300 	strd	r4, r3, [r0]
 800ce8a:	bd10      	pop	{r4, pc}
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bfc4      	itt	gt
 800ce90:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800ce94:	189b      	addgt	r3, r3, r2
 800ce96:	e7f6      	b.n	800ce86 <div+0x16>

0800ce98 <quorem>:
 800ce98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	6903      	ldr	r3, [r0, #16]
 800ce9e:	690c      	ldr	r4, [r1, #16]
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	4607      	mov	r7, r0
 800cea4:	f2c0 8081 	blt.w	800cfaa <quorem+0x112>
 800cea8:	3c01      	subs	r4, #1
 800ceaa:	f101 0814 	add.w	r8, r1, #20
 800ceae:	f100 0514 	add.w	r5, r0, #20
 800ceb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cec0:	3301      	adds	r3, #1
 800cec2:	429a      	cmp	r2, r3
 800cec4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cec8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cecc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ced0:	d331      	bcc.n	800cf36 <quorem+0x9e>
 800ced2:	f04f 0e00 	mov.w	lr, #0
 800ced6:	4640      	mov	r0, r8
 800ced8:	46ac      	mov	ip, r5
 800ceda:	46f2      	mov	sl, lr
 800cedc:	f850 2b04 	ldr.w	r2, [r0], #4
 800cee0:	b293      	uxth	r3, r2
 800cee2:	fb06 e303 	mla	r3, r6, r3, lr
 800cee6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	ebaa 0303 	sub.w	r3, sl, r3
 800cef0:	f8dc a000 	ldr.w	sl, [ip]
 800cef4:	0c12      	lsrs	r2, r2, #16
 800cef6:	fa13 f38a 	uxtah	r3, r3, sl
 800cefa:	fb06 e202 	mla	r2, r6, r2, lr
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	9b00      	ldr	r3, [sp, #0]
 800cf02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf06:	b292      	uxth	r2, r2
 800cf08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf10:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf14:	4581      	cmp	r9, r0
 800cf16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf1a:	f84c 3b04 	str.w	r3, [ip], #4
 800cf1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf22:	d2db      	bcs.n	800cedc <quorem+0x44>
 800cf24:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf28:	b92b      	cbnz	r3, 800cf36 <quorem+0x9e>
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	3b04      	subs	r3, #4
 800cf2e:	429d      	cmp	r5, r3
 800cf30:	461a      	mov	r2, r3
 800cf32:	d32e      	bcc.n	800cf92 <quorem+0xfa>
 800cf34:	613c      	str	r4, [r7, #16]
 800cf36:	4638      	mov	r0, r7
 800cf38:	f001 f93a 	bl	800e1b0 <__mcmp>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	db24      	blt.n	800cf8a <quorem+0xf2>
 800cf40:	3601      	adds	r6, #1
 800cf42:	4628      	mov	r0, r5
 800cf44:	f04f 0c00 	mov.w	ip, #0
 800cf48:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf4c:	f8d0 e000 	ldr.w	lr, [r0]
 800cf50:	b293      	uxth	r3, r2
 800cf52:	ebac 0303 	sub.w	r3, ip, r3
 800cf56:	0c12      	lsrs	r2, r2, #16
 800cf58:	fa13 f38e 	uxtah	r3, r3, lr
 800cf5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf6a:	45c1      	cmp	r9, r8
 800cf6c:	f840 3b04 	str.w	r3, [r0], #4
 800cf70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf74:	d2e8      	bcs.n	800cf48 <quorem+0xb0>
 800cf76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf7e:	b922      	cbnz	r2, 800cf8a <quorem+0xf2>
 800cf80:	3b04      	subs	r3, #4
 800cf82:	429d      	cmp	r5, r3
 800cf84:	461a      	mov	r2, r3
 800cf86:	d30a      	bcc.n	800cf9e <quorem+0x106>
 800cf88:	613c      	str	r4, [r7, #16]
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	b003      	add	sp, #12
 800cf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf92:	6812      	ldr	r2, [r2, #0]
 800cf94:	3b04      	subs	r3, #4
 800cf96:	2a00      	cmp	r2, #0
 800cf98:	d1cc      	bne.n	800cf34 <quorem+0x9c>
 800cf9a:	3c01      	subs	r4, #1
 800cf9c:	e7c7      	b.n	800cf2e <quorem+0x96>
 800cf9e:	6812      	ldr	r2, [r2, #0]
 800cfa0:	3b04      	subs	r3, #4
 800cfa2:	2a00      	cmp	r2, #0
 800cfa4:	d1f0      	bne.n	800cf88 <quorem+0xf0>
 800cfa6:	3c01      	subs	r4, #1
 800cfa8:	e7eb      	b.n	800cf82 <quorem+0xea>
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e7ee      	b.n	800cf8c <quorem+0xf4>
	...

0800cfb0 <_dtoa_r>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	ed2d 8b04 	vpush	{d8-d9}
 800cfb8:	ec57 6b10 	vmov	r6, r7, d0
 800cfbc:	b093      	sub	sp, #76	; 0x4c
 800cfbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cfc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cfc4:	9106      	str	r1, [sp, #24]
 800cfc6:	ee10 aa10 	vmov	sl, s0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	9209      	str	r2, [sp, #36]	; 0x24
 800cfce:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd0:	46bb      	mov	fp, r7
 800cfd2:	b975      	cbnz	r5, 800cff2 <_dtoa_r+0x42>
 800cfd4:	2010      	movs	r0, #16
 800cfd6:	f7fe fba3 	bl	800b720 <malloc>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	6260      	str	r0, [r4, #36]	; 0x24
 800cfde:	b920      	cbnz	r0, 800cfea <_dtoa_r+0x3a>
 800cfe0:	4ba7      	ldr	r3, [pc, #668]	; (800d280 <_dtoa_r+0x2d0>)
 800cfe2:	21ea      	movs	r1, #234	; 0xea
 800cfe4:	48a7      	ldr	r0, [pc, #668]	; (800d284 <_dtoa_r+0x2d4>)
 800cfe6:	f7ff ff15 	bl	800ce14 <__assert_func>
 800cfea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfee:	6005      	str	r5, [r0, #0]
 800cff0:	60c5      	str	r5, [r0, #12]
 800cff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cff4:	6819      	ldr	r1, [r3, #0]
 800cff6:	b151      	cbz	r1, 800d00e <_dtoa_r+0x5e>
 800cff8:	685a      	ldr	r2, [r3, #4]
 800cffa:	604a      	str	r2, [r1, #4]
 800cffc:	2301      	movs	r3, #1
 800cffe:	4093      	lsls	r3, r2
 800d000:	608b      	str	r3, [r1, #8]
 800d002:	4620      	mov	r0, r4
 800d004:	f000 fe92 	bl	800dd2c <_Bfree>
 800d008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d00a:	2200      	movs	r2, #0
 800d00c:	601a      	str	r2, [r3, #0]
 800d00e:	1e3b      	subs	r3, r7, #0
 800d010:	bfaa      	itet	ge
 800d012:	2300      	movge	r3, #0
 800d014:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d018:	f8c8 3000 	strge.w	r3, [r8]
 800d01c:	4b9a      	ldr	r3, [pc, #616]	; (800d288 <_dtoa_r+0x2d8>)
 800d01e:	bfbc      	itt	lt
 800d020:	2201      	movlt	r2, #1
 800d022:	f8c8 2000 	strlt.w	r2, [r8]
 800d026:	ea33 030b 	bics.w	r3, r3, fp
 800d02a:	d11b      	bne.n	800d064 <_dtoa_r+0xb4>
 800d02c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d02e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d038:	4333      	orrs	r3, r6
 800d03a:	f000 8592 	beq.w	800db62 <_dtoa_r+0xbb2>
 800d03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d040:	b963      	cbnz	r3, 800d05c <_dtoa_r+0xac>
 800d042:	4b92      	ldr	r3, [pc, #584]	; (800d28c <_dtoa_r+0x2dc>)
 800d044:	e022      	b.n	800d08c <_dtoa_r+0xdc>
 800d046:	4b92      	ldr	r3, [pc, #584]	; (800d290 <_dtoa_r+0x2e0>)
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	3308      	adds	r3, #8
 800d04c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	9801      	ldr	r0, [sp, #4]
 800d052:	b013      	add	sp, #76	; 0x4c
 800d054:	ecbd 8b04 	vpop	{d8-d9}
 800d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05c:	4b8b      	ldr	r3, [pc, #556]	; (800d28c <_dtoa_r+0x2dc>)
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	3303      	adds	r3, #3
 800d062:	e7f3      	b.n	800d04c <_dtoa_r+0x9c>
 800d064:	2200      	movs	r2, #0
 800d066:	2300      	movs	r3, #0
 800d068:	4650      	mov	r0, sl
 800d06a:	4659      	mov	r1, fp
 800d06c:	f7f3 fd44 	bl	8000af8 <__aeabi_dcmpeq>
 800d070:	ec4b ab19 	vmov	d9, sl, fp
 800d074:	4680      	mov	r8, r0
 800d076:	b158      	cbz	r0, 800d090 <_dtoa_r+0xe0>
 800d078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d07a:	2301      	movs	r3, #1
 800d07c:	6013      	str	r3, [r2, #0]
 800d07e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 856b 	beq.w	800db5c <_dtoa_r+0xbac>
 800d086:	4883      	ldr	r0, [pc, #524]	; (800d294 <_dtoa_r+0x2e4>)
 800d088:	6018      	str	r0, [r3, #0]
 800d08a:	1e43      	subs	r3, r0, #1
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	e7df      	b.n	800d050 <_dtoa_r+0xa0>
 800d090:	ec4b ab10 	vmov	d0, sl, fp
 800d094:	aa10      	add	r2, sp, #64	; 0x40
 800d096:	a911      	add	r1, sp, #68	; 0x44
 800d098:	4620      	mov	r0, r4
 800d09a:	f001 f92f 	bl	800e2fc <__d2b>
 800d09e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d0a2:	ee08 0a10 	vmov	s16, r0
 800d0a6:	2d00      	cmp	r5, #0
 800d0a8:	f000 8084 	beq.w	800d1b4 <_dtoa_r+0x204>
 800d0ac:	ee19 3a90 	vmov	r3, s19
 800d0b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d0b8:	4656      	mov	r6, sl
 800d0ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d0be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d0c6:	4b74      	ldr	r3, [pc, #464]	; (800d298 <_dtoa_r+0x2e8>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	f7f3 f8f3 	bl	80002b8 <__aeabi_dsub>
 800d0d2:	a365      	add	r3, pc, #404	; (adr r3, 800d268 <_dtoa_r+0x2b8>)
 800d0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d8:	f7f3 faa6 	bl	8000628 <__aeabi_dmul>
 800d0dc:	a364      	add	r3, pc, #400	; (adr r3, 800d270 <_dtoa_r+0x2c0>)
 800d0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e2:	f7f3 f8eb 	bl	80002bc <__adddf3>
 800d0e6:	4606      	mov	r6, r0
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	460f      	mov	r7, r1
 800d0ec:	f7f3 fa32 	bl	8000554 <__aeabi_i2d>
 800d0f0:	a361      	add	r3, pc, #388	; (adr r3, 800d278 <_dtoa_r+0x2c8>)
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	f7f3 fa97 	bl	8000628 <__aeabi_dmul>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4630      	mov	r0, r6
 800d100:	4639      	mov	r1, r7
 800d102:	f7f3 f8db 	bl	80002bc <__adddf3>
 800d106:	4606      	mov	r6, r0
 800d108:	460f      	mov	r7, r1
 800d10a:	f7f3 fd3d 	bl	8000b88 <__aeabi_d2iz>
 800d10e:	2200      	movs	r2, #0
 800d110:	9000      	str	r0, [sp, #0]
 800d112:	2300      	movs	r3, #0
 800d114:	4630      	mov	r0, r6
 800d116:	4639      	mov	r1, r7
 800d118:	f7f3 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800d11c:	b150      	cbz	r0, 800d134 <_dtoa_r+0x184>
 800d11e:	9800      	ldr	r0, [sp, #0]
 800d120:	f7f3 fa18 	bl	8000554 <__aeabi_i2d>
 800d124:	4632      	mov	r2, r6
 800d126:	463b      	mov	r3, r7
 800d128:	f7f3 fce6 	bl	8000af8 <__aeabi_dcmpeq>
 800d12c:	b910      	cbnz	r0, 800d134 <_dtoa_r+0x184>
 800d12e:	9b00      	ldr	r3, [sp, #0]
 800d130:	3b01      	subs	r3, #1
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	9b00      	ldr	r3, [sp, #0]
 800d136:	2b16      	cmp	r3, #22
 800d138:	d85a      	bhi.n	800d1f0 <_dtoa_r+0x240>
 800d13a:	9a00      	ldr	r2, [sp, #0]
 800d13c:	4b57      	ldr	r3, [pc, #348]	; (800d29c <_dtoa_r+0x2ec>)
 800d13e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d146:	ec51 0b19 	vmov	r0, r1, d9
 800d14a:	f7f3 fcdf 	bl	8000b0c <__aeabi_dcmplt>
 800d14e:	2800      	cmp	r0, #0
 800d150:	d050      	beq.n	800d1f4 <_dtoa_r+0x244>
 800d152:	9b00      	ldr	r3, [sp, #0]
 800d154:	3b01      	subs	r3, #1
 800d156:	9300      	str	r3, [sp, #0]
 800d158:	2300      	movs	r3, #0
 800d15a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d15e:	1b5d      	subs	r5, r3, r5
 800d160:	1e6b      	subs	r3, r5, #1
 800d162:	9305      	str	r3, [sp, #20]
 800d164:	bf45      	ittet	mi
 800d166:	f1c5 0301 	rsbmi	r3, r5, #1
 800d16a:	9304      	strmi	r3, [sp, #16]
 800d16c:	2300      	movpl	r3, #0
 800d16e:	2300      	movmi	r3, #0
 800d170:	bf4c      	ite	mi
 800d172:	9305      	strmi	r3, [sp, #20]
 800d174:	9304      	strpl	r3, [sp, #16]
 800d176:	9b00      	ldr	r3, [sp, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	db3d      	blt.n	800d1f8 <_dtoa_r+0x248>
 800d17c:	9b05      	ldr	r3, [sp, #20]
 800d17e:	9a00      	ldr	r2, [sp, #0]
 800d180:	920a      	str	r2, [sp, #40]	; 0x28
 800d182:	4413      	add	r3, r2
 800d184:	9305      	str	r3, [sp, #20]
 800d186:	2300      	movs	r3, #0
 800d188:	9307      	str	r3, [sp, #28]
 800d18a:	9b06      	ldr	r3, [sp, #24]
 800d18c:	2b09      	cmp	r3, #9
 800d18e:	f200 8089 	bhi.w	800d2a4 <_dtoa_r+0x2f4>
 800d192:	2b05      	cmp	r3, #5
 800d194:	bfc4      	itt	gt
 800d196:	3b04      	subgt	r3, #4
 800d198:	9306      	strgt	r3, [sp, #24]
 800d19a:	9b06      	ldr	r3, [sp, #24]
 800d19c:	f1a3 0302 	sub.w	r3, r3, #2
 800d1a0:	bfcc      	ite	gt
 800d1a2:	2500      	movgt	r5, #0
 800d1a4:	2501      	movle	r5, #1
 800d1a6:	2b03      	cmp	r3, #3
 800d1a8:	f200 8087 	bhi.w	800d2ba <_dtoa_r+0x30a>
 800d1ac:	e8df f003 	tbb	[pc, r3]
 800d1b0:	59383a2d 	.word	0x59383a2d
 800d1b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d1b8:	441d      	add	r5, r3
 800d1ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d1be:	2b20      	cmp	r3, #32
 800d1c0:	bfc1      	itttt	gt
 800d1c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d1ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800d1ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d1d2:	bfda      	itte	le
 800d1d4:	f1c3 0320 	rsble	r3, r3, #32
 800d1d8:	fa06 f003 	lslle.w	r0, r6, r3
 800d1dc:	4318      	orrgt	r0, r3
 800d1de:	f7f3 f9a9 	bl	8000534 <__aeabi_ui2d>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d1ea:	3d01      	subs	r5, #1
 800d1ec:	930e      	str	r3, [sp, #56]	; 0x38
 800d1ee:	e76a      	b.n	800d0c6 <_dtoa_r+0x116>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e7b2      	b.n	800d15a <_dtoa_r+0x1aa>
 800d1f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d1f6:	e7b1      	b.n	800d15c <_dtoa_r+0x1ac>
 800d1f8:	9b04      	ldr	r3, [sp, #16]
 800d1fa:	9a00      	ldr	r2, [sp, #0]
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	9304      	str	r3, [sp, #16]
 800d200:	4253      	negs	r3, r2
 800d202:	9307      	str	r3, [sp, #28]
 800d204:	2300      	movs	r3, #0
 800d206:	930a      	str	r3, [sp, #40]	; 0x28
 800d208:	e7bf      	b.n	800d18a <_dtoa_r+0x1da>
 800d20a:	2300      	movs	r3, #0
 800d20c:	9308      	str	r3, [sp, #32]
 800d20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d210:	2b00      	cmp	r3, #0
 800d212:	dc55      	bgt.n	800d2c0 <_dtoa_r+0x310>
 800d214:	2301      	movs	r3, #1
 800d216:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d21a:	461a      	mov	r2, r3
 800d21c:	9209      	str	r2, [sp, #36]	; 0x24
 800d21e:	e00c      	b.n	800d23a <_dtoa_r+0x28a>
 800d220:	2301      	movs	r3, #1
 800d222:	e7f3      	b.n	800d20c <_dtoa_r+0x25c>
 800d224:	2300      	movs	r3, #0
 800d226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d228:	9308      	str	r3, [sp, #32]
 800d22a:	9b00      	ldr	r3, [sp, #0]
 800d22c:	4413      	add	r3, r2
 800d22e:	9302      	str	r3, [sp, #8]
 800d230:	3301      	adds	r3, #1
 800d232:	2b01      	cmp	r3, #1
 800d234:	9303      	str	r3, [sp, #12]
 800d236:	bfb8      	it	lt
 800d238:	2301      	movlt	r3, #1
 800d23a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d23c:	2200      	movs	r2, #0
 800d23e:	6042      	str	r2, [r0, #4]
 800d240:	2204      	movs	r2, #4
 800d242:	f102 0614 	add.w	r6, r2, #20
 800d246:	429e      	cmp	r6, r3
 800d248:	6841      	ldr	r1, [r0, #4]
 800d24a:	d93d      	bls.n	800d2c8 <_dtoa_r+0x318>
 800d24c:	4620      	mov	r0, r4
 800d24e:	f000 fd2d 	bl	800dcac <_Balloc>
 800d252:	9001      	str	r0, [sp, #4]
 800d254:	2800      	cmp	r0, #0
 800d256:	d13b      	bne.n	800d2d0 <_dtoa_r+0x320>
 800d258:	4b11      	ldr	r3, [pc, #68]	; (800d2a0 <_dtoa_r+0x2f0>)
 800d25a:	4602      	mov	r2, r0
 800d25c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d260:	e6c0      	b.n	800cfe4 <_dtoa_r+0x34>
 800d262:	2301      	movs	r3, #1
 800d264:	e7df      	b.n	800d226 <_dtoa_r+0x276>
 800d266:	bf00      	nop
 800d268:	636f4361 	.word	0x636f4361
 800d26c:	3fd287a7 	.word	0x3fd287a7
 800d270:	8b60c8b3 	.word	0x8b60c8b3
 800d274:	3fc68a28 	.word	0x3fc68a28
 800d278:	509f79fb 	.word	0x509f79fb
 800d27c:	3fd34413 	.word	0x3fd34413
 800d280:	0801121c 	.word	0x0801121c
 800d284:	080114ac 	.word	0x080114ac
 800d288:	7ff00000 	.word	0x7ff00000
 800d28c:	080114a8 	.word	0x080114a8
 800d290:	0801149f 	.word	0x0801149f
 800d294:	080116ea 	.word	0x080116ea
 800d298:	3ff80000 	.word	0x3ff80000
 800d29c:	08011600 	.word	0x08011600
 800d2a0:	08011507 	.word	0x08011507
 800d2a4:	2501      	movs	r5, #1
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	9306      	str	r3, [sp, #24]
 800d2aa:	9508      	str	r5, [sp, #32]
 800d2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	2312      	movs	r3, #18
 800d2b8:	e7b0      	b.n	800d21c <_dtoa_r+0x26c>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	9308      	str	r3, [sp, #32]
 800d2be:	e7f5      	b.n	800d2ac <_dtoa_r+0x2fc>
 800d2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d2c6:	e7b8      	b.n	800d23a <_dtoa_r+0x28a>
 800d2c8:	3101      	adds	r1, #1
 800d2ca:	6041      	str	r1, [r0, #4]
 800d2cc:	0052      	lsls	r2, r2, #1
 800d2ce:	e7b8      	b.n	800d242 <_dtoa_r+0x292>
 800d2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2d2:	9a01      	ldr	r2, [sp, #4]
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	2b0e      	cmp	r3, #14
 800d2da:	f200 809d 	bhi.w	800d418 <_dtoa_r+0x468>
 800d2de:	2d00      	cmp	r5, #0
 800d2e0:	f000 809a 	beq.w	800d418 <_dtoa_r+0x468>
 800d2e4:	9b00      	ldr	r3, [sp, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	dd32      	ble.n	800d350 <_dtoa_r+0x3a0>
 800d2ea:	4ab7      	ldr	r2, [pc, #732]	; (800d5c8 <_dtoa_r+0x618>)
 800d2ec:	f003 030f 	and.w	r3, r3, #15
 800d2f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2f8:	9b00      	ldr	r3, [sp, #0]
 800d2fa:	05d8      	lsls	r0, r3, #23
 800d2fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d300:	d516      	bpl.n	800d330 <_dtoa_r+0x380>
 800d302:	4bb2      	ldr	r3, [pc, #712]	; (800d5cc <_dtoa_r+0x61c>)
 800d304:	ec51 0b19 	vmov	r0, r1, d9
 800d308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d30c:	f7f3 fab6 	bl	800087c <__aeabi_ddiv>
 800d310:	f007 070f 	and.w	r7, r7, #15
 800d314:	4682      	mov	sl, r0
 800d316:	468b      	mov	fp, r1
 800d318:	2503      	movs	r5, #3
 800d31a:	4eac      	ldr	r6, [pc, #688]	; (800d5cc <_dtoa_r+0x61c>)
 800d31c:	b957      	cbnz	r7, 800d334 <_dtoa_r+0x384>
 800d31e:	4642      	mov	r2, r8
 800d320:	464b      	mov	r3, r9
 800d322:	4650      	mov	r0, sl
 800d324:	4659      	mov	r1, fp
 800d326:	f7f3 faa9 	bl	800087c <__aeabi_ddiv>
 800d32a:	4682      	mov	sl, r0
 800d32c:	468b      	mov	fp, r1
 800d32e:	e028      	b.n	800d382 <_dtoa_r+0x3d2>
 800d330:	2502      	movs	r5, #2
 800d332:	e7f2      	b.n	800d31a <_dtoa_r+0x36a>
 800d334:	07f9      	lsls	r1, r7, #31
 800d336:	d508      	bpl.n	800d34a <_dtoa_r+0x39a>
 800d338:	4640      	mov	r0, r8
 800d33a:	4649      	mov	r1, r9
 800d33c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d340:	f7f3 f972 	bl	8000628 <__aeabi_dmul>
 800d344:	3501      	adds	r5, #1
 800d346:	4680      	mov	r8, r0
 800d348:	4689      	mov	r9, r1
 800d34a:	107f      	asrs	r7, r7, #1
 800d34c:	3608      	adds	r6, #8
 800d34e:	e7e5      	b.n	800d31c <_dtoa_r+0x36c>
 800d350:	f000 809b 	beq.w	800d48a <_dtoa_r+0x4da>
 800d354:	9b00      	ldr	r3, [sp, #0]
 800d356:	4f9d      	ldr	r7, [pc, #628]	; (800d5cc <_dtoa_r+0x61c>)
 800d358:	425e      	negs	r6, r3
 800d35a:	4b9b      	ldr	r3, [pc, #620]	; (800d5c8 <_dtoa_r+0x618>)
 800d35c:	f006 020f 	and.w	r2, r6, #15
 800d360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	ec51 0b19 	vmov	r0, r1, d9
 800d36c:	f7f3 f95c 	bl	8000628 <__aeabi_dmul>
 800d370:	1136      	asrs	r6, r6, #4
 800d372:	4682      	mov	sl, r0
 800d374:	468b      	mov	fp, r1
 800d376:	2300      	movs	r3, #0
 800d378:	2502      	movs	r5, #2
 800d37a:	2e00      	cmp	r6, #0
 800d37c:	d17a      	bne.n	800d474 <_dtoa_r+0x4c4>
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1d3      	bne.n	800d32a <_dtoa_r+0x37a>
 800d382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 8082 	beq.w	800d48e <_dtoa_r+0x4de>
 800d38a:	4b91      	ldr	r3, [pc, #580]	; (800d5d0 <_dtoa_r+0x620>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	4650      	mov	r0, sl
 800d390:	4659      	mov	r1, fp
 800d392:	f7f3 fbbb 	bl	8000b0c <__aeabi_dcmplt>
 800d396:	2800      	cmp	r0, #0
 800d398:	d079      	beq.n	800d48e <_dtoa_r+0x4de>
 800d39a:	9b03      	ldr	r3, [sp, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d076      	beq.n	800d48e <_dtoa_r+0x4de>
 800d3a0:	9b02      	ldr	r3, [sp, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	dd36      	ble.n	800d414 <_dtoa_r+0x464>
 800d3a6:	9b00      	ldr	r3, [sp, #0]
 800d3a8:	4650      	mov	r0, sl
 800d3aa:	4659      	mov	r1, fp
 800d3ac:	1e5f      	subs	r7, r3, #1
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	4b88      	ldr	r3, [pc, #544]	; (800d5d4 <_dtoa_r+0x624>)
 800d3b2:	f7f3 f939 	bl	8000628 <__aeabi_dmul>
 800d3b6:	9e02      	ldr	r6, [sp, #8]
 800d3b8:	4682      	mov	sl, r0
 800d3ba:	468b      	mov	fp, r1
 800d3bc:	3501      	adds	r5, #1
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f7f3 f8c8 	bl	8000554 <__aeabi_i2d>
 800d3c4:	4652      	mov	r2, sl
 800d3c6:	465b      	mov	r3, fp
 800d3c8:	f7f3 f92e 	bl	8000628 <__aeabi_dmul>
 800d3cc:	4b82      	ldr	r3, [pc, #520]	; (800d5d8 <_dtoa_r+0x628>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f7f2 ff74 	bl	80002bc <__adddf3>
 800d3d4:	46d0      	mov	r8, sl
 800d3d6:	46d9      	mov	r9, fp
 800d3d8:	4682      	mov	sl, r0
 800d3da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d3de:	2e00      	cmp	r6, #0
 800d3e0:	d158      	bne.n	800d494 <_dtoa_r+0x4e4>
 800d3e2:	4b7e      	ldr	r3, [pc, #504]	; (800d5dc <_dtoa_r+0x62c>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	f7f2 ff65 	bl	80002b8 <__aeabi_dsub>
 800d3ee:	4652      	mov	r2, sl
 800d3f0:	465b      	mov	r3, fp
 800d3f2:	4680      	mov	r8, r0
 800d3f4:	4689      	mov	r9, r1
 800d3f6:	f7f3 fba7 	bl	8000b48 <__aeabi_dcmpgt>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	f040 8295 	bne.w	800d92a <_dtoa_r+0x97a>
 800d400:	4652      	mov	r2, sl
 800d402:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d406:	4640      	mov	r0, r8
 800d408:	4649      	mov	r1, r9
 800d40a:	f7f3 fb7f 	bl	8000b0c <__aeabi_dcmplt>
 800d40e:	2800      	cmp	r0, #0
 800d410:	f040 8289 	bne.w	800d926 <_dtoa_r+0x976>
 800d414:	ec5b ab19 	vmov	sl, fp, d9
 800d418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f2c0 8148 	blt.w	800d6b0 <_dtoa_r+0x700>
 800d420:	9a00      	ldr	r2, [sp, #0]
 800d422:	2a0e      	cmp	r2, #14
 800d424:	f300 8144 	bgt.w	800d6b0 <_dtoa_r+0x700>
 800d428:	4b67      	ldr	r3, [pc, #412]	; (800d5c8 <_dtoa_r+0x618>)
 800d42a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d42e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d434:	2b00      	cmp	r3, #0
 800d436:	f280 80d5 	bge.w	800d5e4 <_dtoa_r+0x634>
 800d43a:	9b03      	ldr	r3, [sp, #12]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f300 80d1 	bgt.w	800d5e4 <_dtoa_r+0x634>
 800d442:	f040 826f 	bne.w	800d924 <_dtoa_r+0x974>
 800d446:	4b65      	ldr	r3, [pc, #404]	; (800d5dc <_dtoa_r+0x62c>)
 800d448:	2200      	movs	r2, #0
 800d44a:	4640      	mov	r0, r8
 800d44c:	4649      	mov	r1, r9
 800d44e:	f7f3 f8eb 	bl	8000628 <__aeabi_dmul>
 800d452:	4652      	mov	r2, sl
 800d454:	465b      	mov	r3, fp
 800d456:	f7f3 fb6d 	bl	8000b34 <__aeabi_dcmpge>
 800d45a:	9e03      	ldr	r6, [sp, #12]
 800d45c:	4637      	mov	r7, r6
 800d45e:	2800      	cmp	r0, #0
 800d460:	f040 8245 	bne.w	800d8ee <_dtoa_r+0x93e>
 800d464:	9d01      	ldr	r5, [sp, #4]
 800d466:	2331      	movs	r3, #49	; 0x31
 800d468:	f805 3b01 	strb.w	r3, [r5], #1
 800d46c:	9b00      	ldr	r3, [sp, #0]
 800d46e:	3301      	adds	r3, #1
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	e240      	b.n	800d8f6 <_dtoa_r+0x946>
 800d474:	07f2      	lsls	r2, r6, #31
 800d476:	d505      	bpl.n	800d484 <_dtoa_r+0x4d4>
 800d478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d47c:	f7f3 f8d4 	bl	8000628 <__aeabi_dmul>
 800d480:	3501      	adds	r5, #1
 800d482:	2301      	movs	r3, #1
 800d484:	1076      	asrs	r6, r6, #1
 800d486:	3708      	adds	r7, #8
 800d488:	e777      	b.n	800d37a <_dtoa_r+0x3ca>
 800d48a:	2502      	movs	r5, #2
 800d48c:	e779      	b.n	800d382 <_dtoa_r+0x3d2>
 800d48e:	9f00      	ldr	r7, [sp, #0]
 800d490:	9e03      	ldr	r6, [sp, #12]
 800d492:	e794      	b.n	800d3be <_dtoa_r+0x40e>
 800d494:	9901      	ldr	r1, [sp, #4]
 800d496:	4b4c      	ldr	r3, [pc, #304]	; (800d5c8 <_dtoa_r+0x618>)
 800d498:	4431      	add	r1, r6
 800d49a:	910d      	str	r1, [sp, #52]	; 0x34
 800d49c:	9908      	ldr	r1, [sp, #32]
 800d49e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d4a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d4a6:	2900      	cmp	r1, #0
 800d4a8:	d043      	beq.n	800d532 <_dtoa_r+0x582>
 800d4aa:	494d      	ldr	r1, [pc, #308]	; (800d5e0 <_dtoa_r+0x630>)
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	f7f3 f9e5 	bl	800087c <__aeabi_ddiv>
 800d4b2:	4652      	mov	r2, sl
 800d4b4:	465b      	mov	r3, fp
 800d4b6:	f7f2 feff 	bl	80002b8 <__aeabi_dsub>
 800d4ba:	9d01      	ldr	r5, [sp, #4]
 800d4bc:	4682      	mov	sl, r0
 800d4be:	468b      	mov	fp, r1
 800d4c0:	4649      	mov	r1, r9
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	f7f3 fb60 	bl	8000b88 <__aeabi_d2iz>
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	f7f3 f843 	bl	8000554 <__aeabi_i2d>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4640      	mov	r0, r8
 800d4d4:	4649      	mov	r1, r9
 800d4d6:	f7f2 feef 	bl	80002b8 <__aeabi_dsub>
 800d4da:	3630      	adds	r6, #48	; 0x30
 800d4dc:	f805 6b01 	strb.w	r6, [r5], #1
 800d4e0:	4652      	mov	r2, sl
 800d4e2:	465b      	mov	r3, fp
 800d4e4:	4680      	mov	r8, r0
 800d4e6:	4689      	mov	r9, r1
 800d4e8:	f7f3 fb10 	bl	8000b0c <__aeabi_dcmplt>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d163      	bne.n	800d5b8 <_dtoa_r+0x608>
 800d4f0:	4642      	mov	r2, r8
 800d4f2:	464b      	mov	r3, r9
 800d4f4:	4936      	ldr	r1, [pc, #216]	; (800d5d0 <_dtoa_r+0x620>)
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	f7f2 fede 	bl	80002b8 <__aeabi_dsub>
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	465b      	mov	r3, fp
 800d500:	f7f3 fb04 	bl	8000b0c <__aeabi_dcmplt>
 800d504:	2800      	cmp	r0, #0
 800d506:	f040 80b5 	bne.w	800d674 <_dtoa_r+0x6c4>
 800d50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d50c:	429d      	cmp	r5, r3
 800d50e:	d081      	beq.n	800d414 <_dtoa_r+0x464>
 800d510:	4b30      	ldr	r3, [pc, #192]	; (800d5d4 <_dtoa_r+0x624>)
 800d512:	2200      	movs	r2, #0
 800d514:	4650      	mov	r0, sl
 800d516:	4659      	mov	r1, fp
 800d518:	f7f3 f886 	bl	8000628 <__aeabi_dmul>
 800d51c:	4b2d      	ldr	r3, [pc, #180]	; (800d5d4 <_dtoa_r+0x624>)
 800d51e:	4682      	mov	sl, r0
 800d520:	468b      	mov	fp, r1
 800d522:	4640      	mov	r0, r8
 800d524:	4649      	mov	r1, r9
 800d526:	2200      	movs	r2, #0
 800d528:	f7f3 f87e 	bl	8000628 <__aeabi_dmul>
 800d52c:	4680      	mov	r8, r0
 800d52e:	4689      	mov	r9, r1
 800d530:	e7c6      	b.n	800d4c0 <_dtoa_r+0x510>
 800d532:	4650      	mov	r0, sl
 800d534:	4659      	mov	r1, fp
 800d536:	f7f3 f877 	bl	8000628 <__aeabi_dmul>
 800d53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d53c:	9d01      	ldr	r5, [sp, #4]
 800d53e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d540:	4682      	mov	sl, r0
 800d542:	468b      	mov	fp, r1
 800d544:	4649      	mov	r1, r9
 800d546:	4640      	mov	r0, r8
 800d548:	f7f3 fb1e 	bl	8000b88 <__aeabi_d2iz>
 800d54c:	4606      	mov	r6, r0
 800d54e:	f7f3 f801 	bl	8000554 <__aeabi_i2d>
 800d552:	3630      	adds	r6, #48	; 0x30
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	4640      	mov	r0, r8
 800d55a:	4649      	mov	r1, r9
 800d55c:	f7f2 feac 	bl	80002b8 <__aeabi_dsub>
 800d560:	f805 6b01 	strb.w	r6, [r5], #1
 800d564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d566:	429d      	cmp	r5, r3
 800d568:	4680      	mov	r8, r0
 800d56a:	4689      	mov	r9, r1
 800d56c:	f04f 0200 	mov.w	r2, #0
 800d570:	d124      	bne.n	800d5bc <_dtoa_r+0x60c>
 800d572:	4b1b      	ldr	r3, [pc, #108]	; (800d5e0 <_dtoa_r+0x630>)
 800d574:	4650      	mov	r0, sl
 800d576:	4659      	mov	r1, fp
 800d578:	f7f2 fea0 	bl	80002bc <__adddf3>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	4640      	mov	r0, r8
 800d582:	4649      	mov	r1, r9
 800d584:	f7f3 fae0 	bl	8000b48 <__aeabi_dcmpgt>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d173      	bne.n	800d674 <_dtoa_r+0x6c4>
 800d58c:	4652      	mov	r2, sl
 800d58e:	465b      	mov	r3, fp
 800d590:	4913      	ldr	r1, [pc, #76]	; (800d5e0 <_dtoa_r+0x630>)
 800d592:	2000      	movs	r0, #0
 800d594:	f7f2 fe90 	bl	80002b8 <__aeabi_dsub>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	4640      	mov	r0, r8
 800d59e:	4649      	mov	r1, r9
 800d5a0:	f7f3 fab4 	bl	8000b0c <__aeabi_dcmplt>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	f43f af35 	beq.w	800d414 <_dtoa_r+0x464>
 800d5aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d5ac:	1e6b      	subs	r3, r5, #1
 800d5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5b4:	2b30      	cmp	r3, #48	; 0x30
 800d5b6:	d0f8      	beq.n	800d5aa <_dtoa_r+0x5fa>
 800d5b8:	9700      	str	r7, [sp, #0]
 800d5ba:	e049      	b.n	800d650 <_dtoa_r+0x6a0>
 800d5bc:	4b05      	ldr	r3, [pc, #20]	; (800d5d4 <_dtoa_r+0x624>)
 800d5be:	f7f3 f833 	bl	8000628 <__aeabi_dmul>
 800d5c2:	4680      	mov	r8, r0
 800d5c4:	4689      	mov	r9, r1
 800d5c6:	e7bd      	b.n	800d544 <_dtoa_r+0x594>
 800d5c8:	08011600 	.word	0x08011600
 800d5cc:	080115d8 	.word	0x080115d8
 800d5d0:	3ff00000 	.word	0x3ff00000
 800d5d4:	40240000 	.word	0x40240000
 800d5d8:	401c0000 	.word	0x401c0000
 800d5dc:	40140000 	.word	0x40140000
 800d5e0:	3fe00000 	.word	0x3fe00000
 800d5e4:	9d01      	ldr	r5, [sp, #4]
 800d5e6:	4656      	mov	r6, sl
 800d5e8:	465f      	mov	r7, fp
 800d5ea:	4642      	mov	r2, r8
 800d5ec:	464b      	mov	r3, r9
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	f7f3 f943 	bl	800087c <__aeabi_ddiv>
 800d5f6:	f7f3 fac7 	bl	8000b88 <__aeabi_d2iz>
 800d5fa:	4682      	mov	sl, r0
 800d5fc:	f7f2 ffaa 	bl	8000554 <__aeabi_i2d>
 800d600:	4642      	mov	r2, r8
 800d602:	464b      	mov	r3, r9
 800d604:	f7f3 f810 	bl	8000628 <__aeabi_dmul>
 800d608:	4602      	mov	r2, r0
 800d60a:	460b      	mov	r3, r1
 800d60c:	4630      	mov	r0, r6
 800d60e:	4639      	mov	r1, r7
 800d610:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d614:	f7f2 fe50 	bl	80002b8 <__aeabi_dsub>
 800d618:	f805 6b01 	strb.w	r6, [r5], #1
 800d61c:	9e01      	ldr	r6, [sp, #4]
 800d61e:	9f03      	ldr	r7, [sp, #12]
 800d620:	1bae      	subs	r6, r5, r6
 800d622:	42b7      	cmp	r7, r6
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	d135      	bne.n	800d696 <_dtoa_r+0x6e6>
 800d62a:	f7f2 fe47 	bl	80002bc <__adddf3>
 800d62e:	4642      	mov	r2, r8
 800d630:	464b      	mov	r3, r9
 800d632:	4606      	mov	r6, r0
 800d634:	460f      	mov	r7, r1
 800d636:	f7f3 fa87 	bl	8000b48 <__aeabi_dcmpgt>
 800d63a:	b9d0      	cbnz	r0, 800d672 <_dtoa_r+0x6c2>
 800d63c:	4642      	mov	r2, r8
 800d63e:	464b      	mov	r3, r9
 800d640:	4630      	mov	r0, r6
 800d642:	4639      	mov	r1, r7
 800d644:	f7f3 fa58 	bl	8000af8 <__aeabi_dcmpeq>
 800d648:	b110      	cbz	r0, 800d650 <_dtoa_r+0x6a0>
 800d64a:	f01a 0f01 	tst.w	sl, #1
 800d64e:	d110      	bne.n	800d672 <_dtoa_r+0x6c2>
 800d650:	4620      	mov	r0, r4
 800d652:	ee18 1a10 	vmov	r1, s16
 800d656:	f000 fb69 	bl	800dd2c <_Bfree>
 800d65a:	2300      	movs	r3, #0
 800d65c:	9800      	ldr	r0, [sp, #0]
 800d65e:	702b      	strb	r3, [r5, #0]
 800d660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d662:	3001      	adds	r0, #1
 800d664:	6018      	str	r0, [r3, #0]
 800d666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f43f acf1 	beq.w	800d050 <_dtoa_r+0xa0>
 800d66e:	601d      	str	r5, [r3, #0]
 800d670:	e4ee      	b.n	800d050 <_dtoa_r+0xa0>
 800d672:	9f00      	ldr	r7, [sp, #0]
 800d674:	462b      	mov	r3, r5
 800d676:	461d      	mov	r5, r3
 800d678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d67c:	2a39      	cmp	r2, #57	; 0x39
 800d67e:	d106      	bne.n	800d68e <_dtoa_r+0x6de>
 800d680:	9a01      	ldr	r2, [sp, #4]
 800d682:	429a      	cmp	r2, r3
 800d684:	d1f7      	bne.n	800d676 <_dtoa_r+0x6c6>
 800d686:	9901      	ldr	r1, [sp, #4]
 800d688:	2230      	movs	r2, #48	; 0x30
 800d68a:	3701      	adds	r7, #1
 800d68c:	700a      	strb	r2, [r1, #0]
 800d68e:	781a      	ldrb	r2, [r3, #0]
 800d690:	3201      	adds	r2, #1
 800d692:	701a      	strb	r2, [r3, #0]
 800d694:	e790      	b.n	800d5b8 <_dtoa_r+0x608>
 800d696:	4ba6      	ldr	r3, [pc, #664]	; (800d930 <_dtoa_r+0x980>)
 800d698:	2200      	movs	r2, #0
 800d69a:	f7f2 ffc5 	bl	8000628 <__aeabi_dmul>
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	460f      	mov	r7, r1
 800d6a6:	f7f3 fa27 	bl	8000af8 <__aeabi_dcmpeq>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d09d      	beq.n	800d5ea <_dtoa_r+0x63a>
 800d6ae:	e7cf      	b.n	800d650 <_dtoa_r+0x6a0>
 800d6b0:	9a08      	ldr	r2, [sp, #32]
 800d6b2:	2a00      	cmp	r2, #0
 800d6b4:	f000 80d7 	beq.w	800d866 <_dtoa_r+0x8b6>
 800d6b8:	9a06      	ldr	r2, [sp, #24]
 800d6ba:	2a01      	cmp	r2, #1
 800d6bc:	f300 80ba 	bgt.w	800d834 <_dtoa_r+0x884>
 800d6c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6c2:	2a00      	cmp	r2, #0
 800d6c4:	f000 80b2 	beq.w	800d82c <_dtoa_r+0x87c>
 800d6c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d6cc:	9e07      	ldr	r6, [sp, #28]
 800d6ce:	9d04      	ldr	r5, [sp, #16]
 800d6d0:	9a04      	ldr	r2, [sp, #16]
 800d6d2:	441a      	add	r2, r3
 800d6d4:	9204      	str	r2, [sp, #16]
 800d6d6:	9a05      	ldr	r2, [sp, #20]
 800d6d8:	2101      	movs	r1, #1
 800d6da:	441a      	add	r2, r3
 800d6dc:	4620      	mov	r0, r4
 800d6de:	9205      	str	r2, [sp, #20]
 800d6e0:	f000 fbdc 	bl	800de9c <__i2b>
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	2d00      	cmp	r5, #0
 800d6e8:	dd0c      	ble.n	800d704 <_dtoa_r+0x754>
 800d6ea:	9b05      	ldr	r3, [sp, #20]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	dd09      	ble.n	800d704 <_dtoa_r+0x754>
 800d6f0:	42ab      	cmp	r3, r5
 800d6f2:	9a04      	ldr	r2, [sp, #16]
 800d6f4:	bfa8      	it	ge
 800d6f6:	462b      	movge	r3, r5
 800d6f8:	1ad2      	subs	r2, r2, r3
 800d6fa:	9204      	str	r2, [sp, #16]
 800d6fc:	9a05      	ldr	r2, [sp, #20]
 800d6fe:	1aed      	subs	r5, r5, r3
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	9305      	str	r3, [sp, #20]
 800d704:	9b07      	ldr	r3, [sp, #28]
 800d706:	b31b      	cbz	r3, 800d750 <_dtoa_r+0x7a0>
 800d708:	9b08      	ldr	r3, [sp, #32]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f000 80af 	beq.w	800d86e <_dtoa_r+0x8be>
 800d710:	2e00      	cmp	r6, #0
 800d712:	dd13      	ble.n	800d73c <_dtoa_r+0x78c>
 800d714:	4639      	mov	r1, r7
 800d716:	4632      	mov	r2, r6
 800d718:	4620      	mov	r0, r4
 800d71a:	f000 fc7f 	bl	800e01c <__pow5mult>
 800d71e:	ee18 2a10 	vmov	r2, s16
 800d722:	4601      	mov	r1, r0
 800d724:	4607      	mov	r7, r0
 800d726:	4620      	mov	r0, r4
 800d728:	f000 fbce 	bl	800dec8 <__multiply>
 800d72c:	ee18 1a10 	vmov	r1, s16
 800d730:	4680      	mov	r8, r0
 800d732:	4620      	mov	r0, r4
 800d734:	f000 fafa 	bl	800dd2c <_Bfree>
 800d738:	ee08 8a10 	vmov	s16, r8
 800d73c:	9b07      	ldr	r3, [sp, #28]
 800d73e:	1b9a      	subs	r2, r3, r6
 800d740:	d006      	beq.n	800d750 <_dtoa_r+0x7a0>
 800d742:	ee18 1a10 	vmov	r1, s16
 800d746:	4620      	mov	r0, r4
 800d748:	f000 fc68 	bl	800e01c <__pow5mult>
 800d74c:	ee08 0a10 	vmov	s16, r0
 800d750:	2101      	movs	r1, #1
 800d752:	4620      	mov	r0, r4
 800d754:	f000 fba2 	bl	800de9c <__i2b>
 800d758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	4606      	mov	r6, r0
 800d75e:	f340 8088 	ble.w	800d872 <_dtoa_r+0x8c2>
 800d762:	461a      	mov	r2, r3
 800d764:	4601      	mov	r1, r0
 800d766:	4620      	mov	r0, r4
 800d768:	f000 fc58 	bl	800e01c <__pow5mult>
 800d76c:	9b06      	ldr	r3, [sp, #24]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	4606      	mov	r6, r0
 800d772:	f340 8081 	ble.w	800d878 <_dtoa_r+0x8c8>
 800d776:	f04f 0800 	mov.w	r8, #0
 800d77a:	6933      	ldr	r3, [r6, #16]
 800d77c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d780:	6918      	ldr	r0, [r3, #16]
 800d782:	f000 fb3b 	bl	800ddfc <__hi0bits>
 800d786:	f1c0 0020 	rsb	r0, r0, #32
 800d78a:	9b05      	ldr	r3, [sp, #20]
 800d78c:	4418      	add	r0, r3
 800d78e:	f010 001f 	ands.w	r0, r0, #31
 800d792:	f000 8092 	beq.w	800d8ba <_dtoa_r+0x90a>
 800d796:	f1c0 0320 	rsb	r3, r0, #32
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	f340 808a 	ble.w	800d8b4 <_dtoa_r+0x904>
 800d7a0:	f1c0 001c 	rsb	r0, r0, #28
 800d7a4:	9b04      	ldr	r3, [sp, #16]
 800d7a6:	4403      	add	r3, r0
 800d7a8:	9304      	str	r3, [sp, #16]
 800d7aa:	9b05      	ldr	r3, [sp, #20]
 800d7ac:	4403      	add	r3, r0
 800d7ae:	4405      	add	r5, r0
 800d7b0:	9305      	str	r3, [sp, #20]
 800d7b2:	9b04      	ldr	r3, [sp, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dd07      	ble.n	800d7c8 <_dtoa_r+0x818>
 800d7b8:	ee18 1a10 	vmov	r1, s16
 800d7bc:	461a      	mov	r2, r3
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f000 fc86 	bl	800e0d0 <__lshift>
 800d7c4:	ee08 0a10 	vmov	s16, r0
 800d7c8:	9b05      	ldr	r3, [sp, #20]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	dd05      	ble.n	800d7da <_dtoa_r+0x82a>
 800d7ce:	4631      	mov	r1, r6
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f000 fc7c 	bl	800e0d0 <__lshift>
 800d7d8:	4606      	mov	r6, r0
 800d7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d06e      	beq.n	800d8be <_dtoa_r+0x90e>
 800d7e0:	ee18 0a10 	vmov	r0, s16
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	f000 fce3 	bl	800e1b0 <__mcmp>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	da67      	bge.n	800d8be <_dtoa_r+0x90e>
 800d7ee:	9b00      	ldr	r3, [sp, #0]
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	ee18 1a10 	vmov	r1, s16
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	220a      	movs	r2, #10
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f000 fab7 	bl	800dd70 <__multadd>
 800d802:	9b08      	ldr	r3, [sp, #32]
 800d804:	ee08 0a10 	vmov	s16, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 81b1 	beq.w	800db70 <_dtoa_r+0xbc0>
 800d80e:	2300      	movs	r3, #0
 800d810:	4639      	mov	r1, r7
 800d812:	220a      	movs	r2, #10
 800d814:	4620      	mov	r0, r4
 800d816:	f000 faab 	bl	800dd70 <__multadd>
 800d81a:	9b02      	ldr	r3, [sp, #8]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	4607      	mov	r7, r0
 800d820:	f300 808e 	bgt.w	800d940 <_dtoa_r+0x990>
 800d824:	9b06      	ldr	r3, [sp, #24]
 800d826:	2b02      	cmp	r3, #2
 800d828:	dc51      	bgt.n	800d8ce <_dtoa_r+0x91e>
 800d82a:	e089      	b.n	800d940 <_dtoa_r+0x990>
 800d82c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d82e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d832:	e74b      	b.n	800d6cc <_dtoa_r+0x71c>
 800d834:	9b03      	ldr	r3, [sp, #12]
 800d836:	1e5e      	subs	r6, r3, #1
 800d838:	9b07      	ldr	r3, [sp, #28]
 800d83a:	42b3      	cmp	r3, r6
 800d83c:	bfbf      	itttt	lt
 800d83e:	9b07      	ldrlt	r3, [sp, #28]
 800d840:	9607      	strlt	r6, [sp, #28]
 800d842:	1af2      	sublt	r2, r6, r3
 800d844:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d846:	bfb6      	itet	lt
 800d848:	189b      	addlt	r3, r3, r2
 800d84a:	1b9e      	subge	r6, r3, r6
 800d84c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	bfb8      	it	lt
 800d852:	2600      	movlt	r6, #0
 800d854:	2b00      	cmp	r3, #0
 800d856:	bfb7      	itett	lt
 800d858:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d85c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d860:	1a9d      	sublt	r5, r3, r2
 800d862:	2300      	movlt	r3, #0
 800d864:	e734      	b.n	800d6d0 <_dtoa_r+0x720>
 800d866:	9e07      	ldr	r6, [sp, #28]
 800d868:	9d04      	ldr	r5, [sp, #16]
 800d86a:	9f08      	ldr	r7, [sp, #32]
 800d86c:	e73b      	b.n	800d6e6 <_dtoa_r+0x736>
 800d86e:	9a07      	ldr	r2, [sp, #28]
 800d870:	e767      	b.n	800d742 <_dtoa_r+0x792>
 800d872:	9b06      	ldr	r3, [sp, #24]
 800d874:	2b01      	cmp	r3, #1
 800d876:	dc18      	bgt.n	800d8aa <_dtoa_r+0x8fa>
 800d878:	f1ba 0f00 	cmp.w	sl, #0
 800d87c:	d115      	bne.n	800d8aa <_dtoa_r+0x8fa>
 800d87e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d882:	b993      	cbnz	r3, 800d8aa <_dtoa_r+0x8fa>
 800d884:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d888:	0d1b      	lsrs	r3, r3, #20
 800d88a:	051b      	lsls	r3, r3, #20
 800d88c:	b183      	cbz	r3, 800d8b0 <_dtoa_r+0x900>
 800d88e:	9b04      	ldr	r3, [sp, #16]
 800d890:	3301      	adds	r3, #1
 800d892:	9304      	str	r3, [sp, #16]
 800d894:	9b05      	ldr	r3, [sp, #20]
 800d896:	3301      	adds	r3, #1
 800d898:	9305      	str	r3, [sp, #20]
 800d89a:	f04f 0801 	mov.w	r8, #1
 800d89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f47f af6a 	bne.w	800d77a <_dtoa_r+0x7ca>
 800d8a6:	2001      	movs	r0, #1
 800d8a8:	e76f      	b.n	800d78a <_dtoa_r+0x7da>
 800d8aa:	f04f 0800 	mov.w	r8, #0
 800d8ae:	e7f6      	b.n	800d89e <_dtoa_r+0x8ee>
 800d8b0:	4698      	mov	r8, r3
 800d8b2:	e7f4      	b.n	800d89e <_dtoa_r+0x8ee>
 800d8b4:	f43f af7d 	beq.w	800d7b2 <_dtoa_r+0x802>
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	301c      	adds	r0, #28
 800d8bc:	e772      	b.n	800d7a4 <_dtoa_r+0x7f4>
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	dc37      	bgt.n	800d934 <_dtoa_r+0x984>
 800d8c4:	9b06      	ldr	r3, [sp, #24]
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	dd34      	ble.n	800d934 <_dtoa_r+0x984>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	9b02      	ldr	r3, [sp, #8]
 800d8d0:	b96b      	cbnz	r3, 800d8ee <_dtoa_r+0x93e>
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	2205      	movs	r2, #5
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f000 fa4a 	bl	800dd70 <__multadd>
 800d8dc:	4601      	mov	r1, r0
 800d8de:	4606      	mov	r6, r0
 800d8e0:	ee18 0a10 	vmov	r0, s16
 800d8e4:	f000 fc64 	bl	800e1b0 <__mcmp>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f73f adbb 	bgt.w	800d464 <_dtoa_r+0x4b4>
 800d8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f0:	9d01      	ldr	r5, [sp, #4]
 800d8f2:	43db      	mvns	r3, r3
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	f04f 0800 	mov.w	r8, #0
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f000 fa15 	bl	800dd2c <_Bfree>
 800d902:	2f00      	cmp	r7, #0
 800d904:	f43f aea4 	beq.w	800d650 <_dtoa_r+0x6a0>
 800d908:	f1b8 0f00 	cmp.w	r8, #0
 800d90c:	d005      	beq.n	800d91a <_dtoa_r+0x96a>
 800d90e:	45b8      	cmp	r8, r7
 800d910:	d003      	beq.n	800d91a <_dtoa_r+0x96a>
 800d912:	4641      	mov	r1, r8
 800d914:	4620      	mov	r0, r4
 800d916:	f000 fa09 	bl	800dd2c <_Bfree>
 800d91a:	4639      	mov	r1, r7
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 fa05 	bl	800dd2c <_Bfree>
 800d922:	e695      	b.n	800d650 <_dtoa_r+0x6a0>
 800d924:	2600      	movs	r6, #0
 800d926:	4637      	mov	r7, r6
 800d928:	e7e1      	b.n	800d8ee <_dtoa_r+0x93e>
 800d92a:	9700      	str	r7, [sp, #0]
 800d92c:	4637      	mov	r7, r6
 800d92e:	e599      	b.n	800d464 <_dtoa_r+0x4b4>
 800d930:	40240000 	.word	0x40240000
 800d934:	9b08      	ldr	r3, [sp, #32]
 800d936:	2b00      	cmp	r3, #0
 800d938:	f000 80ca 	beq.w	800dad0 <_dtoa_r+0xb20>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	9302      	str	r3, [sp, #8]
 800d940:	2d00      	cmp	r5, #0
 800d942:	dd05      	ble.n	800d950 <_dtoa_r+0x9a0>
 800d944:	4639      	mov	r1, r7
 800d946:	462a      	mov	r2, r5
 800d948:	4620      	mov	r0, r4
 800d94a:	f000 fbc1 	bl	800e0d0 <__lshift>
 800d94e:	4607      	mov	r7, r0
 800d950:	f1b8 0f00 	cmp.w	r8, #0
 800d954:	d05b      	beq.n	800da0e <_dtoa_r+0xa5e>
 800d956:	6879      	ldr	r1, [r7, #4]
 800d958:	4620      	mov	r0, r4
 800d95a:	f000 f9a7 	bl	800dcac <_Balloc>
 800d95e:	4605      	mov	r5, r0
 800d960:	b928      	cbnz	r0, 800d96e <_dtoa_r+0x9be>
 800d962:	4b87      	ldr	r3, [pc, #540]	; (800db80 <_dtoa_r+0xbd0>)
 800d964:	4602      	mov	r2, r0
 800d966:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d96a:	f7ff bb3b 	b.w	800cfe4 <_dtoa_r+0x34>
 800d96e:	693a      	ldr	r2, [r7, #16]
 800d970:	3202      	adds	r2, #2
 800d972:	0092      	lsls	r2, r2, #2
 800d974:	f107 010c 	add.w	r1, r7, #12
 800d978:	300c      	adds	r0, #12
 800d97a:	f000 f97d 	bl	800dc78 <memcpy>
 800d97e:	2201      	movs	r2, #1
 800d980:	4629      	mov	r1, r5
 800d982:	4620      	mov	r0, r4
 800d984:	f000 fba4 	bl	800e0d0 <__lshift>
 800d988:	9b01      	ldr	r3, [sp, #4]
 800d98a:	f103 0901 	add.w	r9, r3, #1
 800d98e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d992:	4413      	add	r3, r2
 800d994:	9305      	str	r3, [sp, #20]
 800d996:	f00a 0301 	and.w	r3, sl, #1
 800d99a:	46b8      	mov	r8, r7
 800d99c:	9304      	str	r3, [sp, #16]
 800d99e:	4607      	mov	r7, r0
 800d9a0:	4631      	mov	r1, r6
 800d9a2:	ee18 0a10 	vmov	r0, s16
 800d9a6:	f7ff fa77 	bl	800ce98 <quorem>
 800d9aa:	4641      	mov	r1, r8
 800d9ac:	9002      	str	r0, [sp, #8]
 800d9ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d9b2:	ee18 0a10 	vmov	r0, s16
 800d9b6:	f000 fbfb 	bl	800e1b0 <__mcmp>
 800d9ba:	463a      	mov	r2, r7
 800d9bc:	9003      	str	r0, [sp, #12]
 800d9be:	4631      	mov	r1, r6
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f000 fc11 	bl	800e1e8 <__mdiff>
 800d9c6:	68c2      	ldr	r2, [r0, #12]
 800d9c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	bb02      	cbnz	r2, 800da12 <_dtoa_r+0xa62>
 800d9d0:	4601      	mov	r1, r0
 800d9d2:	ee18 0a10 	vmov	r0, s16
 800d9d6:	f000 fbeb 	bl	800e1b0 <__mcmp>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	4629      	mov	r1, r5
 800d9de:	4620      	mov	r0, r4
 800d9e0:	9207      	str	r2, [sp, #28]
 800d9e2:	f000 f9a3 	bl	800dd2c <_Bfree>
 800d9e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d9ea:	ea43 0102 	orr.w	r1, r3, r2
 800d9ee:	9b04      	ldr	r3, [sp, #16]
 800d9f0:	430b      	orrs	r3, r1
 800d9f2:	464d      	mov	r5, r9
 800d9f4:	d10f      	bne.n	800da16 <_dtoa_r+0xa66>
 800d9f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9fa:	d02a      	beq.n	800da52 <_dtoa_r+0xaa2>
 800d9fc:	9b03      	ldr	r3, [sp, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	dd02      	ble.n	800da08 <_dtoa_r+0xa58>
 800da02:	9b02      	ldr	r3, [sp, #8]
 800da04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800da08:	f88b a000 	strb.w	sl, [fp]
 800da0c:	e775      	b.n	800d8fa <_dtoa_r+0x94a>
 800da0e:	4638      	mov	r0, r7
 800da10:	e7ba      	b.n	800d988 <_dtoa_r+0x9d8>
 800da12:	2201      	movs	r2, #1
 800da14:	e7e2      	b.n	800d9dc <_dtoa_r+0xa2c>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	db04      	blt.n	800da26 <_dtoa_r+0xa76>
 800da1c:	9906      	ldr	r1, [sp, #24]
 800da1e:	430b      	orrs	r3, r1
 800da20:	9904      	ldr	r1, [sp, #16]
 800da22:	430b      	orrs	r3, r1
 800da24:	d122      	bne.n	800da6c <_dtoa_r+0xabc>
 800da26:	2a00      	cmp	r2, #0
 800da28:	ddee      	ble.n	800da08 <_dtoa_r+0xa58>
 800da2a:	ee18 1a10 	vmov	r1, s16
 800da2e:	2201      	movs	r2, #1
 800da30:	4620      	mov	r0, r4
 800da32:	f000 fb4d 	bl	800e0d0 <__lshift>
 800da36:	4631      	mov	r1, r6
 800da38:	ee08 0a10 	vmov	s16, r0
 800da3c:	f000 fbb8 	bl	800e1b0 <__mcmp>
 800da40:	2800      	cmp	r0, #0
 800da42:	dc03      	bgt.n	800da4c <_dtoa_r+0xa9c>
 800da44:	d1e0      	bne.n	800da08 <_dtoa_r+0xa58>
 800da46:	f01a 0f01 	tst.w	sl, #1
 800da4a:	d0dd      	beq.n	800da08 <_dtoa_r+0xa58>
 800da4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da50:	d1d7      	bne.n	800da02 <_dtoa_r+0xa52>
 800da52:	2339      	movs	r3, #57	; 0x39
 800da54:	f88b 3000 	strb.w	r3, [fp]
 800da58:	462b      	mov	r3, r5
 800da5a:	461d      	mov	r5, r3
 800da5c:	3b01      	subs	r3, #1
 800da5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da62:	2a39      	cmp	r2, #57	; 0x39
 800da64:	d071      	beq.n	800db4a <_dtoa_r+0xb9a>
 800da66:	3201      	adds	r2, #1
 800da68:	701a      	strb	r2, [r3, #0]
 800da6a:	e746      	b.n	800d8fa <_dtoa_r+0x94a>
 800da6c:	2a00      	cmp	r2, #0
 800da6e:	dd07      	ble.n	800da80 <_dtoa_r+0xad0>
 800da70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da74:	d0ed      	beq.n	800da52 <_dtoa_r+0xaa2>
 800da76:	f10a 0301 	add.w	r3, sl, #1
 800da7a:	f88b 3000 	strb.w	r3, [fp]
 800da7e:	e73c      	b.n	800d8fa <_dtoa_r+0x94a>
 800da80:	9b05      	ldr	r3, [sp, #20]
 800da82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800da86:	4599      	cmp	r9, r3
 800da88:	d047      	beq.n	800db1a <_dtoa_r+0xb6a>
 800da8a:	ee18 1a10 	vmov	r1, s16
 800da8e:	2300      	movs	r3, #0
 800da90:	220a      	movs	r2, #10
 800da92:	4620      	mov	r0, r4
 800da94:	f000 f96c 	bl	800dd70 <__multadd>
 800da98:	45b8      	cmp	r8, r7
 800da9a:	ee08 0a10 	vmov	s16, r0
 800da9e:	f04f 0300 	mov.w	r3, #0
 800daa2:	f04f 020a 	mov.w	r2, #10
 800daa6:	4641      	mov	r1, r8
 800daa8:	4620      	mov	r0, r4
 800daaa:	d106      	bne.n	800daba <_dtoa_r+0xb0a>
 800daac:	f000 f960 	bl	800dd70 <__multadd>
 800dab0:	4680      	mov	r8, r0
 800dab2:	4607      	mov	r7, r0
 800dab4:	f109 0901 	add.w	r9, r9, #1
 800dab8:	e772      	b.n	800d9a0 <_dtoa_r+0x9f0>
 800daba:	f000 f959 	bl	800dd70 <__multadd>
 800dabe:	4639      	mov	r1, r7
 800dac0:	4680      	mov	r8, r0
 800dac2:	2300      	movs	r3, #0
 800dac4:	220a      	movs	r2, #10
 800dac6:	4620      	mov	r0, r4
 800dac8:	f000 f952 	bl	800dd70 <__multadd>
 800dacc:	4607      	mov	r7, r0
 800dace:	e7f1      	b.n	800dab4 <_dtoa_r+0xb04>
 800dad0:	9b03      	ldr	r3, [sp, #12]
 800dad2:	9302      	str	r3, [sp, #8]
 800dad4:	9d01      	ldr	r5, [sp, #4]
 800dad6:	ee18 0a10 	vmov	r0, s16
 800dada:	4631      	mov	r1, r6
 800dadc:	f7ff f9dc 	bl	800ce98 <quorem>
 800dae0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dae4:	9b01      	ldr	r3, [sp, #4]
 800dae6:	f805 ab01 	strb.w	sl, [r5], #1
 800daea:	1aea      	subs	r2, r5, r3
 800daec:	9b02      	ldr	r3, [sp, #8]
 800daee:	4293      	cmp	r3, r2
 800daf0:	dd09      	ble.n	800db06 <_dtoa_r+0xb56>
 800daf2:	ee18 1a10 	vmov	r1, s16
 800daf6:	2300      	movs	r3, #0
 800daf8:	220a      	movs	r2, #10
 800dafa:	4620      	mov	r0, r4
 800dafc:	f000 f938 	bl	800dd70 <__multadd>
 800db00:	ee08 0a10 	vmov	s16, r0
 800db04:	e7e7      	b.n	800dad6 <_dtoa_r+0xb26>
 800db06:	9b02      	ldr	r3, [sp, #8]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	bfc8      	it	gt
 800db0c:	461d      	movgt	r5, r3
 800db0e:	9b01      	ldr	r3, [sp, #4]
 800db10:	bfd8      	it	le
 800db12:	2501      	movle	r5, #1
 800db14:	441d      	add	r5, r3
 800db16:	f04f 0800 	mov.w	r8, #0
 800db1a:	ee18 1a10 	vmov	r1, s16
 800db1e:	2201      	movs	r2, #1
 800db20:	4620      	mov	r0, r4
 800db22:	f000 fad5 	bl	800e0d0 <__lshift>
 800db26:	4631      	mov	r1, r6
 800db28:	ee08 0a10 	vmov	s16, r0
 800db2c:	f000 fb40 	bl	800e1b0 <__mcmp>
 800db30:	2800      	cmp	r0, #0
 800db32:	dc91      	bgt.n	800da58 <_dtoa_r+0xaa8>
 800db34:	d102      	bne.n	800db3c <_dtoa_r+0xb8c>
 800db36:	f01a 0f01 	tst.w	sl, #1
 800db3a:	d18d      	bne.n	800da58 <_dtoa_r+0xaa8>
 800db3c:	462b      	mov	r3, r5
 800db3e:	461d      	mov	r5, r3
 800db40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db44:	2a30      	cmp	r2, #48	; 0x30
 800db46:	d0fa      	beq.n	800db3e <_dtoa_r+0xb8e>
 800db48:	e6d7      	b.n	800d8fa <_dtoa_r+0x94a>
 800db4a:	9a01      	ldr	r2, [sp, #4]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d184      	bne.n	800da5a <_dtoa_r+0xaaa>
 800db50:	9b00      	ldr	r3, [sp, #0]
 800db52:	3301      	adds	r3, #1
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	2331      	movs	r3, #49	; 0x31
 800db58:	7013      	strb	r3, [r2, #0]
 800db5a:	e6ce      	b.n	800d8fa <_dtoa_r+0x94a>
 800db5c:	4b09      	ldr	r3, [pc, #36]	; (800db84 <_dtoa_r+0xbd4>)
 800db5e:	f7ff ba95 	b.w	800d08c <_dtoa_r+0xdc>
 800db62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db64:	2b00      	cmp	r3, #0
 800db66:	f47f aa6e 	bne.w	800d046 <_dtoa_r+0x96>
 800db6a:	4b07      	ldr	r3, [pc, #28]	; (800db88 <_dtoa_r+0xbd8>)
 800db6c:	f7ff ba8e 	b.w	800d08c <_dtoa_r+0xdc>
 800db70:	9b02      	ldr	r3, [sp, #8]
 800db72:	2b00      	cmp	r3, #0
 800db74:	dcae      	bgt.n	800dad4 <_dtoa_r+0xb24>
 800db76:	9b06      	ldr	r3, [sp, #24]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	f73f aea8 	bgt.w	800d8ce <_dtoa_r+0x91e>
 800db7e:	e7a9      	b.n	800dad4 <_dtoa_r+0xb24>
 800db80:	08011507 	.word	0x08011507
 800db84:	080116e9 	.word	0x080116e9
 800db88:	0801149f 	.word	0x0801149f

0800db8c <fiprintf>:
 800db8c:	b40e      	push	{r1, r2, r3}
 800db8e:	b503      	push	{r0, r1, lr}
 800db90:	4601      	mov	r1, r0
 800db92:	ab03      	add	r3, sp, #12
 800db94:	4805      	ldr	r0, [pc, #20]	; (800dbac <fiprintf+0x20>)
 800db96:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9a:	6800      	ldr	r0, [r0, #0]
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	f000 ff77 	bl	800ea90 <_vfiprintf_r>
 800dba2:	b002      	add	sp, #8
 800dba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dba8:	b003      	add	sp, #12
 800dbaa:	4770      	bx	lr
 800dbac:	200002c4 	.word	0x200002c4

0800dbb0 <_findenv_r>:
 800dbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800dc24 <_findenv_r+0x74>
 800dbb8:	4607      	mov	r7, r0
 800dbba:	4689      	mov	r9, r1
 800dbbc:	4616      	mov	r6, r2
 800dbbe:	f001 fbb3 	bl	800f328 <__env_lock>
 800dbc2:	f8da 4000 	ldr.w	r4, [sl]
 800dbc6:	b134      	cbz	r4, 800dbd6 <_findenv_r+0x26>
 800dbc8:	464b      	mov	r3, r9
 800dbca:	4698      	mov	r8, r3
 800dbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbd0:	b13a      	cbz	r2, 800dbe2 <_findenv_r+0x32>
 800dbd2:	2a3d      	cmp	r2, #61	; 0x3d
 800dbd4:	d1f9      	bne.n	800dbca <_findenv_r+0x1a>
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	f001 fbac 	bl	800f334 <__env_unlock>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe2:	eba8 0809 	sub.w	r8, r8, r9
 800dbe6:	46a3      	mov	fp, r4
 800dbe8:	f854 0b04 	ldr.w	r0, [r4], #4
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d0f2      	beq.n	800dbd6 <_findenv_r+0x26>
 800dbf0:	4642      	mov	r2, r8
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	f7fe fe1e 	bl	800c834 <strncmp>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d1f4      	bne.n	800dbe6 <_findenv_r+0x36>
 800dbfc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800dc00:	eb03 0508 	add.w	r5, r3, r8
 800dc04:	f813 3008 	ldrb.w	r3, [r3, r8]
 800dc08:	2b3d      	cmp	r3, #61	; 0x3d
 800dc0a:	d1ec      	bne.n	800dbe6 <_findenv_r+0x36>
 800dc0c:	f8da 3000 	ldr.w	r3, [sl]
 800dc10:	ebab 0303 	sub.w	r3, fp, r3
 800dc14:	109b      	asrs	r3, r3, #2
 800dc16:	4638      	mov	r0, r7
 800dc18:	6033      	str	r3, [r6, #0]
 800dc1a:	f001 fb8b 	bl	800f334 <__env_unlock>
 800dc1e:	1c68      	adds	r0, r5, #1
 800dc20:	e7dd      	b.n	800dbde <_findenv_r+0x2e>
 800dc22:	bf00      	nop
 800dc24:	20000220 	.word	0x20000220

0800dc28 <_getenv_r>:
 800dc28:	b507      	push	{r0, r1, r2, lr}
 800dc2a:	aa01      	add	r2, sp, #4
 800dc2c:	f7ff ffc0 	bl	800dbb0 <_findenv_r>
 800dc30:	b003      	add	sp, #12
 800dc32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800dc38 <__gettzinfo>:
 800dc38:	4800      	ldr	r0, [pc, #0]	; (800dc3c <__gettzinfo+0x4>)
 800dc3a:	4770      	bx	lr
 800dc3c:	20000330 	.word	0x20000330

0800dc40 <_localeconv_r>:
 800dc40:	4800      	ldr	r0, [pc, #0]	; (800dc44 <_localeconv_r+0x4>)
 800dc42:	4770      	bx	lr
 800dc44:	20000478 	.word	0x20000478

0800dc48 <__retarget_lock_init_recursive>:
 800dc48:	4770      	bx	lr

0800dc4a <__retarget_lock_acquire>:
 800dc4a:	4770      	bx	lr

0800dc4c <__retarget_lock_acquire_recursive>:
 800dc4c:	4770      	bx	lr

0800dc4e <__retarget_lock_release>:
 800dc4e:	4770      	bx	lr

0800dc50 <__retarget_lock_release_recursive>:
 800dc50:	4770      	bx	lr
	...

0800dc54 <_lseek_r>:
 800dc54:	b538      	push	{r3, r4, r5, lr}
 800dc56:	4d07      	ldr	r5, [pc, #28]	; (800dc74 <_lseek_r+0x20>)
 800dc58:	4604      	mov	r4, r0
 800dc5a:	4608      	mov	r0, r1
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	2200      	movs	r2, #0
 800dc60:	602a      	str	r2, [r5, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	f7f6 fc24 	bl	80044b0 <_lseek>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_lseek_r+0x1e>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_lseek_r+0x1e>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	2000108c 	.word	0x2000108c

0800dc78 <memcpy>:
 800dc78:	440a      	add	r2, r1
 800dc7a:	4291      	cmp	r1, r2
 800dc7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc80:	d100      	bne.n	800dc84 <memcpy+0xc>
 800dc82:	4770      	bx	lr
 800dc84:	b510      	push	{r4, lr}
 800dc86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc8e:	4291      	cmp	r1, r2
 800dc90:	d1f9      	bne.n	800dc86 <memcpy+0xe>
 800dc92:	bd10      	pop	{r4, pc}

0800dc94 <__malloc_lock>:
 800dc94:	4801      	ldr	r0, [pc, #4]	; (800dc9c <__malloc_lock+0x8>)
 800dc96:	f7ff bfd9 	b.w	800dc4c <__retarget_lock_acquire_recursive>
 800dc9a:	bf00      	nop
 800dc9c:	20001085 	.word	0x20001085

0800dca0 <__malloc_unlock>:
 800dca0:	4801      	ldr	r0, [pc, #4]	; (800dca8 <__malloc_unlock+0x8>)
 800dca2:	f7ff bfd5 	b.w	800dc50 <__retarget_lock_release_recursive>
 800dca6:	bf00      	nop
 800dca8:	20001085 	.word	0x20001085

0800dcac <_Balloc>:
 800dcac:	b570      	push	{r4, r5, r6, lr}
 800dcae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	460d      	mov	r5, r1
 800dcb4:	b976      	cbnz	r6, 800dcd4 <_Balloc+0x28>
 800dcb6:	2010      	movs	r0, #16
 800dcb8:	f7fd fd32 	bl	800b720 <malloc>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	6260      	str	r0, [r4, #36]	; 0x24
 800dcc0:	b920      	cbnz	r0, 800dccc <_Balloc+0x20>
 800dcc2:	4b18      	ldr	r3, [pc, #96]	; (800dd24 <_Balloc+0x78>)
 800dcc4:	4818      	ldr	r0, [pc, #96]	; (800dd28 <_Balloc+0x7c>)
 800dcc6:	2166      	movs	r1, #102	; 0x66
 800dcc8:	f7ff f8a4 	bl	800ce14 <__assert_func>
 800dccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcd0:	6006      	str	r6, [r0, #0]
 800dcd2:	60c6      	str	r6, [r0, #12]
 800dcd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dcd6:	68f3      	ldr	r3, [r6, #12]
 800dcd8:	b183      	cbz	r3, 800dcfc <_Balloc+0x50>
 800dcda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dce2:	b9b8      	cbnz	r0, 800dd14 <_Balloc+0x68>
 800dce4:	2101      	movs	r1, #1
 800dce6:	fa01 f605 	lsl.w	r6, r1, r5
 800dcea:	1d72      	adds	r2, r6, #5
 800dcec:	0092      	lsls	r2, r2, #2
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f000 fb60 	bl	800e3b4 <_calloc_r>
 800dcf4:	b160      	cbz	r0, 800dd10 <_Balloc+0x64>
 800dcf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcfa:	e00e      	b.n	800dd1a <_Balloc+0x6e>
 800dcfc:	2221      	movs	r2, #33	; 0x21
 800dcfe:	2104      	movs	r1, #4
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 fb57 	bl	800e3b4 <_calloc_r>
 800dd06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd08:	60f0      	str	r0, [r6, #12]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1e4      	bne.n	800dcda <_Balloc+0x2e>
 800dd10:	2000      	movs	r0, #0
 800dd12:	bd70      	pop	{r4, r5, r6, pc}
 800dd14:	6802      	ldr	r2, [r0, #0]
 800dd16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd20:	e7f7      	b.n	800dd12 <_Balloc+0x66>
 800dd22:	bf00      	nop
 800dd24:	0801121c 	.word	0x0801121c
 800dd28:	08011578 	.word	0x08011578

0800dd2c <_Bfree>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd30:	4605      	mov	r5, r0
 800dd32:	460c      	mov	r4, r1
 800dd34:	b976      	cbnz	r6, 800dd54 <_Bfree+0x28>
 800dd36:	2010      	movs	r0, #16
 800dd38:	f7fd fcf2 	bl	800b720 <malloc>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	6268      	str	r0, [r5, #36]	; 0x24
 800dd40:	b920      	cbnz	r0, 800dd4c <_Bfree+0x20>
 800dd42:	4b09      	ldr	r3, [pc, #36]	; (800dd68 <_Bfree+0x3c>)
 800dd44:	4809      	ldr	r0, [pc, #36]	; (800dd6c <_Bfree+0x40>)
 800dd46:	218a      	movs	r1, #138	; 0x8a
 800dd48:	f7ff f864 	bl	800ce14 <__assert_func>
 800dd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd50:	6006      	str	r6, [r0, #0]
 800dd52:	60c6      	str	r6, [r0, #12]
 800dd54:	b13c      	cbz	r4, 800dd66 <_Bfree+0x3a>
 800dd56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd58:	6862      	ldr	r2, [r4, #4]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd60:	6021      	str	r1, [r4, #0]
 800dd62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
 800dd68:	0801121c 	.word	0x0801121c
 800dd6c:	08011578 	.word	0x08011578

0800dd70 <__multadd>:
 800dd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd74:	690d      	ldr	r5, [r1, #16]
 800dd76:	4607      	mov	r7, r0
 800dd78:	460c      	mov	r4, r1
 800dd7a:	461e      	mov	r6, r3
 800dd7c:	f101 0c14 	add.w	ip, r1, #20
 800dd80:	2000      	movs	r0, #0
 800dd82:	f8dc 3000 	ldr.w	r3, [ip]
 800dd86:	b299      	uxth	r1, r3
 800dd88:	fb02 6101 	mla	r1, r2, r1, r6
 800dd8c:	0c1e      	lsrs	r6, r3, #16
 800dd8e:	0c0b      	lsrs	r3, r1, #16
 800dd90:	fb02 3306 	mla	r3, r2, r6, r3
 800dd94:	b289      	uxth	r1, r1
 800dd96:	3001      	adds	r0, #1
 800dd98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd9c:	4285      	cmp	r5, r0
 800dd9e:	f84c 1b04 	str.w	r1, [ip], #4
 800dda2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dda6:	dcec      	bgt.n	800dd82 <__multadd+0x12>
 800dda8:	b30e      	cbz	r6, 800ddee <__multadd+0x7e>
 800ddaa:	68a3      	ldr	r3, [r4, #8]
 800ddac:	42ab      	cmp	r3, r5
 800ddae:	dc19      	bgt.n	800dde4 <__multadd+0x74>
 800ddb0:	6861      	ldr	r1, [r4, #4]
 800ddb2:	4638      	mov	r0, r7
 800ddb4:	3101      	adds	r1, #1
 800ddb6:	f7ff ff79 	bl	800dcac <_Balloc>
 800ddba:	4680      	mov	r8, r0
 800ddbc:	b928      	cbnz	r0, 800ddca <__multadd+0x5a>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <__multadd+0x84>)
 800ddc2:	480d      	ldr	r0, [pc, #52]	; (800ddf8 <__multadd+0x88>)
 800ddc4:	21b5      	movs	r1, #181	; 0xb5
 800ddc6:	f7ff f825 	bl	800ce14 <__assert_func>
 800ddca:	6922      	ldr	r2, [r4, #16]
 800ddcc:	3202      	adds	r2, #2
 800ddce:	f104 010c 	add.w	r1, r4, #12
 800ddd2:	0092      	lsls	r2, r2, #2
 800ddd4:	300c      	adds	r0, #12
 800ddd6:	f7ff ff4f 	bl	800dc78 <memcpy>
 800ddda:	4621      	mov	r1, r4
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7ff ffa5 	bl	800dd2c <_Bfree>
 800dde2:	4644      	mov	r4, r8
 800dde4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dde8:	3501      	adds	r5, #1
 800ddea:	615e      	str	r6, [r3, #20]
 800ddec:	6125      	str	r5, [r4, #16]
 800ddee:	4620      	mov	r0, r4
 800ddf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf4:	08011507 	.word	0x08011507
 800ddf8:	08011578 	.word	0x08011578

0800ddfc <__hi0bits>:
 800ddfc:	0c03      	lsrs	r3, r0, #16
 800ddfe:	041b      	lsls	r3, r3, #16
 800de00:	b9d3      	cbnz	r3, 800de38 <__hi0bits+0x3c>
 800de02:	0400      	lsls	r0, r0, #16
 800de04:	2310      	movs	r3, #16
 800de06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800de0a:	bf04      	itt	eq
 800de0c:	0200      	lsleq	r0, r0, #8
 800de0e:	3308      	addeq	r3, #8
 800de10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800de14:	bf04      	itt	eq
 800de16:	0100      	lsleq	r0, r0, #4
 800de18:	3304      	addeq	r3, #4
 800de1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800de1e:	bf04      	itt	eq
 800de20:	0080      	lsleq	r0, r0, #2
 800de22:	3302      	addeq	r3, #2
 800de24:	2800      	cmp	r0, #0
 800de26:	db05      	blt.n	800de34 <__hi0bits+0x38>
 800de28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800de2c:	f103 0301 	add.w	r3, r3, #1
 800de30:	bf08      	it	eq
 800de32:	2320      	moveq	r3, #32
 800de34:	4618      	mov	r0, r3
 800de36:	4770      	bx	lr
 800de38:	2300      	movs	r3, #0
 800de3a:	e7e4      	b.n	800de06 <__hi0bits+0xa>

0800de3c <__lo0bits>:
 800de3c:	6803      	ldr	r3, [r0, #0]
 800de3e:	f013 0207 	ands.w	r2, r3, #7
 800de42:	4601      	mov	r1, r0
 800de44:	d00b      	beq.n	800de5e <__lo0bits+0x22>
 800de46:	07da      	lsls	r2, r3, #31
 800de48:	d423      	bmi.n	800de92 <__lo0bits+0x56>
 800de4a:	0798      	lsls	r0, r3, #30
 800de4c:	bf49      	itett	mi
 800de4e:	085b      	lsrmi	r3, r3, #1
 800de50:	089b      	lsrpl	r3, r3, #2
 800de52:	2001      	movmi	r0, #1
 800de54:	600b      	strmi	r3, [r1, #0]
 800de56:	bf5c      	itt	pl
 800de58:	600b      	strpl	r3, [r1, #0]
 800de5a:	2002      	movpl	r0, #2
 800de5c:	4770      	bx	lr
 800de5e:	b298      	uxth	r0, r3
 800de60:	b9a8      	cbnz	r0, 800de8e <__lo0bits+0x52>
 800de62:	0c1b      	lsrs	r3, r3, #16
 800de64:	2010      	movs	r0, #16
 800de66:	b2da      	uxtb	r2, r3
 800de68:	b90a      	cbnz	r2, 800de6e <__lo0bits+0x32>
 800de6a:	3008      	adds	r0, #8
 800de6c:	0a1b      	lsrs	r3, r3, #8
 800de6e:	071a      	lsls	r2, r3, #28
 800de70:	bf04      	itt	eq
 800de72:	091b      	lsreq	r3, r3, #4
 800de74:	3004      	addeq	r0, #4
 800de76:	079a      	lsls	r2, r3, #30
 800de78:	bf04      	itt	eq
 800de7a:	089b      	lsreq	r3, r3, #2
 800de7c:	3002      	addeq	r0, #2
 800de7e:	07da      	lsls	r2, r3, #31
 800de80:	d403      	bmi.n	800de8a <__lo0bits+0x4e>
 800de82:	085b      	lsrs	r3, r3, #1
 800de84:	f100 0001 	add.w	r0, r0, #1
 800de88:	d005      	beq.n	800de96 <__lo0bits+0x5a>
 800de8a:	600b      	str	r3, [r1, #0]
 800de8c:	4770      	bx	lr
 800de8e:	4610      	mov	r0, r2
 800de90:	e7e9      	b.n	800de66 <__lo0bits+0x2a>
 800de92:	2000      	movs	r0, #0
 800de94:	4770      	bx	lr
 800de96:	2020      	movs	r0, #32
 800de98:	4770      	bx	lr
	...

0800de9c <__i2b>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	460c      	mov	r4, r1
 800dea0:	2101      	movs	r1, #1
 800dea2:	f7ff ff03 	bl	800dcac <_Balloc>
 800dea6:	4602      	mov	r2, r0
 800dea8:	b928      	cbnz	r0, 800deb6 <__i2b+0x1a>
 800deaa:	4b05      	ldr	r3, [pc, #20]	; (800dec0 <__i2b+0x24>)
 800deac:	4805      	ldr	r0, [pc, #20]	; (800dec4 <__i2b+0x28>)
 800deae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800deb2:	f7fe ffaf 	bl	800ce14 <__assert_func>
 800deb6:	2301      	movs	r3, #1
 800deb8:	6144      	str	r4, [r0, #20]
 800deba:	6103      	str	r3, [r0, #16]
 800debc:	bd10      	pop	{r4, pc}
 800debe:	bf00      	nop
 800dec0:	08011507 	.word	0x08011507
 800dec4:	08011578 	.word	0x08011578

0800dec8 <__multiply>:
 800dec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800decc:	4691      	mov	r9, r2
 800dece:	690a      	ldr	r2, [r1, #16]
 800ded0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	bfb8      	it	lt
 800ded8:	460b      	movlt	r3, r1
 800deda:	460c      	mov	r4, r1
 800dedc:	bfbc      	itt	lt
 800dede:	464c      	movlt	r4, r9
 800dee0:	4699      	movlt	r9, r3
 800dee2:	6927      	ldr	r7, [r4, #16]
 800dee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dee8:	68a3      	ldr	r3, [r4, #8]
 800deea:	6861      	ldr	r1, [r4, #4]
 800deec:	eb07 060a 	add.w	r6, r7, sl
 800def0:	42b3      	cmp	r3, r6
 800def2:	b085      	sub	sp, #20
 800def4:	bfb8      	it	lt
 800def6:	3101      	addlt	r1, #1
 800def8:	f7ff fed8 	bl	800dcac <_Balloc>
 800defc:	b930      	cbnz	r0, 800df0c <__multiply+0x44>
 800defe:	4602      	mov	r2, r0
 800df00:	4b44      	ldr	r3, [pc, #272]	; (800e014 <__multiply+0x14c>)
 800df02:	4845      	ldr	r0, [pc, #276]	; (800e018 <__multiply+0x150>)
 800df04:	f240 115d 	movw	r1, #349	; 0x15d
 800df08:	f7fe ff84 	bl	800ce14 <__assert_func>
 800df0c:	f100 0514 	add.w	r5, r0, #20
 800df10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df14:	462b      	mov	r3, r5
 800df16:	2200      	movs	r2, #0
 800df18:	4543      	cmp	r3, r8
 800df1a:	d321      	bcc.n	800df60 <__multiply+0x98>
 800df1c:	f104 0314 	add.w	r3, r4, #20
 800df20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800df24:	f109 0314 	add.w	r3, r9, #20
 800df28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800df2c:	9202      	str	r2, [sp, #8]
 800df2e:	1b3a      	subs	r2, r7, r4
 800df30:	3a15      	subs	r2, #21
 800df32:	f022 0203 	bic.w	r2, r2, #3
 800df36:	3204      	adds	r2, #4
 800df38:	f104 0115 	add.w	r1, r4, #21
 800df3c:	428f      	cmp	r7, r1
 800df3e:	bf38      	it	cc
 800df40:	2204      	movcc	r2, #4
 800df42:	9201      	str	r2, [sp, #4]
 800df44:	9a02      	ldr	r2, [sp, #8]
 800df46:	9303      	str	r3, [sp, #12]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d80c      	bhi.n	800df66 <__multiply+0x9e>
 800df4c:	2e00      	cmp	r6, #0
 800df4e:	dd03      	ble.n	800df58 <__multiply+0x90>
 800df50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df54:	2b00      	cmp	r3, #0
 800df56:	d05a      	beq.n	800e00e <__multiply+0x146>
 800df58:	6106      	str	r6, [r0, #16]
 800df5a:	b005      	add	sp, #20
 800df5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df60:	f843 2b04 	str.w	r2, [r3], #4
 800df64:	e7d8      	b.n	800df18 <__multiply+0x50>
 800df66:	f8b3 a000 	ldrh.w	sl, [r3]
 800df6a:	f1ba 0f00 	cmp.w	sl, #0
 800df6e:	d024      	beq.n	800dfba <__multiply+0xf2>
 800df70:	f104 0e14 	add.w	lr, r4, #20
 800df74:	46a9      	mov	r9, r5
 800df76:	f04f 0c00 	mov.w	ip, #0
 800df7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df7e:	f8d9 1000 	ldr.w	r1, [r9]
 800df82:	fa1f fb82 	uxth.w	fp, r2
 800df86:	b289      	uxth	r1, r1
 800df88:	fb0a 110b 	mla	r1, sl, fp, r1
 800df8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df90:	f8d9 2000 	ldr.w	r2, [r9]
 800df94:	4461      	add	r1, ip
 800df96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df9a:	fb0a c20b 	mla	r2, sl, fp, ip
 800df9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dfa2:	b289      	uxth	r1, r1
 800dfa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dfa8:	4577      	cmp	r7, lr
 800dfaa:	f849 1b04 	str.w	r1, [r9], #4
 800dfae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dfb2:	d8e2      	bhi.n	800df7a <__multiply+0xb2>
 800dfb4:	9a01      	ldr	r2, [sp, #4]
 800dfb6:	f845 c002 	str.w	ip, [r5, r2]
 800dfba:	9a03      	ldr	r2, [sp, #12]
 800dfbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	f1b9 0f00 	cmp.w	r9, #0
 800dfc6:	d020      	beq.n	800e00a <__multiply+0x142>
 800dfc8:	6829      	ldr	r1, [r5, #0]
 800dfca:	f104 0c14 	add.w	ip, r4, #20
 800dfce:	46ae      	mov	lr, r5
 800dfd0:	f04f 0a00 	mov.w	sl, #0
 800dfd4:	f8bc b000 	ldrh.w	fp, [ip]
 800dfd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dfdc:	fb09 220b 	mla	r2, r9, fp, r2
 800dfe0:	4492      	add	sl, r2
 800dfe2:	b289      	uxth	r1, r1
 800dfe4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dfe8:	f84e 1b04 	str.w	r1, [lr], #4
 800dfec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dff0:	f8be 1000 	ldrh.w	r1, [lr]
 800dff4:	0c12      	lsrs	r2, r2, #16
 800dff6:	fb09 1102 	mla	r1, r9, r2, r1
 800dffa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dffe:	4567      	cmp	r7, ip
 800e000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e004:	d8e6      	bhi.n	800dfd4 <__multiply+0x10c>
 800e006:	9a01      	ldr	r2, [sp, #4]
 800e008:	50a9      	str	r1, [r5, r2]
 800e00a:	3504      	adds	r5, #4
 800e00c:	e79a      	b.n	800df44 <__multiply+0x7c>
 800e00e:	3e01      	subs	r6, #1
 800e010:	e79c      	b.n	800df4c <__multiply+0x84>
 800e012:	bf00      	nop
 800e014:	08011507 	.word	0x08011507
 800e018:	08011578 	.word	0x08011578

0800e01c <__pow5mult>:
 800e01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e020:	4615      	mov	r5, r2
 800e022:	f012 0203 	ands.w	r2, r2, #3
 800e026:	4606      	mov	r6, r0
 800e028:	460f      	mov	r7, r1
 800e02a:	d007      	beq.n	800e03c <__pow5mult+0x20>
 800e02c:	4c25      	ldr	r4, [pc, #148]	; (800e0c4 <__pow5mult+0xa8>)
 800e02e:	3a01      	subs	r2, #1
 800e030:	2300      	movs	r3, #0
 800e032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e036:	f7ff fe9b 	bl	800dd70 <__multadd>
 800e03a:	4607      	mov	r7, r0
 800e03c:	10ad      	asrs	r5, r5, #2
 800e03e:	d03d      	beq.n	800e0bc <__pow5mult+0xa0>
 800e040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e042:	b97c      	cbnz	r4, 800e064 <__pow5mult+0x48>
 800e044:	2010      	movs	r0, #16
 800e046:	f7fd fb6b 	bl	800b720 <malloc>
 800e04a:	4602      	mov	r2, r0
 800e04c:	6270      	str	r0, [r6, #36]	; 0x24
 800e04e:	b928      	cbnz	r0, 800e05c <__pow5mult+0x40>
 800e050:	4b1d      	ldr	r3, [pc, #116]	; (800e0c8 <__pow5mult+0xac>)
 800e052:	481e      	ldr	r0, [pc, #120]	; (800e0cc <__pow5mult+0xb0>)
 800e054:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e058:	f7fe fedc 	bl	800ce14 <__assert_func>
 800e05c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e060:	6004      	str	r4, [r0, #0]
 800e062:	60c4      	str	r4, [r0, #12]
 800e064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e06c:	b94c      	cbnz	r4, 800e082 <__pow5mult+0x66>
 800e06e:	f240 2171 	movw	r1, #625	; 0x271
 800e072:	4630      	mov	r0, r6
 800e074:	f7ff ff12 	bl	800de9c <__i2b>
 800e078:	2300      	movs	r3, #0
 800e07a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e07e:	4604      	mov	r4, r0
 800e080:	6003      	str	r3, [r0, #0]
 800e082:	f04f 0900 	mov.w	r9, #0
 800e086:	07eb      	lsls	r3, r5, #31
 800e088:	d50a      	bpl.n	800e0a0 <__pow5mult+0x84>
 800e08a:	4639      	mov	r1, r7
 800e08c:	4622      	mov	r2, r4
 800e08e:	4630      	mov	r0, r6
 800e090:	f7ff ff1a 	bl	800dec8 <__multiply>
 800e094:	4639      	mov	r1, r7
 800e096:	4680      	mov	r8, r0
 800e098:	4630      	mov	r0, r6
 800e09a:	f7ff fe47 	bl	800dd2c <_Bfree>
 800e09e:	4647      	mov	r7, r8
 800e0a0:	106d      	asrs	r5, r5, #1
 800e0a2:	d00b      	beq.n	800e0bc <__pow5mult+0xa0>
 800e0a4:	6820      	ldr	r0, [r4, #0]
 800e0a6:	b938      	cbnz	r0, 800e0b8 <__pow5mult+0x9c>
 800e0a8:	4622      	mov	r2, r4
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f7ff ff0b 	bl	800dec8 <__multiply>
 800e0b2:	6020      	str	r0, [r4, #0]
 800e0b4:	f8c0 9000 	str.w	r9, [r0]
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	e7e4      	b.n	800e086 <__pow5mult+0x6a>
 800e0bc:	4638      	mov	r0, r7
 800e0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0c2:	bf00      	nop
 800e0c4:	080116c8 	.word	0x080116c8
 800e0c8:	0801121c 	.word	0x0801121c
 800e0cc:	08011578 	.word	0x08011578

0800e0d0 <__lshift>:
 800e0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d4:	460c      	mov	r4, r1
 800e0d6:	6849      	ldr	r1, [r1, #4]
 800e0d8:	6923      	ldr	r3, [r4, #16]
 800e0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e0de:	68a3      	ldr	r3, [r4, #8]
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	4691      	mov	r9, r2
 800e0e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0e8:	f108 0601 	add.w	r6, r8, #1
 800e0ec:	42b3      	cmp	r3, r6
 800e0ee:	db0b      	blt.n	800e108 <__lshift+0x38>
 800e0f0:	4638      	mov	r0, r7
 800e0f2:	f7ff fddb 	bl	800dcac <_Balloc>
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	b948      	cbnz	r0, 800e10e <__lshift+0x3e>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	4b2a      	ldr	r3, [pc, #168]	; (800e1a8 <__lshift+0xd8>)
 800e0fe:	482b      	ldr	r0, [pc, #172]	; (800e1ac <__lshift+0xdc>)
 800e100:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e104:	f7fe fe86 	bl	800ce14 <__assert_func>
 800e108:	3101      	adds	r1, #1
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	e7ee      	b.n	800e0ec <__lshift+0x1c>
 800e10e:	2300      	movs	r3, #0
 800e110:	f100 0114 	add.w	r1, r0, #20
 800e114:	f100 0210 	add.w	r2, r0, #16
 800e118:	4618      	mov	r0, r3
 800e11a:	4553      	cmp	r3, sl
 800e11c:	db37      	blt.n	800e18e <__lshift+0xbe>
 800e11e:	6920      	ldr	r0, [r4, #16]
 800e120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e124:	f104 0314 	add.w	r3, r4, #20
 800e128:	f019 091f 	ands.w	r9, r9, #31
 800e12c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e134:	d02f      	beq.n	800e196 <__lshift+0xc6>
 800e136:	f1c9 0e20 	rsb	lr, r9, #32
 800e13a:	468a      	mov	sl, r1
 800e13c:	f04f 0c00 	mov.w	ip, #0
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	fa02 f209 	lsl.w	r2, r2, r9
 800e146:	ea42 020c 	orr.w	r2, r2, ip
 800e14a:	f84a 2b04 	str.w	r2, [sl], #4
 800e14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e152:	4298      	cmp	r0, r3
 800e154:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e158:	d8f2      	bhi.n	800e140 <__lshift+0x70>
 800e15a:	1b03      	subs	r3, r0, r4
 800e15c:	3b15      	subs	r3, #21
 800e15e:	f023 0303 	bic.w	r3, r3, #3
 800e162:	3304      	adds	r3, #4
 800e164:	f104 0215 	add.w	r2, r4, #21
 800e168:	4290      	cmp	r0, r2
 800e16a:	bf38      	it	cc
 800e16c:	2304      	movcc	r3, #4
 800e16e:	f841 c003 	str.w	ip, [r1, r3]
 800e172:	f1bc 0f00 	cmp.w	ip, #0
 800e176:	d001      	beq.n	800e17c <__lshift+0xac>
 800e178:	f108 0602 	add.w	r6, r8, #2
 800e17c:	3e01      	subs	r6, #1
 800e17e:	4638      	mov	r0, r7
 800e180:	612e      	str	r6, [r5, #16]
 800e182:	4621      	mov	r1, r4
 800e184:	f7ff fdd2 	bl	800dd2c <_Bfree>
 800e188:	4628      	mov	r0, r5
 800e18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e18e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e192:	3301      	adds	r3, #1
 800e194:	e7c1      	b.n	800e11a <__lshift+0x4a>
 800e196:	3904      	subs	r1, #4
 800e198:	f853 2b04 	ldr.w	r2, [r3], #4
 800e19c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1a0:	4298      	cmp	r0, r3
 800e1a2:	d8f9      	bhi.n	800e198 <__lshift+0xc8>
 800e1a4:	e7ea      	b.n	800e17c <__lshift+0xac>
 800e1a6:	bf00      	nop
 800e1a8:	08011507 	.word	0x08011507
 800e1ac:	08011578 	.word	0x08011578

0800e1b0 <__mcmp>:
 800e1b0:	b530      	push	{r4, r5, lr}
 800e1b2:	6902      	ldr	r2, [r0, #16]
 800e1b4:	690c      	ldr	r4, [r1, #16]
 800e1b6:	1b12      	subs	r2, r2, r4
 800e1b8:	d10e      	bne.n	800e1d8 <__mcmp+0x28>
 800e1ba:	f100 0314 	add.w	r3, r0, #20
 800e1be:	3114      	adds	r1, #20
 800e1c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e1c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e1c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e1cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e1d0:	42a5      	cmp	r5, r4
 800e1d2:	d003      	beq.n	800e1dc <__mcmp+0x2c>
 800e1d4:	d305      	bcc.n	800e1e2 <__mcmp+0x32>
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	4610      	mov	r0, r2
 800e1da:	bd30      	pop	{r4, r5, pc}
 800e1dc:	4283      	cmp	r3, r0
 800e1de:	d3f3      	bcc.n	800e1c8 <__mcmp+0x18>
 800e1e0:	e7fa      	b.n	800e1d8 <__mcmp+0x28>
 800e1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e6:	e7f7      	b.n	800e1d8 <__mcmp+0x28>

0800e1e8 <__mdiff>:
 800e1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	4690      	mov	r8, r2
 800e1f6:	f7ff ffdb 	bl	800e1b0 <__mcmp>
 800e1fa:	1e05      	subs	r5, r0, #0
 800e1fc:	d110      	bne.n	800e220 <__mdiff+0x38>
 800e1fe:	4629      	mov	r1, r5
 800e200:	4630      	mov	r0, r6
 800e202:	f7ff fd53 	bl	800dcac <_Balloc>
 800e206:	b930      	cbnz	r0, 800e216 <__mdiff+0x2e>
 800e208:	4b3a      	ldr	r3, [pc, #232]	; (800e2f4 <__mdiff+0x10c>)
 800e20a:	4602      	mov	r2, r0
 800e20c:	f240 2132 	movw	r1, #562	; 0x232
 800e210:	4839      	ldr	r0, [pc, #228]	; (800e2f8 <__mdiff+0x110>)
 800e212:	f7fe fdff 	bl	800ce14 <__assert_func>
 800e216:	2301      	movs	r3, #1
 800e218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e220:	bfa4      	itt	ge
 800e222:	4643      	movge	r3, r8
 800e224:	46a0      	movge	r8, r4
 800e226:	4630      	mov	r0, r6
 800e228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e22c:	bfa6      	itte	ge
 800e22e:	461c      	movge	r4, r3
 800e230:	2500      	movge	r5, #0
 800e232:	2501      	movlt	r5, #1
 800e234:	f7ff fd3a 	bl	800dcac <_Balloc>
 800e238:	b920      	cbnz	r0, 800e244 <__mdiff+0x5c>
 800e23a:	4b2e      	ldr	r3, [pc, #184]	; (800e2f4 <__mdiff+0x10c>)
 800e23c:	4602      	mov	r2, r0
 800e23e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e242:	e7e5      	b.n	800e210 <__mdiff+0x28>
 800e244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e248:	6926      	ldr	r6, [r4, #16]
 800e24a:	60c5      	str	r5, [r0, #12]
 800e24c:	f104 0914 	add.w	r9, r4, #20
 800e250:	f108 0514 	add.w	r5, r8, #20
 800e254:	f100 0e14 	add.w	lr, r0, #20
 800e258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e25c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e260:	f108 0210 	add.w	r2, r8, #16
 800e264:	46f2      	mov	sl, lr
 800e266:	2100      	movs	r1, #0
 800e268:	f859 3b04 	ldr.w	r3, [r9], #4
 800e26c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e270:	fa1f f883 	uxth.w	r8, r3
 800e274:	fa11 f18b 	uxtah	r1, r1, fp
 800e278:	0c1b      	lsrs	r3, r3, #16
 800e27a:	eba1 0808 	sub.w	r8, r1, r8
 800e27e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e286:	fa1f f888 	uxth.w	r8, r8
 800e28a:	1419      	asrs	r1, r3, #16
 800e28c:	454e      	cmp	r6, r9
 800e28e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e292:	f84a 3b04 	str.w	r3, [sl], #4
 800e296:	d8e7      	bhi.n	800e268 <__mdiff+0x80>
 800e298:	1b33      	subs	r3, r6, r4
 800e29a:	3b15      	subs	r3, #21
 800e29c:	f023 0303 	bic.w	r3, r3, #3
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	3415      	adds	r4, #21
 800e2a4:	42a6      	cmp	r6, r4
 800e2a6:	bf38      	it	cc
 800e2a8:	2304      	movcc	r3, #4
 800e2aa:	441d      	add	r5, r3
 800e2ac:	4473      	add	r3, lr
 800e2ae:	469e      	mov	lr, r3
 800e2b0:	462e      	mov	r6, r5
 800e2b2:	4566      	cmp	r6, ip
 800e2b4:	d30e      	bcc.n	800e2d4 <__mdiff+0xec>
 800e2b6:	f10c 0203 	add.w	r2, ip, #3
 800e2ba:	1b52      	subs	r2, r2, r5
 800e2bc:	f022 0203 	bic.w	r2, r2, #3
 800e2c0:	3d03      	subs	r5, #3
 800e2c2:	45ac      	cmp	ip, r5
 800e2c4:	bf38      	it	cc
 800e2c6:	2200      	movcc	r2, #0
 800e2c8:	441a      	add	r2, r3
 800e2ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e2ce:	b17b      	cbz	r3, 800e2f0 <__mdiff+0x108>
 800e2d0:	6107      	str	r7, [r0, #16]
 800e2d2:	e7a3      	b.n	800e21c <__mdiff+0x34>
 800e2d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e2d8:	fa11 f288 	uxtah	r2, r1, r8
 800e2dc:	1414      	asrs	r4, r2, #16
 800e2de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e2e2:	b292      	uxth	r2, r2
 800e2e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e2e8:	f84e 2b04 	str.w	r2, [lr], #4
 800e2ec:	1421      	asrs	r1, r4, #16
 800e2ee:	e7e0      	b.n	800e2b2 <__mdiff+0xca>
 800e2f0:	3f01      	subs	r7, #1
 800e2f2:	e7ea      	b.n	800e2ca <__mdiff+0xe2>
 800e2f4:	08011507 	.word	0x08011507
 800e2f8:	08011578 	.word	0x08011578

0800e2fc <__d2b>:
 800e2fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e300:	4689      	mov	r9, r1
 800e302:	2101      	movs	r1, #1
 800e304:	ec57 6b10 	vmov	r6, r7, d0
 800e308:	4690      	mov	r8, r2
 800e30a:	f7ff fccf 	bl	800dcac <_Balloc>
 800e30e:	4604      	mov	r4, r0
 800e310:	b930      	cbnz	r0, 800e320 <__d2b+0x24>
 800e312:	4602      	mov	r2, r0
 800e314:	4b25      	ldr	r3, [pc, #148]	; (800e3ac <__d2b+0xb0>)
 800e316:	4826      	ldr	r0, [pc, #152]	; (800e3b0 <__d2b+0xb4>)
 800e318:	f240 310a 	movw	r1, #778	; 0x30a
 800e31c:	f7fe fd7a 	bl	800ce14 <__assert_func>
 800e320:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e328:	bb35      	cbnz	r5, 800e378 <__d2b+0x7c>
 800e32a:	2e00      	cmp	r6, #0
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	d028      	beq.n	800e382 <__d2b+0x86>
 800e330:	4668      	mov	r0, sp
 800e332:	9600      	str	r6, [sp, #0]
 800e334:	f7ff fd82 	bl	800de3c <__lo0bits>
 800e338:	9900      	ldr	r1, [sp, #0]
 800e33a:	b300      	cbz	r0, 800e37e <__d2b+0x82>
 800e33c:	9a01      	ldr	r2, [sp, #4]
 800e33e:	f1c0 0320 	rsb	r3, r0, #32
 800e342:	fa02 f303 	lsl.w	r3, r2, r3
 800e346:	430b      	orrs	r3, r1
 800e348:	40c2      	lsrs	r2, r0
 800e34a:	6163      	str	r3, [r4, #20]
 800e34c:	9201      	str	r2, [sp, #4]
 800e34e:	9b01      	ldr	r3, [sp, #4]
 800e350:	61a3      	str	r3, [r4, #24]
 800e352:	2b00      	cmp	r3, #0
 800e354:	bf14      	ite	ne
 800e356:	2202      	movne	r2, #2
 800e358:	2201      	moveq	r2, #1
 800e35a:	6122      	str	r2, [r4, #16]
 800e35c:	b1d5      	cbz	r5, 800e394 <__d2b+0x98>
 800e35e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e362:	4405      	add	r5, r0
 800e364:	f8c9 5000 	str.w	r5, [r9]
 800e368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e36c:	f8c8 0000 	str.w	r0, [r8]
 800e370:	4620      	mov	r0, r4
 800e372:	b003      	add	sp, #12
 800e374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e37c:	e7d5      	b.n	800e32a <__d2b+0x2e>
 800e37e:	6161      	str	r1, [r4, #20]
 800e380:	e7e5      	b.n	800e34e <__d2b+0x52>
 800e382:	a801      	add	r0, sp, #4
 800e384:	f7ff fd5a 	bl	800de3c <__lo0bits>
 800e388:	9b01      	ldr	r3, [sp, #4]
 800e38a:	6163      	str	r3, [r4, #20]
 800e38c:	2201      	movs	r2, #1
 800e38e:	6122      	str	r2, [r4, #16]
 800e390:	3020      	adds	r0, #32
 800e392:	e7e3      	b.n	800e35c <__d2b+0x60>
 800e394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e39c:	f8c9 0000 	str.w	r0, [r9]
 800e3a0:	6918      	ldr	r0, [r3, #16]
 800e3a2:	f7ff fd2b 	bl	800ddfc <__hi0bits>
 800e3a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3aa:	e7df      	b.n	800e36c <__d2b+0x70>
 800e3ac:	08011507 	.word	0x08011507
 800e3b0:	08011578 	.word	0x08011578

0800e3b4 <_calloc_r>:
 800e3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3b6:	fba1 2402 	umull	r2, r4, r1, r2
 800e3ba:	b94c      	cbnz	r4, 800e3d0 <_calloc_r+0x1c>
 800e3bc:	4611      	mov	r1, r2
 800e3be:	9201      	str	r2, [sp, #4]
 800e3c0:	f7fd fca4 	bl	800bd0c <_malloc_r>
 800e3c4:	9a01      	ldr	r2, [sp, #4]
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	b930      	cbnz	r0, 800e3d8 <_calloc_r+0x24>
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	b003      	add	sp, #12
 800e3ce:	bd30      	pop	{r4, r5, pc}
 800e3d0:	220c      	movs	r2, #12
 800e3d2:	6002      	str	r2, [r0, #0]
 800e3d4:	2500      	movs	r5, #0
 800e3d6:	e7f8      	b.n	800e3ca <_calloc_r+0x16>
 800e3d8:	4621      	mov	r1, r4
 800e3da:	f7fd f9b1 	bl	800b740 <memset>
 800e3de:	e7f4      	b.n	800e3ca <_calloc_r+0x16>

0800e3e0 <__ssputs_r>:
 800e3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e4:	688e      	ldr	r6, [r1, #8]
 800e3e6:	429e      	cmp	r6, r3
 800e3e8:	4682      	mov	sl, r0
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	4690      	mov	r8, r2
 800e3ee:	461f      	mov	r7, r3
 800e3f0:	d838      	bhi.n	800e464 <__ssputs_r+0x84>
 800e3f2:	898a      	ldrh	r2, [r1, #12]
 800e3f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3f8:	d032      	beq.n	800e460 <__ssputs_r+0x80>
 800e3fa:	6825      	ldr	r5, [r4, #0]
 800e3fc:	6909      	ldr	r1, [r1, #16]
 800e3fe:	eba5 0901 	sub.w	r9, r5, r1
 800e402:	6965      	ldr	r5, [r4, #20]
 800e404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e40c:	3301      	adds	r3, #1
 800e40e:	444b      	add	r3, r9
 800e410:	106d      	asrs	r5, r5, #1
 800e412:	429d      	cmp	r5, r3
 800e414:	bf38      	it	cc
 800e416:	461d      	movcc	r5, r3
 800e418:	0553      	lsls	r3, r2, #21
 800e41a:	d531      	bpl.n	800e480 <__ssputs_r+0xa0>
 800e41c:	4629      	mov	r1, r5
 800e41e:	f7fd fc75 	bl	800bd0c <_malloc_r>
 800e422:	4606      	mov	r6, r0
 800e424:	b950      	cbnz	r0, 800e43c <__ssputs_r+0x5c>
 800e426:	230c      	movs	r3, #12
 800e428:	f8ca 3000 	str.w	r3, [sl]
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	f04f 30ff 	mov.w	r0, #4294967295
 800e438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e43c:	6921      	ldr	r1, [r4, #16]
 800e43e:	464a      	mov	r2, r9
 800e440:	f7ff fc1a 	bl	800dc78 <memcpy>
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e44a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e44e:	81a3      	strh	r3, [r4, #12]
 800e450:	6126      	str	r6, [r4, #16]
 800e452:	6165      	str	r5, [r4, #20]
 800e454:	444e      	add	r6, r9
 800e456:	eba5 0509 	sub.w	r5, r5, r9
 800e45a:	6026      	str	r6, [r4, #0]
 800e45c:	60a5      	str	r5, [r4, #8]
 800e45e:	463e      	mov	r6, r7
 800e460:	42be      	cmp	r6, r7
 800e462:	d900      	bls.n	800e466 <__ssputs_r+0x86>
 800e464:	463e      	mov	r6, r7
 800e466:	6820      	ldr	r0, [r4, #0]
 800e468:	4632      	mov	r2, r6
 800e46a:	4641      	mov	r1, r8
 800e46c:	f001 f996 	bl	800f79c <memmove>
 800e470:	68a3      	ldr	r3, [r4, #8]
 800e472:	1b9b      	subs	r3, r3, r6
 800e474:	60a3      	str	r3, [r4, #8]
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	4433      	add	r3, r6
 800e47a:	6023      	str	r3, [r4, #0]
 800e47c:	2000      	movs	r0, #0
 800e47e:	e7db      	b.n	800e438 <__ssputs_r+0x58>
 800e480:	462a      	mov	r2, r5
 800e482:	f001 f9a5 	bl	800f7d0 <_realloc_r>
 800e486:	4606      	mov	r6, r0
 800e488:	2800      	cmp	r0, #0
 800e48a:	d1e1      	bne.n	800e450 <__ssputs_r+0x70>
 800e48c:	6921      	ldr	r1, [r4, #16]
 800e48e:	4650      	mov	r0, sl
 800e490:	f7fd fbd0 	bl	800bc34 <_free_r>
 800e494:	e7c7      	b.n	800e426 <__ssputs_r+0x46>
	...

0800e498 <_svfiprintf_r>:
 800e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49c:	4698      	mov	r8, r3
 800e49e:	898b      	ldrh	r3, [r1, #12]
 800e4a0:	061b      	lsls	r3, r3, #24
 800e4a2:	b09d      	sub	sp, #116	; 0x74
 800e4a4:	4607      	mov	r7, r0
 800e4a6:	460d      	mov	r5, r1
 800e4a8:	4614      	mov	r4, r2
 800e4aa:	d50e      	bpl.n	800e4ca <_svfiprintf_r+0x32>
 800e4ac:	690b      	ldr	r3, [r1, #16]
 800e4ae:	b963      	cbnz	r3, 800e4ca <_svfiprintf_r+0x32>
 800e4b0:	2140      	movs	r1, #64	; 0x40
 800e4b2:	f7fd fc2b 	bl	800bd0c <_malloc_r>
 800e4b6:	6028      	str	r0, [r5, #0]
 800e4b8:	6128      	str	r0, [r5, #16]
 800e4ba:	b920      	cbnz	r0, 800e4c6 <_svfiprintf_r+0x2e>
 800e4bc:	230c      	movs	r3, #12
 800e4be:	603b      	str	r3, [r7, #0]
 800e4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c4:	e0d1      	b.n	800e66a <_svfiprintf_r+0x1d2>
 800e4c6:	2340      	movs	r3, #64	; 0x40
 800e4c8:	616b      	str	r3, [r5, #20]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ce:	2320      	movs	r3, #32
 800e4d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4d8:	2330      	movs	r3, #48	; 0x30
 800e4da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e684 <_svfiprintf_r+0x1ec>
 800e4de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4e2:	f04f 0901 	mov.w	r9, #1
 800e4e6:	4623      	mov	r3, r4
 800e4e8:	469a      	mov	sl, r3
 800e4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ee:	b10a      	cbz	r2, 800e4f4 <_svfiprintf_r+0x5c>
 800e4f0:	2a25      	cmp	r2, #37	; 0x25
 800e4f2:	d1f9      	bne.n	800e4e8 <_svfiprintf_r+0x50>
 800e4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e4f8:	d00b      	beq.n	800e512 <_svfiprintf_r+0x7a>
 800e4fa:	465b      	mov	r3, fp
 800e4fc:	4622      	mov	r2, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	4638      	mov	r0, r7
 800e502:	f7ff ff6d 	bl	800e3e0 <__ssputs_r>
 800e506:	3001      	adds	r0, #1
 800e508:	f000 80aa 	beq.w	800e660 <_svfiprintf_r+0x1c8>
 800e50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e50e:	445a      	add	r2, fp
 800e510:	9209      	str	r2, [sp, #36]	; 0x24
 800e512:	f89a 3000 	ldrb.w	r3, [sl]
 800e516:	2b00      	cmp	r3, #0
 800e518:	f000 80a2 	beq.w	800e660 <_svfiprintf_r+0x1c8>
 800e51c:	2300      	movs	r3, #0
 800e51e:	f04f 32ff 	mov.w	r2, #4294967295
 800e522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e526:	f10a 0a01 	add.w	sl, sl, #1
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	9307      	str	r3, [sp, #28]
 800e52e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e532:	931a      	str	r3, [sp, #104]	; 0x68
 800e534:	4654      	mov	r4, sl
 800e536:	2205      	movs	r2, #5
 800e538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53c:	4851      	ldr	r0, [pc, #324]	; (800e684 <_svfiprintf_r+0x1ec>)
 800e53e:	f7f1 fe67 	bl	8000210 <memchr>
 800e542:	9a04      	ldr	r2, [sp, #16]
 800e544:	b9d8      	cbnz	r0, 800e57e <_svfiprintf_r+0xe6>
 800e546:	06d0      	lsls	r0, r2, #27
 800e548:	bf44      	itt	mi
 800e54a:	2320      	movmi	r3, #32
 800e54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e550:	0711      	lsls	r1, r2, #28
 800e552:	bf44      	itt	mi
 800e554:	232b      	movmi	r3, #43	; 0x2b
 800e556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e55a:	f89a 3000 	ldrb.w	r3, [sl]
 800e55e:	2b2a      	cmp	r3, #42	; 0x2a
 800e560:	d015      	beq.n	800e58e <_svfiprintf_r+0xf6>
 800e562:	9a07      	ldr	r2, [sp, #28]
 800e564:	4654      	mov	r4, sl
 800e566:	2000      	movs	r0, #0
 800e568:	f04f 0c0a 	mov.w	ip, #10
 800e56c:	4621      	mov	r1, r4
 800e56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e572:	3b30      	subs	r3, #48	; 0x30
 800e574:	2b09      	cmp	r3, #9
 800e576:	d94e      	bls.n	800e616 <_svfiprintf_r+0x17e>
 800e578:	b1b0      	cbz	r0, 800e5a8 <_svfiprintf_r+0x110>
 800e57a:	9207      	str	r2, [sp, #28]
 800e57c:	e014      	b.n	800e5a8 <_svfiprintf_r+0x110>
 800e57e:	eba0 0308 	sub.w	r3, r0, r8
 800e582:	fa09 f303 	lsl.w	r3, r9, r3
 800e586:	4313      	orrs	r3, r2
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	46a2      	mov	sl, r4
 800e58c:	e7d2      	b.n	800e534 <_svfiprintf_r+0x9c>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	1d19      	adds	r1, r3, #4
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	9103      	str	r1, [sp, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfbb      	ittet	lt
 800e59a:	425b      	neglt	r3, r3
 800e59c:	f042 0202 	orrlt.w	r2, r2, #2
 800e5a0:	9307      	strge	r3, [sp, #28]
 800e5a2:	9307      	strlt	r3, [sp, #28]
 800e5a4:	bfb8      	it	lt
 800e5a6:	9204      	strlt	r2, [sp, #16]
 800e5a8:	7823      	ldrb	r3, [r4, #0]
 800e5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800e5ac:	d10c      	bne.n	800e5c8 <_svfiprintf_r+0x130>
 800e5ae:	7863      	ldrb	r3, [r4, #1]
 800e5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800e5b2:	d135      	bne.n	800e620 <_svfiprintf_r+0x188>
 800e5b4:	9b03      	ldr	r3, [sp, #12]
 800e5b6:	1d1a      	adds	r2, r3, #4
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	9203      	str	r2, [sp, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	bfb8      	it	lt
 800e5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5c4:	3402      	adds	r4, #2
 800e5c6:	9305      	str	r3, [sp, #20]
 800e5c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e694 <_svfiprintf_r+0x1fc>
 800e5cc:	7821      	ldrb	r1, [r4, #0]
 800e5ce:	2203      	movs	r2, #3
 800e5d0:	4650      	mov	r0, sl
 800e5d2:	f7f1 fe1d 	bl	8000210 <memchr>
 800e5d6:	b140      	cbz	r0, 800e5ea <_svfiprintf_r+0x152>
 800e5d8:	2340      	movs	r3, #64	; 0x40
 800e5da:	eba0 000a 	sub.w	r0, r0, sl
 800e5de:	fa03 f000 	lsl.w	r0, r3, r0
 800e5e2:	9b04      	ldr	r3, [sp, #16]
 800e5e4:	4303      	orrs	r3, r0
 800e5e6:	3401      	adds	r4, #1
 800e5e8:	9304      	str	r3, [sp, #16]
 800e5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ee:	4826      	ldr	r0, [pc, #152]	; (800e688 <_svfiprintf_r+0x1f0>)
 800e5f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5f4:	2206      	movs	r2, #6
 800e5f6:	f7f1 fe0b 	bl	8000210 <memchr>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d038      	beq.n	800e670 <_svfiprintf_r+0x1d8>
 800e5fe:	4b23      	ldr	r3, [pc, #140]	; (800e68c <_svfiprintf_r+0x1f4>)
 800e600:	bb1b      	cbnz	r3, 800e64a <_svfiprintf_r+0x1b2>
 800e602:	9b03      	ldr	r3, [sp, #12]
 800e604:	3307      	adds	r3, #7
 800e606:	f023 0307 	bic.w	r3, r3, #7
 800e60a:	3308      	adds	r3, #8
 800e60c:	9303      	str	r3, [sp, #12]
 800e60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e610:	4433      	add	r3, r6
 800e612:	9309      	str	r3, [sp, #36]	; 0x24
 800e614:	e767      	b.n	800e4e6 <_svfiprintf_r+0x4e>
 800e616:	fb0c 3202 	mla	r2, ip, r2, r3
 800e61a:	460c      	mov	r4, r1
 800e61c:	2001      	movs	r0, #1
 800e61e:	e7a5      	b.n	800e56c <_svfiprintf_r+0xd4>
 800e620:	2300      	movs	r3, #0
 800e622:	3401      	adds	r4, #1
 800e624:	9305      	str	r3, [sp, #20]
 800e626:	4619      	mov	r1, r3
 800e628:	f04f 0c0a 	mov.w	ip, #10
 800e62c:	4620      	mov	r0, r4
 800e62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e632:	3a30      	subs	r2, #48	; 0x30
 800e634:	2a09      	cmp	r2, #9
 800e636:	d903      	bls.n	800e640 <_svfiprintf_r+0x1a8>
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d0c5      	beq.n	800e5c8 <_svfiprintf_r+0x130>
 800e63c:	9105      	str	r1, [sp, #20]
 800e63e:	e7c3      	b.n	800e5c8 <_svfiprintf_r+0x130>
 800e640:	fb0c 2101 	mla	r1, ip, r1, r2
 800e644:	4604      	mov	r4, r0
 800e646:	2301      	movs	r3, #1
 800e648:	e7f0      	b.n	800e62c <_svfiprintf_r+0x194>
 800e64a:	ab03      	add	r3, sp, #12
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	462a      	mov	r2, r5
 800e650:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <_svfiprintf_r+0x1f8>)
 800e652:	a904      	add	r1, sp, #16
 800e654:	4638      	mov	r0, r7
 800e656:	f7fd fc6d 	bl	800bf34 <_printf_float>
 800e65a:	1c42      	adds	r2, r0, #1
 800e65c:	4606      	mov	r6, r0
 800e65e:	d1d6      	bne.n	800e60e <_svfiprintf_r+0x176>
 800e660:	89ab      	ldrh	r3, [r5, #12]
 800e662:	065b      	lsls	r3, r3, #25
 800e664:	f53f af2c 	bmi.w	800e4c0 <_svfiprintf_r+0x28>
 800e668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e66a:	b01d      	add	sp, #116	; 0x74
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	ab03      	add	r3, sp, #12
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	462a      	mov	r2, r5
 800e676:	4b06      	ldr	r3, [pc, #24]	; (800e690 <_svfiprintf_r+0x1f8>)
 800e678:	a904      	add	r1, sp, #16
 800e67a:	4638      	mov	r0, r7
 800e67c:	f7fd fefe 	bl	800c47c <_printf_i>
 800e680:	e7eb      	b.n	800e65a <_svfiprintf_r+0x1c2>
 800e682:	bf00      	nop
 800e684:	080116d4 	.word	0x080116d4
 800e688:	080116de 	.word	0x080116de
 800e68c:	0800bf35 	.word	0x0800bf35
 800e690:	0800e3e1 	.word	0x0800e3e1
 800e694:	080116da 	.word	0x080116da

0800e698 <_sungetc_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	1c4b      	adds	r3, r1, #1
 800e69c:	4614      	mov	r4, r2
 800e69e:	d103      	bne.n	800e6a8 <_sungetc_r+0x10>
 800e6a0:	f04f 35ff 	mov.w	r5, #4294967295
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	8993      	ldrh	r3, [r2, #12]
 800e6aa:	f023 0320 	bic.w	r3, r3, #32
 800e6ae:	8193      	strh	r3, [r2, #12]
 800e6b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6b2:	6852      	ldr	r2, [r2, #4]
 800e6b4:	b2cd      	uxtb	r5, r1
 800e6b6:	b18b      	cbz	r3, 800e6dc <_sungetc_r+0x44>
 800e6b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	dd08      	ble.n	800e6d0 <_sungetc_r+0x38>
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	1e5a      	subs	r2, r3, #1
 800e6c2:	6022      	str	r2, [r4, #0]
 800e6c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e6c8:	6863      	ldr	r3, [r4, #4]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	6063      	str	r3, [r4, #4]
 800e6ce:	e7e9      	b.n	800e6a4 <_sungetc_r+0xc>
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	f000 fd27 	bl	800f124 <__submore>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d0f1      	beq.n	800e6be <_sungetc_r+0x26>
 800e6da:	e7e1      	b.n	800e6a0 <_sungetc_r+0x8>
 800e6dc:	6921      	ldr	r1, [r4, #16]
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	b151      	cbz	r1, 800e6f8 <_sungetc_r+0x60>
 800e6e2:	4299      	cmp	r1, r3
 800e6e4:	d208      	bcs.n	800e6f8 <_sungetc_r+0x60>
 800e6e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e6ea:	42a9      	cmp	r1, r5
 800e6ec:	d104      	bne.n	800e6f8 <_sungetc_r+0x60>
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	3201      	adds	r2, #1
 800e6f2:	6023      	str	r3, [r4, #0]
 800e6f4:	6062      	str	r2, [r4, #4]
 800e6f6:	e7d5      	b.n	800e6a4 <_sungetc_r+0xc>
 800e6f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e700:	6363      	str	r3, [r4, #52]	; 0x34
 800e702:	2303      	movs	r3, #3
 800e704:	63a3      	str	r3, [r4, #56]	; 0x38
 800e706:	4623      	mov	r3, r4
 800e708:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	2301      	movs	r3, #1
 800e710:	e7dc      	b.n	800e6cc <_sungetc_r+0x34>

0800e712 <__ssrefill_r>:
 800e712:	b510      	push	{r4, lr}
 800e714:	460c      	mov	r4, r1
 800e716:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e718:	b169      	cbz	r1, 800e736 <__ssrefill_r+0x24>
 800e71a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e71e:	4299      	cmp	r1, r3
 800e720:	d001      	beq.n	800e726 <__ssrefill_r+0x14>
 800e722:	f7fd fa87 	bl	800bc34 <_free_r>
 800e726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e728:	6063      	str	r3, [r4, #4]
 800e72a:	2000      	movs	r0, #0
 800e72c:	6360      	str	r0, [r4, #52]	; 0x34
 800e72e:	b113      	cbz	r3, 800e736 <__ssrefill_r+0x24>
 800e730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd10      	pop	{r4, pc}
 800e736:	6923      	ldr	r3, [r4, #16]
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	2300      	movs	r3, #0
 800e73c:	6063      	str	r3, [r4, #4]
 800e73e:	89a3      	ldrh	r3, [r4, #12]
 800e740:	f043 0320 	orr.w	r3, r3, #32
 800e744:	81a3      	strh	r3, [r4, #12]
 800e746:	f04f 30ff 	mov.w	r0, #4294967295
 800e74a:	e7f3      	b.n	800e734 <__ssrefill_r+0x22>

0800e74c <__ssvfiscanf_r>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	460c      	mov	r4, r1
 800e752:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e756:	2100      	movs	r1, #0
 800e758:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e75c:	49a6      	ldr	r1, [pc, #664]	; (800e9f8 <__ssvfiscanf_r+0x2ac>)
 800e75e:	91a0      	str	r1, [sp, #640]	; 0x280
 800e760:	f10d 0804 	add.w	r8, sp, #4
 800e764:	49a5      	ldr	r1, [pc, #660]	; (800e9fc <__ssvfiscanf_r+0x2b0>)
 800e766:	4fa6      	ldr	r7, [pc, #664]	; (800ea00 <__ssvfiscanf_r+0x2b4>)
 800e768:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ea04 <__ssvfiscanf_r+0x2b8>
 800e76c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e770:	4606      	mov	r6, r0
 800e772:	91a1      	str	r1, [sp, #644]	; 0x284
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	7813      	ldrb	r3, [r2, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f000 815a 	beq.w	800ea32 <__ssvfiscanf_r+0x2e6>
 800e77e:	5dd9      	ldrb	r1, [r3, r7]
 800e780:	f011 0108 	ands.w	r1, r1, #8
 800e784:	f102 0501 	add.w	r5, r2, #1
 800e788:	d019      	beq.n	800e7be <__ssvfiscanf_r+0x72>
 800e78a:	6863      	ldr	r3, [r4, #4]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	dd0f      	ble.n	800e7b0 <__ssvfiscanf_r+0x64>
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	781a      	ldrb	r2, [r3, #0]
 800e794:	5cba      	ldrb	r2, [r7, r2]
 800e796:	0712      	lsls	r2, r2, #28
 800e798:	d401      	bmi.n	800e79e <__ssvfiscanf_r+0x52>
 800e79a:	462a      	mov	r2, r5
 800e79c:	e7eb      	b.n	800e776 <__ssvfiscanf_r+0x2a>
 800e79e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7a0:	3201      	adds	r2, #1
 800e7a2:	9245      	str	r2, [sp, #276]	; 0x114
 800e7a4:	6862      	ldr	r2, [r4, #4]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	3a01      	subs	r2, #1
 800e7aa:	6062      	str	r2, [r4, #4]
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	e7ec      	b.n	800e78a <__ssvfiscanf_r+0x3e>
 800e7b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	4798      	blx	r3
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d0e9      	beq.n	800e790 <__ssvfiscanf_r+0x44>
 800e7bc:	e7ed      	b.n	800e79a <__ssvfiscanf_r+0x4e>
 800e7be:	2b25      	cmp	r3, #37	; 0x25
 800e7c0:	d012      	beq.n	800e7e8 <__ssvfiscanf_r+0x9c>
 800e7c2:	469a      	mov	sl, r3
 800e7c4:	6863      	ldr	r3, [r4, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f340 8091 	ble.w	800e8ee <__ssvfiscanf_r+0x1a2>
 800e7cc:	6822      	ldr	r2, [r4, #0]
 800e7ce:	7813      	ldrb	r3, [r2, #0]
 800e7d0:	4553      	cmp	r3, sl
 800e7d2:	f040 812e 	bne.w	800ea32 <__ssvfiscanf_r+0x2e6>
 800e7d6:	6863      	ldr	r3, [r4, #4]
 800e7d8:	3b01      	subs	r3, #1
 800e7da:	6063      	str	r3, [r4, #4]
 800e7dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e7de:	3201      	adds	r2, #1
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	6022      	str	r2, [r4, #0]
 800e7e4:	9345      	str	r3, [sp, #276]	; 0x114
 800e7e6:	e7d8      	b.n	800e79a <__ssvfiscanf_r+0x4e>
 800e7e8:	9141      	str	r1, [sp, #260]	; 0x104
 800e7ea:	9143      	str	r1, [sp, #268]	; 0x10c
 800e7ec:	7853      	ldrb	r3, [r2, #1]
 800e7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f0:	bf02      	ittt	eq
 800e7f2:	2310      	moveq	r3, #16
 800e7f4:	1c95      	addeq	r5, r2, #2
 800e7f6:	9341      	streq	r3, [sp, #260]	; 0x104
 800e7f8:	220a      	movs	r2, #10
 800e7fa:	46aa      	mov	sl, r5
 800e7fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e800:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e804:	2b09      	cmp	r3, #9
 800e806:	d91d      	bls.n	800e844 <__ssvfiscanf_r+0xf8>
 800e808:	487e      	ldr	r0, [pc, #504]	; (800ea04 <__ssvfiscanf_r+0x2b8>)
 800e80a:	2203      	movs	r2, #3
 800e80c:	f7f1 fd00 	bl	8000210 <memchr>
 800e810:	b140      	cbz	r0, 800e824 <__ssvfiscanf_r+0xd8>
 800e812:	2301      	movs	r3, #1
 800e814:	eba0 0009 	sub.w	r0, r0, r9
 800e818:	fa03 f000 	lsl.w	r0, r3, r0
 800e81c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e81e:	4318      	orrs	r0, r3
 800e820:	9041      	str	r0, [sp, #260]	; 0x104
 800e822:	4655      	mov	r5, sl
 800e824:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e828:	2b78      	cmp	r3, #120	; 0x78
 800e82a:	d806      	bhi.n	800e83a <__ssvfiscanf_r+0xee>
 800e82c:	2b57      	cmp	r3, #87	; 0x57
 800e82e:	d810      	bhi.n	800e852 <__ssvfiscanf_r+0x106>
 800e830:	2b25      	cmp	r3, #37	; 0x25
 800e832:	d0c6      	beq.n	800e7c2 <__ssvfiscanf_r+0x76>
 800e834:	d856      	bhi.n	800e8e4 <__ssvfiscanf_r+0x198>
 800e836:	2b00      	cmp	r3, #0
 800e838:	d064      	beq.n	800e904 <__ssvfiscanf_r+0x1b8>
 800e83a:	2303      	movs	r3, #3
 800e83c:	9347      	str	r3, [sp, #284]	; 0x11c
 800e83e:	230a      	movs	r3, #10
 800e840:	9342      	str	r3, [sp, #264]	; 0x108
 800e842:	e071      	b.n	800e928 <__ssvfiscanf_r+0x1dc>
 800e844:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e846:	fb02 1103 	mla	r1, r2, r3, r1
 800e84a:	3930      	subs	r1, #48	; 0x30
 800e84c:	9143      	str	r1, [sp, #268]	; 0x10c
 800e84e:	4655      	mov	r5, sl
 800e850:	e7d3      	b.n	800e7fa <__ssvfiscanf_r+0xae>
 800e852:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e856:	2a20      	cmp	r2, #32
 800e858:	d8ef      	bhi.n	800e83a <__ssvfiscanf_r+0xee>
 800e85a:	a101      	add	r1, pc, #4	; (adr r1, 800e860 <__ssvfiscanf_r+0x114>)
 800e85c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e860:	0800e913 	.word	0x0800e913
 800e864:	0800e83b 	.word	0x0800e83b
 800e868:	0800e83b 	.word	0x0800e83b
 800e86c:	0800e971 	.word	0x0800e971
 800e870:	0800e83b 	.word	0x0800e83b
 800e874:	0800e83b 	.word	0x0800e83b
 800e878:	0800e83b 	.word	0x0800e83b
 800e87c:	0800e83b 	.word	0x0800e83b
 800e880:	0800e83b 	.word	0x0800e83b
 800e884:	0800e83b 	.word	0x0800e83b
 800e888:	0800e83b 	.word	0x0800e83b
 800e88c:	0800e987 	.word	0x0800e987
 800e890:	0800e95d 	.word	0x0800e95d
 800e894:	0800e8eb 	.word	0x0800e8eb
 800e898:	0800e8eb 	.word	0x0800e8eb
 800e89c:	0800e8eb 	.word	0x0800e8eb
 800e8a0:	0800e83b 	.word	0x0800e83b
 800e8a4:	0800e961 	.word	0x0800e961
 800e8a8:	0800e83b 	.word	0x0800e83b
 800e8ac:	0800e83b 	.word	0x0800e83b
 800e8b0:	0800e83b 	.word	0x0800e83b
 800e8b4:	0800e83b 	.word	0x0800e83b
 800e8b8:	0800e997 	.word	0x0800e997
 800e8bc:	0800e969 	.word	0x0800e969
 800e8c0:	0800e90b 	.word	0x0800e90b
 800e8c4:	0800e83b 	.word	0x0800e83b
 800e8c8:	0800e83b 	.word	0x0800e83b
 800e8cc:	0800e993 	.word	0x0800e993
 800e8d0:	0800e83b 	.word	0x0800e83b
 800e8d4:	0800e95d 	.word	0x0800e95d
 800e8d8:	0800e83b 	.word	0x0800e83b
 800e8dc:	0800e83b 	.word	0x0800e83b
 800e8e0:	0800e913 	.word	0x0800e913
 800e8e4:	3b45      	subs	r3, #69	; 0x45
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d8a7      	bhi.n	800e83a <__ssvfiscanf_r+0xee>
 800e8ea:	2305      	movs	r3, #5
 800e8ec:	e01b      	b.n	800e926 <__ssvfiscanf_r+0x1da>
 800e8ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	4798      	blx	r3
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f43f af68 	beq.w	800e7cc <__ssvfiscanf_r+0x80>
 800e8fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f040 808d 	bne.w	800ea1e <__ssvfiscanf_r+0x2d2>
 800e904:	f04f 30ff 	mov.w	r0, #4294967295
 800e908:	e08f      	b.n	800ea2a <__ssvfiscanf_r+0x2de>
 800e90a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e90c:	f042 0220 	orr.w	r2, r2, #32
 800e910:	9241      	str	r2, [sp, #260]	; 0x104
 800e912:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e918:	9241      	str	r2, [sp, #260]	; 0x104
 800e91a:	2210      	movs	r2, #16
 800e91c:	2b6f      	cmp	r3, #111	; 0x6f
 800e91e:	9242      	str	r2, [sp, #264]	; 0x108
 800e920:	bf34      	ite	cc
 800e922:	2303      	movcc	r3, #3
 800e924:	2304      	movcs	r3, #4
 800e926:	9347      	str	r3, [sp, #284]	; 0x11c
 800e928:	6863      	ldr	r3, [r4, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	dd42      	ble.n	800e9b4 <__ssvfiscanf_r+0x268>
 800e92e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e930:	0659      	lsls	r1, r3, #25
 800e932:	d404      	bmi.n	800e93e <__ssvfiscanf_r+0x1f2>
 800e934:	6823      	ldr	r3, [r4, #0]
 800e936:	781a      	ldrb	r2, [r3, #0]
 800e938:	5cba      	ldrb	r2, [r7, r2]
 800e93a:	0712      	lsls	r2, r2, #28
 800e93c:	d441      	bmi.n	800e9c2 <__ssvfiscanf_r+0x276>
 800e93e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e940:	2b02      	cmp	r3, #2
 800e942:	dc50      	bgt.n	800e9e6 <__ssvfiscanf_r+0x29a>
 800e944:	466b      	mov	r3, sp
 800e946:	4622      	mov	r2, r4
 800e948:	a941      	add	r1, sp, #260	; 0x104
 800e94a:	4630      	mov	r0, r6
 800e94c:	f000 f9d0 	bl	800ecf0 <_scanf_chars>
 800e950:	2801      	cmp	r0, #1
 800e952:	d06e      	beq.n	800ea32 <__ssvfiscanf_r+0x2e6>
 800e954:	2802      	cmp	r0, #2
 800e956:	f47f af20 	bne.w	800e79a <__ssvfiscanf_r+0x4e>
 800e95a:	e7cf      	b.n	800e8fc <__ssvfiscanf_r+0x1b0>
 800e95c:	220a      	movs	r2, #10
 800e95e:	e7dd      	b.n	800e91c <__ssvfiscanf_r+0x1d0>
 800e960:	2300      	movs	r3, #0
 800e962:	9342      	str	r3, [sp, #264]	; 0x108
 800e964:	2303      	movs	r3, #3
 800e966:	e7de      	b.n	800e926 <__ssvfiscanf_r+0x1da>
 800e968:	2308      	movs	r3, #8
 800e96a:	9342      	str	r3, [sp, #264]	; 0x108
 800e96c:	2304      	movs	r3, #4
 800e96e:	e7da      	b.n	800e926 <__ssvfiscanf_r+0x1da>
 800e970:	4629      	mov	r1, r5
 800e972:	4640      	mov	r0, r8
 800e974:	f000 fb20 	bl	800efb8 <__sccl>
 800e978:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e97e:	9341      	str	r3, [sp, #260]	; 0x104
 800e980:	4605      	mov	r5, r0
 800e982:	2301      	movs	r3, #1
 800e984:	e7cf      	b.n	800e926 <__ssvfiscanf_r+0x1da>
 800e986:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e98c:	9341      	str	r3, [sp, #260]	; 0x104
 800e98e:	2300      	movs	r3, #0
 800e990:	e7c9      	b.n	800e926 <__ssvfiscanf_r+0x1da>
 800e992:	2302      	movs	r3, #2
 800e994:	e7c7      	b.n	800e926 <__ssvfiscanf_r+0x1da>
 800e996:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e998:	06c3      	lsls	r3, r0, #27
 800e99a:	f53f aefe 	bmi.w	800e79a <__ssvfiscanf_r+0x4e>
 800e99e:	9b00      	ldr	r3, [sp, #0]
 800e9a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e9a2:	1d19      	adds	r1, r3, #4
 800e9a4:	9100      	str	r1, [sp, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f010 0f01 	tst.w	r0, #1
 800e9ac:	bf14      	ite	ne
 800e9ae:	801a      	strhne	r2, [r3, #0]
 800e9b0:	601a      	streq	r2, [r3, #0]
 800e9b2:	e6f2      	b.n	800e79a <__ssvfiscanf_r+0x4e>
 800e9b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4798      	blx	r3
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d0b6      	beq.n	800e92e <__ssvfiscanf_r+0x1e2>
 800e9c0:	e79c      	b.n	800e8fc <__ssvfiscanf_r+0x1b0>
 800e9c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e9c4:	3201      	adds	r2, #1
 800e9c6:	9245      	str	r2, [sp, #276]	; 0x114
 800e9c8:	6862      	ldr	r2, [r4, #4]
 800e9ca:	3a01      	subs	r2, #1
 800e9cc:	2a00      	cmp	r2, #0
 800e9ce:	6062      	str	r2, [r4, #4]
 800e9d0:	dd02      	ble.n	800e9d8 <__ssvfiscanf_r+0x28c>
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	e7ad      	b.n	800e934 <__ssvfiscanf_r+0x1e8>
 800e9d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e9da:	4621      	mov	r1, r4
 800e9dc:	4630      	mov	r0, r6
 800e9de:	4798      	blx	r3
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	d0a7      	beq.n	800e934 <__ssvfiscanf_r+0x1e8>
 800e9e4:	e78a      	b.n	800e8fc <__ssvfiscanf_r+0x1b0>
 800e9e6:	2b04      	cmp	r3, #4
 800e9e8:	dc0e      	bgt.n	800ea08 <__ssvfiscanf_r+0x2bc>
 800e9ea:	466b      	mov	r3, sp
 800e9ec:	4622      	mov	r2, r4
 800e9ee:	a941      	add	r1, sp, #260	; 0x104
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	f000 f9d7 	bl	800eda4 <_scanf_i>
 800e9f6:	e7ab      	b.n	800e950 <__ssvfiscanf_r+0x204>
 800e9f8:	0800e699 	.word	0x0800e699
 800e9fc:	0800e713 	.word	0x0800e713
 800ea00:	0801139f 	.word	0x0801139f
 800ea04:	080116da 	.word	0x080116da
 800ea08:	4b0b      	ldr	r3, [pc, #44]	; (800ea38 <__ssvfiscanf_r+0x2ec>)
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f43f aec5 	beq.w	800e79a <__ssvfiscanf_r+0x4e>
 800ea10:	466b      	mov	r3, sp
 800ea12:	4622      	mov	r2, r4
 800ea14:	a941      	add	r1, sp, #260	; 0x104
 800ea16:	4630      	mov	r0, r6
 800ea18:	f3af 8000 	nop.w
 800ea1c:	e798      	b.n	800e950 <__ssvfiscanf_r+0x204>
 800ea1e:	89a3      	ldrh	r3, [r4, #12]
 800ea20:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ea24:	bf18      	it	ne
 800ea26:	f04f 30ff 	movne.w	r0, #4294967295
 800ea2a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ea2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea32:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ea34:	e7f9      	b.n	800ea2a <__ssvfiscanf_r+0x2de>
 800ea36:	bf00      	nop
 800ea38:	00000000 	.word	0x00000000

0800ea3c <__sfputc_r>:
 800ea3c:	6893      	ldr	r3, [r2, #8]
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	b410      	push	{r4}
 800ea44:	6093      	str	r3, [r2, #8]
 800ea46:	da08      	bge.n	800ea5a <__sfputc_r+0x1e>
 800ea48:	6994      	ldr	r4, [r2, #24]
 800ea4a:	42a3      	cmp	r3, r4
 800ea4c:	db01      	blt.n	800ea52 <__sfputc_r+0x16>
 800ea4e:	290a      	cmp	r1, #10
 800ea50:	d103      	bne.n	800ea5a <__sfputc_r+0x1e>
 800ea52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea56:	f000 bb9f 	b.w	800f198 <__swbuf_r>
 800ea5a:	6813      	ldr	r3, [r2, #0]
 800ea5c:	1c58      	adds	r0, r3, #1
 800ea5e:	6010      	str	r0, [r2, #0]
 800ea60:	7019      	strb	r1, [r3, #0]
 800ea62:	4608      	mov	r0, r1
 800ea64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <__sfputs_r>:
 800ea6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	460f      	mov	r7, r1
 800ea70:	4614      	mov	r4, r2
 800ea72:	18d5      	adds	r5, r2, r3
 800ea74:	42ac      	cmp	r4, r5
 800ea76:	d101      	bne.n	800ea7c <__sfputs_r+0x12>
 800ea78:	2000      	movs	r0, #0
 800ea7a:	e007      	b.n	800ea8c <__sfputs_r+0x22>
 800ea7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea80:	463a      	mov	r2, r7
 800ea82:	4630      	mov	r0, r6
 800ea84:	f7ff ffda 	bl	800ea3c <__sfputc_r>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	d1f3      	bne.n	800ea74 <__sfputs_r+0xa>
 800ea8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea90 <_vfiprintf_r>:
 800ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	460d      	mov	r5, r1
 800ea96:	b09d      	sub	sp, #116	; 0x74
 800ea98:	4614      	mov	r4, r2
 800ea9a:	4698      	mov	r8, r3
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	b118      	cbz	r0, 800eaa8 <_vfiprintf_r+0x18>
 800eaa0:	6983      	ldr	r3, [r0, #24]
 800eaa2:	b90b      	cbnz	r3, 800eaa8 <_vfiprintf_r+0x18>
 800eaa4:	f000 fd66 	bl	800f574 <__sinit>
 800eaa8:	4b89      	ldr	r3, [pc, #548]	; (800ecd0 <_vfiprintf_r+0x240>)
 800eaaa:	429d      	cmp	r5, r3
 800eaac:	d11b      	bne.n	800eae6 <_vfiprintf_r+0x56>
 800eaae:	6875      	ldr	r5, [r6, #4]
 800eab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eab2:	07d9      	lsls	r1, r3, #31
 800eab4:	d405      	bmi.n	800eac2 <_vfiprintf_r+0x32>
 800eab6:	89ab      	ldrh	r3, [r5, #12]
 800eab8:	059a      	lsls	r2, r3, #22
 800eaba:	d402      	bmi.n	800eac2 <_vfiprintf_r+0x32>
 800eabc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eabe:	f7ff f8c5 	bl	800dc4c <__retarget_lock_acquire_recursive>
 800eac2:	89ab      	ldrh	r3, [r5, #12]
 800eac4:	071b      	lsls	r3, r3, #28
 800eac6:	d501      	bpl.n	800eacc <_vfiprintf_r+0x3c>
 800eac8:	692b      	ldr	r3, [r5, #16]
 800eaca:	b9eb      	cbnz	r3, 800eb08 <_vfiprintf_r+0x78>
 800eacc:	4629      	mov	r1, r5
 800eace:	4630      	mov	r0, r6
 800ead0:	f000 fbb4 	bl	800f23c <__swsetup_r>
 800ead4:	b1c0      	cbz	r0, 800eb08 <_vfiprintf_r+0x78>
 800ead6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ead8:	07dc      	lsls	r4, r3, #31
 800eada:	d50e      	bpl.n	800eafa <_vfiprintf_r+0x6a>
 800eadc:	f04f 30ff 	mov.w	r0, #4294967295
 800eae0:	b01d      	add	sp, #116	; 0x74
 800eae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae6:	4b7b      	ldr	r3, [pc, #492]	; (800ecd4 <_vfiprintf_r+0x244>)
 800eae8:	429d      	cmp	r5, r3
 800eaea:	d101      	bne.n	800eaf0 <_vfiprintf_r+0x60>
 800eaec:	68b5      	ldr	r5, [r6, #8]
 800eaee:	e7df      	b.n	800eab0 <_vfiprintf_r+0x20>
 800eaf0:	4b79      	ldr	r3, [pc, #484]	; (800ecd8 <_vfiprintf_r+0x248>)
 800eaf2:	429d      	cmp	r5, r3
 800eaf4:	bf08      	it	eq
 800eaf6:	68f5      	ldreq	r5, [r6, #12]
 800eaf8:	e7da      	b.n	800eab0 <_vfiprintf_r+0x20>
 800eafa:	89ab      	ldrh	r3, [r5, #12]
 800eafc:	0598      	lsls	r0, r3, #22
 800eafe:	d4ed      	bmi.n	800eadc <_vfiprintf_r+0x4c>
 800eb00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb02:	f7ff f8a5 	bl	800dc50 <__retarget_lock_release_recursive>
 800eb06:	e7e9      	b.n	800eadc <_vfiprintf_r+0x4c>
 800eb08:	2300      	movs	r3, #0
 800eb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb0c:	2320      	movs	r3, #32
 800eb0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb12:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb16:	2330      	movs	r3, #48	; 0x30
 800eb18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ecdc <_vfiprintf_r+0x24c>
 800eb1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb20:	f04f 0901 	mov.w	r9, #1
 800eb24:	4623      	mov	r3, r4
 800eb26:	469a      	mov	sl, r3
 800eb28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb2c:	b10a      	cbz	r2, 800eb32 <_vfiprintf_r+0xa2>
 800eb2e:	2a25      	cmp	r2, #37	; 0x25
 800eb30:	d1f9      	bne.n	800eb26 <_vfiprintf_r+0x96>
 800eb32:	ebba 0b04 	subs.w	fp, sl, r4
 800eb36:	d00b      	beq.n	800eb50 <_vfiprintf_r+0xc0>
 800eb38:	465b      	mov	r3, fp
 800eb3a:	4622      	mov	r2, r4
 800eb3c:	4629      	mov	r1, r5
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f7ff ff93 	bl	800ea6a <__sfputs_r>
 800eb44:	3001      	adds	r0, #1
 800eb46:	f000 80aa 	beq.w	800ec9e <_vfiprintf_r+0x20e>
 800eb4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb4c:	445a      	add	r2, fp
 800eb4e:	9209      	str	r2, [sp, #36]	; 0x24
 800eb50:	f89a 3000 	ldrb.w	r3, [sl]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f000 80a2 	beq.w	800ec9e <_vfiprintf_r+0x20e>
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb64:	f10a 0a01 	add.w	sl, sl, #1
 800eb68:	9304      	str	r3, [sp, #16]
 800eb6a:	9307      	str	r3, [sp, #28]
 800eb6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb70:	931a      	str	r3, [sp, #104]	; 0x68
 800eb72:	4654      	mov	r4, sl
 800eb74:	2205      	movs	r2, #5
 800eb76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb7a:	4858      	ldr	r0, [pc, #352]	; (800ecdc <_vfiprintf_r+0x24c>)
 800eb7c:	f7f1 fb48 	bl	8000210 <memchr>
 800eb80:	9a04      	ldr	r2, [sp, #16]
 800eb82:	b9d8      	cbnz	r0, 800ebbc <_vfiprintf_r+0x12c>
 800eb84:	06d1      	lsls	r1, r2, #27
 800eb86:	bf44      	itt	mi
 800eb88:	2320      	movmi	r3, #32
 800eb8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb8e:	0713      	lsls	r3, r2, #28
 800eb90:	bf44      	itt	mi
 800eb92:	232b      	movmi	r3, #43	; 0x2b
 800eb94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb98:	f89a 3000 	ldrb.w	r3, [sl]
 800eb9c:	2b2a      	cmp	r3, #42	; 0x2a
 800eb9e:	d015      	beq.n	800ebcc <_vfiprintf_r+0x13c>
 800eba0:	9a07      	ldr	r2, [sp, #28]
 800eba2:	4654      	mov	r4, sl
 800eba4:	2000      	movs	r0, #0
 800eba6:	f04f 0c0a 	mov.w	ip, #10
 800ebaa:	4621      	mov	r1, r4
 800ebac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebb0:	3b30      	subs	r3, #48	; 0x30
 800ebb2:	2b09      	cmp	r3, #9
 800ebb4:	d94e      	bls.n	800ec54 <_vfiprintf_r+0x1c4>
 800ebb6:	b1b0      	cbz	r0, 800ebe6 <_vfiprintf_r+0x156>
 800ebb8:	9207      	str	r2, [sp, #28]
 800ebba:	e014      	b.n	800ebe6 <_vfiprintf_r+0x156>
 800ebbc:	eba0 0308 	sub.w	r3, r0, r8
 800ebc0:	fa09 f303 	lsl.w	r3, r9, r3
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	9304      	str	r3, [sp, #16]
 800ebc8:	46a2      	mov	sl, r4
 800ebca:	e7d2      	b.n	800eb72 <_vfiprintf_r+0xe2>
 800ebcc:	9b03      	ldr	r3, [sp, #12]
 800ebce:	1d19      	adds	r1, r3, #4
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	9103      	str	r1, [sp, #12]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	bfbb      	ittet	lt
 800ebd8:	425b      	neglt	r3, r3
 800ebda:	f042 0202 	orrlt.w	r2, r2, #2
 800ebde:	9307      	strge	r3, [sp, #28]
 800ebe0:	9307      	strlt	r3, [sp, #28]
 800ebe2:	bfb8      	it	lt
 800ebe4:	9204      	strlt	r2, [sp, #16]
 800ebe6:	7823      	ldrb	r3, [r4, #0]
 800ebe8:	2b2e      	cmp	r3, #46	; 0x2e
 800ebea:	d10c      	bne.n	800ec06 <_vfiprintf_r+0x176>
 800ebec:	7863      	ldrb	r3, [r4, #1]
 800ebee:	2b2a      	cmp	r3, #42	; 0x2a
 800ebf0:	d135      	bne.n	800ec5e <_vfiprintf_r+0x1ce>
 800ebf2:	9b03      	ldr	r3, [sp, #12]
 800ebf4:	1d1a      	adds	r2, r3, #4
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	9203      	str	r2, [sp, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	bfb8      	it	lt
 800ebfe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec02:	3402      	adds	r4, #2
 800ec04:	9305      	str	r3, [sp, #20]
 800ec06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ecec <_vfiprintf_r+0x25c>
 800ec0a:	7821      	ldrb	r1, [r4, #0]
 800ec0c:	2203      	movs	r2, #3
 800ec0e:	4650      	mov	r0, sl
 800ec10:	f7f1 fafe 	bl	8000210 <memchr>
 800ec14:	b140      	cbz	r0, 800ec28 <_vfiprintf_r+0x198>
 800ec16:	2340      	movs	r3, #64	; 0x40
 800ec18:	eba0 000a 	sub.w	r0, r0, sl
 800ec1c:	fa03 f000 	lsl.w	r0, r3, r0
 800ec20:	9b04      	ldr	r3, [sp, #16]
 800ec22:	4303      	orrs	r3, r0
 800ec24:	3401      	adds	r4, #1
 800ec26:	9304      	str	r3, [sp, #16]
 800ec28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec2c:	482c      	ldr	r0, [pc, #176]	; (800ece0 <_vfiprintf_r+0x250>)
 800ec2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec32:	2206      	movs	r2, #6
 800ec34:	f7f1 faec 	bl	8000210 <memchr>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d03f      	beq.n	800ecbc <_vfiprintf_r+0x22c>
 800ec3c:	4b29      	ldr	r3, [pc, #164]	; (800ece4 <_vfiprintf_r+0x254>)
 800ec3e:	bb1b      	cbnz	r3, 800ec88 <_vfiprintf_r+0x1f8>
 800ec40:	9b03      	ldr	r3, [sp, #12]
 800ec42:	3307      	adds	r3, #7
 800ec44:	f023 0307 	bic.w	r3, r3, #7
 800ec48:	3308      	adds	r3, #8
 800ec4a:	9303      	str	r3, [sp, #12]
 800ec4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec4e:	443b      	add	r3, r7
 800ec50:	9309      	str	r3, [sp, #36]	; 0x24
 800ec52:	e767      	b.n	800eb24 <_vfiprintf_r+0x94>
 800ec54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec58:	460c      	mov	r4, r1
 800ec5a:	2001      	movs	r0, #1
 800ec5c:	e7a5      	b.n	800ebaa <_vfiprintf_r+0x11a>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	3401      	adds	r4, #1
 800ec62:	9305      	str	r3, [sp, #20]
 800ec64:	4619      	mov	r1, r3
 800ec66:	f04f 0c0a 	mov.w	ip, #10
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec70:	3a30      	subs	r2, #48	; 0x30
 800ec72:	2a09      	cmp	r2, #9
 800ec74:	d903      	bls.n	800ec7e <_vfiprintf_r+0x1ee>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d0c5      	beq.n	800ec06 <_vfiprintf_r+0x176>
 800ec7a:	9105      	str	r1, [sp, #20]
 800ec7c:	e7c3      	b.n	800ec06 <_vfiprintf_r+0x176>
 800ec7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec82:	4604      	mov	r4, r0
 800ec84:	2301      	movs	r3, #1
 800ec86:	e7f0      	b.n	800ec6a <_vfiprintf_r+0x1da>
 800ec88:	ab03      	add	r3, sp, #12
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	462a      	mov	r2, r5
 800ec8e:	4b16      	ldr	r3, [pc, #88]	; (800ece8 <_vfiprintf_r+0x258>)
 800ec90:	a904      	add	r1, sp, #16
 800ec92:	4630      	mov	r0, r6
 800ec94:	f7fd f94e 	bl	800bf34 <_printf_float>
 800ec98:	4607      	mov	r7, r0
 800ec9a:	1c78      	adds	r0, r7, #1
 800ec9c:	d1d6      	bne.n	800ec4c <_vfiprintf_r+0x1bc>
 800ec9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eca0:	07d9      	lsls	r1, r3, #31
 800eca2:	d405      	bmi.n	800ecb0 <_vfiprintf_r+0x220>
 800eca4:	89ab      	ldrh	r3, [r5, #12]
 800eca6:	059a      	lsls	r2, r3, #22
 800eca8:	d402      	bmi.n	800ecb0 <_vfiprintf_r+0x220>
 800ecaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecac:	f7fe ffd0 	bl	800dc50 <__retarget_lock_release_recursive>
 800ecb0:	89ab      	ldrh	r3, [r5, #12]
 800ecb2:	065b      	lsls	r3, r3, #25
 800ecb4:	f53f af12 	bmi.w	800eadc <_vfiprintf_r+0x4c>
 800ecb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecba:	e711      	b.n	800eae0 <_vfiprintf_r+0x50>
 800ecbc:	ab03      	add	r3, sp, #12
 800ecbe:	9300      	str	r3, [sp, #0]
 800ecc0:	462a      	mov	r2, r5
 800ecc2:	4b09      	ldr	r3, [pc, #36]	; (800ece8 <_vfiprintf_r+0x258>)
 800ecc4:	a904      	add	r1, sp, #16
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	f7fd fbd8 	bl	800c47c <_printf_i>
 800eccc:	e7e4      	b.n	800ec98 <_vfiprintf_r+0x208>
 800ecce:	bf00      	nop
 800ecd0:	08011720 	.word	0x08011720
 800ecd4:	08011740 	.word	0x08011740
 800ecd8:	08011700 	.word	0x08011700
 800ecdc:	080116d4 	.word	0x080116d4
 800ece0:	080116de 	.word	0x080116de
 800ece4:	0800bf35 	.word	0x0800bf35
 800ece8:	0800ea6b 	.word	0x0800ea6b
 800ecec:	080116da 	.word	0x080116da

0800ecf0 <_scanf_chars>:
 800ecf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf4:	4615      	mov	r5, r2
 800ecf6:	688a      	ldr	r2, [r1, #8]
 800ecf8:	4680      	mov	r8, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	b932      	cbnz	r2, 800ed0c <_scanf_chars+0x1c>
 800ecfe:	698a      	ldr	r2, [r1, #24]
 800ed00:	2a00      	cmp	r2, #0
 800ed02:	bf0c      	ite	eq
 800ed04:	2201      	moveq	r2, #1
 800ed06:	f04f 32ff 	movne.w	r2, #4294967295
 800ed0a:	608a      	str	r2, [r1, #8]
 800ed0c:	6822      	ldr	r2, [r4, #0]
 800ed0e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800eda0 <_scanf_chars+0xb0>
 800ed12:	06d1      	lsls	r1, r2, #27
 800ed14:	bf5f      	itttt	pl
 800ed16:	681a      	ldrpl	r2, [r3, #0]
 800ed18:	1d11      	addpl	r1, r2, #4
 800ed1a:	6019      	strpl	r1, [r3, #0]
 800ed1c:	6816      	ldrpl	r6, [r2, #0]
 800ed1e:	2700      	movs	r7, #0
 800ed20:	69a0      	ldr	r0, [r4, #24]
 800ed22:	b188      	cbz	r0, 800ed48 <_scanf_chars+0x58>
 800ed24:	2801      	cmp	r0, #1
 800ed26:	d107      	bne.n	800ed38 <_scanf_chars+0x48>
 800ed28:	682a      	ldr	r2, [r5, #0]
 800ed2a:	7811      	ldrb	r1, [r2, #0]
 800ed2c:	6962      	ldr	r2, [r4, #20]
 800ed2e:	5c52      	ldrb	r2, [r2, r1]
 800ed30:	b952      	cbnz	r2, 800ed48 <_scanf_chars+0x58>
 800ed32:	2f00      	cmp	r7, #0
 800ed34:	d031      	beq.n	800ed9a <_scanf_chars+0xaa>
 800ed36:	e022      	b.n	800ed7e <_scanf_chars+0x8e>
 800ed38:	2802      	cmp	r0, #2
 800ed3a:	d120      	bne.n	800ed7e <_scanf_chars+0x8e>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ed44:	071b      	lsls	r3, r3, #28
 800ed46:	d41a      	bmi.n	800ed7e <_scanf_chars+0x8e>
 800ed48:	6823      	ldr	r3, [r4, #0]
 800ed4a:	06da      	lsls	r2, r3, #27
 800ed4c:	bf5e      	ittt	pl
 800ed4e:	682b      	ldrpl	r3, [r5, #0]
 800ed50:	781b      	ldrbpl	r3, [r3, #0]
 800ed52:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ed56:	682a      	ldr	r2, [r5, #0]
 800ed58:	686b      	ldr	r3, [r5, #4]
 800ed5a:	3201      	adds	r2, #1
 800ed5c:	602a      	str	r2, [r5, #0]
 800ed5e:	68a2      	ldr	r2, [r4, #8]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	3a01      	subs	r2, #1
 800ed64:	606b      	str	r3, [r5, #4]
 800ed66:	3701      	adds	r7, #1
 800ed68:	60a2      	str	r2, [r4, #8]
 800ed6a:	b142      	cbz	r2, 800ed7e <_scanf_chars+0x8e>
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dcd7      	bgt.n	800ed20 <_scanf_chars+0x30>
 800ed70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ed74:	4629      	mov	r1, r5
 800ed76:	4640      	mov	r0, r8
 800ed78:	4798      	blx	r3
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d0d0      	beq.n	800ed20 <_scanf_chars+0x30>
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	f013 0310 	ands.w	r3, r3, #16
 800ed84:	d105      	bne.n	800ed92 <_scanf_chars+0xa2>
 800ed86:	68e2      	ldr	r2, [r4, #12]
 800ed88:	3201      	adds	r2, #1
 800ed8a:	60e2      	str	r2, [r4, #12]
 800ed8c:	69a2      	ldr	r2, [r4, #24]
 800ed8e:	b102      	cbz	r2, 800ed92 <_scanf_chars+0xa2>
 800ed90:	7033      	strb	r3, [r6, #0]
 800ed92:	6923      	ldr	r3, [r4, #16]
 800ed94:	443b      	add	r3, r7
 800ed96:	6123      	str	r3, [r4, #16]
 800ed98:	2000      	movs	r0, #0
 800ed9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed9e:	bf00      	nop
 800eda0:	0801139f 	.word	0x0801139f

0800eda4 <_scanf_i>:
 800eda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda8:	4698      	mov	r8, r3
 800edaa:	4b76      	ldr	r3, [pc, #472]	; (800ef84 <_scanf_i+0x1e0>)
 800edac:	460c      	mov	r4, r1
 800edae:	4682      	mov	sl, r0
 800edb0:	4616      	mov	r6, r2
 800edb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edb6:	b087      	sub	sp, #28
 800edb8:	ab03      	add	r3, sp, #12
 800edba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800edbe:	4b72      	ldr	r3, [pc, #456]	; (800ef88 <_scanf_i+0x1e4>)
 800edc0:	69a1      	ldr	r1, [r4, #24]
 800edc2:	4a72      	ldr	r2, [pc, #456]	; (800ef8c <_scanf_i+0x1e8>)
 800edc4:	2903      	cmp	r1, #3
 800edc6:	bf18      	it	ne
 800edc8:	461a      	movne	r2, r3
 800edca:	68a3      	ldr	r3, [r4, #8]
 800edcc:	9201      	str	r2, [sp, #4]
 800edce:	1e5a      	subs	r2, r3, #1
 800edd0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800edd4:	bf88      	it	hi
 800edd6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800edda:	4627      	mov	r7, r4
 800eddc:	bf82      	ittt	hi
 800edde:	eb03 0905 	addhi.w	r9, r3, r5
 800ede2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ede6:	60a3      	strhi	r3, [r4, #8]
 800ede8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800edec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800edf0:	bf98      	it	ls
 800edf2:	f04f 0900 	movls.w	r9, #0
 800edf6:	6023      	str	r3, [r4, #0]
 800edf8:	463d      	mov	r5, r7
 800edfa:	f04f 0b00 	mov.w	fp, #0
 800edfe:	6831      	ldr	r1, [r6, #0]
 800ee00:	ab03      	add	r3, sp, #12
 800ee02:	7809      	ldrb	r1, [r1, #0]
 800ee04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ee08:	2202      	movs	r2, #2
 800ee0a:	f7f1 fa01 	bl	8000210 <memchr>
 800ee0e:	b328      	cbz	r0, 800ee5c <_scanf_i+0xb8>
 800ee10:	f1bb 0f01 	cmp.w	fp, #1
 800ee14:	d159      	bne.n	800eeca <_scanf_i+0x126>
 800ee16:	6862      	ldr	r2, [r4, #4]
 800ee18:	b92a      	cbnz	r2, 800ee26 <_scanf_i+0x82>
 800ee1a:	6822      	ldr	r2, [r4, #0]
 800ee1c:	2308      	movs	r3, #8
 800ee1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee22:	6063      	str	r3, [r4, #4]
 800ee24:	6022      	str	r2, [r4, #0]
 800ee26:	6822      	ldr	r2, [r4, #0]
 800ee28:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ee2c:	6022      	str	r2, [r4, #0]
 800ee2e:	68a2      	ldr	r2, [r4, #8]
 800ee30:	1e51      	subs	r1, r2, #1
 800ee32:	60a1      	str	r1, [r4, #8]
 800ee34:	b192      	cbz	r2, 800ee5c <_scanf_i+0xb8>
 800ee36:	6832      	ldr	r2, [r6, #0]
 800ee38:	1c51      	adds	r1, r2, #1
 800ee3a:	6031      	str	r1, [r6, #0]
 800ee3c:	7812      	ldrb	r2, [r2, #0]
 800ee3e:	f805 2b01 	strb.w	r2, [r5], #1
 800ee42:	6872      	ldr	r2, [r6, #4]
 800ee44:	3a01      	subs	r2, #1
 800ee46:	2a00      	cmp	r2, #0
 800ee48:	6072      	str	r2, [r6, #4]
 800ee4a:	dc07      	bgt.n	800ee5c <_scanf_i+0xb8>
 800ee4c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ee50:	4631      	mov	r1, r6
 800ee52:	4650      	mov	r0, sl
 800ee54:	4790      	blx	r2
 800ee56:	2800      	cmp	r0, #0
 800ee58:	f040 8085 	bne.w	800ef66 <_scanf_i+0x1c2>
 800ee5c:	f10b 0b01 	add.w	fp, fp, #1
 800ee60:	f1bb 0f03 	cmp.w	fp, #3
 800ee64:	d1cb      	bne.n	800edfe <_scanf_i+0x5a>
 800ee66:	6863      	ldr	r3, [r4, #4]
 800ee68:	b90b      	cbnz	r3, 800ee6e <_scanf_i+0xca>
 800ee6a:	230a      	movs	r3, #10
 800ee6c:	6063      	str	r3, [r4, #4]
 800ee6e:	6863      	ldr	r3, [r4, #4]
 800ee70:	4947      	ldr	r1, [pc, #284]	; (800ef90 <_scanf_i+0x1ec>)
 800ee72:	6960      	ldr	r0, [r4, #20]
 800ee74:	1ac9      	subs	r1, r1, r3
 800ee76:	f000 f89f 	bl	800efb8 <__sccl>
 800ee7a:	f04f 0b00 	mov.w	fp, #0
 800ee7e:	68a3      	ldr	r3, [r4, #8]
 800ee80:	6822      	ldr	r2, [r4, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d03d      	beq.n	800ef02 <_scanf_i+0x15e>
 800ee86:	6831      	ldr	r1, [r6, #0]
 800ee88:	6960      	ldr	r0, [r4, #20]
 800ee8a:	f891 c000 	ldrb.w	ip, [r1]
 800ee8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d035      	beq.n	800ef02 <_scanf_i+0x15e>
 800ee96:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ee9a:	d124      	bne.n	800eee6 <_scanf_i+0x142>
 800ee9c:	0510      	lsls	r0, r2, #20
 800ee9e:	d522      	bpl.n	800eee6 <_scanf_i+0x142>
 800eea0:	f10b 0b01 	add.w	fp, fp, #1
 800eea4:	f1b9 0f00 	cmp.w	r9, #0
 800eea8:	d003      	beq.n	800eeb2 <_scanf_i+0x10e>
 800eeaa:	3301      	adds	r3, #1
 800eeac:	f109 39ff 	add.w	r9, r9, #4294967295
 800eeb0:	60a3      	str	r3, [r4, #8]
 800eeb2:	6873      	ldr	r3, [r6, #4]
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	6073      	str	r3, [r6, #4]
 800eeba:	dd1b      	ble.n	800eef4 <_scanf_i+0x150>
 800eebc:	6833      	ldr	r3, [r6, #0]
 800eebe:	3301      	adds	r3, #1
 800eec0:	6033      	str	r3, [r6, #0]
 800eec2:	68a3      	ldr	r3, [r4, #8]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	60a3      	str	r3, [r4, #8]
 800eec8:	e7d9      	b.n	800ee7e <_scanf_i+0xda>
 800eeca:	f1bb 0f02 	cmp.w	fp, #2
 800eece:	d1ae      	bne.n	800ee2e <_scanf_i+0x8a>
 800eed0:	6822      	ldr	r2, [r4, #0]
 800eed2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eed6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eeda:	d1bf      	bne.n	800ee5c <_scanf_i+0xb8>
 800eedc:	2310      	movs	r3, #16
 800eede:	6063      	str	r3, [r4, #4]
 800eee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eee4:	e7a2      	b.n	800ee2c <_scanf_i+0x88>
 800eee6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800eeea:	6022      	str	r2, [r4, #0]
 800eeec:	780b      	ldrb	r3, [r1, #0]
 800eeee:	f805 3b01 	strb.w	r3, [r5], #1
 800eef2:	e7de      	b.n	800eeb2 <_scanf_i+0x10e>
 800eef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eef8:	4631      	mov	r1, r6
 800eefa:	4650      	mov	r0, sl
 800eefc:	4798      	blx	r3
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d0df      	beq.n	800eec2 <_scanf_i+0x11e>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	05db      	lsls	r3, r3, #23
 800ef06:	d50d      	bpl.n	800ef24 <_scanf_i+0x180>
 800ef08:	42bd      	cmp	r5, r7
 800ef0a:	d909      	bls.n	800ef20 <_scanf_i+0x17c>
 800ef0c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ef10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ef14:	4632      	mov	r2, r6
 800ef16:	4650      	mov	r0, sl
 800ef18:	4798      	blx	r3
 800ef1a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ef1e:	464d      	mov	r5, r9
 800ef20:	42bd      	cmp	r5, r7
 800ef22:	d02d      	beq.n	800ef80 <_scanf_i+0x1dc>
 800ef24:	6822      	ldr	r2, [r4, #0]
 800ef26:	f012 0210 	ands.w	r2, r2, #16
 800ef2a:	d113      	bne.n	800ef54 <_scanf_i+0x1b0>
 800ef2c:	702a      	strb	r2, [r5, #0]
 800ef2e:	6863      	ldr	r3, [r4, #4]
 800ef30:	9e01      	ldr	r6, [sp, #4]
 800ef32:	4639      	mov	r1, r7
 800ef34:	4650      	mov	r0, sl
 800ef36:	47b0      	blx	r6
 800ef38:	6821      	ldr	r1, [r4, #0]
 800ef3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef3e:	f011 0f20 	tst.w	r1, #32
 800ef42:	d013      	beq.n	800ef6c <_scanf_i+0x1c8>
 800ef44:	1d1a      	adds	r2, r3, #4
 800ef46:	f8c8 2000 	str.w	r2, [r8]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6018      	str	r0, [r3, #0]
 800ef4e:	68e3      	ldr	r3, [r4, #12]
 800ef50:	3301      	adds	r3, #1
 800ef52:	60e3      	str	r3, [r4, #12]
 800ef54:	1bed      	subs	r5, r5, r7
 800ef56:	44ab      	add	fp, r5
 800ef58:	6925      	ldr	r5, [r4, #16]
 800ef5a:	445d      	add	r5, fp
 800ef5c:	6125      	str	r5, [r4, #16]
 800ef5e:	2000      	movs	r0, #0
 800ef60:	b007      	add	sp, #28
 800ef62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef66:	f04f 0b00 	mov.w	fp, #0
 800ef6a:	e7ca      	b.n	800ef02 <_scanf_i+0x15e>
 800ef6c:	1d1a      	adds	r2, r3, #4
 800ef6e:	f8c8 2000 	str.w	r2, [r8]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f011 0f01 	tst.w	r1, #1
 800ef78:	bf14      	ite	ne
 800ef7a:	8018      	strhne	r0, [r3, #0]
 800ef7c:	6018      	streq	r0, [r3, #0]
 800ef7e:	e7e6      	b.n	800ef4e <_scanf_i+0x1aa>
 800ef80:	2001      	movs	r0, #1
 800ef82:	e7ed      	b.n	800ef60 <_scanf_i+0x1bc>
 800ef84:	0801073c 	.word	0x0801073c
 800ef88:	0800f10d 	.word	0x0800f10d
 800ef8c:	0800c961 	.word	0x0800c961
 800ef90:	080116fe 	.word	0x080116fe

0800ef94 <_read_r>:
 800ef94:	b538      	push	{r3, r4, r5, lr}
 800ef96:	4d07      	ldr	r5, [pc, #28]	; (800efb4 <_read_r+0x20>)
 800ef98:	4604      	mov	r4, r0
 800ef9a:	4608      	mov	r0, r1
 800ef9c:	4611      	mov	r1, r2
 800ef9e:	2200      	movs	r2, #0
 800efa0:	602a      	str	r2, [r5, #0]
 800efa2:	461a      	mov	r2, r3
 800efa4:	f7f5 fa24 	bl	80043f0 <_read>
 800efa8:	1c43      	adds	r3, r0, #1
 800efaa:	d102      	bne.n	800efb2 <_read_r+0x1e>
 800efac:	682b      	ldr	r3, [r5, #0]
 800efae:	b103      	cbz	r3, 800efb2 <_read_r+0x1e>
 800efb0:	6023      	str	r3, [r4, #0]
 800efb2:	bd38      	pop	{r3, r4, r5, pc}
 800efb4:	2000108c 	.word	0x2000108c

0800efb8 <__sccl>:
 800efb8:	b570      	push	{r4, r5, r6, lr}
 800efba:	780b      	ldrb	r3, [r1, #0]
 800efbc:	4604      	mov	r4, r0
 800efbe:	2b5e      	cmp	r3, #94	; 0x5e
 800efc0:	bf0b      	itete	eq
 800efc2:	784b      	ldrbeq	r3, [r1, #1]
 800efc4:	1c48      	addne	r0, r1, #1
 800efc6:	1c88      	addeq	r0, r1, #2
 800efc8:	2200      	movne	r2, #0
 800efca:	bf08      	it	eq
 800efcc:	2201      	moveq	r2, #1
 800efce:	1e61      	subs	r1, r4, #1
 800efd0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800efd4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800efd8:	42a9      	cmp	r1, r5
 800efda:	d1fb      	bne.n	800efd4 <__sccl+0x1c>
 800efdc:	b90b      	cbnz	r3, 800efe2 <__sccl+0x2a>
 800efde:	3801      	subs	r0, #1
 800efe0:	bd70      	pop	{r4, r5, r6, pc}
 800efe2:	f082 0201 	eor.w	r2, r2, #1
 800efe6:	54e2      	strb	r2, [r4, r3]
 800efe8:	4605      	mov	r5, r0
 800efea:	4628      	mov	r0, r5
 800efec:	f810 1b01 	ldrb.w	r1, [r0], #1
 800eff0:	292d      	cmp	r1, #45	; 0x2d
 800eff2:	d006      	beq.n	800f002 <__sccl+0x4a>
 800eff4:	295d      	cmp	r1, #93	; 0x5d
 800eff6:	d0f3      	beq.n	800efe0 <__sccl+0x28>
 800eff8:	b909      	cbnz	r1, 800effe <__sccl+0x46>
 800effa:	4628      	mov	r0, r5
 800effc:	e7f0      	b.n	800efe0 <__sccl+0x28>
 800effe:	460b      	mov	r3, r1
 800f000:	e7f1      	b.n	800efe6 <__sccl+0x2e>
 800f002:	786e      	ldrb	r6, [r5, #1]
 800f004:	2e5d      	cmp	r6, #93	; 0x5d
 800f006:	d0fa      	beq.n	800effe <__sccl+0x46>
 800f008:	42b3      	cmp	r3, r6
 800f00a:	dcf8      	bgt.n	800effe <__sccl+0x46>
 800f00c:	3502      	adds	r5, #2
 800f00e:	4619      	mov	r1, r3
 800f010:	3101      	adds	r1, #1
 800f012:	428e      	cmp	r6, r1
 800f014:	5462      	strb	r2, [r4, r1]
 800f016:	dcfb      	bgt.n	800f010 <__sccl+0x58>
 800f018:	1af1      	subs	r1, r6, r3
 800f01a:	3901      	subs	r1, #1
 800f01c:	1c58      	adds	r0, r3, #1
 800f01e:	42b3      	cmp	r3, r6
 800f020:	bfa8      	it	ge
 800f022:	2100      	movge	r1, #0
 800f024:	1843      	adds	r3, r0, r1
 800f026:	e7e0      	b.n	800efea <__sccl+0x32>

0800f028 <_strtoul_l.constprop.0>:
 800f028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f02c:	4f36      	ldr	r7, [pc, #216]	; (800f108 <_strtoul_l.constprop.0+0xe0>)
 800f02e:	4686      	mov	lr, r0
 800f030:	460d      	mov	r5, r1
 800f032:	4628      	mov	r0, r5
 800f034:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f038:	5de6      	ldrb	r6, [r4, r7]
 800f03a:	f016 0608 	ands.w	r6, r6, #8
 800f03e:	d1f8      	bne.n	800f032 <_strtoul_l.constprop.0+0xa>
 800f040:	2c2d      	cmp	r4, #45	; 0x2d
 800f042:	d12f      	bne.n	800f0a4 <_strtoul_l.constprop.0+0x7c>
 800f044:	782c      	ldrb	r4, [r5, #0]
 800f046:	2601      	movs	r6, #1
 800f048:	1c85      	adds	r5, r0, #2
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d057      	beq.n	800f0fe <_strtoul_l.constprop.0+0xd6>
 800f04e:	2b10      	cmp	r3, #16
 800f050:	d109      	bne.n	800f066 <_strtoul_l.constprop.0+0x3e>
 800f052:	2c30      	cmp	r4, #48	; 0x30
 800f054:	d107      	bne.n	800f066 <_strtoul_l.constprop.0+0x3e>
 800f056:	7828      	ldrb	r0, [r5, #0]
 800f058:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f05c:	2858      	cmp	r0, #88	; 0x58
 800f05e:	d149      	bne.n	800f0f4 <_strtoul_l.constprop.0+0xcc>
 800f060:	786c      	ldrb	r4, [r5, #1]
 800f062:	2310      	movs	r3, #16
 800f064:	3502      	adds	r5, #2
 800f066:	f04f 38ff 	mov.w	r8, #4294967295
 800f06a:	2700      	movs	r7, #0
 800f06c:	fbb8 f8f3 	udiv	r8, r8, r3
 800f070:	fb03 f908 	mul.w	r9, r3, r8
 800f074:	ea6f 0909 	mvn.w	r9, r9
 800f078:	4638      	mov	r0, r7
 800f07a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f07e:	f1bc 0f09 	cmp.w	ip, #9
 800f082:	d814      	bhi.n	800f0ae <_strtoul_l.constprop.0+0x86>
 800f084:	4664      	mov	r4, ip
 800f086:	42a3      	cmp	r3, r4
 800f088:	dd22      	ble.n	800f0d0 <_strtoul_l.constprop.0+0xa8>
 800f08a:	2f00      	cmp	r7, #0
 800f08c:	db1d      	blt.n	800f0ca <_strtoul_l.constprop.0+0xa2>
 800f08e:	4580      	cmp	r8, r0
 800f090:	d31b      	bcc.n	800f0ca <_strtoul_l.constprop.0+0xa2>
 800f092:	d101      	bne.n	800f098 <_strtoul_l.constprop.0+0x70>
 800f094:	45a1      	cmp	r9, r4
 800f096:	db18      	blt.n	800f0ca <_strtoul_l.constprop.0+0xa2>
 800f098:	fb00 4003 	mla	r0, r0, r3, r4
 800f09c:	2701      	movs	r7, #1
 800f09e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0a2:	e7ea      	b.n	800f07a <_strtoul_l.constprop.0+0x52>
 800f0a4:	2c2b      	cmp	r4, #43	; 0x2b
 800f0a6:	bf04      	itt	eq
 800f0a8:	782c      	ldrbeq	r4, [r5, #0]
 800f0aa:	1c85      	addeq	r5, r0, #2
 800f0ac:	e7cd      	b.n	800f04a <_strtoul_l.constprop.0+0x22>
 800f0ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f0b2:	f1bc 0f19 	cmp.w	ip, #25
 800f0b6:	d801      	bhi.n	800f0bc <_strtoul_l.constprop.0+0x94>
 800f0b8:	3c37      	subs	r4, #55	; 0x37
 800f0ba:	e7e4      	b.n	800f086 <_strtoul_l.constprop.0+0x5e>
 800f0bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f0c0:	f1bc 0f19 	cmp.w	ip, #25
 800f0c4:	d804      	bhi.n	800f0d0 <_strtoul_l.constprop.0+0xa8>
 800f0c6:	3c57      	subs	r4, #87	; 0x57
 800f0c8:	e7dd      	b.n	800f086 <_strtoul_l.constprop.0+0x5e>
 800f0ca:	f04f 37ff 	mov.w	r7, #4294967295
 800f0ce:	e7e6      	b.n	800f09e <_strtoul_l.constprop.0+0x76>
 800f0d0:	2f00      	cmp	r7, #0
 800f0d2:	da07      	bge.n	800f0e4 <_strtoul_l.constprop.0+0xbc>
 800f0d4:	2322      	movs	r3, #34	; 0x22
 800f0d6:	f8ce 3000 	str.w	r3, [lr]
 800f0da:	f04f 30ff 	mov.w	r0, #4294967295
 800f0de:	b932      	cbnz	r2, 800f0ee <_strtoul_l.constprop.0+0xc6>
 800f0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0e4:	b106      	cbz	r6, 800f0e8 <_strtoul_l.constprop.0+0xc0>
 800f0e6:	4240      	negs	r0, r0
 800f0e8:	2a00      	cmp	r2, #0
 800f0ea:	d0f9      	beq.n	800f0e0 <_strtoul_l.constprop.0+0xb8>
 800f0ec:	b107      	cbz	r7, 800f0f0 <_strtoul_l.constprop.0+0xc8>
 800f0ee:	1e69      	subs	r1, r5, #1
 800f0f0:	6011      	str	r1, [r2, #0]
 800f0f2:	e7f5      	b.n	800f0e0 <_strtoul_l.constprop.0+0xb8>
 800f0f4:	2430      	movs	r4, #48	; 0x30
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d1b5      	bne.n	800f066 <_strtoul_l.constprop.0+0x3e>
 800f0fa:	2308      	movs	r3, #8
 800f0fc:	e7b3      	b.n	800f066 <_strtoul_l.constprop.0+0x3e>
 800f0fe:	2c30      	cmp	r4, #48	; 0x30
 800f100:	d0a9      	beq.n	800f056 <_strtoul_l.constprop.0+0x2e>
 800f102:	230a      	movs	r3, #10
 800f104:	e7af      	b.n	800f066 <_strtoul_l.constprop.0+0x3e>
 800f106:	bf00      	nop
 800f108:	0801139f 	.word	0x0801139f

0800f10c <_strtoul_r>:
 800f10c:	f7ff bf8c 	b.w	800f028 <_strtoul_l.constprop.0>

0800f110 <strtoul>:
 800f110:	4613      	mov	r3, r2
 800f112:	460a      	mov	r2, r1
 800f114:	4601      	mov	r1, r0
 800f116:	4802      	ldr	r0, [pc, #8]	; (800f120 <strtoul+0x10>)
 800f118:	6800      	ldr	r0, [r0, #0]
 800f11a:	f7ff bf85 	b.w	800f028 <_strtoul_l.constprop.0>
 800f11e:	bf00      	nop
 800f120:	200002c4 	.word	0x200002c4

0800f124 <__submore>:
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	460c      	mov	r4, r1
 800f12a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f130:	4299      	cmp	r1, r3
 800f132:	d11d      	bne.n	800f170 <__submore+0x4c>
 800f134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f138:	f7fc fde8 	bl	800bd0c <_malloc_r>
 800f13c:	b918      	cbnz	r0, 800f146 <__submore+0x22>
 800f13e:	f04f 30ff 	mov.w	r0, #4294967295
 800f142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f14a:	63a3      	str	r3, [r4, #56]	; 0x38
 800f14c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f150:	6360      	str	r0, [r4, #52]	; 0x34
 800f152:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f156:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f15a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f15e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f162:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f166:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f16a:	6020      	str	r0, [r4, #0]
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7e8      	b.n	800f142 <__submore+0x1e>
 800f170:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f172:	0077      	lsls	r7, r6, #1
 800f174:	463a      	mov	r2, r7
 800f176:	f000 fb2b 	bl	800f7d0 <_realloc_r>
 800f17a:	4605      	mov	r5, r0
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d0de      	beq.n	800f13e <__submore+0x1a>
 800f180:	eb00 0806 	add.w	r8, r0, r6
 800f184:	4601      	mov	r1, r0
 800f186:	4632      	mov	r2, r6
 800f188:	4640      	mov	r0, r8
 800f18a:	f7fe fd75 	bl	800dc78 <memcpy>
 800f18e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f192:	f8c4 8000 	str.w	r8, [r4]
 800f196:	e7e9      	b.n	800f16c <__submore+0x48>

0800f198 <__swbuf_r>:
 800f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19a:	460e      	mov	r6, r1
 800f19c:	4614      	mov	r4, r2
 800f19e:	4605      	mov	r5, r0
 800f1a0:	b118      	cbz	r0, 800f1aa <__swbuf_r+0x12>
 800f1a2:	6983      	ldr	r3, [r0, #24]
 800f1a4:	b90b      	cbnz	r3, 800f1aa <__swbuf_r+0x12>
 800f1a6:	f000 f9e5 	bl	800f574 <__sinit>
 800f1aa:	4b21      	ldr	r3, [pc, #132]	; (800f230 <__swbuf_r+0x98>)
 800f1ac:	429c      	cmp	r4, r3
 800f1ae:	d12b      	bne.n	800f208 <__swbuf_r+0x70>
 800f1b0:	686c      	ldr	r4, [r5, #4]
 800f1b2:	69a3      	ldr	r3, [r4, #24]
 800f1b4:	60a3      	str	r3, [r4, #8]
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	071a      	lsls	r2, r3, #28
 800f1ba:	d52f      	bpl.n	800f21c <__swbuf_r+0x84>
 800f1bc:	6923      	ldr	r3, [r4, #16]
 800f1be:	b36b      	cbz	r3, 800f21c <__swbuf_r+0x84>
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	6820      	ldr	r0, [r4, #0]
 800f1c4:	1ac0      	subs	r0, r0, r3
 800f1c6:	6963      	ldr	r3, [r4, #20]
 800f1c8:	b2f6      	uxtb	r6, r6
 800f1ca:	4283      	cmp	r3, r0
 800f1cc:	4637      	mov	r7, r6
 800f1ce:	dc04      	bgt.n	800f1da <__swbuf_r+0x42>
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f000 f93a 	bl	800f44c <_fflush_r>
 800f1d8:	bb30      	cbnz	r0, 800f228 <__swbuf_r+0x90>
 800f1da:	68a3      	ldr	r3, [r4, #8]
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	60a3      	str	r3, [r4, #8]
 800f1e0:	6823      	ldr	r3, [r4, #0]
 800f1e2:	1c5a      	adds	r2, r3, #1
 800f1e4:	6022      	str	r2, [r4, #0]
 800f1e6:	701e      	strb	r6, [r3, #0]
 800f1e8:	6963      	ldr	r3, [r4, #20]
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	4283      	cmp	r3, r0
 800f1ee:	d004      	beq.n	800f1fa <__swbuf_r+0x62>
 800f1f0:	89a3      	ldrh	r3, [r4, #12]
 800f1f2:	07db      	lsls	r3, r3, #31
 800f1f4:	d506      	bpl.n	800f204 <__swbuf_r+0x6c>
 800f1f6:	2e0a      	cmp	r6, #10
 800f1f8:	d104      	bne.n	800f204 <__swbuf_r+0x6c>
 800f1fa:	4621      	mov	r1, r4
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	f000 f925 	bl	800f44c <_fflush_r>
 800f202:	b988      	cbnz	r0, 800f228 <__swbuf_r+0x90>
 800f204:	4638      	mov	r0, r7
 800f206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f208:	4b0a      	ldr	r3, [pc, #40]	; (800f234 <__swbuf_r+0x9c>)
 800f20a:	429c      	cmp	r4, r3
 800f20c:	d101      	bne.n	800f212 <__swbuf_r+0x7a>
 800f20e:	68ac      	ldr	r4, [r5, #8]
 800f210:	e7cf      	b.n	800f1b2 <__swbuf_r+0x1a>
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <__swbuf_r+0xa0>)
 800f214:	429c      	cmp	r4, r3
 800f216:	bf08      	it	eq
 800f218:	68ec      	ldreq	r4, [r5, #12]
 800f21a:	e7ca      	b.n	800f1b2 <__swbuf_r+0x1a>
 800f21c:	4621      	mov	r1, r4
 800f21e:	4628      	mov	r0, r5
 800f220:	f000 f80c 	bl	800f23c <__swsetup_r>
 800f224:	2800      	cmp	r0, #0
 800f226:	d0cb      	beq.n	800f1c0 <__swbuf_r+0x28>
 800f228:	f04f 37ff 	mov.w	r7, #4294967295
 800f22c:	e7ea      	b.n	800f204 <__swbuf_r+0x6c>
 800f22e:	bf00      	nop
 800f230:	08011720 	.word	0x08011720
 800f234:	08011740 	.word	0x08011740
 800f238:	08011700 	.word	0x08011700

0800f23c <__swsetup_r>:
 800f23c:	4b32      	ldr	r3, [pc, #200]	; (800f308 <__swsetup_r+0xcc>)
 800f23e:	b570      	push	{r4, r5, r6, lr}
 800f240:	681d      	ldr	r5, [r3, #0]
 800f242:	4606      	mov	r6, r0
 800f244:	460c      	mov	r4, r1
 800f246:	b125      	cbz	r5, 800f252 <__swsetup_r+0x16>
 800f248:	69ab      	ldr	r3, [r5, #24]
 800f24a:	b913      	cbnz	r3, 800f252 <__swsetup_r+0x16>
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 f991 	bl	800f574 <__sinit>
 800f252:	4b2e      	ldr	r3, [pc, #184]	; (800f30c <__swsetup_r+0xd0>)
 800f254:	429c      	cmp	r4, r3
 800f256:	d10f      	bne.n	800f278 <__swsetup_r+0x3c>
 800f258:	686c      	ldr	r4, [r5, #4]
 800f25a:	89a3      	ldrh	r3, [r4, #12]
 800f25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f260:	0719      	lsls	r1, r3, #28
 800f262:	d42c      	bmi.n	800f2be <__swsetup_r+0x82>
 800f264:	06dd      	lsls	r5, r3, #27
 800f266:	d411      	bmi.n	800f28c <__swsetup_r+0x50>
 800f268:	2309      	movs	r3, #9
 800f26a:	6033      	str	r3, [r6, #0]
 800f26c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	f04f 30ff 	mov.w	r0, #4294967295
 800f276:	e03e      	b.n	800f2f6 <__swsetup_r+0xba>
 800f278:	4b25      	ldr	r3, [pc, #148]	; (800f310 <__swsetup_r+0xd4>)
 800f27a:	429c      	cmp	r4, r3
 800f27c:	d101      	bne.n	800f282 <__swsetup_r+0x46>
 800f27e:	68ac      	ldr	r4, [r5, #8]
 800f280:	e7eb      	b.n	800f25a <__swsetup_r+0x1e>
 800f282:	4b24      	ldr	r3, [pc, #144]	; (800f314 <__swsetup_r+0xd8>)
 800f284:	429c      	cmp	r4, r3
 800f286:	bf08      	it	eq
 800f288:	68ec      	ldreq	r4, [r5, #12]
 800f28a:	e7e6      	b.n	800f25a <__swsetup_r+0x1e>
 800f28c:	0758      	lsls	r0, r3, #29
 800f28e:	d512      	bpl.n	800f2b6 <__swsetup_r+0x7a>
 800f290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f292:	b141      	cbz	r1, 800f2a6 <__swsetup_r+0x6a>
 800f294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f298:	4299      	cmp	r1, r3
 800f29a:	d002      	beq.n	800f2a2 <__swsetup_r+0x66>
 800f29c:	4630      	mov	r0, r6
 800f29e:	f7fc fcc9 	bl	800bc34 <_free_r>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	6063      	str	r3, [r4, #4]
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	89a3      	ldrh	r3, [r4, #12]
 800f2b8:	f043 0308 	orr.w	r3, r3, #8
 800f2bc:	81a3      	strh	r3, [r4, #12]
 800f2be:	6923      	ldr	r3, [r4, #16]
 800f2c0:	b94b      	cbnz	r3, 800f2d6 <__swsetup_r+0x9a>
 800f2c2:	89a3      	ldrh	r3, [r4, #12]
 800f2c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2cc:	d003      	beq.n	800f2d6 <__swsetup_r+0x9a>
 800f2ce:	4621      	mov	r1, r4
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	f000 fa11 	bl	800f6f8 <__smakebuf_r>
 800f2d6:	89a0      	ldrh	r0, [r4, #12]
 800f2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2dc:	f010 0301 	ands.w	r3, r0, #1
 800f2e0:	d00a      	beq.n	800f2f8 <__swsetup_r+0xbc>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	60a3      	str	r3, [r4, #8]
 800f2e6:	6963      	ldr	r3, [r4, #20]
 800f2e8:	425b      	negs	r3, r3
 800f2ea:	61a3      	str	r3, [r4, #24]
 800f2ec:	6923      	ldr	r3, [r4, #16]
 800f2ee:	b943      	cbnz	r3, 800f302 <__swsetup_r+0xc6>
 800f2f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2f4:	d1ba      	bne.n	800f26c <__swsetup_r+0x30>
 800f2f6:	bd70      	pop	{r4, r5, r6, pc}
 800f2f8:	0781      	lsls	r1, r0, #30
 800f2fa:	bf58      	it	pl
 800f2fc:	6963      	ldrpl	r3, [r4, #20]
 800f2fe:	60a3      	str	r3, [r4, #8]
 800f300:	e7f4      	b.n	800f2ec <__swsetup_r+0xb0>
 800f302:	2000      	movs	r0, #0
 800f304:	e7f7      	b.n	800f2f6 <__swsetup_r+0xba>
 800f306:	bf00      	nop
 800f308:	200002c4 	.word	0x200002c4
 800f30c:	08011720 	.word	0x08011720
 800f310:	08011740 	.word	0x08011740
 800f314:	08011700 	.word	0x08011700

0800f318 <abort>:
 800f318:	b508      	push	{r3, lr}
 800f31a:	2006      	movs	r0, #6
 800f31c:	f000 fab0 	bl	800f880 <raise>
 800f320:	2001      	movs	r0, #1
 800f322:	f7f5 f85b 	bl	80043dc <_exit>
	...

0800f328 <__env_lock>:
 800f328:	4801      	ldr	r0, [pc, #4]	; (800f330 <__env_lock+0x8>)
 800f32a:	f7fe bc8f 	b.w	800dc4c <__retarget_lock_acquire_recursive>
 800f32e:	bf00      	nop
 800f330:	20001084 	.word	0x20001084

0800f334 <__env_unlock>:
 800f334:	4801      	ldr	r0, [pc, #4]	; (800f33c <__env_unlock+0x8>)
 800f336:	f7fe bc8b 	b.w	800dc50 <__retarget_lock_release_recursive>
 800f33a:	bf00      	nop
 800f33c:	20001084 	.word	0x20001084

0800f340 <__sflush_r>:
 800f340:	898a      	ldrh	r2, [r1, #12]
 800f342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f346:	4605      	mov	r5, r0
 800f348:	0710      	lsls	r0, r2, #28
 800f34a:	460c      	mov	r4, r1
 800f34c:	d458      	bmi.n	800f400 <__sflush_r+0xc0>
 800f34e:	684b      	ldr	r3, [r1, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	dc05      	bgt.n	800f360 <__sflush_r+0x20>
 800f354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f356:	2b00      	cmp	r3, #0
 800f358:	dc02      	bgt.n	800f360 <__sflush_r+0x20>
 800f35a:	2000      	movs	r0, #0
 800f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f362:	2e00      	cmp	r6, #0
 800f364:	d0f9      	beq.n	800f35a <__sflush_r+0x1a>
 800f366:	2300      	movs	r3, #0
 800f368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f36c:	682f      	ldr	r7, [r5, #0]
 800f36e:	602b      	str	r3, [r5, #0]
 800f370:	d032      	beq.n	800f3d8 <__sflush_r+0x98>
 800f372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f374:	89a3      	ldrh	r3, [r4, #12]
 800f376:	075a      	lsls	r2, r3, #29
 800f378:	d505      	bpl.n	800f386 <__sflush_r+0x46>
 800f37a:	6863      	ldr	r3, [r4, #4]
 800f37c:	1ac0      	subs	r0, r0, r3
 800f37e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f380:	b10b      	cbz	r3, 800f386 <__sflush_r+0x46>
 800f382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f384:	1ac0      	subs	r0, r0, r3
 800f386:	2300      	movs	r3, #0
 800f388:	4602      	mov	r2, r0
 800f38a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f38c:	6a21      	ldr	r1, [r4, #32]
 800f38e:	4628      	mov	r0, r5
 800f390:	47b0      	blx	r6
 800f392:	1c43      	adds	r3, r0, #1
 800f394:	89a3      	ldrh	r3, [r4, #12]
 800f396:	d106      	bne.n	800f3a6 <__sflush_r+0x66>
 800f398:	6829      	ldr	r1, [r5, #0]
 800f39a:	291d      	cmp	r1, #29
 800f39c:	d82c      	bhi.n	800f3f8 <__sflush_r+0xb8>
 800f39e:	4a2a      	ldr	r2, [pc, #168]	; (800f448 <__sflush_r+0x108>)
 800f3a0:	40ca      	lsrs	r2, r1
 800f3a2:	07d6      	lsls	r6, r2, #31
 800f3a4:	d528      	bpl.n	800f3f8 <__sflush_r+0xb8>
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	6062      	str	r2, [r4, #4]
 800f3aa:	04d9      	lsls	r1, r3, #19
 800f3ac:	6922      	ldr	r2, [r4, #16]
 800f3ae:	6022      	str	r2, [r4, #0]
 800f3b0:	d504      	bpl.n	800f3bc <__sflush_r+0x7c>
 800f3b2:	1c42      	adds	r2, r0, #1
 800f3b4:	d101      	bne.n	800f3ba <__sflush_r+0x7a>
 800f3b6:	682b      	ldr	r3, [r5, #0]
 800f3b8:	b903      	cbnz	r3, 800f3bc <__sflush_r+0x7c>
 800f3ba:	6560      	str	r0, [r4, #84]	; 0x54
 800f3bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3be:	602f      	str	r7, [r5, #0]
 800f3c0:	2900      	cmp	r1, #0
 800f3c2:	d0ca      	beq.n	800f35a <__sflush_r+0x1a>
 800f3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3c8:	4299      	cmp	r1, r3
 800f3ca:	d002      	beq.n	800f3d2 <__sflush_r+0x92>
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f7fc fc31 	bl	800bc34 <_free_r>
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	6360      	str	r0, [r4, #52]	; 0x34
 800f3d6:	e7c1      	b.n	800f35c <__sflush_r+0x1c>
 800f3d8:	6a21      	ldr	r1, [r4, #32]
 800f3da:	2301      	movs	r3, #1
 800f3dc:	4628      	mov	r0, r5
 800f3de:	47b0      	blx	r6
 800f3e0:	1c41      	adds	r1, r0, #1
 800f3e2:	d1c7      	bne.n	800f374 <__sflush_r+0x34>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d0c4      	beq.n	800f374 <__sflush_r+0x34>
 800f3ea:	2b1d      	cmp	r3, #29
 800f3ec:	d001      	beq.n	800f3f2 <__sflush_r+0xb2>
 800f3ee:	2b16      	cmp	r3, #22
 800f3f0:	d101      	bne.n	800f3f6 <__sflush_r+0xb6>
 800f3f2:	602f      	str	r7, [r5, #0]
 800f3f4:	e7b1      	b.n	800f35a <__sflush_r+0x1a>
 800f3f6:	89a3      	ldrh	r3, [r4, #12]
 800f3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3fc:	81a3      	strh	r3, [r4, #12]
 800f3fe:	e7ad      	b.n	800f35c <__sflush_r+0x1c>
 800f400:	690f      	ldr	r7, [r1, #16]
 800f402:	2f00      	cmp	r7, #0
 800f404:	d0a9      	beq.n	800f35a <__sflush_r+0x1a>
 800f406:	0793      	lsls	r3, r2, #30
 800f408:	680e      	ldr	r6, [r1, #0]
 800f40a:	bf08      	it	eq
 800f40c:	694b      	ldreq	r3, [r1, #20]
 800f40e:	600f      	str	r7, [r1, #0]
 800f410:	bf18      	it	ne
 800f412:	2300      	movne	r3, #0
 800f414:	eba6 0807 	sub.w	r8, r6, r7
 800f418:	608b      	str	r3, [r1, #8]
 800f41a:	f1b8 0f00 	cmp.w	r8, #0
 800f41e:	dd9c      	ble.n	800f35a <__sflush_r+0x1a>
 800f420:	6a21      	ldr	r1, [r4, #32]
 800f422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f424:	4643      	mov	r3, r8
 800f426:	463a      	mov	r2, r7
 800f428:	4628      	mov	r0, r5
 800f42a:	47b0      	blx	r6
 800f42c:	2800      	cmp	r0, #0
 800f42e:	dc06      	bgt.n	800f43e <__sflush_r+0xfe>
 800f430:	89a3      	ldrh	r3, [r4, #12]
 800f432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f436:	81a3      	strh	r3, [r4, #12]
 800f438:	f04f 30ff 	mov.w	r0, #4294967295
 800f43c:	e78e      	b.n	800f35c <__sflush_r+0x1c>
 800f43e:	4407      	add	r7, r0
 800f440:	eba8 0800 	sub.w	r8, r8, r0
 800f444:	e7e9      	b.n	800f41a <__sflush_r+0xda>
 800f446:	bf00      	nop
 800f448:	20400001 	.word	0x20400001

0800f44c <_fflush_r>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	690b      	ldr	r3, [r1, #16]
 800f450:	4605      	mov	r5, r0
 800f452:	460c      	mov	r4, r1
 800f454:	b913      	cbnz	r3, 800f45c <_fflush_r+0x10>
 800f456:	2500      	movs	r5, #0
 800f458:	4628      	mov	r0, r5
 800f45a:	bd38      	pop	{r3, r4, r5, pc}
 800f45c:	b118      	cbz	r0, 800f466 <_fflush_r+0x1a>
 800f45e:	6983      	ldr	r3, [r0, #24]
 800f460:	b90b      	cbnz	r3, 800f466 <_fflush_r+0x1a>
 800f462:	f000 f887 	bl	800f574 <__sinit>
 800f466:	4b14      	ldr	r3, [pc, #80]	; (800f4b8 <_fflush_r+0x6c>)
 800f468:	429c      	cmp	r4, r3
 800f46a:	d11b      	bne.n	800f4a4 <_fflush_r+0x58>
 800f46c:	686c      	ldr	r4, [r5, #4]
 800f46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d0ef      	beq.n	800f456 <_fflush_r+0xa>
 800f476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f478:	07d0      	lsls	r0, r2, #31
 800f47a:	d404      	bmi.n	800f486 <_fflush_r+0x3a>
 800f47c:	0599      	lsls	r1, r3, #22
 800f47e:	d402      	bmi.n	800f486 <_fflush_r+0x3a>
 800f480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f482:	f7fe fbe3 	bl	800dc4c <__retarget_lock_acquire_recursive>
 800f486:	4628      	mov	r0, r5
 800f488:	4621      	mov	r1, r4
 800f48a:	f7ff ff59 	bl	800f340 <__sflush_r>
 800f48e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f490:	07da      	lsls	r2, r3, #31
 800f492:	4605      	mov	r5, r0
 800f494:	d4e0      	bmi.n	800f458 <_fflush_r+0xc>
 800f496:	89a3      	ldrh	r3, [r4, #12]
 800f498:	059b      	lsls	r3, r3, #22
 800f49a:	d4dd      	bmi.n	800f458 <_fflush_r+0xc>
 800f49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f49e:	f7fe fbd7 	bl	800dc50 <__retarget_lock_release_recursive>
 800f4a2:	e7d9      	b.n	800f458 <_fflush_r+0xc>
 800f4a4:	4b05      	ldr	r3, [pc, #20]	; (800f4bc <_fflush_r+0x70>)
 800f4a6:	429c      	cmp	r4, r3
 800f4a8:	d101      	bne.n	800f4ae <_fflush_r+0x62>
 800f4aa:	68ac      	ldr	r4, [r5, #8]
 800f4ac:	e7df      	b.n	800f46e <_fflush_r+0x22>
 800f4ae:	4b04      	ldr	r3, [pc, #16]	; (800f4c0 <_fflush_r+0x74>)
 800f4b0:	429c      	cmp	r4, r3
 800f4b2:	bf08      	it	eq
 800f4b4:	68ec      	ldreq	r4, [r5, #12]
 800f4b6:	e7da      	b.n	800f46e <_fflush_r+0x22>
 800f4b8:	08011720 	.word	0x08011720
 800f4bc:	08011740 	.word	0x08011740
 800f4c0:	08011700 	.word	0x08011700

0800f4c4 <std>:
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	b510      	push	{r4, lr}
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	e9c0 3300 	strd	r3, r3, [r0]
 800f4ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4d2:	6083      	str	r3, [r0, #8]
 800f4d4:	8181      	strh	r1, [r0, #12]
 800f4d6:	6643      	str	r3, [r0, #100]	; 0x64
 800f4d8:	81c2      	strh	r2, [r0, #14]
 800f4da:	6183      	str	r3, [r0, #24]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	2208      	movs	r2, #8
 800f4e0:	305c      	adds	r0, #92	; 0x5c
 800f4e2:	f7fc f92d 	bl	800b740 <memset>
 800f4e6:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <std+0x38>)
 800f4e8:	6263      	str	r3, [r4, #36]	; 0x24
 800f4ea:	4b05      	ldr	r3, [pc, #20]	; (800f500 <std+0x3c>)
 800f4ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4ee:	4b05      	ldr	r3, [pc, #20]	; (800f504 <std+0x40>)
 800f4f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4f2:	4b05      	ldr	r3, [pc, #20]	; (800f508 <std+0x44>)
 800f4f4:	6224      	str	r4, [r4, #32]
 800f4f6:	6323      	str	r3, [r4, #48]	; 0x30
 800f4f8:	bd10      	pop	{r4, pc}
 800f4fa:	bf00      	nop
 800f4fc:	0800c781 	.word	0x0800c781
 800f500:	0800c7a7 	.word	0x0800c7a7
 800f504:	0800c7df 	.word	0x0800c7df
 800f508:	0800c803 	.word	0x0800c803

0800f50c <_cleanup_r>:
 800f50c:	4901      	ldr	r1, [pc, #4]	; (800f514 <_cleanup_r+0x8>)
 800f50e:	f000 b8af 	b.w	800f670 <_fwalk_reent>
 800f512:	bf00      	nop
 800f514:	0800f44d 	.word	0x0800f44d

0800f518 <__sfmoreglue>:
 800f518:	b570      	push	{r4, r5, r6, lr}
 800f51a:	2268      	movs	r2, #104	; 0x68
 800f51c:	1e4d      	subs	r5, r1, #1
 800f51e:	4355      	muls	r5, r2
 800f520:	460e      	mov	r6, r1
 800f522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f526:	f7fc fbf1 	bl	800bd0c <_malloc_r>
 800f52a:	4604      	mov	r4, r0
 800f52c:	b140      	cbz	r0, 800f540 <__sfmoreglue+0x28>
 800f52e:	2100      	movs	r1, #0
 800f530:	e9c0 1600 	strd	r1, r6, [r0]
 800f534:	300c      	adds	r0, #12
 800f536:	60a0      	str	r0, [r4, #8]
 800f538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f53c:	f7fc f900 	bl	800b740 <memset>
 800f540:	4620      	mov	r0, r4
 800f542:	bd70      	pop	{r4, r5, r6, pc}

0800f544 <__sfp_lock_acquire>:
 800f544:	4801      	ldr	r0, [pc, #4]	; (800f54c <__sfp_lock_acquire+0x8>)
 800f546:	f7fe bb81 	b.w	800dc4c <__retarget_lock_acquire_recursive>
 800f54a:	bf00      	nop
 800f54c:	20001086 	.word	0x20001086

0800f550 <__sfp_lock_release>:
 800f550:	4801      	ldr	r0, [pc, #4]	; (800f558 <__sfp_lock_release+0x8>)
 800f552:	f7fe bb7d 	b.w	800dc50 <__retarget_lock_release_recursive>
 800f556:	bf00      	nop
 800f558:	20001086 	.word	0x20001086

0800f55c <__sinit_lock_acquire>:
 800f55c:	4801      	ldr	r0, [pc, #4]	; (800f564 <__sinit_lock_acquire+0x8>)
 800f55e:	f7fe bb75 	b.w	800dc4c <__retarget_lock_acquire_recursive>
 800f562:	bf00      	nop
 800f564:	20001087 	.word	0x20001087

0800f568 <__sinit_lock_release>:
 800f568:	4801      	ldr	r0, [pc, #4]	; (800f570 <__sinit_lock_release+0x8>)
 800f56a:	f7fe bb71 	b.w	800dc50 <__retarget_lock_release_recursive>
 800f56e:	bf00      	nop
 800f570:	20001087 	.word	0x20001087

0800f574 <__sinit>:
 800f574:	b510      	push	{r4, lr}
 800f576:	4604      	mov	r4, r0
 800f578:	f7ff fff0 	bl	800f55c <__sinit_lock_acquire>
 800f57c:	69a3      	ldr	r3, [r4, #24]
 800f57e:	b11b      	cbz	r3, 800f588 <__sinit+0x14>
 800f580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f584:	f7ff bff0 	b.w	800f568 <__sinit_lock_release>
 800f588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f58c:	6523      	str	r3, [r4, #80]	; 0x50
 800f58e:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <__sinit+0x68>)
 800f590:	4a13      	ldr	r2, [pc, #76]	; (800f5e0 <__sinit+0x6c>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	62a2      	str	r2, [r4, #40]	; 0x28
 800f596:	42a3      	cmp	r3, r4
 800f598:	bf04      	itt	eq
 800f59a:	2301      	moveq	r3, #1
 800f59c:	61a3      	streq	r3, [r4, #24]
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f000 f820 	bl	800f5e4 <__sfp>
 800f5a4:	6060      	str	r0, [r4, #4]
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f000 f81c 	bl	800f5e4 <__sfp>
 800f5ac:	60a0      	str	r0, [r4, #8]
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	f000 f818 	bl	800f5e4 <__sfp>
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	60e0      	str	r0, [r4, #12]
 800f5b8:	2104      	movs	r1, #4
 800f5ba:	6860      	ldr	r0, [r4, #4]
 800f5bc:	f7ff ff82 	bl	800f4c4 <std>
 800f5c0:	68a0      	ldr	r0, [r4, #8]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	2109      	movs	r1, #9
 800f5c6:	f7ff ff7d 	bl	800f4c4 <std>
 800f5ca:	68e0      	ldr	r0, [r4, #12]
 800f5cc:	2202      	movs	r2, #2
 800f5ce:	2112      	movs	r1, #18
 800f5d0:	f7ff ff78 	bl	800f4c4 <std>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	61a3      	str	r3, [r4, #24]
 800f5d8:	e7d2      	b.n	800f580 <__sinit+0xc>
 800f5da:	bf00      	nop
 800f5dc:	08011290 	.word	0x08011290
 800f5e0:	0800f50d 	.word	0x0800f50d

0800f5e4 <__sfp>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	f7ff ffac 	bl	800f544 <__sfp_lock_acquire>
 800f5ec:	4b1e      	ldr	r3, [pc, #120]	; (800f668 <__sfp+0x84>)
 800f5ee:	681e      	ldr	r6, [r3, #0]
 800f5f0:	69b3      	ldr	r3, [r6, #24]
 800f5f2:	b913      	cbnz	r3, 800f5fa <__sfp+0x16>
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	f7ff ffbd 	bl	800f574 <__sinit>
 800f5fa:	3648      	adds	r6, #72	; 0x48
 800f5fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f600:	3b01      	subs	r3, #1
 800f602:	d503      	bpl.n	800f60c <__sfp+0x28>
 800f604:	6833      	ldr	r3, [r6, #0]
 800f606:	b30b      	cbz	r3, 800f64c <__sfp+0x68>
 800f608:	6836      	ldr	r6, [r6, #0]
 800f60a:	e7f7      	b.n	800f5fc <__sfp+0x18>
 800f60c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f610:	b9d5      	cbnz	r5, 800f648 <__sfp+0x64>
 800f612:	4b16      	ldr	r3, [pc, #88]	; (800f66c <__sfp+0x88>)
 800f614:	60e3      	str	r3, [r4, #12]
 800f616:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f61a:	6665      	str	r5, [r4, #100]	; 0x64
 800f61c:	f7fe fb14 	bl	800dc48 <__retarget_lock_init_recursive>
 800f620:	f7ff ff96 	bl	800f550 <__sfp_lock_release>
 800f624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f62c:	6025      	str	r5, [r4, #0]
 800f62e:	61a5      	str	r5, [r4, #24]
 800f630:	2208      	movs	r2, #8
 800f632:	4629      	mov	r1, r5
 800f634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f638:	f7fc f882 	bl	800b740 <memset>
 800f63c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f644:	4620      	mov	r0, r4
 800f646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f648:	3468      	adds	r4, #104	; 0x68
 800f64a:	e7d9      	b.n	800f600 <__sfp+0x1c>
 800f64c:	2104      	movs	r1, #4
 800f64e:	4638      	mov	r0, r7
 800f650:	f7ff ff62 	bl	800f518 <__sfmoreglue>
 800f654:	4604      	mov	r4, r0
 800f656:	6030      	str	r0, [r6, #0]
 800f658:	2800      	cmp	r0, #0
 800f65a:	d1d5      	bne.n	800f608 <__sfp+0x24>
 800f65c:	f7ff ff78 	bl	800f550 <__sfp_lock_release>
 800f660:	230c      	movs	r3, #12
 800f662:	603b      	str	r3, [r7, #0]
 800f664:	e7ee      	b.n	800f644 <__sfp+0x60>
 800f666:	bf00      	nop
 800f668:	08011290 	.word	0x08011290
 800f66c:	ffff0001 	.word	0xffff0001

0800f670 <_fwalk_reent>:
 800f670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f674:	4606      	mov	r6, r0
 800f676:	4688      	mov	r8, r1
 800f678:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f67c:	2700      	movs	r7, #0
 800f67e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f682:	f1b9 0901 	subs.w	r9, r9, #1
 800f686:	d505      	bpl.n	800f694 <_fwalk_reent+0x24>
 800f688:	6824      	ldr	r4, [r4, #0]
 800f68a:	2c00      	cmp	r4, #0
 800f68c:	d1f7      	bne.n	800f67e <_fwalk_reent+0xe>
 800f68e:	4638      	mov	r0, r7
 800f690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f694:	89ab      	ldrh	r3, [r5, #12]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d907      	bls.n	800f6aa <_fwalk_reent+0x3a>
 800f69a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	d003      	beq.n	800f6aa <_fwalk_reent+0x3a>
 800f6a2:	4629      	mov	r1, r5
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	47c0      	blx	r8
 800f6a8:	4307      	orrs	r7, r0
 800f6aa:	3568      	adds	r5, #104	; 0x68
 800f6ac:	e7e9      	b.n	800f682 <_fwalk_reent+0x12>

0800f6ae <__swhatbuf_r>:
 800f6ae:	b570      	push	{r4, r5, r6, lr}
 800f6b0:	460e      	mov	r6, r1
 800f6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b6:	2900      	cmp	r1, #0
 800f6b8:	b096      	sub	sp, #88	; 0x58
 800f6ba:	4614      	mov	r4, r2
 800f6bc:	461d      	mov	r5, r3
 800f6be:	da08      	bge.n	800f6d2 <__swhatbuf_r+0x24>
 800f6c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	602a      	str	r2, [r5, #0]
 800f6c8:	061a      	lsls	r2, r3, #24
 800f6ca:	d410      	bmi.n	800f6ee <__swhatbuf_r+0x40>
 800f6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6d0:	e00e      	b.n	800f6f0 <__swhatbuf_r+0x42>
 800f6d2:	466a      	mov	r2, sp
 800f6d4:	f000 f8fe 	bl	800f8d4 <_fstat_r>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	dbf1      	blt.n	800f6c0 <__swhatbuf_r+0x12>
 800f6dc:	9a01      	ldr	r2, [sp, #4]
 800f6de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f6e6:	425a      	negs	r2, r3
 800f6e8:	415a      	adcs	r2, r3
 800f6ea:	602a      	str	r2, [r5, #0]
 800f6ec:	e7ee      	b.n	800f6cc <__swhatbuf_r+0x1e>
 800f6ee:	2340      	movs	r3, #64	; 0x40
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	6023      	str	r3, [r4, #0]
 800f6f4:	b016      	add	sp, #88	; 0x58
 800f6f6:	bd70      	pop	{r4, r5, r6, pc}

0800f6f8 <__smakebuf_r>:
 800f6f8:	898b      	ldrh	r3, [r1, #12]
 800f6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6fc:	079d      	lsls	r5, r3, #30
 800f6fe:	4606      	mov	r6, r0
 800f700:	460c      	mov	r4, r1
 800f702:	d507      	bpl.n	800f714 <__smakebuf_r+0x1c>
 800f704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	6123      	str	r3, [r4, #16]
 800f70c:	2301      	movs	r3, #1
 800f70e:	6163      	str	r3, [r4, #20]
 800f710:	b002      	add	sp, #8
 800f712:	bd70      	pop	{r4, r5, r6, pc}
 800f714:	ab01      	add	r3, sp, #4
 800f716:	466a      	mov	r2, sp
 800f718:	f7ff ffc9 	bl	800f6ae <__swhatbuf_r>
 800f71c:	9900      	ldr	r1, [sp, #0]
 800f71e:	4605      	mov	r5, r0
 800f720:	4630      	mov	r0, r6
 800f722:	f7fc faf3 	bl	800bd0c <_malloc_r>
 800f726:	b948      	cbnz	r0, 800f73c <__smakebuf_r+0x44>
 800f728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f72c:	059a      	lsls	r2, r3, #22
 800f72e:	d4ef      	bmi.n	800f710 <__smakebuf_r+0x18>
 800f730:	f023 0303 	bic.w	r3, r3, #3
 800f734:	f043 0302 	orr.w	r3, r3, #2
 800f738:	81a3      	strh	r3, [r4, #12]
 800f73a:	e7e3      	b.n	800f704 <__smakebuf_r+0xc>
 800f73c:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <__smakebuf_r+0x7c>)
 800f73e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	6020      	str	r0, [r4, #0]
 800f744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f748:	81a3      	strh	r3, [r4, #12]
 800f74a:	9b00      	ldr	r3, [sp, #0]
 800f74c:	6163      	str	r3, [r4, #20]
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	6120      	str	r0, [r4, #16]
 800f752:	b15b      	cbz	r3, 800f76c <__smakebuf_r+0x74>
 800f754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f758:	4630      	mov	r0, r6
 800f75a:	f000 f8cd 	bl	800f8f8 <_isatty_r>
 800f75e:	b128      	cbz	r0, 800f76c <__smakebuf_r+0x74>
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	f023 0303 	bic.w	r3, r3, #3
 800f766:	f043 0301 	orr.w	r3, r3, #1
 800f76a:	81a3      	strh	r3, [r4, #12]
 800f76c:	89a0      	ldrh	r0, [r4, #12]
 800f76e:	4305      	orrs	r5, r0
 800f770:	81a5      	strh	r5, [r4, #12]
 800f772:	e7cd      	b.n	800f710 <__smakebuf_r+0x18>
 800f774:	0800f50d 	.word	0x0800f50d

0800f778 <__ascii_mbtowc>:
 800f778:	b082      	sub	sp, #8
 800f77a:	b901      	cbnz	r1, 800f77e <__ascii_mbtowc+0x6>
 800f77c:	a901      	add	r1, sp, #4
 800f77e:	b142      	cbz	r2, 800f792 <__ascii_mbtowc+0x1a>
 800f780:	b14b      	cbz	r3, 800f796 <__ascii_mbtowc+0x1e>
 800f782:	7813      	ldrb	r3, [r2, #0]
 800f784:	600b      	str	r3, [r1, #0]
 800f786:	7812      	ldrb	r2, [r2, #0]
 800f788:	1e10      	subs	r0, r2, #0
 800f78a:	bf18      	it	ne
 800f78c:	2001      	movne	r0, #1
 800f78e:	b002      	add	sp, #8
 800f790:	4770      	bx	lr
 800f792:	4610      	mov	r0, r2
 800f794:	e7fb      	b.n	800f78e <__ascii_mbtowc+0x16>
 800f796:	f06f 0001 	mvn.w	r0, #1
 800f79a:	e7f8      	b.n	800f78e <__ascii_mbtowc+0x16>

0800f79c <memmove>:
 800f79c:	4288      	cmp	r0, r1
 800f79e:	b510      	push	{r4, lr}
 800f7a0:	eb01 0402 	add.w	r4, r1, r2
 800f7a4:	d902      	bls.n	800f7ac <memmove+0x10>
 800f7a6:	4284      	cmp	r4, r0
 800f7a8:	4623      	mov	r3, r4
 800f7aa:	d807      	bhi.n	800f7bc <memmove+0x20>
 800f7ac:	1e43      	subs	r3, r0, #1
 800f7ae:	42a1      	cmp	r1, r4
 800f7b0:	d008      	beq.n	800f7c4 <memmove+0x28>
 800f7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ba:	e7f8      	b.n	800f7ae <memmove+0x12>
 800f7bc:	4402      	add	r2, r0
 800f7be:	4601      	mov	r1, r0
 800f7c0:	428a      	cmp	r2, r1
 800f7c2:	d100      	bne.n	800f7c6 <memmove+0x2a>
 800f7c4:	bd10      	pop	{r4, pc}
 800f7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7ce:	e7f7      	b.n	800f7c0 <memmove+0x24>

0800f7d0 <_realloc_r>:
 800f7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	4614      	mov	r4, r2
 800f7d8:	460e      	mov	r6, r1
 800f7da:	b921      	cbnz	r1, 800f7e6 <_realloc_r+0x16>
 800f7dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	f7fc ba93 	b.w	800bd0c <_malloc_r>
 800f7e6:	b92a      	cbnz	r2, 800f7f4 <_realloc_r+0x24>
 800f7e8:	f7fc fa24 	bl	800bc34 <_free_r>
 800f7ec:	4625      	mov	r5, r4
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f4:	f000 f890 	bl	800f918 <_malloc_usable_size_r>
 800f7f8:	4284      	cmp	r4, r0
 800f7fa:	4607      	mov	r7, r0
 800f7fc:	d802      	bhi.n	800f804 <_realloc_r+0x34>
 800f7fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f802:	d812      	bhi.n	800f82a <_realloc_r+0x5a>
 800f804:	4621      	mov	r1, r4
 800f806:	4640      	mov	r0, r8
 800f808:	f7fc fa80 	bl	800bd0c <_malloc_r>
 800f80c:	4605      	mov	r5, r0
 800f80e:	2800      	cmp	r0, #0
 800f810:	d0ed      	beq.n	800f7ee <_realloc_r+0x1e>
 800f812:	42bc      	cmp	r4, r7
 800f814:	4622      	mov	r2, r4
 800f816:	4631      	mov	r1, r6
 800f818:	bf28      	it	cs
 800f81a:	463a      	movcs	r2, r7
 800f81c:	f7fe fa2c 	bl	800dc78 <memcpy>
 800f820:	4631      	mov	r1, r6
 800f822:	4640      	mov	r0, r8
 800f824:	f7fc fa06 	bl	800bc34 <_free_r>
 800f828:	e7e1      	b.n	800f7ee <_realloc_r+0x1e>
 800f82a:	4635      	mov	r5, r6
 800f82c:	e7df      	b.n	800f7ee <_realloc_r+0x1e>

0800f82e <_raise_r>:
 800f82e:	291f      	cmp	r1, #31
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4604      	mov	r4, r0
 800f834:	460d      	mov	r5, r1
 800f836:	d904      	bls.n	800f842 <_raise_r+0x14>
 800f838:	2316      	movs	r3, #22
 800f83a:	6003      	str	r3, [r0, #0]
 800f83c:	f04f 30ff 	mov.w	r0, #4294967295
 800f840:	bd38      	pop	{r3, r4, r5, pc}
 800f842:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f844:	b112      	cbz	r2, 800f84c <_raise_r+0x1e>
 800f846:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f84a:	b94b      	cbnz	r3, 800f860 <_raise_r+0x32>
 800f84c:	4620      	mov	r0, r4
 800f84e:	f000 f831 	bl	800f8b4 <_getpid_r>
 800f852:	462a      	mov	r2, r5
 800f854:	4601      	mov	r1, r0
 800f856:	4620      	mov	r0, r4
 800f858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f85c:	f000 b818 	b.w	800f890 <_kill_r>
 800f860:	2b01      	cmp	r3, #1
 800f862:	d00a      	beq.n	800f87a <_raise_r+0x4c>
 800f864:	1c59      	adds	r1, r3, #1
 800f866:	d103      	bne.n	800f870 <_raise_r+0x42>
 800f868:	2316      	movs	r3, #22
 800f86a:	6003      	str	r3, [r0, #0]
 800f86c:	2001      	movs	r0, #1
 800f86e:	e7e7      	b.n	800f840 <_raise_r+0x12>
 800f870:	2400      	movs	r4, #0
 800f872:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f876:	4628      	mov	r0, r5
 800f878:	4798      	blx	r3
 800f87a:	2000      	movs	r0, #0
 800f87c:	e7e0      	b.n	800f840 <_raise_r+0x12>
	...

0800f880 <raise>:
 800f880:	4b02      	ldr	r3, [pc, #8]	; (800f88c <raise+0xc>)
 800f882:	4601      	mov	r1, r0
 800f884:	6818      	ldr	r0, [r3, #0]
 800f886:	f7ff bfd2 	b.w	800f82e <_raise_r>
 800f88a:	bf00      	nop
 800f88c:	200002c4 	.word	0x200002c4

0800f890 <_kill_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d07      	ldr	r5, [pc, #28]	; (800f8b0 <_kill_r+0x20>)
 800f894:	2300      	movs	r3, #0
 800f896:	4604      	mov	r4, r0
 800f898:	4608      	mov	r0, r1
 800f89a:	4611      	mov	r1, r2
 800f89c:	602b      	str	r3, [r5, #0]
 800f89e:	f7f4 fd8d 	bl	80043bc <_kill>
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	d102      	bne.n	800f8ac <_kill_r+0x1c>
 800f8a6:	682b      	ldr	r3, [r5, #0]
 800f8a8:	b103      	cbz	r3, 800f8ac <_kill_r+0x1c>
 800f8aa:	6023      	str	r3, [r4, #0]
 800f8ac:	bd38      	pop	{r3, r4, r5, pc}
 800f8ae:	bf00      	nop
 800f8b0:	2000108c 	.word	0x2000108c

0800f8b4 <_getpid_r>:
 800f8b4:	f7f4 bd7a 	b.w	80043ac <_getpid>

0800f8b8 <__ascii_wctomb>:
 800f8b8:	b149      	cbz	r1, 800f8ce <__ascii_wctomb+0x16>
 800f8ba:	2aff      	cmp	r2, #255	; 0xff
 800f8bc:	bf85      	ittet	hi
 800f8be:	238a      	movhi	r3, #138	; 0x8a
 800f8c0:	6003      	strhi	r3, [r0, #0]
 800f8c2:	700a      	strbls	r2, [r1, #0]
 800f8c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f8c8:	bf98      	it	ls
 800f8ca:	2001      	movls	r0, #1
 800f8cc:	4770      	bx	lr
 800f8ce:	4608      	mov	r0, r1
 800f8d0:	4770      	bx	lr
	...

0800f8d4 <_fstat_r>:
 800f8d4:	b538      	push	{r3, r4, r5, lr}
 800f8d6:	4d07      	ldr	r5, [pc, #28]	; (800f8f4 <_fstat_r+0x20>)
 800f8d8:	2300      	movs	r3, #0
 800f8da:	4604      	mov	r4, r0
 800f8dc:	4608      	mov	r0, r1
 800f8de:	4611      	mov	r1, r2
 800f8e0:	602b      	str	r3, [r5, #0]
 800f8e2:	f7f4 fdca 	bl	800447a <_fstat>
 800f8e6:	1c43      	adds	r3, r0, #1
 800f8e8:	d102      	bne.n	800f8f0 <_fstat_r+0x1c>
 800f8ea:	682b      	ldr	r3, [r5, #0]
 800f8ec:	b103      	cbz	r3, 800f8f0 <_fstat_r+0x1c>
 800f8ee:	6023      	str	r3, [r4, #0]
 800f8f0:	bd38      	pop	{r3, r4, r5, pc}
 800f8f2:	bf00      	nop
 800f8f4:	2000108c 	.word	0x2000108c

0800f8f8 <_isatty_r>:
 800f8f8:	b538      	push	{r3, r4, r5, lr}
 800f8fa:	4d06      	ldr	r5, [pc, #24]	; (800f914 <_isatty_r+0x1c>)
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4604      	mov	r4, r0
 800f900:	4608      	mov	r0, r1
 800f902:	602b      	str	r3, [r5, #0]
 800f904:	f7f4 fdc9 	bl	800449a <_isatty>
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	d102      	bne.n	800f912 <_isatty_r+0x1a>
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	b103      	cbz	r3, 800f912 <_isatty_r+0x1a>
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	2000108c 	.word	0x2000108c

0800f918 <_malloc_usable_size_r>:
 800f918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f91c:	1f18      	subs	r0, r3, #4
 800f91e:	2b00      	cmp	r3, #0
 800f920:	bfbc      	itt	lt
 800f922:	580b      	ldrlt	r3, [r1, r0]
 800f924:	18c0      	addlt	r0, r0, r3
 800f926:	4770      	bx	lr

0800f928 <atan>:
 800f928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92c:	ec55 4b10 	vmov	r4, r5, d0
 800f930:	4bc3      	ldr	r3, [pc, #780]	; (800fc40 <atan+0x318>)
 800f932:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f936:	429e      	cmp	r6, r3
 800f938:	46ab      	mov	fp, r5
 800f93a:	dd18      	ble.n	800f96e <atan+0x46>
 800f93c:	4bc1      	ldr	r3, [pc, #772]	; (800fc44 <atan+0x31c>)
 800f93e:	429e      	cmp	r6, r3
 800f940:	dc01      	bgt.n	800f946 <atan+0x1e>
 800f942:	d109      	bne.n	800f958 <atan+0x30>
 800f944:	b144      	cbz	r4, 800f958 <atan+0x30>
 800f946:	4622      	mov	r2, r4
 800f948:	462b      	mov	r3, r5
 800f94a:	4620      	mov	r0, r4
 800f94c:	4629      	mov	r1, r5
 800f94e:	f7f0 fcb5 	bl	80002bc <__adddf3>
 800f952:	4604      	mov	r4, r0
 800f954:	460d      	mov	r5, r1
 800f956:	e006      	b.n	800f966 <atan+0x3e>
 800f958:	f1bb 0f00 	cmp.w	fp, #0
 800f95c:	f300 8131 	bgt.w	800fbc2 <atan+0x29a>
 800f960:	a59b      	add	r5, pc, #620	; (adr r5, 800fbd0 <atan+0x2a8>)
 800f962:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f966:	ec45 4b10 	vmov	d0, r4, r5
 800f96a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96e:	4bb6      	ldr	r3, [pc, #728]	; (800fc48 <atan+0x320>)
 800f970:	429e      	cmp	r6, r3
 800f972:	dc14      	bgt.n	800f99e <atan+0x76>
 800f974:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f978:	429e      	cmp	r6, r3
 800f97a:	dc0d      	bgt.n	800f998 <atan+0x70>
 800f97c:	a396      	add	r3, pc, #600	; (adr r3, 800fbd8 <atan+0x2b0>)
 800f97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f982:	ee10 0a10 	vmov	r0, s0
 800f986:	4629      	mov	r1, r5
 800f988:	f7f0 fc98 	bl	80002bc <__adddf3>
 800f98c:	4baf      	ldr	r3, [pc, #700]	; (800fc4c <atan+0x324>)
 800f98e:	2200      	movs	r2, #0
 800f990:	f7f1 f8da 	bl	8000b48 <__aeabi_dcmpgt>
 800f994:	2800      	cmp	r0, #0
 800f996:	d1e6      	bne.n	800f966 <atan+0x3e>
 800f998:	f04f 3aff 	mov.w	sl, #4294967295
 800f99c:	e02b      	b.n	800f9f6 <atan+0xce>
 800f99e:	f000 f963 	bl	800fc68 <fabs>
 800f9a2:	4bab      	ldr	r3, [pc, #684]	; (800fc50 <atan+0x328>)
 800f9a4:	429e      	cmp	r6, r3
 800f9a6:	ec55 4b10 	vmov	r4, r5, d0
 800f9aa:	f300 80bf 	bgt.w	800fb2c <atan+0x204>
 800f9ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f9b2:	429e      	cmp	r6, r3
 800f9b4:	f300 80a0 	bgt.w	800faf8 <atan+0x1d0>
 800f9b8:	ee10 2a10 	vmov	r2, s0
 800f9bc:	ee10 0a10 	vmov	r0, s0
 800f9c0:	462b      	mov	r3, r5
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	f7f0 fc7a 	bl	80002bc <__adddf3>
 800f9c8:	4ba0      	ldr	r3, [pc, #640]	; (800fc4c <atan+0x324>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f7f0 fc74 	bl	80002b8 <__aeabi_dsub>
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	460f      	mov	r7, r1
 800f9d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f9da:	4620      	mov	r0, r4
 800f9dc:	4629      	mov	r1, r5
 800f9de:	f7f0 fc6d 	bl	80002bc <__adddf3>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	4639      	mov	r1, r7
 800f9ea:	f7f0 ff47 	bl	800087c <__aeabi_ddiv>
 800f9ee:	f04f 0a00 	mov.w	sl, #0
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	460d      	mov	r5, r1
 800f9f6:	4622      	mov	r2, r4
 800f9f8:	462b      	mov	r3, r5
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	4629      	mov	r1, r5
 800f9fe:	f7f0 fe13 	bl	8000628 <__aeabi_dmul>
 800fa02:	4602      	mov	r2, r0
 800fa04:	460b      	mov	r3, r1
 800fa06:	4680      	mov	r8, r0
 800fa08:	4689      	mov	r9, r1
 800fa0a:	f7f0 fe0d 	bl	8000628 <__aeabi_dmul>
 800fa0e:	a374      	add	r3, pc, #464	; (adr r3, 800fbe0 <atan+0x2b8>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	4606      	mov	r6, r0
 800fa16:	460f      	mov	r7, r1
 800fa18:	f7f0 fe06 	bl	8000628 <__aeabi_dmul>
 800fa1c:	a372      	add	r3, pc, #456	; (adr r3, 800fbe8 <atan+0x2c0>)
 800fa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa22:	f7f0 fc4b 	bl	80002bc <__adddf3>
 800fa26:	4632      	mov	r2, r6
 800fa28:	463b      	mov	r3, r7
 800fa2a:	f7f0 fdfd 	bl	8000628 <__aeabi_dmul>
 800fa2e:	a370      	add	r3, pc, #448	; (adr r3, 800fbf0 <atan+0x2c8>)
 800fa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa34:	f7f0 fc42 	bl	80002bc <__adddf3>
 800fa38:	4632      	mov	r2, r6
 800fa3a:	463b      	mov	r3, r7
 800fa3c:	f7f0 fdf4 	bl	8000628 <__aeabi_dmul>
 800fa40:	a36d      	add	r3, pc, #436	; (adr r3, 800fbf8 <atan+0x2d0>)
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f0 fc39 	bl	80002bc <__adddf3>
 800fa4a:	4632      	mov	r2, r6
 800fa4c:	463b      	mov	r3, r7
 800fa4e:	f7f0 fdeb 	bl	8000628 <__aeabi_dmul>
 800fa52:	a36b      	add	r3, pc, #428	; (adr r3, 800fc00 <atan+0x2d8>)
 800fa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa58:	f7f0 fc30 	bl	80002bc <__adddf3>
 800fa5c:	4632      	mov	r2, r6
 800fa5e:	463b      	mov	r3, r7
 800fa60:	f7f0 fde2 	bl	8000628 <__aeabi_dmul>
 800fa64:	a368      	add	r3, pc, #416	; (adr r3, 800fc08 <atan+0x2e0>)
 800fa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6a:	f7f0 fc27 	bl	80002bc <__adddf3>
 800fa6e:	4642      	mov	r2, r8
 800fa70:	464b      	mov	r3, r9
 800fa72:	f7f0 fdd9 	bl	8000628 <__aeabi_dmul>
 800fa76:	a366      	add	r3, pc, #408	; (adr r3, 800fc10 <atan+0x2e8>)
 800fa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7c:	4680      	mov	r8, r0
 800fa7e:	4689      	mov	r9, r1
 800fa80:	4630      	mov	r0, r6
 800fa82:	4639      	mov	r1, r7
 800fa84:	f7f0 fdd0 	bl	8000628 <__aeabi_dmul>
 800fa88:	a363      	add	r3, pc, #396	; (adr r3, 800fc18 <atan+0x2f0>)
 800fa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8e:	f7f0 fc13 	bl	80002b8 <__aeabi_dsub>
 800fa92:	4632      	mov	r2, r6
 800fa94:	463b      	mov	r3, r7
 800fa96:	f7f0 fdc7 	bl	8000628 <__aeabi_dmul>
 800fa9a:	a361      	add	r3, pc, #388	; (adr r3, 800fc20 <atan+0x2f8>)
 800fa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa0:	f7f0 fc0a 	bl	80002b8 <__aeabi_dsub>
 800faa4:	4632      	mov	r2, r6
 800faa6:	463b      	mov	r3, r7
 800faa8:	f7f0 fdbe 	bl	8000628 <__aeabi_dmul>
 800faac:	a35e      	add	r3, pc, #376	; (adr r3, 800fc28 <atan+0x300>)
 800faae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab2:	f7f0 fc01 	bl	80002b8 <__aeabi_dsub>
 800fab6:	4632      	mov	r2, r6
 800fab8:	463b      	mov	r3, r7
 800faba:	f7f0 fdb5 	bl	8000628 <__aeabi_dmul>
 800fabe:	a35c      	add	r3, pc, #368	; (adr r3, 800fc30 <atan+0x308>)
 800fac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac4:	f7f0 fbf8 	bl	80002b8 <__aeabi_dsub>
 800fac8:	4632      	mov	r2, r6
 800faca:	463b      	mov	r3, r7
 800facc:	f7f0 fdac 	bl	8000628 <__aeabi_dmul>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4640      	mov	r0, r8
 800fad6:	4649      	mov	r1, r9
 800fad8:	f7f0 fbf0 	bl	80002bc <__adddf3>
 800fadc:	4622      	mov	r2, r4
 800fade:	462b      	mov	r3, r5
 800fae0:	f7f0 fda2 	bl	8000628 <__aeabi_dmul>
 800fae4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	d14b      	bne.n	800fb86 <atan+0x25e>
 800faee:	4620      	mov	r0, r4
 800faf0:	4629      	mov	r1, r5
 800faf2:	f7f0 fbe1 	bl	80002b8 <__aeabi_dsub>
 800faf6:	e72c      	b.n	800f952 <atan+0x2a>
 800faf8:	ee10 0a10 	vmov	r0, s0
 800fafc:	4b53      	ldr	r3, [pc, #332]	; (800fc4c <atan+0x324>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	4629      	mov	r1, r5
 800fb02:	f7f0 fbd9 	bl	80002b8 <__aeabi_dsub>
 800fb06:	4b51      	ldr	r3, [pc, #324]	; (800fc4c <atan+0x324>)
 800fb08:	4606      	mov	r6, r0
 800fb0a:	460f      	mov	r7, r1
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	4620      	mov	r0, r4
 800fb10:	4629      	mov	r1, r5
 800fb12:	f7f0 fbd3 	bl	80002bc <__adddf3>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	4639      	mov	r1, r7
 800fb1e:	f7f0 fead 	bl	800087c <__aeabi_ddiv>
 800fb22:	f04f 0a01 	mov.w	sl, #1
 800fb26:	4604      	mov	r4, r0
 800fb28:	460d      	mov	r5, r1
 800fb2a:	e764      	b.n	800f9f6 <atan+0xce>
 800fb2c:	4b49      	ldr	r3, [pc, #292]	; (800fc54 <atan+0x32c>)
 800fb2e:	429e      	cmp	r6, r3
 800fb30:	da1d      	bge.n	800fb6e <atan+0x246>
 800fb32:	ee10 0a10 	vmov	r0, s0
 800fb36:	4b48      	ldr	r3, [pc, #288]	; (800fc58 <atan+0x330>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	f7f0 fbbc 	bl	80002b8 <__aeabi_dsub>
 800fb40:	4b45      	ldr	r3, [pc, #276]	; (800fc58 <atan+0x330>)
 800fb42:	4606      	mov	r6, r0
 800fb44:	460f      	mov	r7, r1
 800fb46:	2200      	movs	r2, #0
 800fb48:	4620      	mov	r0, r4
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	f7f0 fd6c 	bl	8000628 <__aeabi_dmul>
 800fb50:	4b3e      	ldr	r3, [pc, #248]	; (800fc4c <atan+0x324>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	f7f0 fbb2 	bl	80002bc <__adddf3>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	4639      	mov	r1, r7
 800fb60:	f7f0 fe8c 	bl	800087c <__aeabi_ddiv>
 800fb64:	f04f 0a02 	mov.w	sl, #2
 800fb68:	4604      	mov	r4, r0
 800fb6a:	460d      	mov	r5, r1
 800fb6c:	e743      	b.n	800f9f6 <atan+0xce>
 800fb6e:	462b      	mov	r3, r5
 800fb70:	ee10 2a10 	vmov	r2, s0
 800fb74:	4939      	ldr	r1, [pc, #228]	; (800fc5c <atan+0x334>)
 800fb76:	2000      	movs	r0, #0
 800fb78:	f7f0 fe80 	bl	800087c <__aeabi_ddiv>
 800fb7c:	f04f 0a03 	mov.w	sl, #3
 800fb80:	4604      	mov	r4, r0
 800fb82:	460d      	mov	r5, r1
 800fb84:	e737      	b.n	800f9f6 <atan+0xce>
 800fb86:	4b36      	ldr	r3, [pc, #216]	; (800fc60 <atan+0x338>)
 800fb88:	4e36      	ldr	r6, [pc, #216]	; (800fc64 <atan+0x33c>)
 800fb8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fb8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fb92:	e9da 2300 	ldrd	r2, r3, [sl]
 800fb96:	f7f0 fb8f 	bl	80002b8 <__aeabi_dsub>
 800fb9a:	4622      	mov	r2, r4
 800fb9c:	462b      	mov	r3, r5
 800fb9e:	f7f0 fb8b 	bl	80002b8 <__aeabi_dsub>
 800fba2:	4602      	mov	r2, r0
 800fba4:	460b      	mov	r3, r1
 800fba6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fbaa:	f7f0 fb85 	bl	80002b8 <__aeabi_dsub>
 800fbae:	f1bb 0f00 	cmp.w	fp, #0
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	460d      	mov	r5, r1
 800fbb6:	f6bf aed6 	bge.w	800f966 <atan+0x3e>
 800fbba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbbe:	461d      	mov	r5, r3
 800fbc0:	e6d1      	b.n	800f966 <atan+0x3e>
 800fbc2:	a51d      	add	r5, pc, #116	; (adr r5, 800fc38 <atan+0x310>)
 800fbc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fbc8:	e6cd      	b.n	800f966 <atan+0x3e>
 800fbca:	bf00      	nop
 800fbcc:	f3af 8000 	nop.w
 800fbd0:	54442d18 	.word	0x54442d18
 800fbd4:	bff921fb 	.word	0xbff921fb
 800fbd8:	8800759c 	.word	0x8800759c
 800fbdc:	7e37e43c 	.word	0x7e37e43c
 800fbe0:	e322da11 	.word	0xe322da11
 800fbe4:	3f90ad3a 	.word	0x3f90ad3a
 800fbe8:	24760deb 	.word	0x24760deb
 800fbec:	3fa97b4b 	.word	0x3fa97b4b
 800fbf0:	a0d03d51 	.word	0xa0d03d51
 800fbf4:	3fb10d66 	.word	0x3fb10d66
 800fbf8:	c54c206e 	.word	0xc54c206e
 800fbfc:	3fb745cd 	.word	0x3fb745cd
 800fc00:	920083ff 	.word	0x920083ff
 800fc04:	3fc24924 	.word	0x3fc24924
 800fc08:	5555550d 	.word	0x5555550d
 800fc0c:	3fd55555 	.word	0x3fd55555
 800fc10:	2c6a6c2f 	.word	0x2c6a6c2f
 800fc14:	bfa2b444 	.word	0xbfa2b444
 800fc18:	52defd9a 	.word	0x52defd9a
 800fc1c:	3fadde2d 	.word	0x3fadde2d
 800fc20:	af749a6d 	.word	0xaf749a6d
 800fc24:	3fb3b0f2 	.word	0x3fb3b0f2
 800fc28:	fe231671 	.word	0xfe231671
 800fc2c:	3fbc71c6 	.word	0x3fbc71c6
 800fc30:	9998ebc4 	.word	0x9998ebc4
 800fc34:	3fc99999 	.word	0x3fc99999
 800fc38:	54442d18 	.word	0x54442d18
 800fc3c:	3ff921fb 	.word	0x3ff921fb
 800fc40:	440fffff 	.word	0x440fffff
 800fc44:	7ff00000 	.word	0x7ff00000
 800fc48:	3fdbffff 	.word	0x3fdbffff
 800fc4c:	3ff00000 	.word	0x3ff00000
 800fc50:	3ff2ffff 	.word	0x3ff2ffff
 800fc54:	40038000 	.word	0x40038000
 800fc58:	3ff80000 	.word	0x3ff80000
 800fc5c:	bff00000 	.word	0xbff00000
 800fc60:	08011790 	.word	0x08011790
 800fc64:	08011770 	.word	0x08011770

0800fc68 <fabs>:
 800fc68:	ec51 0b10 	vmov	r0, r1, d0
 800fc6c:	ee10 2a10 	vmov	r2, s0
 800fc70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc74:	ec43 2b10 	vmov	d0, r2, r3
 800fc78:	4770      	bx	lr

0800fc7a <atan2>:
 800fc7a:	f000 b82d 	b.w	800fcd8 <__ieee754_atan2>

0800fc7e <sqrt>:
 800fc7e:	b538      	push	{r3, r4, r5, lr}
 800fc80:	ed2d 8b02 	vpush	{d8}
 800fc84:	ec55 4b10 	vmov	r4, r5, d0
 800fc88:	f000 f8f0 	bl	800fe6c <__ieee754_sqrt>
 800fc8c:	4622      	mov	r2, r4
 800fc8e:	462b      	mov	r3, r5
 800fc90:	4620      	mov	r0, r4
 800fc92:	4629      	mov	r1, r5
 800fc94:	eeb0 8a40 	vmov.f32	s16, s0
 800fc98:	eef0 8a60 	vmov.f32	s17, s1
 800fc9c:	f7f0 ff5e 	bl	8000b5c <__aeabi_dcmpun>
 800fca0:	b990      	cbnz	r0, 800fcc8 <sqrt+0x4a>
 800fca2:	2200      	movs	r2, #0
 800fca4:	2300      	movs	r3, #0
 800fca6:	4620      	mov	r0, r4
 800fca8:	4629      	mov	r1, r5
 800fcaa:	f7f0 ff2f 	bl	8000b0c <__aeabi_dcmplt>
 800fcae:	b158      	cbz	r0, 800fcc8 <sqrt+0x4a>
 800fcb0:	f7fb fc42 	bl	800b538 <__errno>
 800fcb4:	2321      	movs	r3, #33	; 0x21
 800fcb6:	6003      	str	r3, [r0, #0]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2300      	movs	r3, #0
 800fcbc:	4610      	mov	r0, r2
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	f7f0 fddc 	bl	800087c <__aeabi_ddiv>
 800fcc4:	ec41 0b18 	vmov	d8, r0, r1
 800fcc8:	eeb0 0a48 	vmov.f32	s0, s16
 800fccc:	eef0 0a68 	vmov.f32	s1, s17
 800fcd0:	ecbd 8b02 	vpop	{d8}
 800fcd4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fcd8 <__ieee754_atan2>:
 800fcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcdc:	ec57 6b11 	vmov	r6, r7, d1
 800fce0:	4273      	negs	r3, r6
 800fce2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fe68 <__ieee754_atan2+0x190>
 800fce6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fcea:	4333      	orrs	r3, r6
 800fcec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fcf0:	4573      	cmp	r3, lr
 800fcf2:	ec51 0b10 	vmov	r0, r1, d0
 800fcf6:	ee11 8a10 	vmov	r8, s2
 800fcfa:	d80a      	bhi.n	800fd12 <__ieee754_atan2+0x3a>
 800fcfc:	4244      	negs	r4, r0
 800fcfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd02:	4304      	orrs	r4, r0
 800fd04:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fd08:	4574      	cmp	r4, lr
 800fd0a:	ee10 9a10 	vmov	r9, s0
 800fd0e:	468c      	mov	ip, r1
 800fd10:	d907      	bls.n	800fd22 <__ieee754_atan2+0x4a>
 800fd12:	4632      	mov	r2, r6
 800fd14:	463b      	mov	r3, r7
 800fd16:	f7f0 fad1 	bl	80002bc <__adddf3>
 800fd1a:	ec41 0b10 	vmov	d0, r0, r1
 800fd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd22:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fd26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fd2a:	4334      	orrs	r4, r6
 800fd2c:	d103      	bne.n	800fd36 <__ieee754_atan2+0x5e>
 800fd2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd32:	f7ff bdf9 	b.w	800f928 <atan>
 800fd36:	17bc      	asrs	r4, r7, #30
 800fd38:	f004 0402 	and.w	r4, r4, #2
 800fd3c:	ea53 0909 	orrs.w	r9, r3, r9
 800fd40:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fd44:	d107      	bne.n	800fd56 <__ieee754_atan2+0x7e>
 800fd46:	2c02      	cmp	r4, #2
 800fd48:	d060      	beq.n	800fe0c <__ieee754_atan2+0x134>
 800fd4a:	2c03      	cmp	r4, #3
 800fd4c:	d1e5      	bne.n	800fd1a <__ieee754_atan2+0x42>
 800fd4e:	a142      	add	r1, pc, #264	; (adr r1, 800fe58 <__ieee754_atan2+0x180>)
 800fd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd54:	e7e1      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fd56:	ea52 0808 	orrs.w	r8, r2, r8
 800fd5a:	d106      	bne.n	800fd6a <__ieee754_atan2+0x92>
 800fd5c:	f1bc 0f00 	cmp.w	ip, #0
 800fd60:	da5f      	bge.n	800fe22 <__ieee754_atan2+0x14a>
 800fd62:	a13f      	add	r1, pc, #252	; (adr r1, 800fe60 <__ieee754_atan2+0x188>)
 800fd64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd68:	e7d7      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fd6a:	4572      	cmp	r2, lr
 800fd6c:	d10f      	bne.n	800fd8e <__ieee754_atan2+0xb6>
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd74:	d107      	bne.n	800fd86 <__ieee754_atan2+0xae>
 800fd76:	2c02      	cmp	r4, #2
 800fd78:	d84c      	bhi.n	800fe14 <__ieee754_atan2+0x13c>
 800fd7a:	4b35      	ldr	r3, [pc, #212]	; (800fe50 <__ieee754_atan2+0x178>)
 800fd7c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fd80:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fd84:	e7c9      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fd86:	2c02      	cmp	r4, #2
 800fd88:	d848      	bhi.n	800fe1c <__ieee754_atan2+0x144>
 800fd8a:	4b32      	ldr	r3, [pc, #200]	; (800fe54 <__ieee754_atan2+0x17c>)
 800fd8c:	e7f6      	b.n	800fd7c <__ieee754_atan2+0xa4>
 800fd8e:	4573      	cmp	r3, lr
 800fd90:	d0e4      	beq.n	800fd5c <__ieee754_atan2+0x84>
 800fd92:	1a9b      	subs	r3, r3, r2
 800fd94:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fd98:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fd9c:	da1e      	bge.n	800fddc <__ieee754_atan2+0x104>
 800fd9e:	2f00      	cmp	r7, #0
 800fda0:	da01      	bge.n	800fda6 <__ieee754_atan2+0xce>
 800fda2:	323c      	adds	r2, #60	; 0x3c
 800fda4:	db1e      	blt.n	800fde4 <__ieee754_atan2+0x10c>
 800fda6:	4632      	mov	r2, r6
 800fda8:	463b      	mov	r3, r7
 800fdaa:	f7f0 fd67 	bl	800087c <__aeabi_ddiv>
 800fdae:	ec41 0b10 	vmov	d0, r0, r1
 800fdb2:	f7ff ff59 	bl	800fc68 <fabs>
 800fdb6:	f7ff fdb7 	bl	800f928 <atan>
 800fdba:	ec51 0b10 	vmov	r0, r1, d0
 800fdbe:	2c01      	cmp	r4, #1
 800fdc0:	d013      	beq.n	800fdea <__ieee754_atan2+0x112>
 800fdc2:	2c02      	cmp	r4, #2
 800fdc4:	d015      	beq.n	800fdf2 <__ieee754_atan2+0x11a>
 800fdc6:	2c00      	cmp	r4, #0
 800fdc8:	d0a7      	beq.n	800fd1a <__ieee754_atan2+0x42>
 800fdca:	a319      	add	r3, pc, #100	; (adr r3, 800fe30 <__ieee754_atan2+0x158>)
 800fdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd0:	f7f0 fa72 	bl	80002b8 <__aeabi_dsub>
 800fdd4:	a318      	add	r3, pc, #96	; (adr r3, 800fe38 <__ieee754_atan2+0x160>)
 800fdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdda:	e014      	b.n	800fe06 <__ieee754_atan2+0x12e>
 800fddc:	a118      	add	r1, pc, #96	; (adr r1, 800fe40 <__ieee754_atan2+0x168>)
 800fdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde2:	e7ec      	b.n	800fdbe <__ieee754_atan2+0xe6>
 800fde4:	2000      	movs	r0, #0
 800fde6:	2100      	movs	r1, #0
 800fde8:	e7e9      	b.n	800fdbe <__ieee754_atan2+0xe6>
 800fdea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdee:	4619      	mov	r1, r3
 800fdf0:	e793      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fdf2:	a30f      	add	r3, pc, #60	; (adr r3, 800fe30 <__ieee754_atan2+0x158>)
 800fdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf8:	f7f0 fa5e 	bl	80002b8 <__aeabi_dsub>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	460b      	mov	r3, r1
 800fe00:	a10d      	add	r1, pc, #52	; (adr r1, 800fe38 <__ieee754_atan2+0x160>)
 800fe02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe06:	f7f0 fa57 	bl	80002b8 <__aeabi_dsub>
 800fe0a:	e786      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fe0c:	a10a      	add	r1, pc, #40	; (adr r1, 800fe38 <__ieee754_atan2+0x160>)
 800fe0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe12:	e782      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fe14:	a10c      	add	r1, pc, #48	; (adr r1, 800fe48 <__ieee754_atan2+0x170>)
 800fe16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe1a:	e77e      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	2100      	movs	r1, #0
 800fe20:	e77b      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fe22:	a107      	add	r1, pc, #28	; (adr r1, 800fe40 <__ieee754_atan2+0x168>)
 800fe24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe28:	e777      	b.n	800fd1a <__ieee754_atan2+0x42>
 800fe2a:	bf00      	nop
 800fe2c:	f3af 8000 	nop.w
 800fe30:	33145c07 	.word	0x33145c07
 800fe34:	3ca1a626 	.word	0x3ca1a626
 800fe38:	54442d18 	.word	0x54442d18
 800fe3c:	400921fb 	.word	0x400921fb
 800fe40:	54442d18 	.word	0x54442d18
 800fe44:	3ff921fb 	.word	0x3ff921fb
 800fe48:	54442d18 	.word	0x54442d18
 800fe4c:	3fe921fb 	.word	0x3fe921fb
 800fe50:	080117b0 	.word	0x080117b0
 800fe54:	080117c8 	.word	0x080117c8
 800fe58:	54442d18 	.word	0x54442d18
 800fe5c:	c00921fb 	.word	0xc00921fb
 800fe60:	54442d18 	.word	0x54442d18
 800fe64:	bff921fb 	.word	0xbff921fb
 800fe68:	7ff00000 	.word	0x7ff00000

0800fe6c <__ieee754_sqrt>:
 800fe6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe70:	ec55 4b10 	vmov	r4, r5, d0
 800fe74:	4e55      	ldr	r6, [pc, #340]	; (800ffcc <__ieee754_sqrt+0x160>)
 800fe76:	43ae      	bics	r6, r5
 800fe78:	ee10 0a10 	vmov	r0, s0
 800fe7c:	ee10 3a10 	vmov	r3, s0
 800fe80:	462a      	mov	r2, r5
 800fe82:	4629      	mov	r1, r5
 800fe84:	d110      	bne.n	800fea8 <__ieee754_sqrt+0x3c>
 800fe86:	ee10 2a10 	vmov	r2, s0
 800fe8a:	462b      	mov	r3, r5
 800fe8c:	f7f0 fbcc 	bl	8000628 <__aeabi_dmul>
 800fe90:	4602      	mov	r2, r0
 800fe92:	460b      	mov	r3, r1
 800fe94:	4620      	mov	r0, r4
 800fe96:	4629      	mov	r1, r5
 800fe98:	f7f0 fa10 	bl	80002bc <__adddf3>
 800fe9c:	4604      	mov	r4, r0
 800fe9e:	460d      	mov	r5, r1
 800fea0:	ec45 4b10 	vmov	d0, r4, r5
 800fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea8:	2d00      	cmp	r5, #0
 800feaa:	dc10      	bgt.n	800fece <__ieee754_sqrt+0x62>
 800feac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800feb0:	4330      	orrs	r0, r6
 800feb2:	d0f5      	beq.n	800fea0 <__ieee754_sqrt+0x34>
 800feb4:	b15d      	cbz	r5, 800fece <__ieee754_sqrt+0x62>
 800feb6:	ee10 2a10 	vmov	r2, s0
 800feba:	462b      	mov	r3, r5
 800febc:	ee10 0a10 	vmov	r0, s0
 800fec0:	f7f0 f9fa 	bl	80002b8 <__aeabi_dsub>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	f7f0 fcd8 	bl	800087c <__aeabi_ddiv>
 800fecc:	e7e6      	b.n	800fe9c <__ieee754_sqrt+0x30>
 800fece:	1512      	asrs	r2, r2, #20
 800fed0:	d074      	beq.n	800ffbc <__ieee754_sqrt+0x150>
 800fed2:	07d4      	lsls	r4, r2, #31
 800fed4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fed8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fedc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fee0:	bf5e      	ittt	pl
 800fee2:	0fda      	lsrpl	r2, r3, #31
 800fee4:	005b      	lslpl	r3, r3, #1
 800fee6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800feea:	2400      	movs	r4, #0
 800feec:	0fda      	lsrs	r2, r3, #31
 800feee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fef2:	107f      	asrs	r7, r7, #1
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	2516      	movs	r5, #22
 800fef8:	4620      	mov	r0, r4
 800fefa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fefe:	1886      	adds	r6, r0, r2
 800ff00:	428e      	cmp	r6, r1
 800ff02:	bfde      	ittt	le
 800ff04:	1b89      	suble	r1, r1, r6
 800ff06:	18b0      	addle	r0, r6, r2
 800ff08:	18a4      	addle	r4, r4, r2
 800ff0a:	0049      	lsls	r1, r1, #1
 800ff0c:	3d01      	subs	r5, #1
 800ff0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ff12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ff16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff1a:	d1f0      	bne.n	800fefe <__ieee754_sqrt+0x92>
 800ff1c:	462a      	mov	r2, r5
 800ff1e:	f04f 0e20 	mov.w	lr, #32
 800ff22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ff26:	4281      	cmp	r1, r0
 800ff28:	eb06 0c05 	add.w	ip, r6, r5
 800ff2c:	dc02      	bgt.n	800ff34 <__ieee754_sqrt+0xc8>
 800ff2e:	d113      	bne.n	800ff58 <__ieee754_sqrt+0xec>
 800ff30:	459c      	cmp	ip, r3
 800ff32:	d811      	bhi.n	800ff58 <__ieee754_sqrt+0xec>
 800ff34:	f1bc 0f00 	cmp.w	ip, #0
 800ff38:	eb0c 0506 	add.w	r5, ip, r6
 800ff3c:	da43      	bge.n	800ffc6 <__ieee754_sqrt+0x15a>
 800ff3e:	2d00      	cmp	r5, #0
 800ff40:	db41      	blt.n	800ffc6 <__ieee754_sqrt+0x15a>
 800ff42:	f100 0801 	add.w	r8, r0, #1
 800ff46:	1a09      	subs	r1, r1, r0
 800ff48:	459c      	cmp	ip, r3
 800ff4a:	bf88      	it	hi
 800ff4c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ff50:	eba3 030c 	sub.w	r3, r3, ip
 800ff54:	4432      	add	r2, r6
 800ff56:	4640      	mov	r0, r8
 800ff58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ff5c:	f1be 0e01 	subs.w	lr, lr, #1
 800ff60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ff64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ff6c:	d1db      	bne.n	800ff26 <__ieee754_sqrt+0xba>
 800ff6e:	430b      	orrs	r3, r1
 800ff70:	d006      	beq.n	800ff80 <__ieee754_sqrt+0x114>
 800ff72:	1c50      	adds	r0, r2, #1
 800ff74:	bf13      	iteet	ne
 800ff76:	3201      	addne	r2, #1
 800ff78:	3401      	addeq	r4, #1
 800ff7a:	4672      	moveq	r2, lr
 800ff7c:	f022 0201 	bicne.w	r2, r2, #1
 800ff80:	1063      	asrs	r3, r4, #1
 800ff82:	0852      	lsrs	r2, r2, #1
 800ff84:	07e1      	lsls	r1, r4, #31
 800ff86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ff8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ff8e:	bf48      	it	mi
 800ff90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ff94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ff98:	4614      	mov	r4, r2
 800ff9a:	e781      	b.n	800fea0 <__ieee754_sqrt+0x34>
 800ff9c:	0ad9      	lsrs	r1, r3, #11
 800ff9e:	3815      	subs	r0, #21
 800ffa0:	055b      	lsls	r3, r3, #21
 800ffa2:	2900      	cmp	r1, #0
 800ffa4:	d0fa      	beq.n	800ff9c <__ieee754_sqrt+0x130>
 800ffa6:	02cd      	lsls	r5, r1, #11
 800ffa8:	d50a      	bpl.n	800ffc0 <__ieee754_sqrt+0x154>
 800ffaa:	f1c2 0420 	rsb	r4, r2, #32
 800ffae:	fa23 f404 	lsr.w	r4, r3, r4
 800ffb2:	1e55      	subs	r5, r2, #1
 800ffb4:	4093      	lsls	r3, r2
 800ffb6:	4321      	orrs	r1, r4
 800ffb8:	1b42      	subs	r2, r0, r5
 800ffba:	e78a      	b.n	800fed2 <__ieee754_sqrt+0x66>
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	e7f0      	b.n	800ffa2 <__ieee754_sqrt+0x136>
 800ffc0:	0049      	lsls	r1, r1, #1
 800ffc2:	3201      	adds	r2, #1
 800ffc4:	e7ef      	b.n	800ffa6 <__ieee754_sqrt+0x13a>
 800ffc6:	4680      	mov	r8, r0
 800ffc8:	e7bd      	b.n	800ff46 <__ieee754_sqrt+0xda>
 800ffca:	bf00      	nop
 800ffcc:	7ff00000 	.word	0x7ff00000

0800ffd0 <_init>:
 800ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd2:	bf00      	nop
 800ffd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd6:	bc08      	pop	{r3}
 800ffd8:	469e      	mov	lr, r3
 800ffda:	4770      	bx	lr

0800ffdc <_fini>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	bf00      	nop
 800ffe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffe2:	bc08      	pop	{r3}
 800ffe4:	469e      	mov	lr, r3
 800ffe6:	4770      	bx	lr
